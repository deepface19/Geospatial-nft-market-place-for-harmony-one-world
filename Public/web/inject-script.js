!function(e) {
    var t = {};
    function r(i) {
        if (t[i])
            return t[i].exports;
        var n = t[i] = {
            i: i,
            l: !1,
            exports: {}
        };
        return e[i].call(n.exports, n, n.exports, r),
        n.l = !0,
        n.exports
    }
    r.m = e,
    r.c = t,
    r.d = function(e, t, i) {
        r.o(e, t) || Object.defineProperty(e, t, {
            enumerable: !0,
            get: i
        })
    }
    ,
    r.r = function(e) {
        "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {
            value: "Module"
        }),
        Object.defineProperty(e, "__esModule", {
            value: !0
        })
    }
    ,
    r.t = function(e, t) {
        if (1 & t && (e = r(e)),
        8 & t)
            return e;
        if (4 & t && "object" == typeof e && e && e.__esModule)
            return e;
        var i = Object.create(null);
        if (r.r(i),
        Object.defineProperty(i, "default", {
            enumerable: !0,
            value: e
        }),
        2 & t && "string" != typeof e)
            for (var n in e)
                r.d(i, n, function(t) {
                    return e[t]
                }
                .bind(null, n));
        return i
    }
    ,
    r.n = function(e) {
        var t = e && e.__esModule ? function() {
            return e.default
        }
        : function() {
            return e
        }
        ;
        return r.d(t, "a", t),
        t
    }
    ,
    r.o = function(e, t) {
        return Object.prototype.hasOwnProperty.call(e, t)
    }
    ,
    r.p = "",
    r(r.s = 1041)
}([, , , , function(e, t) {
    "function" == typeof Object.create ? e.exports = function(e, t) {
        t && (e.super_ = t,
        e.prototype = Object.create(t.prototype, {
            constructor: {
                value: e,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }))
    }
    : e.exports = function(e, t) {
        if (t) {
            e.super_ = t;
            var r = function() {};
            r.prototype = t.prototype,
            e.prototype = new r,
            e.prototype.constructor = e
        }
    }
}
, function(e, t, r) {
    /*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
    var i = r(8)
      , n = i.Buffer;
    function o(e, t) {
        for (var r in e)
            t[r] = e[r]
    }
    function a(e, t, r) {
        return n(e, t, r)
    }
    n.from && n.alloc && n.allocUnsafe && n.allocUnsafeSlow ? e.exports = i : (o(i, t),
    t.Buffer = a),
    a.prototype = Object.create(n.prototype),
    o(n, a),
    a.from = function(e, t, r) {
        if ("number" == typeof e)
            throw new TypeError("Argument must not be a number");
        return n(e, t, r)
    }
    ,
    a.alloc = function(e, t, r) {
        if ("number" != typeof e)
            throw new TypeError("Argument must be a number");
        var i = n(e);
        return void 0 !== t ? "string" == typeof r ? i.fill(t, r) : i.fill(t) : i.fill(0),
        i
    }
    ,
    a.allocUnsafe = function(e) {
        if ("number" != typeof e)
            throw new TypeError("Argument must be a number");
        return n(e)
    }
    ,
    a.allocUnsafeSlow = function(e) {
        if ("number" != typeof e)
            throw new TypeError("Argument must be a number");
        return i.SlowBuffer(e)
    }
}
, , function(e, t, r) {
    (function(e) {
        !function(e, t) {
            "use strict";
            function i(e, t) {
                if (!e)
                    throw new Error(t || "Assertion failed")
            }
            function n(e, t) {
                e.super_ = t;
                var r = function() {};
                r.prototype = t.prototype,
                e.prototype = new r,
                e.prototype.constructor = e
            }
            function o(e, t, r) {
                if (o.isBN(e))
                    return e;
                this.negative = 0,
                this.words = null,
                this.length = 0,
                this.red = null,
                null !== e && ("le" !== t && "be" !== t || (r = t,
                t = 10),
                this._init(e || 0, t || 10, r || "be"))
            }
            var a;
            "object" == typeof e ? e.exports = o : t.BN = o,
            o.BN = o,
            o.wordSize = 26;
            try {
                a = "undefined" != typeof window && void 0 !== window.Buffer ? window.Buffer : r(210).Buffer
            } catch (e) {}
            function s(e, t) {
                var r = e.charCodeAt(t);
                return r >= 65 && r <= 70 ? r - 55 : r >= 97 && r <= 102 ? r - 87 : r - 48 & 15
            }
            function u(e, t, r) {
                var i = s(e, r);
                return r - 1 >= t && (i |= s(e, r - 1) << 4),
                i
            }
            function f(e, t, r, i) {
                for (var n = 0, o = Math.min(e.length, r), a = t; a < o; a++) {
                    var s = e.charCodeAt(a) - 48;
                    n *= i,
                    n += s >= 49 ? s - 49 + 10 : s >= 17 ? s - 17 + 10 : s
                }
                return n
            }
            o.isBN = function(e) {
                return e instanceof o || null !== e && "object" == typeof e && e.constructor.wordSize === o.wordSize && Array.isArray(e.words)
            }
            ,
            o.max = function(e, t) {
                return e.cmp(t) > 0 ? e : t
            }
            ,
            o.min = function(e, t) {
                return e.cmp(t) < 0 ? e : t
            }
            ,
            o.prototype._init = function(e, t, r) {
                if ("number" == typeof e)
                    return this._initNumber(e, t, r);
                if ("object" == typeof e)
                    return this._initArray(e, t, r);
                "hex" === t && (t = 16),
                i(t === (0 | t) && t >= 2 && t <= 36);
                var n = 0;
                "-" === (e = e.toString().replace(/\s+/g, ""))[0] && (n++,
                this.negative = 1),
                n < e.length && (16 === t ? this._parseHex(e, n, r) : (this._parseBase(e, t, n),
                "le" === r && this._initArray(this.toArray(), t, r)))
            }
            ,
            o.prototype._initNumber = function(e, t, r) {
                e < 0 && (this.negative = 1,
                e = -e),
                e < 67108864 ? (this.words = [67108863 & e],
                this.length = 1) : e < 4503599627370496 ? (this.words = [67108863 & e, e / 67108864 & 67108863],
                this.length = 2) : (i(e < 9007199254740992),
                this.words = [67108863 & e, e / 67108864 & 67108863, 1],
                this.length = 3),
                "le" === r && this._initArray(this.toArray(), t, r)
            }
            ,
            o.prototype._initArray = function(e, t, r) {
                if (i("number" == typeof e.length),
                e.length <= 0)
                    return this.words = [0],
                    this.length = 1,
                    this;
                this.length = Math.ceil(e.length / 3),
                this.words = new Array(this.length);
                for (var n = 0; n < this.length; n++)
                    this.words[n] = 0;
                var o, a, s = 0;
                if ("be" === r)
                    for (n = e.length - 1,
                    o = 0; n >= 0; n -= 3)
                        a = e[n] | e[n - 1] << 8 | e[n - 2] << 16,
                        this.words[o] |= a << s & 67108863,
                        this.words[o + 1] = a >>> 26 - s & 67108863,
                        (s += 24) >= 26 && (s -= 26,
                        o++);
                else if ("le" === r)
                    for (n = 0,
                    o = 0; n < e.length; n += 3)
                        a = e[n] | e[n + 1] << 8 | e[n + 2] << 16,
                        this.words[o] |= a << s & 67108863,
                        this.words[o + 1] = a >>> 26 - s & 67108863,
                        (s += 24) >= 26 && (s -= 26,
                        o++);
                return this.strip()
            }
            ,
            o.prototype._parseHex = function(e, t, r) {
                this.length = Math.ceil((e.length - t) / 6),
                this.words = new Array(this.length);
                for (var i = 0; i < this.length; i++)
                    this.words[i] = 0;
                var n, o = 0, a = 0;
                if ("be" === r)
                    for (i = e.length - 1; i >= t; i -= 2)
                        n = u(e, t, i) << o,
                        this.words[a] |= 67108863 & n,
                        o >= 18 ? (o -= 18,
                        a += 1,
                        this.words[a] |= n >>> 26) : o += 8;
                else
                    for (i = (e.length - t) % 2 == 0 ? t + 1 : t; i < e.length; i += 2)
                        n = u(e, t, i) << o,
                        this.words[a] |= 67108863 & n,
                        o >= 18 ? (o -= 18,
                        a += 1,
                        this.words[a] |= n >>> 26) : o += 8;
                this.strip()
            }
            ,
            o.prototype._parseBase = function(e, t, r) {
                this.words = [0],
                this.length = 1;
                for (var i = 0, n = 1; n <= 67108863; n *= t)
                    i++;
                i--,
                n = n / t | 0;
                for (var o = e.length - r, a = o % i, s = Math.min(o, o - a) + r, u = 0, c = r; c < s; c += i)
                    u = f(e, c, c + i, t),
                    this.imuln(n),
                    this.words[0] + u < 67108864 ? this.words[0] += u : this._iaddn(u);
                if (0 !== a) {
                    var h = 1;
                    for (u = f(e, c, e.length, t),
                    c = 0; c < a; c++)
                        h *= t;
                    this.imuln(h),
                    this.words[0] + u < 67108864 ? this.words[0] += u : this._iaddn(u)
                }
                this.strip()
            }
            ,
            o.prototype.copy = function(e) {
                e.words = new Array(this.length);
                for (var t = 0; t < this.length; t++)
                    e.words[t] = this.words[t];
                e.length = this.length,
                e.negative = this.negative,
                e.red = this.red
            }
            ,
            o.prototype.clone = function() {
                var e = new o(null);
                return this.copy(e),
                e
            }
            ,
            o.prototype._expand = function(e) {
                for (; this.length < e; )
                    this.words[this.length++] = 0;
                return this
            }
            ,
            o.prototype.strip = function() {
                for (; this.length > 1 && 0 === this.words[this.length - 1]; )
                    this.length--;
                return this._normSign()
            }
            ,
            o.prototype._normSign = function() {
                return 1 === this.length && 0 === this.words[0] && (this.negative = 0),
                this
            }
            ,
            o.prototype.inspect = function() {
                return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">"
            }
            ;
            var c = ["", "0", "00", "000", "0000", "00000", "000000", "0000000", "00000000", "000000000", "0000000000", "00000000000", "000000000000", "0000000000000", "00000000000000", "000000000000000", "0000000000000000", "00000000000000000", "000000000000000000", "0000000000000000000", "00000000000000000000", "000000000000000000000", "0000000000000000000000", "00000000000000000000000", "000000000000000000000000", "0000000000000000000000000"]
              , h = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
              , l = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 1e7, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64e6, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 243e5, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];
            function d(e, t, r) {
                r.negative = t.negative ^ e.negative;
                var i = e.length + t.length | 0;
                r.length = i,
                i = i - 1 | 0;
                var n = 0 | e.words[0]
                  , o = 0 | t.words[0]
                  , a = n * o
                  , s = 67108863 & a
                  , u = a / 67108864 | 0;
                r.words[0] = s;
                for (var f = 1; f < i; f++) {
                    for (var c = u >>> 26, h = 67108863 & u, l = Math.min(f, t.length - 1), d = Math.max(0, f - e.length + 1); d <= l; d++) {
                        var p = f - d | 0;
                        c += (a = (n = 0 | e.words[p]) * (o = 0 | t.words[d]) + h) / 67108864 | 0,
                        h = 67108863 & a
                    }
                    r.words[f] = 0 | h,
                    u = 0 | c
                }
                return 0 !== u ? r.words[f] = 0 | u : r.length--,
                r.strip()
            }
            o.prototype.toString = function(e, t) {
                var r;
                if (t = 0 | t || 1,
                16 === (e = e || 10) || "hex" === e) {
                    r = "";
                    for (var n = 0, o = 0, a = 0; a < this.length; a++) {
                        var s = this.words[a]
                          , u = (16777215 & (s << n | o)).toString(16);
                        r = 0 !== (o = s >>> 24 - n & 16777215) || a !== this.length - 1 ? c[6 - u.length] + u + r : u + r,
                        (n += 2) >= 26 && (n -= 26,
                        a--)
                    }
                    for (0 !== o && (r = o.toString(16) + r); r.length % t != 0; )
                        r = "0" + r;
                    return 0 !== this.negative && (r = "-" + r),
                    r
                }
                if (e === (0 | e) && e >= 2 && e <= 36) {
                    var f = h[e]
                      , d = l[e];
                    r = "";
                    var p = this.clone();
                    for (p.negative = 0; !p.isZero(); ) {
                        var b = p.modn(d).toString(e);
                        r = (p = p.idivn(d)).isZero() ? b + r : c[f - b.length] + b + r
                    }
                    for (this.isZero() && (r = "0" + r); r.length % t != 0; )
                        r = "0" + r;
                    return 0 !== this.negative && (r = "-" + r),
                    r
                }
                i(!1, "Base should be between 2 and 36")
            }
            ,
            o.prototype.toNumber = function() {
                var e = this.words[0];
                return 2 === this.length ? e += 67108864 * this.words[1] : 3 === this.length && 1 === this.words[2] ? e += 4503599627370496 + 67108864 * this.words[1] : this.length > 2 && i(!1, "Number can only safely store up to 53 bits"),
                0 !== this.negative ? -e : e
            }
            ,
            o.prototype.toJSON = function() {
                return this.toString(16)
            }
            ,
            o.prototype.toBuffer = function(e, t) {
                return i(void 0 !== a),
                this.toArrayLike(a, e, t)
            }
            ,
            o.prototype.toArray = function(e, t) {
                return this.toArrayLike(Array, e, t)
            }
            ,
            o.prototype.toArrayLike = function(e, t, r) {
                var n = this.byteLength()
                  , o = r || Math.max(1, n);
                i(n <= o, "byte array longer than desired length"),
                i(o > 0, "Requested array length <= 0"),
                this.strip();
                var a, s, u = "le" === t, f = new e(o), c = this.clone();
                if (u) {
                    for (s = 0; !c.isZero(); s++)
                        a = c.andln(255),
                        c.iushrn(8),
                        f[s] = a;
                    for (; s < o; s++)
                        f[s] = 0
                } else {
                    for (s = 0; s < o - n; s++)
                        f[s] = 0;
                    for (s = 0; !c.isZero(); s++)
                        a = c.andln(255),
                        c.iushrn(8),
                        f[o - s - 1] = a
                }
                return f
            }
            ,
            Math.clz32 ? o.prototype._countBits = function(e) {
                return 32 - Math.clz32(e)
            }
            : o.prototype._countBits = function(e) {
                var t = e
                  , r = 0;
                return t >= 4096 && (r += 13,
                t >>>= 13),
                t >= 64 && (r += 7,
                t >>>= 7),
                t >= 8 && (r += 4,
                t >>>= 4),
                t >= 2 && (r += 2,
                t >>>= 2),
                r + t
            }
            ,
            o.prototype._zeroBits = function(e) {
                if (0 === e)
                    return 26;
                var t = e
                  , r = 0;
                return 0 == (8191 & t) && (r += 13,
                t >>>= 13),
                0 == (127 & t) && (r += 7,
                t >>>= 7),
                0 == (15 & t) && (r += 4,
                t >>>= 4),
                0 == (3 & t) && (r += 2,
                t >>>= 2),
                0 == (1 & t) && r++,
                r
            }
            ,
            o.prototype.bitLength = function() {
                var e = this.words[this.length - 1]
                  , t = this._countBits(e);
                return 26 * (this.length - 1) + t
            }
            ,
            o.prototype.zeroBits = function() {
                if (this.isZero())
                    return 0;
                for (var e = 0, t = 0; t < this.length; t++) {
                    var r = this._zeroBits(this.words[t]);
                    if (e += r,
                    26 !== r)
                        break
                }
                return e
            }
            ,
            o.prototype.byteLength = function() {
                return Math.ceil(this.bitLength() / 8)
            }
            ,
            o.prototype.toTwos = function(e) {
                return 0 !== this.negative ? this.abs().inotn(e).iaddn(1) : this.clone()
            }
            ,
            o.prototype.fromTwos = function(e) {
                return this.testn(e - 1) ? this.notn(e).iaddn(1).ineg() : this.clone()
            }
            ,
            o.prototype.isNeg = function() {
                return 0 !== this.negative
            }
            ,
            o.prototype.neg = function() {
                return this.clone().ineg()
            }
            ,
            o.prototype.ineg = function() {
                return this.isZero() || (this.negative ^= 1),
                this
            }
            ,
            o.prototype.iuor = function(e) {
                for (; this.length < e.length; )
                    this.words[this.length++] = 0;
                for (var t = 0; t < e.length; t++)
                    this.words[t] = this.words[t] | e.words[t];
                return this.strip()
            }
            ,
            o.prototype.ior = function(e) {
                return i(0 == (this.negative | e.negative)),
                this.iuor(e)
            }
            ,
            o.prototype.or = function(e) {
                return this.length > e.length ? this.clone().ior(e) : e.clone().ior(this)
            }
            ,
            o.prototype.uor = function(e) {
                return this.length > e.length ? this.clone().iuor(e) : e.clone().iuor(this)
            }
            ,
            o.prototype.iuand = function(e) {
                var t;
                t = this.length > e.length ? e : this;
                for (var r = 0; r < t.length; r++)
                    this.words[r] = this.words[r] & e.words[r];
                return this.length = t.length,
                this.strip()
            }
            ,
            o.prototype.iand = function(e) {
                return i(0 == (this.negative | e.negative)),
                this.iuand(e)
            }
            ,
            o.prototype.and = function(e) {
                return this.length > e.length ? this.clone().iand(e) : e.clone().iand(this)
            }
            ,
            o.prototype.uand = function(e) {
                return this.length > e.length ? this.clone().iuand(e) : e.clone().iuand(this)
            }
            ,
            o.prototype.iuxor = function(e) {
                var t, r;
                this.length > e.length ? (t = this,
                r = e) : (t = e,
                r = this);
                for (var i = 0; i < r.length; i++)
                    this.words[i] = t.words[i] ^ r.words[i];
                if (this !== t)
                    for (; i < t.length; i++)
                        this.words[i] = t.words[i];
                return this.length = t.length,
                this.strip()
            }
            ,
            o.prototype.ixor = function(e) {
                return i(0 == (this.negative | e.negative)),
                this.iuxor(e)
            }
            ,
            o.prototype.xor = function(e) {
                return this.length > e.length ? this.clone().ixor(e) : e.clone().ixor(this)
            }
            ,
            o.prototype.uxor = function(e) {
                return this.length > e.length ? this.clone().iuxor(e) : e.clone().iuxor(this)
            }
            ,
            o.prototype.inotn = function(e) {
                i("number" == typeof e && e >= 0);
                var t = 0 | Math.ceil(e / 26)
                  , r = e % 26;
                this._expand(t),
                r > 0 && t--;
                for (var n = 0; n < t; n++)
                    this.words[n] = 67108863 & ~this.words[n];
                return r > 0 && (this.words[n] = ~this.words[n] & 67108863 >> 26 - r),
                this.strip()
            }
            ,
            o.prototype.notn = function(e) {
                return this.clone().inotn(e)
            }
            ,
            o.prototype.setn = function(e, t) {
                i("number" == typeof e && e >= 0);
                var r = e / 26 | 0
                  , n = e % 26;
                return this._expand(r + 1),
                this.words[r] = t ? this.words[r] | 1 << n : this.words[r] & ~(1 << n),
                this.strip()
            }
            ,
            o.prototype.iadd = function(e) {
                var t, r, i;
                if (0 !== this.negative && 0 === e.negative)
                    return this.negative = 0,
                    t = this.isub(e),
                    this.negative ^= 1,
                    this._normSign();
                if (0 === this.negative && 0 !== e.negative)
                    return e.negative = 0,
                    t = this.isub(e),
                    e.negative = 1,
                    t._normSign();
                this.length > e.length ? (r = this,
                i = e) : (r = e,
                i = this);
                for (var n = 0, o = 0; o < i.length; o++)
                    t = (0 | r.words[o]) + (0 | i.words[o]) + n,
                    this.words[o] = 67108863 & t,
                    n = t >>> 26;
                for (; 0 !== n && o < r.length; o++)
                    t = (0 | r.words[o]) + n,
                    this.words[o] = 67108863 & t,
                    n = t >>> 26;
                if (this.length = r.length,
                0 !== n)
                    this.words[this.length] = n,
                    this.length++;
                else if (r !== this)
                    for (; o < r.length; o++)
                        this.words[o] = r.words[o];
                return this
            }
            ,
            o.prototype.add = function(e) {
                var t;
                return 0 !== e.negative && 0 === this.negative ? (e.negative = 0,
                t = this.sub(e),
                e.negative ^= 1,
                t) : 0 === e.negative && 0 !== this.negative ? (this.negative = 0,
                t = e.sub(this),
                this.negative = 1,
                t) : this.length > e.length ? this.clone().iadd(e) : e.clone().iadd(this)
            }
            ,
            o.prototype.isub = function(e) {
                if (0 !== e.negative) {
                    e.negative = 0;
                    var t = this.iadd(e);
                    return e.negative = 1,
                    t._normSign()
                }
                if (0 !== this.negative)
                    return this.negative = 0,
                    this.iadd(e),
                    this.negative = 1,
                    this._normSign();
                var r, i, n = this.cmp(e);
                if (0 === n)
                    return this.negative = 0,
                    this.length = 1,
                    this.words[0] = 0,
                    this;
                n > 0 ? (r = this,
                i = e) : (r = e,
                i = this);
                for (var o = 0, a = 0; a < i.length; a++)
                    o = (t = (0 | r.words[a]) - (0 | i.words[a]) + o) >> 26,
                    this.words[a] = 67108863 & t;
                for (; 0 !== o && a < r.length; a++)
                    o = (t = (0 | r.words[a]) + o) >> 26,
                    this.words[a] = 67108863 & t;
                if (0 === o && a < r.length && r !== this)
                    for (; a < r.length; a++)
                        this.words[a] = r.words[a];
                return this.length = Math.max(this.length, a),
                r !== this && (this.negative = 1),
                this.strip()
            }
            ,
            o.prototype.sub = function(e) {
                return this.clone().isub(e)
            }
            ;
            var p = function(e, t, r) {
                var i, n, o, a = e.words, s = t.words, u = r.words, f = 0, c = 0 | a[0], h = 8191 & c, l = c >>> 13, d = 0 | a[1], p = 8191 & d, b = d >>> 13, m = 0 | a[2], g = 8191 & m, v = m >>> 13, y = 0 | a[3], w = 8191 & y, _ = y >>> 13, E = 0 | a[4], M = 8191 & E, S = E >>> 13, A = 0 | a[5], k = 8191 & A, x = A >>> 13, R = 0 | a[6], I = 8191 & R, T = R >>> 13, P = 0 | a[7], N = 8191 & P, C = P >>> 13, B = 0 | a[8], O = 8191 & B, L = B >>> 13, j = 0 | a[9], D = 8191 & j, z = j >>> 13, U = 0 | s[0], q = 8191 & U, K = U >>> 13, F = 0 | s[1], H = 8191 & F, V = F >>> 13, Y = 0 | s[2], G = 8191 & Y, W = Y >>> 13, Z = 0 | s[3], J = 8191 & Z, X = Z >>> 13, Q = 0 | s[4], $ = 8191 & Q, ee = Q >>> 13, te = 0 | s[5], re = 8191 & te, ie = te >>> 13, ne = 0 | s[6], oe = 8191 & ne, ae = ne >>> 13, se = 0 | s[7], ue = 8191 & se, fe = se >>> 13, ce = 0 | s[8], he = 8191 & ce, le = ce >>> 13, de = 0 | s[9], pe = 8191 & de, be = de >>> 13;
                r.negative = e.negative ^ t.negative,
                r.length = 19;
                var me = (f + (i = Math.imul(h, q)) | 0) + ((8191 & (n = (n = Math.imul(h, K)) + Math.imul(l, q) | 0)) << 13) | 0;
                f = ((o = Math.imul(l, K)) + (n >>> 13) | 0) + (me >>> 26) | 0,
                me &= 67108863,
                i = Math.imul(p, q),
                n = (n = Math.imul(p, K)) + Math.imul(b, q) | 0,
                o = Math.imul(b, K);
                var ge = (f + (i = i + Math.imul(h, H) | 0) | 0) + ((8191 & (n = (n = n + Math.imul(h, V) | 0) + Math.imul(l, H) | 0)) << 13) | 0;
                f = ((o = o + Math.imul(l, V) | 0) + (n >>> 13) | 0) + (ge >>> 26) | 0,
                ge &= 67108863,
                i = Math.imul(g, q),
                n = (n = Math.imul(g, K)) + Math.imul(v, q) | 0,
                o = Math.imul(v, K),
                i = i + Math.imul(p, H) | 0,
                n = (n = n + Math.imul(p, V) | 0) + Math.imul(b, H) | 0,
                o = o + Math.imul(b, V) | 0;
                var ve = (f + (i = i + Math.imul(h, G) | 0) | 0) + ((8191 & (n = (n = n + Math.imul(h, W) | 0) + Math.imul(l, G) | 0)) << 13) | 0;
                f = ((o = o + Math.imul(l, W) | 0) + (n >>> 13) | 0) + (ve >>> 26) | 0,
                ve &= 67108863,
                i = Math.imul(w, q),
                n = (n = Math.imul(w, K)) + Math.imul(_, q) | 0,
                o = Math.imul(_, K),
                i = i + Math.imul(g, H) | 0,
                n = (n = n + Math.imul(g, V) | 0) + Math.imul(v, H) | 0,
                o = o + Math.imul(v, V) | 0,
                i = i + Math.imul(p, G) | 0,
                n = (n = n + Math.imul(p, W) | 0) + Math.imul(b, G) | 0,
                o = o + Math.imul(b, W) | 0;
                var ye = (f + (i = i + Math.imul(h, J) | 0) | 0) + ((8191 & (n = (n = n + Math.imul(h, X) | 0) + Math.imul(l, J) | 0)) << 13) | 0;
                f = ((o = o + Math.imul(l, X) | 0) + (n >>> 13) | 0) + (ye >>> 26) | 0,
                ye &= 67108863,
                i = Math.imul(M, q),
                n = (n = Math.imul(M, K)) + Math.imul(S, q) | 0,
                o = Math.imul(S, K),
                i = i + Math.imul(w, H) | 0,
                n = (n = n + Math.imul(w, V) | 0) + Math.imul(_, H) | 0,
                o = o + Math.imul(_, V) | 0,
                i = i + Math.imul(g, G) | 0,
                n = (n = n + Math.imul(g, W) | 0) + Math.imul(v, G) | 0,
                o = o + Math.imul(v, W) | 0,
                i = i + Math.imul(p, J) | 0,
                n = (n = n + Math.imul(p, X) | 0) + Math.imul(b, J) | 0,
                o = o + Math.imul(b, X) | 0;
                var we = (f + (i = i + Math.imul(h, $) | 0) | 0) + ((8191 & (n = (n = n + Math.imul(h, ee) | 0) + Math.imul(l, $) | 0)) << 13) | 0;
                f = ((o = o + Math.imul(l, ee) | 0) + (n >>> 13) | 0) + (we >>> 26) | 0,
                we &= 67108863,
                i = Math.imul(k, q),
                n = (n = Math.imul(k, K)) + Math.imul(x, q) | 0,
                o = Math.imul(x, K),
                i = i + Math.imul(M, H) | 0,
                n = (n = n + Math.imul(M, V) | 0) + Math.imul(S, H) | 0,
                o = o + Math.imul(S, V) | 0,
                i = i + Math.imul(w, G) | 0,
                n = (n = n + Math.imul(w, W) | 0) + Math.imul(_, G) | 0,
                o = o + Math.imul(_, W) | 0,
                i = i + Math.imul(g, J) | 0,
                n = (n = n + Math.imul(g, X) | 0) + Math.imul(v, J) | 0,
                o = o + Math.imul(v, X) | 0,
                i = i + Math.imul(p, $) | 0,
                n = (n = n + Math.imul(p, ee) | 0) + Math.imul(b, $) | 0,
                o = o + Math.imul(b, ee) | 0;
                var _e = (f + (i = i + Math.imul(h, re) | 0) | 0) + ((8191 & (n = (n = n + Math.imul(h, ie) | 0) + Math.imul(l, re) | 0)) << 13) | 0;
                f = ((o = o + Math.imul(l, ie) | 0) + (n >>> 13) | 0) + (_e >>> 26) | 0,
                _e &= 67108863,
                i = Math.imul(I, q),
                n = (n = Math.imul(I, K)) + Math.imul(T, q) | 0,
                o = Math.imul(T, K),
                i = i + Math.imul(k, H) | 0,
                n = (n = n + Math.imul(k, V) | 0) + Math.imul(x, H) | 0,
                o = o + Math.imul(x, V) | 0,
                i = i + Math.imul(M, G) | 0,
                n = (n = n + Math.imul(M, W) | 0) + Math.imul(S, G) | 0,
                o = o + Math.imul(S, W) | 0,
                i = i + Math.imul(w, J) | 0,
                n = (n = n + Math.imul(w, X) | 0) + Math.imul(_, J) | 0,
                o = o + Math.imul(_, X) | 0,
                i = i + Math.imul(g, $) | 0,
                n = (n = n + Math.imul(g, ee) | 0) + Math.imul(v, $) | 0,
                o = o + Math.imul(v, ee) | 0,
                i = i + Math.imul(p, re) | 0,
                n = (n = n + Math.imul(p, ie) | 0) + Math.imul(b, re) | 0,
                o = o + Math.imul(b, ie) | 0;
                var Ee = (f + (i = i + Math.imul(h, oe) | 0) | 0) + ((8191 & (n = (n = n + Math.imul(h, ae) | 0) + Math.imul(l, oe) | 0)) << 13) | 0;
                f = ((o = o + Math.imul(l, ae) | 0) + (n >>> 13) | 0) + (Ee >>> 26) | 0,
                Ee &= 67108863,
                i = Math.imul(N, q),
                n = (n = Math.imul(N, K)) + Math.imul(C, q) | 0,
                o = Math.imul(C, K),
                i = i + Math.imul(I, H) | 0,
                n = (n = n + Math.imul(I, V) | 0) + Math.imul(T, H) | 0,
                o = o + Math.imul(T, V) | 0,
                i = i + Math.imul(k, G) | 0,
                n = (n = n + Math.imul(k, W) | 0) + Math.imul(x, G) | 0,
                o = o + Math.imul(x, W) | 0,
                i = i + Math.imul(M, J) | 0,
                n = (n = n + Math.imul(M, X) | 0) + Math.imul(S, J) | 0,
                o = o + Math.imul(S, X) | 0,
                i = i + Math.imul(w, $) | 0,
                n = (n = n + Math.imul(w, ee) | 0) + Math.imul(_, $) | 0,
                o = o + Math.imul(_, ee) | 0,
                i = i + Math.imul(g, re) | 0,
                n = (n = n + Math.imul(g, ie) | 0) + Math.imul(v, re) | 0,
                o = o + Math.imul(v, ie) | 0,
                i = i + Math.imul(p, oe) | 0,
                n = (n = n + Math.imul(p, ae) | 0) + Math.imul(b, oe) | 0,
                o = o + Math.imul(b, ae) | 0;
                var Me = (f + (i = i + Math.imul(h, ue) | 0) | 0) + ((8191 & (n = (n = n + Math.imul(h, fe) | 0) + Math.imul(l, ue) | 0)) << 13) | 0;
                f = ((o = o + Math.imul(l, fe) | 0) + (n >>> 13) | 0) + (Me >>> 26) | 0,
                Me &= 67108863,
                i = Math.imul(O, q),
                n = (n = Math.imul(O, K)) + Math.imul(L, q) | 0,
                o = Math.imul(L, K),
                i = i + Math.imul(N, H) | 0,
                n = (n = n + Math.imul(N, V) | 0) + Math.imul(C, H) | 0,
                o = o + Math.imul(C, V) | 0,
                i = i + Math.imul(I, G) | 0,
                n = (n = n + Math.imul(I, W) | 0) + Math.imul(T, G) | 0,
                o = o + Math.imul(T, W) | 0,
                i = i + Math.imul(k, J) | 0,
                n = (n = n + Math.imul(k, X) | 0) + Math.imul(x, J) | 0,
                o = o + Math.imul(x, X) | 0,
                i = i + Math.imul(M, $) | 0,
                n = (n = n + Math.imul(M, ee) | 0) + Math.imul(S, $) | 0,
                o = o + Math.imul(S, ee) | 0,
                i = i + Math.imul(w, re) | 0,
                n = (n = n + Math.imul(w, ie) | 0) + Math.imul(_, re) | 0,
                o = o + Math.imul(_, ie) | 0,
                i = i + Math.imul(g, oe) | 0,
                n = (n = n + Math.imul(g, ae) | 0) + Math.imul(v, oe) | 0,
                o = o + Math.imul(v, ae) | 0,
                i = i + Math.imul(p, ue) | 0,
                n = (n = n + Math.imul(p, fe) | 0) + Math.imul(b, ue) | 0,
                o = o + Math.imul(b, fe) | 0;
                var Se = (f + (i = i + Math.imul(h, he) | 0) | 0) + ((8191 & (n = (n = n + Math.imul(h, le) | 0) + Math.imul(l, he) | 0)) << 13) | 0;
                f = ((o = o + Math.imul(l, le) | 0) + (n >>> 13) | 0) + (Se >>> 26) | 0,
                Se &= 67108863,
                i = Math.imul(D, q),
                n = (n = Math.imul(D, K)) + Math.imul(z, q) | 0,
                o = Math.imul(z, K),
                i = i + Math.imul(O, H) | 0,
                n = (n = n + Math.imul(O, V) | 0) + Math.imul(L, H) | 0,
                o = o + Math.imul(L, V) | 0,
                i = i + Math.imul(N, G) | 0,
                n = (n = n + Math.imul(N, W) | 0) + Math.imul(C, G) | 0,
                o = o + Math.imul(C, W) | 0,
                i = i + Math.imul(I, J) | 0,
                n = (n = n + Math.imul(I, X) | 0) + Math.imul(T, J) | 0,
                o = o + Math.imul(T, X) | 0,
                i = i + Math.imul(k, $) | 0,
                n = (n = n + Math.imul(k, ee) | 0) + Math.imul(x, $) | 0,
                o = o + Math.imul(x, ee) | 0,
                i = i + Math.imul(M, re) | 0,
                n = (n = n + Math.imul(M, ie) | 0) + Math.imul(S, re) | 0,
                o = o + Math.imul(S, ie) | 0,
                i = i + Math.imul(w, oe) | 0,
                n = (n = n + Math.imul(w, ae) | 0) + Math.imul(_, oe) | 0,
                o = o + Math.imul(_, ae) | 0,
                i = i + Math.imul(g, ue) | 0,
                n = (n = n + Math.imul(g, fe) | 0) + Math.imul(v, ue) | 0,
                o = o + Math.imul(v, fe) | 0,
                i = i + Math.imul(p, he) | 0,
                n = (n = n + Math.imul(p, le) | 0) + Math.imul(b, he) | 0,
                o = o + Math.imul(b, le) | 0;
                var Ae = (f + (i = i + Math.imul(h, pe) | 0) | 0) + ((8191 & (n = (n = n + Math.imul(h, be) | 0) + Math.imul(l, pe) | 0)) << 13) | 0;
                f = ((o = o + Math.imul(l, be) | 0) + (n >>> 13) | 0) + (Ae >>> 26) | 0,
                Ae &= 67108863,
                i = Math.imul(D, H),
                n = (n = Math.imul(D, V)) + Math.imul(z, H) | 0,
                o = Math.imul(z, V),
                i = i + Math.imul(O, G) | 0,
                n = (n = n + Math.imul(O, W) | 0) + Math.imul(L, G) | 0,
                o = o + Math.imul(L, W) | 0,
                i = i + Math.imul(N, J) | 0,
                n = (n = n + Math.imul(N, X) | 0) + Math.imul(C, J) | 0,
                o = o + Math.imul(C, X) | 0,
                i = i + Math.imul(I, $) | 0,
                n = (n = n + Math.imul(I, ee) | 0) + Math.imul(T, $) | 0,
                o = o + Math.imul(T, ee) | 0,
                i = i + Math.imul(k, re) | 0,
                n = (n = n + Math.imul(k, ie) | 0) + Math.imul(x, re) | 0,
                o = o + Math.imul(x, ie) | 0,
                i = i + Math.imul(M, oe) | 0,
                n = (n = n + Math.imul(M, ae) | 0) + Math.imul(S, oe) | 0,
                o = o + Math.imul(S, ae) | 0,
                i = i + Math.imul(w, ue) | 0,
                n = (n = n + Math.imul(w, fe) | 0) + Math.imul(_, ue) | 0,
                o = o + Math.imul(_, fe) | 0,
                i = i + Math.imul(g, he) | 0,
                n = (n = n + Math.imul(g, le) | 0) + Math.imul(v, he) | 0,
                o = o + Math.imul(v, le) | 0;
                var ke = (f + (i = i + Math.imul(p, pe) | 0) | 0) + ((8191 & (n = (n = n + Math.imul(p, be) | 0) + Math.imul(b, pe) | 0)) << 13) | 0;
                f = ((o = o + Math.imul(b, be) | 0) + (n >>> 13) | 0) + (ke >>> 26) | 0,
                ke &= 67108863,
                i = Math.imul(D, G),
                n = (n = Math.imul(D, W)) + Math.imul(z, G) | 0,
                o = Math.imul(z, W),
                i = i + Math.imul(O, J) | 0,
                n = (n = n + Math.imul(O, X) | 0) + Math.imul(L, J) | 0,
                o = o + Math.imul(L, X) | 0,
                i = i + Math.imul(N, $) | 0,
                n = (n = n + Math.imul(N, ee) | 0) + Math.imul(C, $) | 0,
                o = o + Math.imul(C, ee) | 0,
                i = i + Math.imul(I, re) | 0,
                n = (n = n + Math.imul(I, ie) | 0) + Math.imul(T, re) | 0,
                o = o + Math.imul(T, ie) | 0,
                i = i + Math.imul(k, oe) | 0,
                n = (n = n + Math.imul(k, ae) | 0) + Math.imul(x, oe) | 0,
                o = o + Math.imul(x, ae) | 0,
                i = i + Math.imul(M, ue) | 0,
                n = (n = n + Math.imul(M, fe) | 0) + Math.imul(S, ue) | 0,
                o = o + Math.imul(S, fe) | 0,
                i = i + Math.imul(w, he) | 0,
                n = (n = n + Math.imul(w, le) | 0) + Math.imul(_, he) | 0,
                o = o + Math.imul(_, le) | 0;
                var xe = (f + (i = i + Math.imul(g, pe) | 0) | 0) + ((8191 & (n = (n = n + Math.imul(g, be) | 0) + Math.imul(v, pe) | 0)) << 13) | 0;
                f = ((o = o + Math.imul(v, be) | 0) + (n >>> 13) | 0) + (xe >>> 26) | 0,
                xe &= 67108863,
                i = Math.imul(D, J),
                n = (n = Math.imul(D, X)) + Math.imul(z, J) | 0,
                o = Math.imul(z, X),
                i = i + Math.imul(O, $) | 0,
                n = (n = n + Math.imul(O, ee) | 0) + Math.imul(L, $) | 0,
                o = o + Math.imul(L, ee) | 0,
                i = i + Math.imul(N, re) | 0,
                n = (n = n + Math.imul(N, ie) | 0) + Math.imul(C, re) | 0,
                o = o + Math.imul(C, ie) | 0,
                i = i + Math.imul(I, oe) | 0,
                n = (n = n + Math.imul(I, ae) | 0) + Math.imul(T, oe) | 0,
                o = o + Math.imul(T, ae) | 0,
                i = i + Math.imul(k, ue) | 0,
                n = (n = n + Math.imul(k, fe) | 0) + Math.imul(x, ue) | 0,
                o = o + Math.imul(x, fe) | 0,
                i = i + Math.imul(M, he) | 0,
                n = (n = n + Math.imul(M, le) | 0) + Math.imul(S, he) | 0,
                o = o + Math.imul(S, le) | 0;
                var Re = (f + (i = i + Math.imul(w, pe) | 0) | 0) + ((8191 & (n = (n = n + Math.imul(w, be) | 0) + Math.imul(_, pe) | 0)) << 13) | 0;
                f = ((o = o + Math.imul(_, be) | 0) + (n >>> 13) | 0) + (Re >>> 26) | 0,
                Re &= 67108863,
                i = Math.imul(D, $),
                n = (n = Math.imul(D, ee)) + Math.imul(z, $) | 0,
                o = Math.imul(z, ee),
                i = i + Math.imul(O, re) | 0,
                n = (n = n + Math.imul(O, ie) | 0) + Math.imul(L, re) | 0,
                o = o + Math.imul(L, ie) | 0,
                i = i + Math.imul(N, oe) | 0,
                n = (n = n + Math.imul(N, ae) | 0) + Math.imul(C, oe) | 0,
                o = o + Math.imul(C, ae) | 0,
                i = i + Math.imul(I, ue) | 0,
                n = (n = n + Math.imul(I, fe) | 0) + Math.imul(T, ue) | 0,
                o = o + Math.imul(T, fe) | 0,
                i = i + Math.imul(k, he) | 0,
                n = (n = n + Math.imul(k, le) | 0) + Math.imul(x, he) | 0,
                o = o + Math.imul(x, le) | 0;
                var Ie = (f + (i = i + Math.imul(M, pe) | 0) | 0) + ((8191 & (n = (n = n + Math.imul(M, be) | 0) + Math.imul(S, pe) | 0)) << 13) | 0;
                f = ((o = o + Math.imul(S, be) | 0) + (n >>> 13) | 0) + (Ie >>> 26) | 0,
                Ie &= 67108863,
                i = Math.imul(D, re),
                n = (n = Math.imul(D, ie)) + Math.imul(z, re) | 0,
                o = Math.imul(z, ie),
                i = i + Math.imul(O, oe) | 0,
                n = (n = n + Math.imul(O, ae) | 0) + Math.imul(L, oe) | 0,
                o = o + Math.imul(L, ae) | 0,
                i = i + Math.imul(N, ue) | 0,
                n = (n = n + Math.imul(N, fe) | 0) + Math.imul(C, ue) | 0,
                o = o + Math.imul(C, fe) | 0,
                i = i + Math.imul(I, he) | 0,
                n = (n = n + Math.imul(I, le) | 0) + Math.imul(T, he) | 0,
                o = o + Math.imul(T, le) | 0;
                var Te = (f + (i = i + Math.imul(k, pe) | 0) | 0) + ((8191 & (n = (n = n + Math.imul(k, be) | 0) + Math.imul(x, pe) | 0)) << 13) | 0;
                f = ((o = o + Math.imul(x, be) | 0) + (n >>> 13) | 0) + (Te >>> 26) | 0,
                Te &= 67108863,
                i = Math.imul(D, oe),
                n = (n = Math.imul(D, ae)) + Math.imul(z, oe) | 0,
                o = Math.imul(z, ae),
                i = i + Math.imul(O, ue) | 0,
                n = (n = n + Math.imul(O, fe) | 0) + Math.imul(L, ue) | 0,
                o = o + Math.imul(L, fe) | 0,
                i = i + Math.imul(N, he) | 0,
                n = (n = n + Math.imul(N, le) | 0) + Math.imul(C, he) | 0,
                o = o + Math.imul(C, le) | 0;
                var Pe = (f + (i = i + Math.imul(I, pe) | 0) | 0) + ((8191 & (n = (n = n + Math.imul(I, be) | 0) + Math.imul(T, pe) | 0)) << 13) | 0;
                f = ((o = o + Math.imul(T, be) | 0) + (n >>> 13) | 0) + (Pe >>> 26) | 0,
                Pe &= 67108863,
                i = Math.imul(D, ue),
                n = (n = Math.imul(D, fe)) + Math.imul(z, ue) | 0,
                o = Math.imul(z, fe),
                i = i + Math.imul(O, he) | 0,
                n = (n = n + Math.imul(O, le) | 0) + Math.imul(L, he) | 0,
                o = o + Math.imul(L, le) | 0;
                var Ne = (f + (i = i + Math.imul(N, pe) | 0) | 0) + ((8191 & (n = (n = n + Math.imul(N, be) | 0) + Math.imul(C, pe) | 0)) << 13) | 0;
                f = ((o = o + Math.imul(C, be) | 0) + (n >>> 13) | 0) + (Ne >>> 26) | 0,
                Ne &= 67108863,
                i = Math.imul(D, he),
                n = (n = Math.imul(D, le)) + Math.imul(z, he) | 0,
                o = Math.imul(z, le);
                var Ce = (f + (i = i + Math.imul(O, pe) | 0) | 0) + ((8191 & (n = (n = n + Math.imul(O, be) | 0) + Math.imul(L, pe) | 0)) << 13) | 0;
                f = ((o = o + Math.imul(L, be) | 0) + (n >>> 13) | 0) + (Ce >>> 26) | 0,
                Ce &= 67108863;
                var Be = (f + (i = Math.imul(D, pe)) | 0) + ((8191 & (n = (n = Math.imul(D, be)) + Math.imul(z, pe) | 0)) << 13) | 0;
                return f = ((o = Math.imul(z, be)) + (n >>> 13) | 0) + (Be >>> 26) | 0,
                Be &= 67108863,
                u[0] = me,
                u[1] = ge,
                u[2] = ve,
                u[3] = ye,
                u[4] = we,
                u[5] = _e,
                u[6] = Ee,
                u[7] = Me,
                u[8] = Se,
                u[9] = Ae,
                u[10] = ke,
                u[11] = xe,
                u[12] = Re,
                u[13] = Ie,
                u[14] = Te,
                u[15] = Pe,
                u[16] = Ne,
                u[17] = Ce,
                u[18] = Be,
                0 !== f && (u[19] = f,
                r.length++),
                r
            };
            function b(e, t, r) {
                return (new m).mulp(e, t, r)
            }
            function m(e, t) {
                this.x = e,
                this.y = t
            }
            Math.imul || (p = d),
            o.prototype.mulTo = function(e, t) {
                var r = this.length + e.length;
                return 10 === this.length && 10 === e.length ? p(this, e, t) : r < 63 ? d(this, e, t) : r < 1024 ? function(e, t, r) {
                    r.negative = t.negative ^ e.negative,
                    r.length = e.length + t.length;
                    for (var i = 0, n = 0, o = 0; o < r.length - 1; o++) {
                        var a = n;
                        n = 0;
                        for (var s = 67108863 & i, u = Math.min(o, t.length - 1), f = Math.max(0, o - e.length + 1); f <= u; f++) {
                            var c = o - f
                              , h = (0 | e.words[c]) * (0 | t.words[f])
                              , l = 67108863 & h;
                            s = 67108863 & (l = l + s | 0),
                            n += (a = (a = a + (h / 67108864 | 0) | 0) + (l >>> 26) | 0) >>> 26,
                            a &= 67108863
                        }
                        r.words[o] = s,
                        i = a,
                        a = n
                    }
                    return 0 !== i ? r.words[o] = i : r.length--,
                    r.strip()
                }(this, e, t) : b(this, e, t)
            }
            ,
            m.prototype.makeRBT = function(e) {
                for (var t = new Array(e), r = o.prototype._countBits(e) - 1, i = 0; i < e; i++)
                    t[i] = this.revBin(i, r, e);
                return t
            }
            ,
            m.prototype.revBin = function(e, t, r) {
                if (0 === e || e === r - 1)
                    return e;
                for (var i = 0, n = 0; n < t; n++)
                    i |= (1 & e) << t - n - 1,
                    e >>= 1;
                return i
            }
            ,
            m.prototype.permute = function(e, t, r, i, n, o) {
                for (var a = 0; a < o; a++)
                    i[a] = t[e[a]],
                    n[a] = r[e[a]]
            }
            ,
            m.prototype.transform = function(e, t, r, i, n, o) {
                this.permute(o, e, t, r, i, n);
                for (var a = 1; a < n; a <<= 1)
                    for (var s = a << 1, u = Math.cos(2 * Math.PI / s), f = Math.sin(2 * Math.PI / s), c = 0; c < n; c += s)
                        for (var h = u, l = f, d = 0; d < a; d++) {
                            var p = r[c + d]
                              , b = i[c + d]
                              , m = r[c + d + a]
                              , g = i[c + d + a]
                              , v = h * m - l * g;
                            g = h * g + l * m,
                            m = v,
                            r[c + d] = p + m,
                            i[c + d] = b + g,
                            r[c + d + a] = p - m,
                            i[c + d + a] = b - g,
                            d !== s && (v = u * h - f * l,
                            l = u * l + f * h,
                            h = v)
                        }
            }
            ,
            m.prototype.guessLen13b = function(e, t) {
                var r = 1 | Math.max(t, e)
                  , i = 1 & r
                  , n = 0;
                for (r = r / 2 | 0; r; r >>>= 1)
                    n++;
                return 1 << n + 1 + i
            }
            ,
            m.prototype.conjugate = function(e, t, r) {
                if (!(r <= 1))
                    for (var i = 0; i < r / 2; i++) {
                        var n = e[i];
                        e[i] = e[r - i - 1],
                        e[r - i - 1] = n,
                        n = t[i],
                        t[i] = -t[r - i - 1],
                        t[r - i - 1] = -n
                    }
            }
            ,
            m.prototype.normalize13b = function(e, t) {
                for (var r = 0, i = 0; i < t / 2; i++) {
                    var n = 8192 * Math.round(e[2 * i + 1] / t) + Math.round(e[2 * i] / t) + r;
                    e[i] = 67108863 & n,
                    r = n < 67108864 ? 0 : n / 67108864 | 0
                }
                return e
            }
            ,
            m.prototype.convert13b = function(e, t, r, n) {
                for (var o = 0, a = 0; a < t; a++)
                    o += 0 | e[a],
                    r[2 * a] = 8191 & o,
                    o >>>= 13,
                    r[2 * a + 1] = 8191 & o,
                    o >>>= 13;
                for (a = 2 * t; a < n; ++a)
                    r[a] = 0;
                i(0 === o),
                i(0 == (-8192 & o))
            }
            ,
            m.prototype.stub = function(e) {
                for (var t = new Array(e), r = 0; r < e; r++)
                    t[r] = 0;
                return t
            }
            ,
            m.prototype.mulp = function(e, t, r) {
                var i = 2 * this.guessLen13b(e.length, t.length)
                  , n = this.makeRBT(i)
                  , o = this.stub(i)
                  , a = new Array(i)
                  , s = new Array(i)
                  , u = new Array(i)
                  , f = new Array(i)
                  , c = new Array(i)
                  , h = new Array(i)
                  , l = r.words;
                l.length = i,
                this.convert13b(e.words, e.length, a, i),
                this.convert13b(t.words, t.length, f, i),
                this.transform(a, o, s, u, i, n),
                this.transform(f, o, c, h, i, n);
                for (var d = 0; d < i; d++) {
                    var p = s[d] * c[d] - u[d] * h[d];
                    u[d] = s[d] * h[d] + u[d] * c[d],
                    s[d] = p
                }
                return this.conjugate(s, u, i),
                this.transform(s, u, l, o, i, n),
                this.conjugate(l, o, i),
                this.normalize13b(l, i),
                r.negative = e.negative ^ t.negative,
                r.length = e.length + t.length,
                r.strip()
            }
            ,
            o.prototype.mul = function(e) {
                var t = new o(null);
                return t.words = new Array(this.length + e.length),
                this.mulTo(e, t)
            }
            ,
            o.prototype.mulf = function(e) {
                var t = new o(null);
                return t.words = new Array(this.length + e.length),
                b(this, e, t)
            }
            ,
            o.prototype.imul = function(e) {
                return this.clone().mulTo(e, this)
            }
            ,
            o.prototype.imuln = function(e) {
                i("number" == typeof e),
                i(e < 67108864);
                for (var t = 0, r = 0; r < this.length; r++) {
                    var n = (0 | this.words[r]) * e
                      , o = (67108863 & n) + (67108863 & t);
                    t >>= 26,
                    t += n / 67108864 | 0,
                    t += o >>> 26,
                    this.words[r] = 67108863 & o
                }
                return 0 !== t && (this.words[r] = t,
                this.length++),
                this
            }
            ,
            o.prototype.muln = function(e) {
                return this.clone().imuln(e)
            }
            ,
            o.prototype.sqr = function() {
                return this.mul(this)
            }
            ,
            o.prototype.isqr = function() {
                return this.imul(this.clone())
            }
            ,
            o.prototype.pow = function(e) {
                var t = function(e) {
                    for (var t = new Array(e.bitLength()), r = 0; r < t.length; r++) {
                        var i = r / 26 | 0
                          , n = r % 26;
                        t[r] = (e.words[i] & 1 << n) >>> n
                    }
                    return t
                }(e);
                if (0 === t.length)
                    return new o(1);
                for (var r = this, i = 0; i < t.length && 0 === t[i]; i++,
                r = r.sqr())
                    ;
                if (++i < t.length)
                    for (var n = r.sqr(); i < t.length; i++,
                    n = n.sqr())
                        0 !== t[i] && (r = r.mul(n));
                return r
            }
            ,
            o.prototype.iushln = function(e) {
                i("number" == typeof e && e >= 0);
                var t, r = e % 26, n = (e - r) / 26, o = 67108863 >>> 26 - r << 26 - r;
                if (0 !== r) {
                    var a = 0;
                    for (t = 0; t < this.length; t++) {
                        var s = this.words[t] & o
                          , u = (0 | this.words[t]) - s << r;
                        this.words[t] = u | a,
                        a = s >>> 26 - r
                    }
                    a && (this.words[t] = a,
                    this.length++)
                }
                if (0 !== n) {
                    for (t = this.length - 1; t >= 0; t--)
                        this.words[t + n] = this.words[t];
                    for (t = 0; t < n; t++)
                        this.words[t] = 0;
                    this.length += n
                }
                return this.strip()
            }
            ,
            o.prototype.ishln = function(e) {
                return i(0 === this.negative),
                this.iushln(e)
            }
            ,
            o.prototype.iushrn = function(e, t, r) {
                var n;
                i("number" == typeof e && e >= 0),
                n = t ? (t - t % 26) / 26 : 0;
                var o = e % 26
                  , a = Math.min((e - o) / 26, this.length)
                  , s = 67108863 ^ 67108863 >>> o << o
                  , u = r;
                if (n -= a,
                n = Math.max(0, n),
                u) {
                    for (var f = 0; f < a; f++)
                        u.words[f] = this.words[f];
                    u.length = a
                }
                if (0 === a)
                    ;
                else if (this.length > a)
                    for (this.length -= a,
                    f = 0; f < this.length; f++)
                        this.words[f] = this.words[f + a];
                else
                    this.words[0] = 0,
                    this.length = 1;
                var c = 0;
                for (f = this.length - 1; f >= 0 && (0 !== c || f >= n); f--) {
                    var h = 0 | this.words[f];
                    this.words[f] = c << 26 - o | h >>> o,
                    c = h & s
                }
                return u && 0 !== c && (u.words[u.length++] = c),
                0 === this.length && (this.words[0] = 0,
                this.length = 1),
                this.strip()
            }
            ,
            o.prototype.ishrn = function(e, t, r) {
                return i(0 === this.negative),
                this.iushrn(e, t, r)
            }
            ,
            o.prototype.shln = function(e) {
                return this.clone().ishln(e)
            }
            ,
            o.prototype.ushln = function(e) {
                return this.clone().iushln(e)
            }
            ,
            o.prototype.shrn = function(e) {
                return this.clone().ishrn(e)
            }
            ,
            o.prototype.ushrn = function(e) {
                return this.clone().iushrn(e)
            }
            ,
            o.prototype.testn = function(e) {
                i("number" == typeof e && e >= 0);
                var t = e % 26
                  , r = (e - t) / 26
                  , n = 1 << t;
                return !(this.length <= r) && !!(this.words[r] & n)
            }
            ,
            o.prototype.imaskn = function(e) {
                i("number" == typeof e && e >= 0);
                var t = e % 26
                  , r = (e - t) / 26;
                if (i(0 === this.negative, "imaskn works only with positive numbers"),
                this.length <= r)
                    return this;
                if (0 !== t && r++,
                this.length = Math.min(r, this.length),
                0 !== t) {
                    var n = 67108863 ^ 67108863 >>> t << t;
                    this.words[this.length - 1] &= n
                }
                return this.strip()
            }
            ,
            o.prototype.maskn = function(e) {
                return this.clone().imaskn(e)
            }
            ,
            o.prototype.iaddn = function(e) {
                return i("number" == typeof e),
                i(e < 67108864),
                e < 0 ? this.isubn(-e) : 0 !== this.negative ? 1 === this.length && (0 | this.words[0]) < e ? (this.words[0] = e - (0 | this.words[0]),
                this.negative = 0,
                this) : (this.negative = 0,
                this.isubn(e),
                this.negative = 1,
                this) : this._iaddn(e)
            }
            ,
            o.prototype._iaddn = function(e) {
                this.words[0] += e;
                for (var t = 0; t < this.length && this.words[t] >= 67108864; t++)
                    this.words[t] -= 67108864,
                    t === this.length - 1 ? this.words[t + 1] = 1 : this.words[t + 1]++;
                return this.length = Math.max(this.length, t + 1),
                this
            }
            ,
            o.prototype.isubn = function(e) {
                if (i("number" == typeof e),
                i(e < 67108864),
                e < 0)
                    return this.iaddn(-e);
                if (0 !== this.negative)
                    return this.negative = 0,
                    this.iaddn(e),
                    this.negative = 1,
                    this;
                if (this.words[0] -= e,
                1 === this.length && this.words[0] < 0)
                    this.words[0] = -this.words[0],
                    this.negative = 1;
                else
                    for (var t = 0; t < this.length && this.words[t] < 0; t++)
                        this.words[t] += 67108864,
                        this.words[t + 1] -= 1;
                return this.strip()
            }
            ,
            o.prototype.addn = function(e) {
                return this.clone().iaddn(e)
            }
            ,
            o.prototype.subn = function(e) {
                return this.clone().isubn(e)
            }
            ,
            o.prototype.iabs = function() {
                return this.negative = 0,
                this
            }
            ,
            o.prototype.abs = function() {
                return this.clone().iabs()
            }
            ,
            o.prototype._ishlnsubmul = function(e, t, r) {
                var n, o, a = e.length + r;
                this._expand(a);
                var s = 0;
                for (n = 0; n < e.length; n++) {
                    o = (0 | this.words[n + r]) + s;
                    var u = (0 | e.words[n]) * t;
                    s = ((o -= 67108863 & u) >> 26) - (u / 67108864 | 0),
                    this.words[n + r] = 67108863 & o
                }
                for (; n < this.length - r; n++)
                    s = (o = (0 | this.words[n + r]) + s) >> 26,
                    this.words[n + r] = 67108863 & o;
                if (0 === s)
                    return this.strip();
                for (i(-1 === s),
                s = 0,
                n = 0; n < this.length; n++)
                    s = (o = -(0 | this.words[n]) + s) >> 26,
                    this.words[n] = 67108863 & o;
                return this.negative = 1,
                this.strip()
            }
            ,
            o.prototype._wordDiv = function(e, t) {
                var r = (this.length,
                e.length)
                  , i = this.clone()
                  , n = e
                  , a = 0 | n.words[n.length - 1];
                0 !== (r = 26 - this._countBits(a)) && (n = n.ushln(r),
                i.iushln(r),
                a = 0 | n.words[n.length - 1]);
                var s, u = i.length - n.length;
                if ("mod" !== t) {
                    (s = new o(null)).length = u + 1,
                    s.words = new Array(s.length);
                    for (var f = 0; f < s.length; f++)
                        s.words[f] = 0
                }
                var c = i.clone()._ishlnsubmul(n, 1, u);
                0 === c.negative && (i = c,
                s && (s.words[u] = 1));
                for (var h = u - 1; h >= 0; h--) {
                    var l = 67108864 * (0 | i.words[n.length + h]) + (0 | i.words[n.length + h - 1]);
                    for (l = Math.min(l / a | 0, 67108863),
                    i._ishlnsubmul(n, l, h); 0 !== i.negative; )
                        l--,
                        i.negative = 0,
                        i._ishlnsubmul(n, 1, h),
                        i.isZero() || (i.negative ^= 1);
                    s && (s.words[h] = l)
                }
                return s && s.strip(),
                i.strip(),
                "div" !== t && 0 !== r && i.iushrn(r),
                {
                    div: s || null,
                    mod: i
                }
            }
            ,
            o.prototype.divmod = function(e, t, r) {
                return i(!e.isZero()),
                this.isZero() ? {
                    div: new o(0),
                    mod: new o(0)
                } : 0 !== this.negative && 0 === e.negative ? (s = this.neg().divmod(e, t),
                "mod" !== t && (n = s.div.neg()),
                "div" !== t && (a = s.mod.neg(),
                r && 0 !== a.negative && a.iadd(e)),
                {
                    div: n,
                    mod: a
                }) : 0 === this.negative && 0 !== e.negative ? (s = this.divmod(e.neg(), t),
                "mod" !== t && (n = s.div.neg()),
                {
                    div: n,
                    mod: s.mod
                }) : 0 != (this.negative & e.negative) ? (s = this.neg().divmod(e.neg(), t),
                "div" !== t && (a = s.mod.neg(),
                r && 0 !== a.negative && a.isub(e)),
                {
                    div: s.div,
                    mod: a
                }) : e.length > this.length || this.cmp(e) < 0 ? {
                    div: new o(0),
                    mod: this
                } : 1 === e.length ? "div" === t ? {
                    div: this.divn(e.words[0]),
                    mod: null
                } : "mod" === t ? {
                    div: null,
                    mod: new o(this.modn(e.words[0]))
                } : {
                    div: this.divn(e.words[0]),
                    mod: new o(this.modn(e.words[0]))
                } : this._wordDiv(e, t);
                var n, a, s
            }
            ,
            o.prototype.div = function(e) {
                return this.divmod(e, "div", !1).div
            }
            ,
            o.prototype.mod = function(e) {
                return this.divmod(e, "mod", !1).mod
            }
            ,
            o.prototype.umod = function(e) {
                return this.divmod(e, "mod", !0).mod
            }
            ,
            o.prototype.divRound = function(e) {
                var t = this.divmod(e);
                if (t.mod.isZero())
                    return t.div;
                var r = 0 !== t.div.negative ? t.mod.isub(e) : t.mod
                  , i = e.ushrn(1)
                  , n = e.andln(1)
                  , o = r.cmp(i);
                return o < 0 || 1 === n && 0 === o ? t.div : 0 !== t.div.negative ? t.div.isubn(1) : t.div.iaddn(1)
            }
            ,
            o.prototype.modn = function(e) {
                i(e <= 67108863);
                for (var t = (1 << 26) % e, r = 0, n = this.length - 1; n >= 0; n--)
                    r = (t * r + (0 | this.words[n])) % e;
                return r
            }
            ,
            o.prototype.idivn = function(e) {
                i(e <= 67108863);
                for (var t = 0, r = this.length - 1; r >= 0; r--) {
                    var n = (0 | this.words[r]) + 67108864 * t;
                    this.words[r] = n / e | 0,
                    t = n % e
                }
                return this.strip()
            }
            ,
            o.prototype.divn = function(e) {
                return this.clone().idivn(e)
            }
            ,
            o.prototype.egcd = function(e) {
                i(0 === e.negative),
                i(!e.isZero());
                var t = this
                  , r = e.clone();
                t = 0 !== t.negative ? t.umod(e) : t.clone();
                for (var n = new o(1), a = new o(0), s = new o(0), u = new o(1), f = 0; t.isEven() && r.isEven(); )
                    t.iushrn(1),
                    r.iushrn(1),
                    ++f;
                for (var c = r.clone(), h = t.clone(); !t.isZero(); ) {
                    for (var l = 0, d = 1; 0 == (t.words[0] & d) && l < 26; ++l,
                    d <<= 1)
                        ;
                    if (l > 0)
                        for (t.iushrn(l); l-- > 0; )
                            (n.isOdd() || a.isOdd()) && (n.iadd(c),
                            a.isub(h)),
                            n.iushrn(1),
                            a.iushrn(1);
                    for (var p = 0, b = 1; 0 == (r.words[0] & b) && p < 26; ++p,
                    b <<= 1)
                        ;
                    if (p > 0)
                        for (r.iushrn(p); p-- > 0; )
                            (s.isOdd() || u.isOdd()) && (s.iadd(c),
                            u.isub(h)),
                            s.iushrn(1),
                            u.iushrn(1);
                    t.cmp(r) >= 0 ? (t.isub(r),
                    n.isub(s),
                    a.isub(u)) : (r.isub(t),
                    s.isub(n),
                    u.isub(a))
                }
                return {
                    a: s,
                    b: u,
                    gcd: r.iushln(f)
                }
            }
            ,
            o.prototype._invmp = function(e) {
                i(0 === e.negative),
                i(!e.isZero());
                var t = this
                  , r = e.clone();
                t = 0 !== t.negative ? t.umod(e) : t.clone();
                for (var n, a = new o(1), s = new o(0), u = r.clone(); t.cmpn(1) > 0 && r.cmpn(1) > 0; ) {
                    for (var f = 0, c = 1; 0 == (t.words[0] & c) && f < 26; ++f,
                    c <<= 1)
                        ;
                    if (f > 0)
                        for (t.iushrn(f); f-- > 0; )
                            a.isOdd() && a.iadd(u),
                            a.iushrn(1);
                    for (var h = 0, l = 1; 0 == (r.words[0] & l) && h < 26; ++h,
                    l <<= 1)
                        ;
                    if (h > 0)
                        for (r.iushrn(h); h-- > 0; )
                            s.isOdd() && s.iadd(u),
                            s.iushrn(1);
                    t.cmp(r) >= 0 ? (t.isub(r),
                    a.isub(s)) : (r.isub(t),
                    s.isub(a))
                }
                return (n = 0 === t.cmpn(1) ? a : s).cmpn(0) < 0 && n.iadd(e),
                n
            }
            ,
            o.prototype.gcd = function(e) {
                if (this.isZero())
                    return e.abs();
                if (e.isZero())
                    return this.abs();
                var t = this.clone()
                  , r = e.clone();
                t.negative = 0,
                r.negative = 0;
                for (var i = 0; t.isEven() && r.isEven(); i++)
                    t.iushrn(1),
                    r.iushrn(1);
                for (; ; ) {
                    for (; t.isEven(); )
                        t.iushrn(1);
                    for (; r.isEven(); )
                        r.iushrn(1);
                    var n = t.cmp(r);
                    if (n < 0) {
                        var o = t;
                        t = r,
                        r = o
                    } else if (0 === n || 0 === r.cmpn(1))
                        break;
                    t.isub(r)
                }
                return r.iushln(i)
            }
            ,
            o.prototype.invm = function(e) {
                return this.egcd(e).a.umod(e)
            }
            ,
            o.prototype.isEven = function() {
                return 0 == (1 & this.words[0])
            }
            ,
            o.prototype.isOdd = function() {
                return 1 == (1 & this.words[0])
            }
            ,
            o.prototype.andln = function(e) {
                return this.words[0] & e
            }
            ,
            o.prototype.bincn = function(e) {
                i("number" == typeof e);
                var t = e % 26
                  , r = (e - t) / 26
                  , n = 1 << t;
                if (this.length <= r)
                    return this._expand(r + 1),
                    this.words[r] |= n,
                    this;
                for (var o = n, a = r; 0 !== o && a < this.length; a++) {
                    var s = 0 | this.words[a];
                    o = (s += o) >>> 26,
                    s &= 67108863,
                    this.words[a] = s
                }
                return 0 !== o && (this.words[a] = o,
                this.length++),
                this
            }
            ,
            o.prototype.isZero = function() {
                return 1 === this.length && 0 === this.words[0]
            }
            ,
            o.prototype.cmpn = function(e) {
                var t, r = e < 0;
                if (0 !== this.negative && !r)
                    return -1;
                if (0 === this.negative && r)
                    return 1;
                if (this.strip(),
                this.length > 1)
                    t = 1;
                else {
                    r && (e = -e),
                    i(e <= 67108863, "Number is too big");
                    var n = 0 | this.words[0];
                    t = n === e ? 0 : n < e ? -1 : 1
                }
                return 0 !== this.negative ? 0 | -t : t
            }
            ,
            o.prototype.cmp = function(e) {
                if (0 !== this.negative && 0 === e.negative)
                    return -1;
                if (0 === this.negative && 0 !== e.negative)
                    return 1;
                var t = this.ucmp(e);
                return 0 !== this.negative ? 0 | -t : t
            }
            ,
            o.prototype.ucmp = function(e) {
                if (this.length > e.length)
                    return 1;
                if (this.length < e.length)
                    return -1;
                for (var t = 0, r = this.length - 1; r >= 0; r--) {
                    var i = 0 | this.words[r]
                      , n = 0 | e.words[r];
                    if (i !== n) {
                        i < n ? t = -1 : i > n && (t = 1);
                        break
                    }
                }
                return t
            }
            ,
            o.prototype.gtn = function(e) {
                return 1 === this.cmpn(e)
            }
            ,
            o.prototype.gt = function(e) {
                return 1 === this.cmp(e)
            }
            ,
            o.prototype.gten = function(e) {
                return this.cmpn(e) >= 0
            }
            ,
            o.prototype.gte = function(e) {
                return this.cmp(e) >= 0
            }
            ,
            o.prototype.ltn = function(e) {
                return -1 === this.cmpn(e)
            }
            ,
            o.prototype.lt = function(e) {
                return -1 === this.cmp(e)
            }
            ,
            o.prototype.lten = function(e) {
                return this.cmpn(e) <= 0
            }
            ,
            o.prototype.lte = function(e) {
                return this.cmp(e) <= 0
            }
            ,
            o.prototype.eqn = function(e) {
                return 0 === this.cmpn(e)
            }
            ,
            o.prototype.eq = function(e) {
                return 0 === this.cmp(e)
            }
            ,
            o.red = function(e) {
                return new M(e)
            }
            ,
            o.prototype.toRed = function(e) {
                return i(!this.red, "Already a number in reduction context"),
                i(0 === this.negative, "red works only with positives"),
                e.convertTo(this)._forceRed(e)
            }
            ,
            o.prototype.fromRed = function() {
                return i(this.red, "fromRed works only with numbers in reduction context"),
                this.red.convertFrom(this)
            }
            ,
            o.prototype._forceRed = function(e) {
                return this.red = e,
                this
            }
            ,
            o.prototype.forceRed = function(e) {
                return i(!this.red, "Already a number in reduction context"),
                this._forceRed(e)
            }
            ,
            o.prototype.redAdd = function(e) {
                return i(this.red, "redAdd works only with red numbers"),
                this.red.add(this, e)
            }
            ,
            o.prototype.redIAdd = function(e) {
                return i(this.red, "redIAdd works only with red numbers"),
                this.red.iadd(this, e)
            }
            ,
            o.prototype.redSub = function(e) {
                return i(this.red, "redSub works only with red numbers"),
                this.red.sub(this, e)
            }
            ,
            o.prototype.redISub = function(e) {
                return i(this.red, "redISub works only with red numbers"),
                this.red.isub(this, e)
            }
            ,
            o.prototype.redShl = function(e) {
                return i(this.red, "redShl works only with red numbers"),
                this.red.shl(this, e)
            }
            ,
            o.prototype.redMul = function(e) {
                return i(this.red, "redMul works only with red numbers"),
                this.red._verify2(this, e),
                this.red.mul(this, e)
            }
            ,
            o.prototype.redIMul = function(e) {
                return i(this.red, "redMul works only with red numbers"),
                this.red._verify2(this, e),
                this.red.imul(this, e)
            }
            ,
            o.prototype.redSqr = function() {
                return i(this.red, "redSqr works only with red numbers"),
                this.red._verify1(this),
                this.red.sqr(this)
            }
            ,
            o.prototype.redISqr = function() {
                return i(this.red, "redISqr works only with red numbers"),
                this.red._verify1(this),
                this.red.isqr(this)
            }
            ,
            o.prototype.redSqrt = function() {
                return i(this.red, "redSqrt works only with red numbers"),
                this.red._verify1(this),
                this.red.sqrt(this)
            }
            ,
            o.prototype.redInvm = function() {
                return i(this.red, "redInvm works only with red numbers"),
                this.red._verify1(this),
                this.red.invm(this)
            }
            ,
            o.prototype.redNeg = function() {
                return i(this.red, "redNeg works only with red numbers"),
                this.red._verify1(this),
                this.red.neg(this)
            }
            ,
            o.prototype.redPow = function(e) {
                return i(this.red && !e.red, "redPow(normalNum)"),
                this.red._verify1(this),
                this.red.pow(this, e)
            }
            ;
            var g = {
                k256: null,
                p224: null,
                p192: null,
                p25519: null
            };
            function v(e, t) {
                this.name = e,
                this.p = new o(t,16),
                this.n = this.p.bitLength(),
                this.k = new o(1).iushln(this.n).isub(this.p),
                this.tmp = this._tmp()
            }
            function y() {
                v.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f")
            }
            function w() {
                v.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001")
            }
            function _() {
                v.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff")
            }
            function E() {
                v.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed")
            }
            function M(e) {
                if ("string" == typeof e) {
                    var t = o._prime(e);
                    this.m = t.p,
                    this.prime = t
                } else
                    i(e.gtn(1), "modulus must be greater than 1"),
                    this.m = e,
                    this.prime = null
            }
            function S(e) {
                M.call(this, e),
                this.shift = this.m.bitLength(),
                this.shift % 26 != 0 && (this.shift += 26 - this.shift % 26),
                this.r = new o(1).iushln(this.shift),
                this.r2 = this.imod(this.r.sqr()),
                this.rinv = this.r._invmp(this.m),
                this.minv = this.rinv.mul(this.r).isubn(1).div(this.m),
                this.minv = this.minv.umod(this.r),
                this.minv = this.r.sub(this.minv)
            }
            v.prototype._tmp = function() {
                var e = new o(null);
                return e.words = new Array(Math.ceil(this.n / 13)),
                e
            }
            ,
            v.prototype.ireduce = function(e) {
                var t, r = e;
                do {
                    this.split(r, this.tmp),
                    t = (r = (r = this.imulK(r)).iadd(this.tmp)).bitLength()
                } while (t > this.n);
                var i = t < this.n ? -1 : r.ucmp(this.p);
                return 0 === i ? (r.words[0] = 0,
                r.length = 1) : i > 0 ? r.isub(this.p) : void 0 !== r.strip ? r.strip() : r._strip(),
                r
            }
            ,
            v.prototype.split = function(e, t) {
                e.iushrn(this.n, 0, t)
            }
            ,
            v.prototype.imulK = function(e) {
                return e.imul(this.k)
            }
            ,
            n(y, v),
            y.prototype.split = function(e, t) {
                for (var r = Math.min(e.length, 9), i = 0; i < r; i++)
                    t.words[i] = e.words[i];
                if (t.length = r,
                e.length <= 9)
                    return e.words[0] = 0,
                    void (e.length = 1);
                var n = e.words[9];
                for (t.words[t.length++] = 4194303 & n,
                i = 10; i < e.length; i++) {
                    var o = 0 | e.words[i];
                    e.words[i - 10] = (4194303 & o) << 4 | n >>> 22,
                    n = o
                }
                n >>>= 22,
                e.words[i - 10] = n,
                0 === n && e.length > 10 ? e.length -= 10 : e.length -= 9
            }
            ,
            y.prototype.imulK = function(e) {
                e.words[e.length] = 0,
                e.words[e.length + 1] = 0,
                e.length += 2;
                for (var t = 0, r = 0; r < e.length; r++) {
                    var i = 0 | e.words[r];
                    t += 977 * i,
                    e.words[r] = 67108863 & t,
                    t = 64 * i + (t / 67108864 | 0)
                }
                return 0 === e.words[e.length - 1] && (e.length--,
                0 === e.words[e.length - 1] && e.length--),
                e
            }
            ,
            n(w, v),
            n(_, v),
            n(E, v),
            E.prototype.imulK = function(e) {
                for (var t = 0, r = 0; r < e.length; r++) {
                    var i = 19 * (0 | e.words[r]) + t
                      , n = 67108863 & i;
                    i >>>= 26,
                    e.words[r] = n,
                    t = i
                }
                return 0 !== t && (e.words[e.length++] = t),
                e
            }
            ,
            o._prime = function(e) {
                if (g[e])
                    return g[e];
                var t;
                if ("k256" === e)
                    t = new y;
                else if ("p224" === e)
                    t = new w;
                else if ("p192" === e)
                    t = new _;
                else {
                    if ("p25519" !== e)
                        throw new Error("Unknown prime " + e);
                    t = new E
                }
                return g[e] = t,
                t
            }
            ,
            M.prototype._verify1 = function(e) {
                i(0 === e.negative, "red works only with positives"),
                i(e.red, "red works only with red numbers")
            }
            ,
            M.prototype._verify2 = function(e, t) {
                i(0 == (e.negative | t.negative), "red works only with positives"),
                i(e.red && e.red === t.red, "red works only with red numbers")
            }
            ,
            M.prototype.imod = function(e) {
                return this.prime ? this.prime.ireduce(e)._forceRed(this) : e.umod(this.m)._forceRed(this)
            }
            ,
            M.prototype.neg = function(e) {
                return e.isZero() ? e.clone() : this.m.sub(e)._forceRed(this)
            }
            ,
            M.prototype.add = function(e, t) {
                this._verify2(e, t);
                var r = e.add(t);
                return r.cmp(this.m) >= 0 && r.isub(this.m),
                r._forceRed(this)
            }
            ,
            M.prototype.iadd = function(e, t) {
                this._verify2(e, t);
                var r = e.iadd(t);
                return r.cmp(this.m) >= 0 && r.isub(this.m),
                r
            }
            ,
            M.prototype.sub = function(e, t) {
                this._verify2(e, t);
                var r = e.sub(t);
                return r.cmpn(0) < 0 && r.iadd(this.m),
                r._forceRed(this)
            }
            ,
            M.prototype.isub = function(e, t) {
                this._verify2(e, t);
                var r = e.isub(t);
                return r.cmpn(0) < 0 && r.iadd(this.m),
                r
            }
            ,
            M.prototype.shl = function(e, t) {
                return this._verify1(e),
                this.imod(e.ushln(t))
            }
            ,
            M.prototype.imul = function(e, t) {
                return this._verify2(e, t),
                this.imod(e.imul(t))
            }
            ,
            M.prototype.mul = function(e, t) {
                return this._verify2(e, t),
                this.imod(e.mul(t))
            }
            ,
            M.prototype.isqr = function(e) {
                return this.imul(e, e.clone())
            }
            ,
            M.prototype.sqr = function(e) {
                return this.mul(e, e)
            }
            ,
            M.prototype.sqrt = function(e) {
                if (e.isZero())
                    return e.clone();
                var t = this.m.andln(3);
                if (i(t % 2 == 1),
                3 === t) {
                    var r = this.m.add(new o(1)).iushrn(2);
                    return this.pow(e, r)
                }
                for (var n = this.m.subn(1), a = 0; !n.isZero() && 0 === n.andln(1); )
                    a++,
                    n.iushrn(1);
                i(!n.isZero());
                var s = new o(1).toRed(this)
                  , u = s.redNeg()
                  , f = this.m.subn(1).iushrn(1)
                  , c = this.m.bitLength();
                for (c = new o(2 * c * c).toRed(this); 0 !== this.pow(c, f).cmp(u); )
                    c.redIAdd(u);
                for (var h = this.pow(c, n), l = this.pow(e, n.addn(1).iushrn(1)), d = this.pow(e, n), p = a; 0 !== d.cmp(s); ) {
                    for (var b = d, m = 0; 0 !== b.cmp(s); m++)
                        b = b.redSqr();
                    i(m < p);
                    var g = this.pow(h, new o(1).iushln(p - m - 1));
                    l = l.redMul(g),
                    h = g.redSqr(),
                    d = d.redMul(h),
                    p = m
                }
                return l
            }
            ,
            M.prototype.invm = function(e) {
                var t = e._invmp(this.m);
                return 0 !== t.negative ? (t.negative = 0,
                this.imod(t).redNeg()) : this.imod(t)
            }
            ,
            M.prototype.pow = function(e, t) {
                if (t.isZero())
                    return new o(1).toRed(this);
                if (0 === t.cmpn(1))
                    return e.clone();
                var r = new Array(16);
                r[0] = new o(1).toRed(this),
                r[1] = e;
                for (var i = 2; i < r.length; i++)
                    r[i] = this.mul(r[i - 1], e);
                var n = r[0]
                  , a = 0
                  , s = 0
                  , u = t.bitLength() % 26;
                for (0 === u && (u = 26),
                i = t.length - 1; i >= 0; i--) {
                    for (var f = t.words[i], c = u - 1; c >= 0; c--) {
                        var h = f >> c & 1;
                        n !== r[0] && (n = this.sqr(n)),
                        0 !== h || 0 !== a ? (a <<= 1,
                        a |= h,
                        (4 === ++s || 0 === i && 0 === c) && (n = this.mul(n, r[a]),
                        s = 0,
                        a = 0)) : s = 0
                    }
                    u = 26
                }
                return n
            }
            ,
            M.prototype.convertTo = function(e) {
                var t = e.umod(this.m);
                return t === e ? t.clone() : t
            }
            ,
            M.prototype.convertFrom = function(e) {
                var t = e.clone();
                return t.red = null,
                t
            }
            ,
            o.mont = function(e) {
                return new S(e)
            }
            ,
            n(S, M),
            S.prototype.convertTo = function(e) {
                return this.imod(e.ushln(this.shift))
            }
            ,
            S.prototype.convertFrom = function(e) {
                var t = this.imod(e.mul(this.rinv));
                return t.red = null,
                t
            }
            ,
            S.prototype.imul = function(e, t) {
                if (e.isZero() || t.isZero())
                    return e.words[0] = 0,
                    e.length = 1,
                    e;
                var r = e.imul(t)
                  , i = r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m)
                  , n = r.isub(i).iushrn(this.shift)
                  , o = n;
                return n.cmp(this.m) >= 0 ? o = n.isub(this.m) : n.cmpn(0) < 0 && (o = n.iadd(this.m)),
                o._forceRed(this)
            }
            ,
            S.prototype.mul = function(e, t) {
                if (e.isZero() || t.isZero())
                    return new o(0)._forceRed(this);
                var r = e.mul(t)
                  , i = r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m)
                  , n = r.isub(i).iushrn(this.shift)
                  , a = n;
                return n.cmp(this.m) >= 0 ? a = n.isub(this.m) : n.cmpn(0) < 0 && (a = n.iadd(this.m)),
                a._forceRed(this)
            }
            ,
            S.prototype.invm = function(e) {
                return this.imod(e._invmp(this.m).mul(this.r2))._forceRed(this)
            }
        }(e, this)
    }
    ).call(this, r(50)(e))
}
, function(e, t, r) {
    "use strict";
    (function(e) {
        /*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
        var i = r(217)
          , n = r(218)
          , o = r(117);
        function a() {
            return u.TYPED_ARRAY_SUPPORT ? 2147483647 : 1073741823
        }
        function s(e, t) {
            if (a() < t)
                throw new RangeError("Invalid typed array length");
            return u.TYPED_ARRAY_SUPPORT ? (e = new Uint8Array(t)).__proto__ = u.prototype : (null === e && (e = new u(t)),
            e.length = t),
            e
        }
        function u(e, t, r) {
            if (!(u.TYPED_ARRAY_SUPPORT || this instanceof u))
                return new u(e,t,r);
            if ("number" == typeof e) {
                if ("string" == typeof t)
                    throw new Error("If encoding is specified then the first argument must be a string");
                return h(this, e)
            }
            return f(this, e, t, r)
        }
        function f(e, t, r, i) {
            if ("number" == typeof t)
                throw new TypeError('"value" argument must not be a number');
            return "undefined" != typeof ArrayBuffer && t instanceof ArrayBuffer ? function(e, t, r, i) {
                if (t.byteLength,
                r < 0 || t.byteLength < r)
                    throw new RangeError("'offset' is out of bounds");
                if (t.byteLength < r + (i || 0))
                    throw new RangeError("'length' is out of bounds");
                t = void 0 === r && void 0 === i ? new Uint8Array(t) : void 0 === i ? new Uint8Array(t,r) : new Uint8Array(t,r,i);
                u.TYPED_ARRAY_SUPPORT ? (e = t).__proto__ = u.prototype : e = l(e, t);
                return e
            }(e, t, r, i) : "string" == typeof t ? function(e, t, r) {
                "string" == typeof r && "" !== r || (r = "utf8");
                if (!u.isEncoding(r))
                    throw new TypeError('"encoding" must be a valid string encoding');
                var i = 0 | p(t, r)
                  , n = (e = s(e, i)).write(t, r);
                n !== i && (e = e.slice(0, n));
                return e
            }(e, t, r) : function(e, t) {
                if (u.isBuffer(t)) {
                    var r = 0 | d(t.length);
                    return 0 === (e = s(e, r)).length || t.copy(e, 0, 0, r),
                    e
                }
                if (t) {
                    if ("undefined" != typeof ArrayBuffer && t.buffer instanceof ArrayBuffer || "length"in t)
                        return "number" != typeof t.length || (i = t.length) != i ? s(e, 0) : l(e, t);
                    if ("Buffer" === t.type && o(t.data))
                        return l(e, t.data)
                }
                var i;
                throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")
            }(e, t)
        }
        function c(e) {
            if ("number" != typeof e)
                throw new TypeError('"size" argument must be a number');
            if (e < 0)
                throw new RangeError('"size" argument must not be negative')
        }
        function h(e, t) {
            if (c(t),
            e = s(e, t < 0 ? 0 : 0 | d(t)),
            !u.TYPED_ARRAY_SUPPORT)
                for (var r = 0; r < t; ++r)
                    e[r] = 0;
            return e
        }
        function l(e, t) {
            var r = t.length < 0 ? 0 : 0 | d(t.length);
            e = s(e, r);
            for (var i = 0; i < r; i += 1)
                e[i] = 255 & t[i];
            return e
        }
        function d(e) {
            if (e >= a())
                throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + a().toString(16) + " bytes");
            return 0 | e
        }
        function p(e, t) {
            if (u.isBuffer(e))
                return e.length;
            if ("undefined" != typeof ArrayBuffer && "function" == typeof ArrayBuffer.isView && (ArrayBuffer.isView(e) || e instanceof ArrayBuffer))
                return e.byteLength;
            "string" != typeof e && (e = "" + e);
            var r = e.length;
            if (0 === r)
                return 0;
            for (var i = !1; ; )
                switch (t) {
                case "ascii":
                case "latin1":
                case "binary":
                    return r;
                case "utf8":
                case "utf-8":
                case void 0:
                    return U(e).length;
                case "ucs2":
                case "ucs-2":
                case "utf16le":
                case "utf-16le":
                    return 2 * r;
                case "hex":
                    return r >>> 1;
                case "base64":
                    return q(e).length;
                default:
                    if (i)
                        return U(e).length;
                    t = ("" + t).toLowerCase(),
                    i = !0
                }
        }
        function b(e, t, r) {
            var i = !1;
            if ((void 0 === t || t < 0) && (t = 0),
            t > this.length)
                return "";
            if ((void 0 === r || r > this.length) && (r = this.length),
            r <= 0)
                return "";
            if ((r >>>= 0) <= (t >>>= 0))
                return "";
            for (e || (e = "utf8"); ; )
                switch (e) {
                case "hex":
                    return I(this, t, r);
                case "utf8":
                case "utf-8":
                    return k(this, t, r);
                case "ascii":
                    return x(this, t, r);
                case "latin1":
                case "binary":
                    return R(this, t, r);
                case "base64":
                    return A(this, t, r);
                case "ucs2":
                case "ucs-2":
                case "utf16le":
                case "utf-16le":
                    return T(this, t, r);
                default:
                    if (i)
                        throw new TypeError("Unknown encoding: " + e);
                    e = (e + "").toLowerCase(),
                    i = !0
                }
        }
        function m(e, t, r) {
            var i = e[t];
            e[t] = e[r],
            e[r] = i
        }
        function g(e, t, r, i, n) {
            if (0 === e.length)
                return -1;
            if ("string" == typeof r ? (i = r,
            r = 0) : r > 2147483647 ? r = 2147483647 : r < -2147483648 && (r = -2147483648),
            r = +r,
            isNaN(r) && (r = n ? 0 : e.length - 1),
            r < 0 && (r = e.length + r),
            r >= e.length) {
                if (n)
                    return -1;
                r = e.length - 1
            } else if (r < 0) {
                if (!n)
                    return -1;
                r = 0
            }
            if ("string" == typeof t && (t = u.from(t, i)),
            u.isBuffer(t))
                return 0 === t.length ? -1 : v(e, t, r, i, n);
            if ("number" == typeof t)
                return t &= 255,
                u.TYPED_ARRAY_SUPPORT && "function" == typeof Uint8Array.prototype.indexOf ? n ? Uint8Array.prototype.indexOf.call(e, t, r) : Uint8Array.prototype.lastIndexOf.call(e, t, r) : v(e, [t], r, i, n);
            throw new TypeError("val must be string, number or Buffer")
        }
        function v(e, t, r, i, n) {
            var o, a = 1, s = e.length, u = t.length;
            if (void 0 !== i && ("ucs2" === (i = String(i).toLowerCase()) || "ucs-2" === i || "utf16le" === i || "utf-16le" === i)) {
                if (e.length < 2 || t.length < 2)
                    return -1;
                a = 2,
                s /= 2,
                u /= 2,
                r /= 2
            }
            function f(e, t) {
                return 1 === a ? e[t] : e.readUInt16BE(t * a)
            }
            if (n) {
                var c = -1;
                for (o = r; o < s; o++)
                    if (f(e, o) === f(t, -1 === c ? 0 : o - c)) {
                        if (-1 === c && (c = o),
                        o - c + 1 === u)
                            return c * a
                    } else
                        -1 !== c && (o -= o - c),
                        c = -1
            } else
                for (r + u > s && (r = s - u),
                o = r; o >= 0; o--) {
                    for (var h = !0, l = 0; l < u; l++)
                        if (f(e, o + l) !== f(t, l)) {
                            h = !1;
                            break
                        }
                    if (h)
                        return o
                }
            return -1
        }
        function y(e, t, r, i) {
            r = Number(r) || 0;
            var n = e.length - r;
            i ? (i = Number(i)) > n && (i = n) : i = n;
            var o = t.length;
            if (o % 2 != 0)
                throw new TypeError("Invalid hex string");
            i > o / 2 && (i = o / 2);
            for (var a = 0; a < i; ++a) {
                var s = parseInt(t.substr(2 * a, 2), 16);
                if (isNaN(s))
                    return a;
                e[r + a] = s
            }
            return a
        }
        function w(e, t, r, i) {
            return K(U(t, e.length - r), e, r, i)
        }
        function _(e, t, r, i) {
            return K(function(e) {
                for (var t = [], r = 0; r < e.length; ++r)
                    t.push(255 & e.charCodeAt(r));
                return t
            }(t), e, r, i)
        }
        function E(e, t, r, i) {
            return _(e, t, r, i)
        }
        function M(e, t, r, i) {
            return K(q(t), e, r, i)
        }
        function S(e, t, r, i) {
            return K(function(e, t) {
                for (var r, i, n, o = [], a = 0; a < e.length && !((t -= 2) < 0); ++a)
                    r = e.charCodeAt(a),
                    i = r >> 8,
                    n = r % 256,
                    o.push(n),
                    o.push(i);
                return o
            }(t, e.length - r), e, r, i)
        }
        function A(e, t, r) {
            return 0 === t && r === e.length ? i.fromByteArray(e) : i.fromByteArray(e.slice(t, r))
        }
        function k(e, t, r) {
            r = Math.min(e.length, r);
            for (var i = [], n = t; n < r; ) {
                var o, a, s, u, f = e[n], c = null, h = f > 239 ? 4 : f > 223 ? 3 : f > 191 ? 2 : 1;
                if (n + h <= r)
                    switch (h) {
                    case 1:
                        f < 128 && (c = f);
                        break;
                    case 2:
                        128 == (192 & (o = e[n + 1])) && (u = (31 & f) << 6 | 63 & o) > 127 && (c = u);
                        break;
                    case 3:
                        o = e[n + 1],
                        a = e[n + 2],
                        128 == (192 & o) && 128 == (192 & a) && (u = (15 & f) << 12 | (63 & o) << 6 | 63 & a) > 2047 && (u < 55296 || u > 57343) && (c = u);
                        break;
                    case 4:
                        o = e[n + 1],
                        a = e[n + 2],
                        s = e[n + 3],
                        128 == (192 & o) && 128 == (192 & a) && 128 == (192 & s) && (u = (15 & f) << 18 | (63 & o) << 12 | (63 & a) << 6 | 63 & s) > 65535 && u < 1114112 && (c = u)
                    }
                null === c ? (c = 65533,
                h = 1) : c > 65535 && (c -= 65536,
                i.push(c >>> 10 & 1023 | 55296),
                c = 56320 | 1023 & c),
                i.push(c),
                n += h
            }
            return function(e) {
                var t = e.length;
                if (t <= 4096)
                    return String.fromCharCode.apply(String, e);
                var r = ""
                  , i = 0;
                for (; i < t; )
                    r += String.fromCharCode.apply(String, e.slice(i, i += 4096));
                return r
            }(i)
        }
        t.Buffer = u,
        t.SlowBuffer = function(e) {
            +e != e && (e = 0);
            return u.alloc(+e)
        }
        ,
        t.INSPECT_MAX_BYTES = 50,
        u.TYPED_ARRAY_SUPPORT = void 0 !== e.TYPED_ARRAY_SUPPORT ? e.TYPED_ARRAY_SUPPORT : function() {
            try {
                var e = new Uint8Array(1);
                return e.__proto__ = {
                    __proto__: Uint8Array.prototype,
                    foo: function() {
                        return 42
                    }
                },
                42 === e.foo() && "function" == typeof e.subarray && 0 === e.subarray(1, 1).byteLength
            } catch (e) {
                return !1
            }
        }(),
        t.kMaxLength = a(),
        u.poolSize = 8192,
        u._augment = function(e) {
            return e.__proto__ = u.prototype,
            e
        }
        ,
        u.from = function(e, t, r) {
            return f(null, e, t, r)
        }
        ,
        u.TYPED_ARRAY_SUPPORT && (u.prototype.__proto__ = Uint8Array.prototype,
        u.__proto__ = Uint8Array,
        "undefined" != typeof Symbol && Symbol.species && u[Symbol.species] === u && Object.defineProperty(u, Symbol.species, {
            value: null,
            configurable: !0
        })),
        u.alloc = function(e, t, r) {
            return function(e, t, r, i) {
                return c(t),
                t <= 0 ? s(e, t) : void 0 !== r ? "string" == typeof i ? s(e, t).fill(r, i) : s(e, t).fill(r) : s(e, t)
            }(null, e, t, r)
        }
        ,
        u.allocUnsafe = function(e) {
            return h(null, e)
        }
        ,
        u.allocUnsafeSlow = function(e) {
            return h(null, e)
        }
        ,
        u.isBuffer = function(e) {
            return !(null == e || !e._isBuffer)
        }
        ,
        u.compare = function(e, t) {
            if (!u.isBuffer(e) || !u.isBuffer(t))
                throw new TypeError("Arguments must be Buffers");
            if (e === t)
                return 0;
            for (var r = e.length, i = t.length, n = 0, o = Math.min(r, i); n < o; ++n)
                if (e[n] !== t[n]) {
                    r = e[n],
                    i = t[n];
                    break
                }
            return r < i ? -1 : i < r ? 1 : 0
        }
        ,
        u.isEncoding = function(e) {
            switch (String(e).toLowerCase()) {
            case "hex":
            case "utf8":
            case "utf-8":
            case "ascii":
            case "latin1":
            case "binary":
            case "base64":
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
                return !0;
            default:
                return !1
            }
        }
        ,
        u.concat = function(e, t) {
            if (!o(e))
                throw new TypeError('"list" argument must be an Array of Buffers');
            if (0 === e.length)
                return u.alloc(0);
            var r;
            if (void 0 === t)
                for (t = 0,
                r = 0; r < e.length; ++r)
                    t += e[r].length;
            var i = u.allocUnsafe(t)
              , n = 0;
            for (r = 0; r < e.length; ++r) {
                var a = e[r];
                if (!u.isBuffer(a))
                    throw new TypeError('"list" argument must be an Array of Buffers');
                a.copy(i, n),
                n += a.length
            }
            return i
        }
        ,
        u.byteLength = p,
        u.prototype._isBuffer = !0,
        u.prototype.swap16 = function() {
            var e = this.length;
            if (e % 2 != 0)
                throw new RangeError("Buffer size must be a multiple of 16-bits");
            for (var t = 0; t < e; t += 2)
                m(this, t, t + 1);
            return this
        }
        ,
        u.prototype.swap32 = function() {
            var e = this.length;
            if (e % 4 != 0)
                throw new RangeError("Buffer size must be a multiple of 32-bits");
            for (var t = 0; t < e; t += 4)
                m(this, t, t + 3),
                m(this, t + 1, t + 2);
            return this
        }
        ,
        u.prototype.swap64 = function() {
            var e = this.length;
            if (e % 8 != 0)
                throw new RangeError("Buffer size must be a multiple of 64-bits");
            for (var t = 0; t < e; t += 8)
                m(this, t, t + 7),
                m(this, t + 1, t + 6),
                m(this, t + 2, t + 5),
                m(this, t + 3, t + 4);
            return this
        }
        ,
        u.prototype.toString = function() {
            var e = 0 | this.length;
            return 0 === e ? "" : 0 === arguments.length ? k(this, 0, e) : b.apply(this, arguments)
        }
        ,
        u.prototype.equals = function(e) {
            if (!u.isBuffer(e))
                throw new TypeError("Argument must be a Buffer");
            return this === e || 0 === u.compare(this, e)
        }
        ,
        u.prototype.inspect = function() {
            var e = ""
              , r = t.INSPECT_MAX_BYTES;
            return this.length > 0 && (e = this.toString("hex", 0, r).match(/.{2}/g).join(" "),
            this.length > r && (e += " ... ")),
            "<Buffer " + e + ">"
        }
        ,
        u.prototype.compare = function(e, t, r, i, n) {
            if (!u.isBuffer(e))
                throw new TypeError("Argument must be a Buffer");
            if (void 0 === t && (t = 0),
            void 0 === r && (r = e ? e.length : 0),
            void 0 === i && (i = 0),
            void 0 === n && (n = this.length),
            t < 0 || r > e.length || i < 0 || n > this.length)
                throw new RangeError("out of range index");
            if (i >= n && t >= r)
                return 0;
            if (i >= n)
                return -1;
            if (t >= r)
                return 1;
            if (this === e)
                return 0;
            for (var o = (n >>>= 0) - (i >>>= 0), a = (r >>>= 0) - (t >>>= 0), s = Math.min(o, a), f = this.slice(i, n), c = e.slice(t, r), h = 0; h < s; ++h)
                if (f[h] !== c[h]) {
                    o = f[h],
                    a = c[h];
                    break
                }
            return o < a ? -1 : a < o ? 1 : 0
        }
        ,
        u.prototype.includes = function(e, t, r) {
            return -1 !== this.indexOf(e, t, r)
        }
        ,
        u.prototype.indexOf = function(e, t, r) {
            return g(this, e, t, r, !0)
        }
        ,
        u.prototype.lastIndexOf = function(e, t, r) {
            return g(this, e, t, r, !1)
        }
        ,
        u.prototype.write = function(e, t, r, i) {
            if (void 0 === t)
                i = "utf8",
                r = this.length,
                t = 0;
            else if (void 0 === r && "string" == typeof t)
                i = t,
                r = this.length,
                t = 0;
            else {
                if (!isFinite(t))
                    throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
                t |= 0,
                isFinite(r) ? (r |= 0,
                void 0 === i && (i = "utf8")) : (i = r,
                r = void 0)
            }
            var n = this.length - t;
            if ((void 0 === r || r > n) && (r = n),
            e.length > 0 && (r < 0 || t < 0) || t > this.length)
                throw new RangeError("Attempt to write outside buffer bounds");
            i || (i = "utf8");
            for (var o = !1; ; )
                switch (i) {
                case "hex":
                    return y(this, e, t, r);
                case "utf8":
                case "utf-8":
                    return w(this, e, t, r);
                case "ascii":
                    return _(this, e, t, r);
                case "latin1":
                case "binary":
                    return E(this, e, t, r);
                case "base64":
                    return M(this, e, t, r);
                case "ucs2":
                case "ucs-2":
                case "utf16le":
                case "utf-16le":
                    return S(this, e, t, r);
                default:
                    if (o)
                        throw new TypeError("Unknown encoding: " + i);
                    i = ("" + i).toLowerCase(),
                    o = !0
                }
        }
        ,
        u.prototype.toJSON = function() {
            return {
                type: "Buffer",
                data: Array.prototype.slice.call(this._arr || this, 0)
            }
        }
        ;
        function x(e, t, r) {
            var i = "";
            r = Math.min(e.length, r);
            for (var n = t; n < r; ++n)
                i += String.fromCharCode(127 & e[n]);
            return i
        }
        function R(e, t, r) {
            var i = "";
            r = Math.min(e.length, r);
            for (var n = t; n < r; ++n)
                i += String.fromCharCode(e[n]);
            return i
        }
        function I(e, t, r) {
            var i = e.length;
            (!t || t < 0) && (t = 0),
            (!r || r < 0 || r > i) && (r = i);
            for (var n = "", o = t; o < r; ++o)
                n += z(e[o]);
            return n
        }
        function T(e, t, r) {
            for (var i = e.slice(t, r), n = "", o = 0; o < i.length; o += 2)
                n += String.fromCharCode(i[o] + 256 * i[o + 1]);
            return n
        }
        function P(e, t, r) {
            if (e % 1 != 0 || e < 0)
                throw new RangeError("offset is not uint");
            if (e + t > r)
                throw new RangeError("Trying to access beyond buffer length")
        }
        function N(e, t, r, i, n, o) {
            if (!u.isBuffer(e))
                throw new TypeError('"buffer" argument must be a Buffer instance');
            if (t > n || t < o)
                throw new RangeError('"value" argument is out of bounds');
            if (r + i > e.length)
                throw new RangeError("Index out of range")
        }
        function C(e, t, r, i) {
            t < 0 && (t = 65535 + t + 1);
            for (var n = 0, o = Math.min(e.length - r, 2); n < o; ++n)
                e[r + n] = (t & 255 << 8 * (i ? n : 1 - n)) >>> 8 * (i ? n : 1 - n)
        }
        function B(e, t, r, i) {
            t < 0 && (t = 4294967295 + t + 1);
            for (var n = 0, o = Math.min(e.length - r, 4); n < o; ++n)
                e[r + n] = t >>> 8 * (i ? n : 3 - n) & 255
        }
        function O(e, t, r, i, n, o) {
            if (r + i > e.length)
                throw new RangeError("Index out of range");
            if (r < 0)
                throw new RangeError("Index out of range")
        }
        function L(e, t, r, i, o) {
            return o || O(e, 0, r, 4),
            n.write(e, t, r, i, 23, 4),
            r + 4
        }
        function j(e, t, r, i, o) {
            return o || O(e, 0, r, 8),
            n.write(e, t, r, i, 52, 8),
            r + 8
        }
        u.prototype.slice = function(e, t) {
            var r, i = this.length;
            if ((e = ~~e) < 0 ? (e += i) < 0 && (e = 0) : e > i && (e = i),
            (t = void 0 === t ? i : ~~t) < 0 ? (t += i) < 0 && (t = 0) : t > i && (t = i),
            t < e && (t = e),
            u.TYPED_ARRAY_SUPPORT)
                (r = this.subarray(e, t)).__proto__ = u.prototype;
            else {
                var n = t - e;
                r = new u(n,void 0);
                for (var o = 0; o < n; ++o)
                    r[o] = this[o + e]
            }
            return r
        }
        ,
        u.prototype.readUIntLE = function(e, t, r) {
            e |= 0,
            t |= 0,
            r || P(e, t, this.length);
            for (var i = this[e], n = 1, o = 0; ++o < t && (n *= 256); )
                i += this[e + o] * n;
            return i
        }
        ,
        u.prototype.readUIntBE = function(e, t, r) {
            e |= 0,
            t |= 0,
            r || P(e, t, this.length);
            for (var i = this[e + --t], n = 1; t > 0 && (n *= 256); )
                i += this[e + --t] * n;
            return i
        }
        ,
        u.prototype.readUInt8 = function(e, t) {
            return t || P(e, 1, this.length),
            this[e]
        }
        ,
        u.prototype.readUInt16LE = function(e, t) {
            return t || P(e, 2, this.length),
            this[e] | this[e + 1] << 8
        }
        ,
        u.prototype.readUInt16BE = function(e, t) {
            return t || P(e, 2, this.length),
            this[e] << 8 | this[e + 1]
        }
        ,
        u.prototype.readUInt32LE = function(e, t) {
            return t || P(e, 4, this.length),
            (this[e] | this[e + 1] << 8 | this[e + 2] << 16) + 16777216 * this[e + 3]
        }
        ,
        u.prototype.readUInt32BE = function(e, t) {
            return t || P(e, 4, this.length),
            16777216 * this[e] + (this[e + 1] << 16 | this[e + 2] << 8 | this[e + 3])
        }
        ,
        u.prototype.readIntLE = function(e, t, r) {
            e |= 0,
            t |= 0,
            r || P(e, t, this.length);
            for (var i = this[e], n = 1, o = 0; ++o < t && (n *= 256); )
                i += this[e + o] * n;
            return i >= (n *= 128) && (i -= Math.pow(2, 8 * t)),
            i
        }
        ,
        u.prototype.readIntBE = function(e, t, r) {
            e |= 0,
            t |= 0,
            r || P(e, t, this.length);
            for (var i = t, n = 1, o = this[e + --i]; i > 0 && (n *= 256); )
                o += this[e + --i] * n;
            return o >= (n *= 128) && (o -= Math.pow(2, 8 * t)),
            o
        }
        ,
        u.prototype.readInt8 = function(e, t) {
            return t || P(e, 1, this.length),
            128 & this[e] ? -1 * (255 - this[e] + 1) : this[e]
        }
        ,
        u.prototype.readInt16LE = function(e, t) {
            t || P(e, 2, this.length);
            var r = this[e] | this[e + 1] << 8;
            return 32768 & r ? 4294901760 | r : r
        }
        ,
        u.prototype.readInt16BE = function(e, t) {
            t || P(e, 2, this.length);
            var r = this[e + 1] | this[e] << 8;
            return 32768 & r ? 4294901760 | r : r
        }
        ,
        u.prototype.readInt32LE = function(e, t) {
            return t || P(e, 4, this.length),
            this[e] | this[e + 1] << 8 | this[e + 2] << 16 | this[e + 3] << 24
        }
        ,
        u.prototype.readInt32BE = function(e, t) {
            return t || P(e, 4, this.length),
            this[e] << 24 | this[e + 1] << 16 | this[e + 2] << 8 | this[e + 3]
        }
        ,
        u.prototype.readFloatLE = function(e, t) {
            return t || P(e, 4, this.length),
            n.read(this, e, !0, 23, 4)
        }
        ,
        u.prototype.readFloatBE = function(e, t) {
            return t || P(e, 4, this.length),
            n.read(this, e, !1, 23, 4)
        }
        ,
        u.prototype.readDoubleLE = function(e, t) {
            return t || P(e, 8, this.length),
            n.read(this, e, !0, 52, 8)
        }
        ,
        u.prototype.readDoubleBE = function(e, t) {
            return t || P(e, 8, this.length),
            n.read(this, e, !1, 52, 8)
        }
        ,
        u.prototype.writeUIntLE = function(e, t, r, i) {
            (e = +e,
            t |= 0,
            r |= 0,
            i) || N(this, e, t, r, Math.pow(2, 8 * r) - 1, 0);
            var n = 1
              , o = 0;
            for (this[t] = 255 & e; ++o < r && (n *= 256); )
                this[t + o] = e / n & 255;
            return t + r
        }
        ,
        u.prototype.writeUIntBE = function(e, t, r, i) {
            (e = +e,
            t |= 0,
            r |= 0,
            i) || N(this, e, t, r, Math.pow(2, 8 * r) - 1, 0);
            var n = r - 1
              , o = 1;
            for (this[t + n] = 255 & e; --n >= 0 && (o *= 256); )
                this[t + n] = e / o & 255;
            return t + r
        }
        ,
        u.prototype.writeUInt8 = function(e, t, r) {
            return e = +e,
            t |= 0,
            r || N(this, e, t, 1, 255, 0),
            u.TYPED_ARRAY_SUPPORT || (e = Math.floor(e)),
            this[t] = 255 & e,
            t + 1
        }
        ,
        u.prototype.writeUInt16LE = function(e, t, r) {
            return e = +e,
            t |= 0,
            r || N(this, e, t, 2, 65535, 0),
            u.TYPED_ARRAY_SUPPORT ? (this[t] = 255 & e,
            this[t + 1] = e >>> 8) : C(this, e, t, !0),
            t + 2
        }
        ,
        u.prototype.writeUInt16BE = function(e, t, r) {
            return e = +e,
            t |= 0,
            r || N(this, e, t, 2, 65535, 0),
            u.TYPED_ARRAY_SUPPORT ? (this[t] = e >>> 8,
            this[t + 1] = 255 & e) : C(this, e, t, !1),
            t + 2
        }
        ,
        u.prototype.writeUInt32LE = function(e, t, r) {
            return e = +e,
            t |= 0,
            r || N(this, e, t, 4, 4294967295, 0),
            u.TYPED_ARRAY_SUPPORT ? (this[t + 3] = e >>> 24,
            this[t + 2] = e >>> 16,
            this[t + 1] = e >>> 8,
            this[t] = 255 & e) : B(this, e, t, !0),
            t + 4
        }
        ,
        u.prototype.writeUInt32BE = function(e, t, r) {
            return e = +e,
            t |= 0,
            r || N(this, e, t, 4, 4294967295, 0),
            u.TYPED_ARRAY_SUPPORT ? (this[t] = e >>> 24,
            this[t + 1] = e >>> 16,
            this[t + 2] = e >>> 8,
            this[t + 3] = 255 & e) : B(this, e, t, !1),
            t + 4
        }
        ,
        u.prototype.writeIntLE = function(e, t, r, i) {
            if (e = +e,
            t |= 0,
            !i) {
                var n = Math.pow(2, 8 * r - 1);
                N(this, e, t, r, n - 1, -n)
            }
            var o = 0
              , a = 1
              , s = 0;
            for (this[t] = 255 & e; ++o < r && (a *= 256); )
                e < 0 && 0 === s && 0 !== this[t + o - 1] && (s = 1),
                this[t + o] = (e / a >> 0) - s & 255;
            return t + r
        }
        ,
        u.prototype.writeIntBE = function(e, t, r, i) {
            if (e = +e,
            t |= 0,
            !i) {
                var n = Math.pow(2, 8 * r - 1);
                N(this, e, t, r, n - 1, -n)
            }
            var o = r - 1
              , a = 1
              , s = 0;
            for (this[t + o] = 255 & e; --o >= 0 && (a *= 256); )
                e < 0 && 0 === s && 0 !== this[t + o + 1] && (s = 1),
                this[t + o] = (e / a >> 0) - s & 255;
            return t + r
        }
        ,
        u.prototype.writeInt8 = function(e, t, r) {
            return e = +e,
            t |= 0,
            r || N(this, e, t, 1, 127, -128),
            u.TYPED_ARRAY_SUPPORT || (e = Math.floor(e)),
            e < 0 && (e = 255 + e + 1),
            this[t] = 255 & e,
            t + 1
        }
        ,
        u.prototype.writeInt16LE = function(e, t, r) {
            return e = +e,
            t |= 0,
            r || N(this, e, t, 2, 32767, -32768),
            u.TYPED_ARRAY_SUPPORT ? (this[t] = 255 & e,
            this[t + 1] = e >>> 8) : C(this, e, t, !0),
            t + 2
        }
        ,
        u.prototype.writeInt16BE = function(e, t, r) {
            return e = +e,
            t |= 0,
            r || N(this, e, t, 2, 32767, -32768),
            u.TYPED_ARRAY_SUPPORT ? (this[t] = e >>> 8,
            this[t + 1] = 255 & e) : C(this, e, t, !1),
            t + 2
        }
        ,
        u.prototype.writeInt32LE = function(e, t, r) {
            return e = +e,
            t |= 0,
            r || N(this, e, t, 4, 2147483647, -2147483648),
            u.TYPED_ARRAY_SUPPORT ? (this[t] = 255 & e,
            this[t + 1] = e >>> 8,
            this[t + 2] = e >>> 16,
            this[t + 3] = e >>> 24) : B(this, e, t, !0),
            t + 4
        }
        ,
        u.prototype.writeInt32BE = function(e, t, r) {
            return e = +e,
            t |= 0,
            r || N(this, e, t, 4, 2147483647, -2147483648),
            e < 0 && (e = 4294967295 + e + 1),
            u.TYPED_ARRAY_SUPPORT ? (this[t] = e >>> 24,
            this[t + 1] = e >>> 16,
            this[t + 2] = e >>> 8,
            this[t + 3] = 255 & e) : B(this, e, t, !1),
            t + 4
        }
        ,
        u.prototype.writeFloatLE = function(e, t, r) {
            return L(this, e, t, !0, r)
        }
        ,
        u.prototype.writeFloatBE = function(e, t, r) {
            return L(this, e, t, !1, r)
        }
        ,
        u.prototype.writeDoubleLE = function(e, t, r) {
            return j(this, e, t, !0, r)
        }
        ,
        u.prototype.writeDoubleBE = function(e, t, r) {
            return j(this, e, t, !1, r)
        }
        ,
        u.prototype.copy = function(e, t, r, i) {
            if (r || (r = 0),
            i || 0 === i || (i = this.length),
            t >= e.length && (t = e.length),
            t || (t = 0),
            i > 0 && i < r && (i = r),
            i === r)
                return 0;
            if (0 === e.length || 0 === this.length)
                return 0;
            if (t < 0)
                throw new RangeError("targetStart out of bounds");
            if (r < 0 || r >= this.length)
                throw new RangeError("sourceStart out of bounds");
            if (i < 0)
                throw new RangeError("sourceEnd out of bounds");
            i > this.length && (i = this.length),
            e.length - t < i - r && (i = e.length - t + r);
            var n, o = i - r;
            if (this === e && r < t && t < i)
                for (n = o - 1; n >= 0; --n)
                    e[n + t] = this[n + r];
            else if (o < 1e3 || !u.TYPED_ARRAY_SUPPORT)
                for (n = 0; n < o; ++n)
                    e[n + t] = this[n + r];
            else
                Uint8Array.prototype.set.call(e, this.subarray(r, r + o), t);
            return o
        }
        ,
        u.prototype.fill = function(e, t, r, i) {
            if ("string" == typeof e) {
                if ("string" == typeof t ? (i = t,
                t = 0,
                r = this.length) : "string" == typeof r && (i = r,
                r = this.length),
                1 === e.length) {
                    var n = e.charCodeAt(0);
                    n < 256 && (e = n)
                }
                if (void 0 !== i && "string" != typeof i)
                    throw new TypeError("encoding must be a string");
                if ("string" == typeof i && !u.isEncoding(i))
                    throw new TypeError("Unknown encoding: " + i)
            } else
                "number" == typeof e && (e &= 255);
            if (t < 0 || this.length < t || this.length < r)
                throw new RangeError("Out of range index");
            if (r <= t)
                return this;
            var o;
            if (t >>>= 0,
            r = void 0 === r ? this.length : r >>> 0,
            e || (e = 0),
            "number" == typeof e)
                for (o = t; o < r; ++o)
                    this[o] = e;
            else {
                var a = u.isBuffer(e) ? e : U(new u(e,i).toString())
                  , s = a.length;
                for (o = 0; o < r - t; ++o)
                    this[o + t] = a[o % s]
            }
            return this
        }
        ;
        var D = /[^+\/0-9A-Za-z-_]/g;
        function z(e) {
            return e < 16 ? "0" + e.toString(16) : e.toString(16)
        }
        function U(e, t) {
            var r;
            t = t || 1 / 0;
            for (var i = e.length, n = null, o = [], a = 0; a < i; ++a) {
                if ((r = e.charCodeAt(a)) > 55295 && r < 57344) {
                    if (!n) {
                        if (r > 56319) {
                            (t -= 3) > -1 && o.push(239, 191, 189);
                            continue
                        }
                        if (a + 1 === i) {
                            (t -= 3) > -1 && o.push(239, 191, 189);
                            continue
                        }
                        n = r;
                        continue
                    }
                    if (r < 56320) {
                        (t -= 3) > -1 && o.push(239, 191, 189),
                        n = r;
                        continue
                    }
                    r = 65536 + (n - 55296 << 10 | r - 56320)
                } else
                    n && (t -= 3) > -1 && o.push(239, 191, 189);
                if (n = null,
                r < 128) {
                    if ((t -= 1) < 0)
                        break;
                    o.push(r)
                } else if (r < 2048) {
                    if ((t -= 2) < 0)
                        break;
                    o.push(r >> 6 | 192, 63 & r | 128)
                } else if (r < 65536) {
                    if ((t -= 3) < 0)
                        break;
                    o.push(r >> 12 | 224, r >> 6 & 63 | 128, 63 & r | 128)
                } else {
                    if (!(r < 1114112))
                        throw new Error("Invalid code point");
                    if ((t -= 4) < 0)
                        break;
                    o.push(r >> 18 | 240, r >> 12 & 63 | 128, r >> 6 & 63 | 128, 63 & r | 128)
                }
            }
            return o
        }
        function q(e) {
            return i.toByteArray(function(e) {
                if ((e = function(e) {
                    return e.trim ? e.trim() : e.replace(/^\s+|\s+$/g, "")
                }(e).replace(D, "")).length < 2)
                    return "";
                for (; e.length % 4 != 0; )
                    e += "=";
                return e
            }(e))
        }
        function K(e, t, r, i) {
            for (var n = 0; n < i && !(n + r >= t.length || n >= e.length); ++n)
                t[n + r] = e[n];
            return n
        }
    }
    ).call(this, r(13))
}
, function(e, t, r) {
    "use strict";
    r.r(t),
    r.d(t, "HARMONY_REQUEST_TYPE", (function() {
        return i
    }
    )),
    r.d(t, "HARMONY_RESPONSE_TYPE", (function() {
        return n
    }
    )),
    r.d(t, "FACTORYTYPE", (function() {
        return o
    }
    )),
    r.d(t, "TRANSACTIONTYPE", (function() {
        return a
    }
    )),
    r.d(t, "TRANSACTIONCLASS", (function() {
        return s
    }
    )),
    r.d(t, "GET_TAB_ID_INNER_EVENT_REQUEST", (function() {
        return u
    }
    )),
    r.d(t, "ONEWALLET_SERVICE_EVENT_REQUEST", (function() {
        return f
    }
    )),
    r.d(t, "ONEWALLET_SERVICE_EVENT_RESPONSE", (function() {
        return c
    }
    )),
    r.d(t, "THIRDPARTY_FORGET_IDENTITY_REQUEST", (function() {
        return h
    }
    )),
    r.d(t, "THIRDPARTY_GET_ACCOUNT_REQUEST", (function() {
        return l
    }
    )),
    r.d(t, "THIRDPARTY_PERSONAL_SIGN_REQUEST", (function() {
        return d
    }
    )),
    r.d(t, "THIRDPARTY_SIGN_REQUEST", (function() {
        return p
    }
    )),
    r.d(t, "POPUP_CLOSED", (function() {
        return b
    }
    )),
    r.d(t, "THIRDPARTY_SIGNATURE_KEY_SUCCESS_RESPONSE", (function() {
        return m
    }
    )),
    r.d(t, "THIRDPARTY_SIGNATURE_KEY_REJECT_RESPONSE", (function() {
        return g
    }
    )),
    r.d(t, "THIRDPARTY_FORGET_IDENTITY_REQUEST_RESPONSE", (function() {
        return v
    }
    )),
    r.d(t, "THIRDPARTY_GET_ACCOUNT_SUCCESS_RESPONSE", (function() {
        return y
    }
    )),
    r.d(t, "THIRDPARTY_GET_ACCOUNT_REJECT_RESPONSE", (function() {
        return w
    }
    )),
    r.d(t, "THIRDPARTY_GET_ACCOUNT_REQUEST_RESPONSE", (function() {
        return _
    }
    )),
    r.d(t, "THIRDPARTY_PERSONAL_SIGN_REQUEST_RESPONSE", (function() {
        return E
    }
    )),
    r.d(t, "THIRDPARTY_PERSONAL_SIGN_SUCCESS_RESPONSE", (function() {
        return M
    }
    )),
    r.d(t, "THIRDPARTY_PERSONAL_SIGN_REJECT_RESPONSE", (function() {
        return S
    }
    )),
    r.d(t, "THIRDPARTY_SIGN_REQUEST_RESPONSE", (function() {
        return A
    }
    )),
    r.d(t, "GET_WALLET_SERVICE_STATE", (function() {
        return k
    }
    )),
    r.d(t, "THIRDPARTY_SIGN_CONNECT", (function() {
        return x
    }
    )),
    r.d(t, "THIRDPARTY_PERSONAL_SIGN_CONNECT", (function() {
        return R
    }
    )),
    r.d(t, "APP_CONNECT", (function() {
        return I
    }
    )),
    r.d(t, "THIRDPARTY_GET_ACCOUNT_CONNECT", (function() {
        return T
    }
    )),
    r.d(t, "FROM_BACK_TO_POPUP", (function() {
        return P
    }
    )),
    r.d(t, "CLOSE_WINDOW", (function() {
        return N
    }
    )),
    r.d(t, "LOGIN_REJECT", (function() {
        return C
    }
    )),
    r.d(t, "SIGN_REJECT", (function() {
        return B
    }
    )),
    r.d(t, "SIGNOUT_SUCCEED", (function() {
        return O
    }
    )),
    r.d(t, "LEDGER_CONFIRM_PREPARE", (function() {
        return L
    }
    )),
    r.d(t, "LEDGER_CONFIRM_SUCCESS", (function() {
        return j
    }
    )),
    r.d(t, "LEDGER_CONFIRM_REJECT", (function() {
        return D
    }
    )),
    r.d(t, "LEDGER_LOCKED", (function() {
        return z
    }
    )),
    r.d(t, "WALLET_LOCKED", (function() {
        return U
    }
    )),
    r.d(t, "NO_ACCOUNTS_ERROR", (function() {
        return q
    }
    )),
    r.d(t, "UNKNOWN_ERROR", (function() {
        return K
    }
    ));
    var i = "TO_ONEWALLET_EXTENSION"
      , n = "FROM_ONEWALLET_EXTENSION"
      , o = {
        TRANSACTION: "TRANSACTION",
        STAKINGTRANSACTION: "STAKINGTRANSACTION"
    }
      , a = {
        SEND: "SEND",
        DELEGATE: "DELEGATE",
        UNDELEGATE: "UNDELEGATE",
        WITHDRAWREWARD: "WITHDRAWREWARD"
    }
      , s = {
        TRANSACTION: "Transaction",
        STAKINGTRANSACTION: "StakingTransaction"
    }
      , u = "GET_TAB_ID_INNER_EVENT_REQUEST"
      , f = "ONEWALLET_SERVICE_EVENT_REQUEST"
      , c = "ONEWALLET_SERVICE_EVENT_RESPONSE"
      , h = "THIRDPARTY_FORGET_IDENTITY_REQUEST"
      , l = "THIRDPARTY_GET_ACCOUNT_REQUEST"
      , d = "THIRDPARTY_PERSONAL_SIGN_REQUEST"
      , p = "THIRDPARTY_SIGN_REQUEST"
      , b = "POPUP_CLOSED"
      , m = "THIRDPARTY_SIGNATURE_KEY_SUCCESS_RESPONSE"
      , g = "THIRDPARTY_SIGNATURE_KEY_REJECT_RESPONSE"
      , v = "THIRDPARTY_FORGET_IDENTITY_REQUEST_RESPONSE"
      , y = "THIRDPARTY_GET_ACCOUNT_SUCCESS_RESPONSE"
      , w = "THIRDPARTY_GET_ACCOUNT_REJECT_RESPONSE"
      , _ = "THIRDPARTY_GET_ACCOUNT_REQUEST_RESPONSE"
      , E = "THIRDPARTY_PERSONAL_SIGN_REQUEST_RESPONSE"
      , M = "THIRDPARTY_PERSONAL_SIGN_SUCCESS_RESPONSE"
      , S = "THIRDPARTY_PERSONAL_SIGN_REJECT_RESPONSE"
      , A = "THIRDPARTY_SIGN_REQUEST_RESPONSE"
      , k = "GET_WALLET_SERVICE_STATE"
      , x = "THIRDPARTY_SIGN_CONNECT"
      , R = "THIRDPARTY_PERSONAL_SIGN_CONNECT"
      , I = "APP_CONNECT"
      , T = "THIRDPARTY_GET_ACCOUNT_CONNECT"
      , P = "FROM_BACK_TO_POPUP"
      , N = "CLOSE_WINDOW"
      , C = "User rejected login request"
      , B = "User rejected sign transaction request"
      , O = "Successfully signed out"
      , L = "Please confirm the transaction on the Ledger"
      , j = "Sign transaction approved by the ledger"
      , D = "Sign transaction rejected by the ledger"
      , z = "Ledger wallet is locked or Harmony app is not opened."
      , U = "The wallet is locked. You should unlock it first in the extension."
      , q = "No accounts. You should create the account first in the extension."
      , K = "Request failed. Something went wrong."
}
, function(e, t, r) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    var i = r(11);
    i.__exportStar(r(77), t),
    i.__exportStar(r(209), t),
    i.__exportStar(r(211), t),
    i.__exportStar(r(212), t),
    i.__exportStar(r(213), t)
}
, function(e, t, r) {
    "use strict";
    r.r(t),
    r.d(t, "__extends", (function() {
        return n
    }
    )),
    r.d(t, "__assign", (function() {
        return o
    }
    )),
    r.d(t, "__rest", (function() {
        return a
    }
    )),
    r.d(t, "__decorate", (function() {
        return s
    }
    )),
    r.d(t, "__param", (function() {
        return u
    }
    )),
    r.d(t, "__metadata", (function() {
        return f
    }
    )),
    r.d(t, "__awaiter", (function() {
        return c
    }
    )),
    r.d(t, "__generator", (function() {
        return h
    }
    )),
    r.d(t, "__createBinding", (function() {
        return l
    }
    )),
    r.d(t, "__exportStar", (function() {
        return d
    }
    )),
    r.d(t, "__values", (function() {
        return p
    }
    )),
    r.d(t, "__read", (function() {
        return b
    }
    )),
    r.d(t, "__spread", (function() {
        return m
    }
    )),
    r.d(t, "__spreadArrays", (function() {
        return g
    }
    )),
    r.d(t, "__await", (function() {
        return v
    }
    )),
    r.d(t, "__asyncGenerator", (function() {
        return y
    }
    )),
    r.d(t, "__asyncDelegator", (function() {
        return w
    }
    )),
    r.d(t, "__asyncValues", (function() {
        return _
    }
    )),
    r.d(t, "__makeTemplateObject", (function() {
        return E
    }
    )),
    r.d(t, "__importStar", (function() {
        return M
    }
    )),
    r.d(t, "__importDefault", (function() {
        return S
    }
    )),
    r.d(t, "__classPrivateFieldGet", (function() {
        return A
    }
    )),
    r.d(t, "__classPrivateFieldSet", (function() {
        return k
    }
    ));
    /*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
    var i = function(e, t) {
        return (i = Object.setPrototypeOf || {
            __proto__: []
        }instanceof Array && function(e, t) {
            e.__proto__ = t
        }
        || function(e, t) {
            for (var r in t)
                t.hasOwnProperty(r) && (e[r] = t[r])
        }
        )(e, t)
    };
    function n(e, t) {
        function r() {
            this.constructor = e
        }
        i(e, t),
        e.prototype = null === t ? Object.create(t) : (r.prototype = t.prototype,
        new r)
    }
    var o = function() {
        return (o = Object.assign || function(e) {
            for (var t, r = 1, i = arguments.length; r < i; r++)
                for (var n in t = arguments[r])
                    Object.prototype.hasOwnProperty.call(t, n) && (e[n] = t[n]);
            return e
        }
        ).apply(this, arguments)
    };
    function a(e, t) {
        var r = {};
        for (var i in e)
            Object.prototype.hasOwnProperty.call(e, i) && t.indexOf(i) < 0 && (r[i] = e[i]);
        if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
            var n = 0;
            for (i = Object.getOwnPropertySymbols(e); n < i.length; n++)
                t.indexOf(i[n]) < 0 && Object.prototype.propertyIsEnumerable.call(e, i[n]) && (r[i[n]] = e[i[n]])
        }
        return r
    }
    function s(e, t, r, i) {
        var n, o = arguments.length, a = o < 3 ? t : null === i ? i = Object.getOwnPropertyDescriptor(t, r) : i;
        if ("object" == typeof Reflect && "function" == typeof Reflect.decorate)
            a = Reflect.decorate(e, t, r, i);
        else
            for (var s = e.length - 1; s >= 0; s--)
                (n = e[s]) && (a = (o < 3 ? n(a) : o > 3 ? n(t, r, a) : n(t, r)) || a);
        return o > 3 && a && Object.defineProperty(t, r, a),
        a
    }
    function u(e, t) {
        return function(r, i) {
            t(r, i, e)
        }
    }
    function f(e, t) {
        if ("object" == typeof Reflect && "function" == typeof Reflect.metadata)
            return Reflect.metadata(e, t)
    }
    function c(e, t, r, i) {
        return new (r || (r = Promise))((function(n, o) {
            function a(e) {
                try {
                    u(i.next(e))
                } catch (e) {
                    o(e)
                }
            }
            function s(e) {
                try {
                    u(i.throw(e))
                } catch (e) {
                    o(e)
                }
            }
            function u(e) {
                var t;
                e.done ? n(e.value) : (t = e.value,
                t instanceof r ? t : new r((function(e) {
                    e(t)
                }
                ))).then(a, s)
            }
            u((i = i.apply(e, t || [])).next())
        }
        ))
    }
    function h(e, t) {
        var r, i, n, o, a = {
            label: 0,
            sent: function() {
                if (1 & n[0])
                    throw n[1];
                return n[1]
            },
            trys: [],
            ops: []
        };
        return o = {
            next: s(0),
            throw: s(1),
            return: s(2)
        },
        "function" == typeof Symbol && (o[Symbol.iterator] = function() {
            return this
        }
        ),
        o;
        function s(o) {
            return function(s) {
                return function(o) {
                    if (r)
                        throw new TypeError("Generator is already executing.");
                    for (; a; )
                        try {
                            if (r = 1,
                            i && (n = 2 & o[0] ? i.return : o[0] ? i.throw || ((n = i.return) && n.call(i),
                            0) : i.next) && !(n = n.call(i, o[1])).done)
                                return n;
                            switch (i = 0,
                            n && (o = [2 & o[0], n.value]),
                            o[0]) {
                            case 0:
                            case 1:
                                n = o;
                                break;
                            case 4:
                                return a.label++,
                                {
                                    value: o[1],
                                    done: !1
                                };
                            case 5:
                                a.label++,
                                i = o[1],
                                o = [0];
                                continue;
                            case 7:
                                o = a.ops.pop(),
                                a.trys.pop();
                                continue;
                            default:
                                if (!(n = a.trys,
                                (n = n.length > 0 && n[n.length - 1]) || 6 !== o[0] && 2 !== o[0])) {
                                    a = 0;
                                    continue
                                }
                                if (3 === o[0] && (!n || o[1] > n[0] && o[1] < n[3])) {
                                    a.label = o[1];
                                    break
                                }
                                if (6 === o[0] && a.label < n[1]) {
                                    a.label = n[1],
                                    n = o;
                                    break
                                }
                                if (n && a.label < n[2]) {
                                    a.label = n[2],
                                    a.ops.push(o);
                                    break
                                }
                                n[2] && a.ops.pop(),
                                a.trys.pop();
                                continue
                            }
                            o = t.call(e, a)
                        } catch (e) {
                            o = [6, e],
                            i = 0
                        } finally {
                            r = n = 0
                        }
                    if (5 & o[0])
                        throw o[1];
                    return {
                        value: o[0] ? o[1] : void 0,
                        done: !0
                    }
                }([o, s])
            }
        }
    }
    function l(e, t, r, i) {
        void 0 === i && (i = r),
        e[i] = t[r]
    }
    function d(e, t) {
        for (var r in e)
            "default" === r || t.hasOwnProperty(r) || (t[r] = e[r])
    }
    function p(e) {
        var t = "function" == typeof Symbol && Symbol.iterator
          , r = t && e[t]
          , i = 0;
        if (r)
            return r.call(e);
        if (e && "number" == typeof e.length)
            return {
                next: function() {
                    return e && i >= e.length && (e = void 0),
                    {
                        value: e && e[i++],
                        done: !e
                    }
                }
            };
        throw new TypeError(t ? "Object is not iterable." : "Symbol.iterator is not defined.")
    }
    function b(e, t) {
        var r = "function" == typeof Symbol && e[Symbol.iterator];
        if (!r)
            return e;
        var i, n, o = r.call(e), a = [];
        try {
            for (; (void 0 === t || t-- > 0) && !(i = o.next()).done; )
                a.push(i.value)
        } catch (e) {
            n = {
                error: e
            }
        } finally {
            try {
                i && !i.done && (r = o.return) && r.call(o)
            } finally {
                if (n)
                    throw n.error
            }
        }
        return a
    }
    function m() {
        for (var e = [], t = 0; t < arguments.length; t++)
            e = e.concat(b(arguments[t]));
        return e
    }
    function g() {
        for (var e = 0, t = 0, r = arguments.length; t < r; t++)
            e += arguments[t].length;
        var i = Array(e)
          , n = 0;
        for (t = 0; t < r; t++)
            for (var o = arguments[t], a = 0, s = o.length; a < s; a++,
            n++)
                i[n] = o[a];
        return i
    }
    function v(e) {
        return this instanceof v ? (this.v = e,
        this) : new v(e)
    }
    function y(e, t, r) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var i, n = r.apply(e, t || []), o = [];
        return i = {},
        a("next"),
        a("throw"),
        a("return"),
        i[Symbol.asyncIterator] = function() {
            return this
        }
        ,
        i;
        function a(e) {
            n[e] && (i[e] = function(t) {
                return new Promise((function(r, i) {
                    o.push([e, t, r, i]) > 1 || s(e, t)
                }
                ))
            }
            )
        }
        function s(e, t) {
            try {
                (r = n[e](t)).value instanceof v ? Promise.resolve(r.value.v).then(u, f) : c(o[0][2], r)
            } catch (e) {
                c(o[0][3], e)
            }
            var r
        }
        function u(e) {
            s("next", e)
        }
        function f(e) {
            s("throw", e)
        }
        function c(e, t) {
            e(t),
            o.shift(),
            o.length && s(o[0][0], o[0][1])
        }
    }
    function w(e) {
        var t, r;
        return t = {},
        i("next"),
        i("throw", (function(e) {
            throw e
        }
        )),
        i("return"),
        t[Symbol.iterator] = function() {
            return this
        }
        ,
        t;
        function i(i, n) {
            t[i] = e[i] ? function(t) {
                return (r = !r) ? {
                    value: v(e[i](t)),
                    done: "return" === i
                } : n ? n(t) : t
            }
            : n
        }
    }
    function _(e) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var t, r = e[Symbol.asyncIterator];
        return r ? r.call(e) : (e = p(e),
        t = {},
        i("next"),
        i("throw"),
        i("return"),
        t[Symbol.asyncIterator] = function() {
            return this
        }
        ,
        t);
        function i(r) {
            t[r] = e[r] && function(t) {
                return new Promise((function(i, n) {
                    (function(e, t, r, i) {
                        Promise.resolve(i).then((function(t) {
                            e({
                                value: t,
                                done: r
                            })
                        }
                        ), t)
                    }
                    )(i, n, (t = e[r](t)).done, t.value)
                }
                ))
            }
        }
    }
    function E(e, t) {
        return Object.defineProperty ? Object.defineProperty(e, "raw", {
            value: t
        }) : e.raw = t,
        e
    }
    function M(e) {
        if (e && e.__esModule)
            return e;
        var t = {};
        if (null != e)
            for (var r in e)
                Object.hasOwnProperty.call(e, r) && (t[r] = e[r]);
        return t.default = e,
        t
    }
    function S(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    function A(e, t) {
        if (!t.has(e))
            throw new TypeError("attempted to get private field on non-instance");
        return t.get(e)
    }
    function k(e, t, r) {
        if (!t.has(e))
            throw new TypeError("attempted to set private field on non-instance");
        return t.set(e, r),
        r
    }
}
, function(e, t, r) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    var i = r(11)
      , n = i.__importDefault(r(214));
    t.hdkey = n.default;
    var o = i.__importDefault(r(317));
    t.bip39 = o.default;
    var a = i.__importDefault(r(7));
    t.BN = a.default,
    i.__exportStar(r(95), t),
    i.__exportStar(r(66), t),
    i.__exportStar(r(328), t),
    i.__exportStar(r(56), t),
    i.__exportStar(r(170), t),
    i.__exportStar(r(97), t),
    i.__exportStar(r(96), t),
    i.__exportStar(r(174), t),
    i.__exportStar(r(336), t)
}
, function(e, t) {
    var r;
    r = function() {
        return this
    }();
    try {
        r = r || new Function("return this")()
    } catch (e) {
        "object" == typeof window && (r = window)
    }
    e.exports = r
}
, function(e, t) {
    var r, i, n = e.exports = {};
    function o() {
        throw new Error("setTimeout has not been defined")
    }
    function a() {
        throw new Error("clearTimeout has not been defined")
    }
    function s(e) {
        if (r === setTimeout)
            return setTimeout(e, 0);
        if ((r === o || !r) && setTimeout)
            return r = setTimeout,
            setTimeout(e, 0);
        try {
            return r(e, 0)
        } catch (t) {
            try {
                return r.call(null, e, 0)
            } catch (t) {
                return r.call(this, e, 0)
            }
        }
    }
    !function() {
        try {
            r = "function" == typeof setTimeout ? setTimeout : o
        } catch (e) {
            r = o
        }
        try {
            i = "function" == typeof clearTimeout ? clearTimeout : a
        } catch (e) {
            i = a
        }
    }();
    var u, f = [], c = !1, h = -1;
    function l() {
        c && u && (c = !1,
        u.length ? f = u.concat(f) : h = -1,
        f.length && d())
    }
    function d() {
        if (!c) {
            var e = s(l);
            c = !0;
            for (var t = f.length; t; ) {
                for (u = f,
                f = []; ++h < t; )
                    u && u[h].run();
                h = -1,
                t = f.length
            }
            u = null,
            c = !1,
            function(e) {
                if (i === clearTimeout)
                    return clearTimeout(e);
                if ((i === a || !i) && clearTimeout)
                    return i = clearTimeout,
                    clearTimeout(e);
                try {
                    i(e)
                } catch (t) {
                    try {
                        return i.call(null, e)
                    } catch (t) {
                        return i.call(this, e)
                    }
                }
            }(e)
        }
    }
    function p(e, t) {
        this.fun = e,
        this.array = t
    }
    function b() {}
    n.nextTick = function(e) {
        var t = new Array(arguments.length - 1);
        if (arguments.length > 1)
            for (var r = 1; r < arguments.length; r++)
                t[r - 1] = arguments[r];
        f.push(new p(e,t)),
        1 !== f.length || c || s(d)
    }
    ,
    p.prototype.run = function() {
        this.fun.apply(null, this.array)
    }
    ,
    n.title = "browser",
    n.browser = !0,
    n.env = {},
    n.argv = [],
    n.version = "",
    n.versions = {},
    n.on = b,
    n.addListener = b,
    n.once = b,
    n.off = b,
    n.removeListener = b,
    n.removeAllListeners = b,
    n.emit = b,
    n.prependListener = b,
    n.prependOnceListener = b,
    n.listeners = function(e) {
        return []
    }
    ,
    n.binding = function(e) {
        throw new Error("process.binding is not supported")
    }
    ,
    n.cwd = function() {
        return "/"
    }
    ,
    n.chdir = function(e) {
        throw new Error("process.chdir is not supported")
    }
    ,
    n.umask = function() {
        return 0
    }
}
, , , , function(e, t) {
    function r(e, t) {
        if (!e)
            throw new Error(t || "Assertion failed")
    }
    e.exports = r,
    r.equal = function(e, t, r) {
        if (e != t)
            throw new Error(r || "Assertion failed: " + e + " != " + t)
    }
}
, , , , function(e, t, r) {
    "use strict";
    var i = t
      , n = r(7)
      , o = r(18)
      , a = r(153);
    i.assert = o,
    i.toArray = a.toArray,
    i.zero2 = a.zero2,
    i.toHex = a.toHex,
    i.encode = a.encode,
    i.getNAF = function(e, t, r) {
        var i = new Array(Math.max(e.bitLength(), r) + 1);
        i.fill(0);
        for (var n = 1 << t + 1, o = e.clone(), a = 0; a < i.length; a++) {
            var s, u = o.andln(n - 1);
            o.isOdd() ? (s = u > (n >> 1) - 1 ? (n >> 1) - u : u,
            o.isubn(s)) : s = 0,
            i[a] = s,
            o.iushrn(1)
        }
        return i
    }
    ,
    i.getJSF = function(e, t) {
        var r = [[], []];
        e = e.clone(),
        t = t.clone();
        for (var i, n = 0, o = 0; e.cmpn(-n) > 0 || t.cmpn(-o) > 0; ) {
            var a, s, u = e.andln(3) + n & 3, f = t.andln(3) + o & 3;
            3 === u && (u = -1),
            3 === f && (f = -1),
            a = 0 == (1 & u) ? 0 : 3 !== (i = e.andln(7) + n & 7) && 5 !== i || 2 !== f ? u : -u,
            r[0].push(a),
            s = 0 == (1 & f) ? 0 : 3 !== (i = t.andln(7) + o & 7) && 5 !== i || 2 !== u ? f : -f,
            r[1].push(s),
            2 * n === a + 1 && (n = 1 - n),
            2 * o === s + 1 && (o = 1 - o),
            e.iushrn(1),
            t.iushrn(1)
        }
        return r
    }
    ,
    i.cachedProperty = function(e, t, r) {
        var i = "_" + t;
        e.prototype[t] = function() {
            return void 0 !== this[i] ? this[i] : this[i] = r.call(this)
        }
    }
    ,
    i.parseBytes = function(e) {
        return "string" == typeof e ? i.toArray(e, "hex") : e
    }
    ,
    i.intFromLE = function(e) {
        return new n(e,"hex","le")
    }
}
, , , , function(e, t, r) {
    "use strict";
    var i = r(18)
      , n = r(4);
    function o(e, t) {
        return 55296 == (64512 & e.charCodeAt(t)) && (!(t < 0 || t + 1 >= e.length) && 56320 == (64512 & e.charCodeAt(t + 1)))
    }
    function a(e) {
        return (e >>> 24 | e >>> 8 & 65280 | e << 8 & 16711680 | (255 & e) << 24) >>> 0
    }
    function s(e) {
        return 1 === e.length ? "0" + e : e
    }
    function u(e) {
        return 7 === e.length ? "0" + e : 6 === e.length ? "00" + e : 5 === e.length ? "000" + e : 4 === e.length ? "0000" + e : 3 === e.length ? "00000" + e : 2 === e.length ? "000000" + e : 1 === e.length ? "0000000" + e : e
    }
    t.inherits = n,
    t.toArray = function(e, t) {
        if (Array.isArray(e))
            return e.slice();
        if (!e)
            return [];
        var r = [];
        if ("string" == typeof e)
            if (t) {
                if ("hex" === t)
                    for ((e = e.replace(/[^a-z0-9]+/gi, "")).length % 2 != 0 && (e = "0" + e),
                    n = 0; n < e.length; n += 2)
                        r.push(parseInt(e[n] + e[n + 1], 16))
            } else
                for (var i = 0, n = 0; n < e.length; n++) {
                    var a = e.charCodeAt(n);
                    a < 128 ? r[i++] = a : a < 2048 ? (r[i++] = a >> 6 | 192,
                    r[i++] = 63 & a | 128) : o(e, n) ? (a = 65536 + ((1023 & a) << 10) + (1023 & e.charCodeAt(++n)),
                    r[i++] = a >> 18 | 240,
                    r[i++] = a >> 12 & 63 | 128,
                    r[i++] = a >> 6 & 63 | 128,
                    r[i++] = 63 & a | 128) : (r[i++] = a >> 12 | 224,
                    r[i++] = a >> 6 & 63 | 128,
                    r[i++] = 63 & a | 128)
                }
        else
            for (n = 0; n < e.length; n++)
                r[n] = 0 | e[n];
        return r
    }
    ,
    t.toHex = function(e) {
        for (var t = "", r = 0; r < e.length; r++)
            t += s(e[r].toString(16));
        return t
    }
    ,
    t.htonl = a,
    t.toHex32 = function(e, t) {
        for (var r = "", i = 0; i < e.length; i++) {
            var n = e[i];
            "little" === t && (n = a(n)),
            r += u(n.toString(16))
        }
        return r
    }
    ,
    t.zero2 = s,
    t.zero8 = u,
    t.join32 = function(e, t, r, n) {
        var o = r - t;
        i(o % 4 == 0);
        for (var a = new Array(o / 4), s = 0, u = t; s < a.length; s++,
        u += 4) {
            var f;
            f = "big" === n ? e[u] << 24 | e[u + 1] << 16 | e[u + 2] << 8 | e[u + 3] : e[u + 3] << 24 | e[u + 2] << 16 | e[u + 1] << 8 | e[u],
            a[s] = f >>> 0
        }
        return a
    }
    ,
    t.split32 = function(e, t) {
        for (var r = new Array(4 * e.length), i = 0, n = 0; i < e.length; i++,
        n += 4) {
            var o = e[i];
            "big" === t ? (r[n] = o >>> 24,
            r[n + 1] = o >>> 16 & 255,
            r[n + 2] = o >>> 8 & 255,
            r[n + 3] = 255 & o) : (r[n + 3] = o >>> 24,
            r[n + 2] = o >>> 16 & 255,
            r[n + 1] = o >>> 8 & 255,
            r[n] = 255 & o)
        }
        return r
    }
    ,
    t.rotr32 = function(e, t) {
        return e >>> t | e << 32 - t
    }
    ,
    t.rotl32 = function(e, t) {
        return e << t | e >>> 32 - t
    }
    ,
    t.sum32 = function(e, t) {
        return e + t >>> 0
    }
    ,
    t.sum32_3 = function(e, t, r) {
        return e + t + r >>> 0
    }
    ,
    t.sum32_4 = function(e, t, r, i) {
        return e + t + r + i >>> 0
    }
    ,
    t.sum32_5 = function(e, t, r, i, n) {
        return e + t + r + i + n >>> 0
    }
    ,
    t.sum64 = function(e, t, r, i) {
        var n = e[t]
          , o = i + e[t + 1] >>> 0
          , a = (o < i ? 1 : 0) + r + n;
        e[t] = a >>> 0,
        e[t + 1] = o
    }
    ,
    t.sum64_hi = function(e, t, r, i) {
        return (t + i >>> 0 < t ? 1 : 0) + e + r >>> 0
    }
    ,
    t.sum64_lo = function(e, t, r, i) {
        return t + i >>> 0
    }
    ,
    t.sum64_4_hi = function(e, t, r, i, n, o, a, s) {
        var u = 0
          , f = t;
        return u += (f = f + i >>> 0) < t ? 1 : 0,
        u += (f = f + o >>> 0) < o ? 1 : 0,
        e + r + n + a + (u += (f = f + s >>> 0) < s ? 1 : 0) >>> 0
    }
    ,
    t.sum64_4_lo = function(e, t, r, i, n, o, a, s) {
        return t + i + o + s >>> 0
    }
    ,
    t.sum64_5_hi = function(e, t, r, i, n, o, a, s, u, f) {
        var c = 0
          , h = t;
        return c += (h = h + i >>> 0) < t ? 1 : 0,
        c += (h = h + o >>> 0) < o ? 1 : 0,
        c += (h = h + s >>> 0) < s ? 1 : 0,
        e + r + n + a + u + (c += (h = h + f >>> 0) < f ? 1 : 0) >>> 0
    }
    ,
    t.sum64_5_lo = function(e, t, r, i, n, o, a, s, u, f) {
        return t + i + o + s + f >>> 0
    }
    ,
    t.rotr64_hi = function(e, t, r) {
        return (t << 32 - r | e >>> r) >>> 0
    }
    ,
    t.rotr64_lo = function(e, t, r) {
        return (e << 32 - r | t >>> r) >>> 0
    }
    ,
    t.shr64_hi = function(e, t, r) {
        return e >>> r
    }
    ,
    t.shr64_lo = function(e, t, r) {
        return (e << 32 - r | t >>> r) >>> 0
    }
}
, , , function(e, t, r) {
    "use strict";
    var i = r(4)
      , n = r(78)
      , o = r(69)
      , a = r(81)
      , s = r(30);
    function u(e) {
        s.call(this, "digest"),
        this._hash = e
    }
    i(u, s),
    u.prototype._update = function(e) {
        this._hash.update(e)
    }
    ,
    u.prototype._final = function() {
        return this._hash.digest()
    }
    ,
    e.exports = function(e) {
        return "md5" === (e = e.toLowerCase()) ? new n : "rmd160" === e || "ripemd160" === e ? new o : new u(a(e))
    }
}
, function(e, t, r) {
    var i = r(5).Buffer
      , n = r(180).Transform
      , o = r(34).StringDecoder;
    function a(e) {
        n.call(this),
        this.hashMode = "string" == typeof e,
        this.hashMode ? this[e] = this._finalOrDigest : this.final = this._finalOrDigest,
        this._final && (this.__final = this._final,
        this._final = null),
        this._decoder = null,
        this._encoding = null
    }
    r(4)(a, n),
    a.prototype.update = function(e, t, r) {
        "string" == typeof e && (e = i.from(e, t));
        var n = this._update(e);
        return this.hashMode ? this : (r && (n = this._toString(n, r)),
        n)
    }
    ,
    a.prototype.setAutoPadding = function() {}
    ,
    a.prototype.getAuthTag = function() {
        throw new Error("trying to get auth tag in unsupported state")
    }
    ,
    a.prototype.setAuthTag = function() {
        throw new Error("trying to set auth tag in unsupported state")
    }
    ,
    a.prototype.setAAD = function() {
        throw new Error("trying to set aad in unsupported state")
    }
    ,
    a.prototype._transform = function(e, t, r) {
        var i;
        try {
            this.hashMode ? this._update(e) : this.push(this._update(e))
        } catch (e) {
            i = e
        } finally {
            r(i)
        }
    }
    ,
    a.prototype._flush = function(e) {
        var t;
        try {
            this.push(this.__final())
        } catch (e) {
            t = e
        }
        e(t)
    }
    ,
    a.prototype._finalOrDigest = function(e) {
        var t = this.__final() || i.alloc(0);
        return e && (t = this._toString(t, e, !0)),
        t
    }
    ,
    a.prototype._toString = function(e, t, r) {
        if (this._decoder || (this._decoder = new o(t),
        this._encoding = t),
        this._encoding !== t)
            throw new Error("can't switch encodings");
        var i = this._decoder.write(e);
        return r && (i += this._decoder.end()),
        i
    }
    ,
    e.exports = a
}
, function(e, t, r) {
    "use strict";
    var i, n = "object" == typeof Reflect ? Reflect : null, o = n && "function" == typeof n.apply ? n.apply : function(e, t, r) {
        return Function.prototype.apply.call(e, t, r)
    }
    ;
    i = n && "function" == typeof n.ownKeys ? n.ownKeys : Object.getOwnPropertySymbols ? function(e) {
        return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))
    }
    : function(e) {
        return Object.getOwnPropertyNames(e)
    }
    ;
    var a = Number.isNaN || function(e) {
        return e != e
    }
    ;
    function s() {
        s.init.call(this)
    }
    e.exports = s,
    e.exports.once = function(e, t) {
        return new Promise((function(r, i) {
            function n(r) {
                e.removeListener(t, o),
                i(r)
            }
            function o() {
                "function" == typeof e.removeListener && e.removeListener("error", n),
                r([].slice.call(arguments))
            }
            g(e, t, o, {
                once: !0
            }),
            "error" !== t && function(e, t, r) {
                "function" == typeof e.on && g(e, "error", t, r)
            }(e, n, {
                once: !0
            })
        }
        ))
    }
    ,
    s.EventEmitter = s,
    s.prototype._events = void 0,
    s.prototype._eventsCount = 0,
    s.prototype._maxListeners = void 0;
    var u = 10;
    function f(e) {
        if ("function" != typeof e)
            throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof e)
    }
    function c(e) {
        return void 0 === e._maxListeners ? s.defaultMaxListeners : e._maxListeners
    }
    function h(e, t, r, i) {
        var n, o, a, s;
        if (f(r),
        void 0 === (o = e._events) ? (o = e._events = Object.create(null),
        e._eventsCount = 0) : (void 0 !== o.newListener && (e.emit("newListener", t, r.listener ? r.listener : r),
        o = e._events),
        a = o[t]),
        void 0 === a)
            a = o[t] = r,
            ++e._eventsCount;
        else if ("function" == typeof a ? a = o[t] = i ? [r, a] : [a, r] : i ? a.unshift(r) : a.push(r),
        (n = c(e)) > 0 && a.length > n && !a.warned) {
            a.warned = !0;
            var u = new Error("Possible EventEmitter memory leak detected. " + a.length + " " + String(t) + " listeners added. Use emitter.setMaxListeners() to increase limit");
            u.name = "MaxListenersExceededWarning",
            u.emitter = e,
            u.type = t,
            u.count = a.length,
            s = u,
            console && console.warn && console.warn(s)
        }
        return e
    }
    function l() {
        if (!this.fired)
            return this.target.removeListener(this.type, this.wrapFn),
            this.fired = !0,
            0 === arguments.length ? this.listener.call(this.target) : this.listener.apply(this.target, arguments)
    }
    function d(e, t, r) {
        var i = {
            fired: !1,
            wrapFn: void 0,
            target: e,
            type: t,
            listener: r
        }
          , n = l.bind(i);
        return n.listener = r,
        i.wrapFn = n,
        n
    }
    function p(e, t, r) {
        var i = e._events;
        if (void 0 === i)
            return [];
        var n = i[t];
        return void 0 === n ? [] : "function" == typeof n ? r ? [n.listener || n] : [n] : r ? function(e) {
            for (var t = new Array(e.length), r = 0; r < t.length; ++r)
                t[r] = e[r].listener || e[r];
            return t
        }(n) : m(n, n.length)
    }
    function b(e) {
        var t = this._events;
        if (void 0 !== t) {
            var r = t[e];
            if ("function" == typeof r)
                return 1;
            if (void 0 !== r)
                return r.length
        }
        return 0
    }
    function m(e, t) {
        for (var r = new Array(t), i = 0; i < t; ++i)
            r[i] = e[i];
        return r
    }
    function g(e, t, r, i) {
        if ("function" == typeof e.on)
            i.once ? e.once(t, r) : e.on(t, r);
        else {
            if ("function" != typeof e.addEventListener)
                throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof e);
            e.addEventListener(t, (function n(o) {
                i.once && e.removeEventListener(t, n),
                r(o)
            }
            ))
        }
    }
    Object.defineProperty(s, "defaultMaxListeners", {
        enumerable: !0,
        get: function() {
            return u
        },
        set: function(e) {
            if ("number" != typeof e || e < 0 || a(e))
                throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + e + ".");
            u = e
        }
    }),
    s.init = function() {
        void 0 !== this._events && this._events !== Object.getPrototypeOf(this)._events || (this._events = Object.create(null),
        this._eventsCount = 0),
        this._maxListeners = this._maxListeners || void 0
    }
    ,
    s.prototype.setMaxListeners = function(e) {
        if ("number" != typeof e || e < 0 || a(e))
            throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + e + ".");
        return this._maxListeners = e,
        this
    }
    ,
    s.prototype.getMaxListeners = function() {
        return c(this)
    }
    ,
    s.prototype.emit = function(e) {
        for (var t = [], r = 1; r < arguments.length; r++)
            t.push(arguments[r]);
        var i = "error" === e
          , n = this._events;
        if (void 0 !== n)
            i = i && void 0 === n.error;
        else if (!i)
            return !1;
        if (i) {
            var a;
            if (t.length > 0 && (a = t[0]),
            a instanceof Error)
                throw a;
            var s = new Error("Unhandled error." + (a ? " (" + a.message + ")" : ""));
            throw s.context = a,
            s
        }
        var u = n[e];
        if (void 0 === u)
            return !1;
        if ("function" == typeof u)
            o(u, this, t);
        else {
            var f = u.length
              , c = m(u, f);
            for (r = 0; r < f; ++r)
                o(c[r], this, t)
        }
        return !0
    }
    ,
    s.prototype.addListener = function(e, t) {
        return h(this, e, t, !1)
    }
    ,
    s.prototype.on = s.prototype.addListener,
    s.prototype.prependListener = function(e, t) {
        return h(this, e, t, !0)
    }
    ,
    s.prototype.once = function(e, t) {
        return f(t),
        this.on(e, d(this, e, t)),
        this
    }
    ,
    s.prototype.prependOnceListener = function(e, t) {
        return f(t),
        this.prependListener(e, d(this, e, t)),
        this
    }
    ,
    s.prototype.removeListener = function(e, t) {
        var r, i, n, o, a;
        if (f(t),
        void 0 === (i = this._events))
            return this;
        if (void 0 === (r = i[e]))
            return this;
        if (r === t || r.listener === t)
            0 == --this._eventsCount ? this._events = Object.create(null) : (delete i[e],
            i.removeListener && this.emit("removeListener", e, r.listener || t));
        else if ("function" != typeof r) {
            for (n = -1,
            o = r.length - 1; o >= 0; o--)
                if (r[o] === t || r[o].listener === t) {
                    a = r[o].listener,
                    n = o;
                    break
                }
            if (n < 0)
                return this;
            0 === n ? r.shift() : function(e, t) {
                for (; t + 1 < e.length; t++)
                    e[t] = e[t + 1];
                e.pop()
            }(r, n),
            1 === r.length && (i[e] = r[0]),
            void 0 !== i.removeListener && this.emit("removeListener", e, a || t)
        }
        return this
    }
    ,
    s.prototype.off = s.prototype.removeListener,
    s.prototype.removeAllListeners = function(e) {
        var t, r, i;
        if (void 0 === (r = this._events))
            return this;
        if (void 0 === r.removeListener)
            return 0 === arguments.length ? (this._events = Object.create(null),
            this._eventsCount = 0) : void 0 !== r[e] && (0 == --this._eventsCount ? this._events = Object.create(null) : delete r[e]),
            this;
        if (0 === arguments.length) {
            var n, o = Object.keys(r);
            for (i = 0; i < o.length; ++i)
                "removeListener" !== (n = o[i]) && this.removeAllListeners(n);
            return this.removeAllListeners("removeListener"),
            this._events = Object.create(null),
            this._eventsCount = 0,
            this
        }
        if ("function" == typeof (t = r[e]))
            this.removeListener(e, t);
        else if (void 0 !== t)
            for (i = t.length - 1; i >= 0; i--)
                this.removeListener(e, t[i]);
        return this
    }
    ,
    s.prototype.listeners = function(e) {
        return p(this, e, !0)
    }
    ,
    s.prototype.rawListeners = function(e) {
        return p(this, e, !1)
    }
    ,
    s.listenerCount = function(e, t) {
        return "function" == typeof e.listenerCount ? e.listenerCount(t) : b.call(e, t)
    }
    ,
    s.prototype.listenerCount = b,
    s.prototype.eventNames = function() {
        return this._eventsCount > 0 ? i(this._events) : []
    }
}
, function(e, t, r) {
    "use strict";
    (function(t, i) {
        var n = r(5).Buffer
          , o = t.crypto || t.msCrypto;
        o && o.getRandomValues ? e.exports = function(e, t) {
            if (e > 4294967295)
                throw new RangeError("requested too many random bytes");
            var r = n.allocUnsafe(e);
            if (e > 0)
                if (e > 65536)
                    for (var a = 0; a < e; a += 65536)
                        o.getRandomValues(r.slice(a, a + 65536));
                else
                    o.getRandomValues(r);
            if ("function" == typeof t)
                return i.nextTick((function() {
                    t(null, r)
                }
                ));
            return r
        }
        : e.exports = function() {
            throw new Error("Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11")
        }
    }
    ).call(this, r(13), r(14))
}
, , function(e, t, r) {
    "use strict";
    var i = r(5).Buffer
      , n = i.isEncoding || function(e) {
        switch ((e = "" + e) && e.toLowerCase()) {
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
        case "raw":
            return !0;
        default:
            return !1
        }
    }
    ;
    function o(e) {
        var t;
        switch (this.encoding = function(e) {
            var t = function(e) {
                if (!e)
                    return "utf8";
                for (var t; ; )
                    switch (e) {
                    case "utf8":
                    case "utf-8":
                        return "utf8";
                    case "ucs2":
                    case "ucs-2":
                    case "utf16le":
                    case "utf-16le":
                        return "utf16le";
                    case "latin1":
                    case "binary":
                        return "latin1";
                    case "base64":
                    case "ascii":
                    case "hex":
                        return e;
                    default:
                        if (t)
                            return;
                        e = ("" + e).toLowerCase(),
                        t = !0
                    }
            }(e);
            if ("string" != typeof t && (i.isEncoding === n || !n(e)))
                throw new Error("Unknown encoding: " + e);
            return t || e
        }(e),
        this.encoding) {
        case "utf16le":
            this.text = u,
            this.end = f,
            t = 4;
            break;
        case "utf8":
            this.fillLast = s,
            t = 4;
            break;
        case "base64":
            this.text = c,
            this.end = h,
            t = 3;
            break;
        default:
            return this.write = l,
            void (this.end = d)
        }
        this.lastNeed = 0,
        this.lastTotal = 0,
        this.lastChar = i.allocUnsafe(t)
    }
    function a(e) {
        return e <= 127 ? 0 : e >> 5 == 6 ? 2 : e >> 4 == 14 ? 3 : e >> 3 == 30 ? 4 : e >> 6 == 2 ? -1 : -2
    }
    function s(e) {
        var t = this.lastTotal - this.lastNeed
          , r = function(e, t, r) {
            if (128 != (192 & t[0]))
                return e.lastNeed = 0,
                "�";
            if (e.lastNeed > 1 && t.length > 1) {
                if (128 != (192 & t[1]))
                    return e.lastNeed = 1,
                    "�";
                if (e.lastNeed > 2 && t.length > 2 && 128 != (192 & t[2]))
                    return e.lastNeed = 2,
                    "�"
            }
        }(this, e);
        return void 0 !== r ? r : this.lastNeed <= e.length ? (e.copy(this.lastChar, t, 0, this.lastNeed),
        this.lastChar.toString(this.encoding, 0, this.lastTotal)) : (e.copy(this.lastChar, t, 0, e.length),
        void (this.lastNeed -= e.length))
    }
    function u(e, t) {
        if ((e.length - t) % 2 == 0) {
            var r = e.toString("utf16le", t);
            if (r) {
                var i = r.charCodeAt(r.length - 1);
                if (i >= 55296 && i <= 56319)
                    return this.lastNeed = 2,
                    this.lastTotal = 4,
                    this.lastChar[0] = e[e.length - 2],
                    this.lastChar[1] = e[e.length - 1],
                    r.slice(0, -1)
            }
            return r
        }
        return this.lastNeed = 1,
        this.lastTotal = 2,
        this.lastChar[0] = e[e.length - 1],
        e.toString("utf16le", t, e.length - 1)
    }
    function f(e) {
        var t = e && e.length ? this.write(e) : "";
        if (this.lastNeed) {
            var r = this.lastTotal - this.lastNeed;
            return t + this.lastChar.toString("utf16le", 0, r)
        }
        return t
    }
    function c(e, t) {
        var r = (e.length - t) % 3;
        return 0 === r ? e.toString("base64", t) : (this.lastNeed = 3 - r,
        this.lastTotal = 3,
        1 === r ? this.lastChar[0] = e[e.length - 1] : (this.lastChar[0] = e[e.length - 2],
        this.lastChar[1] = e[e.length - 1]),
        e.toString("base64", t, e.length - r))
    }
    function h(e) {
        var t = e && e.length ? this.write(e) : "";
        return this.lastNeed ? t + this.lastChar.toString("base64", 0, 3 - this.lastNeed) : t
    }
    function l(e) {
        return e.toString(this.encoding)
    }
    function d(e) {
        return e && e.length ? this.write(e) : ""
    }
    t.StringDecoder = o,
    o.prototype.write = function(e) {
        if (0 === e.length)
            return "";
        var t, r;
        if (this.lastNeed) {
            if (void 0 === (t = this.fillLast(e)))
                return "";
            r = this.lastNeed,
            this.lastNeed = 0
        } else
            r = 0;
        return r < e.length ? t ? t + this.text(e, r) : this.text(e, r) : t || ""
    }
    ,
    o.prototype.end = function(e) {
        var t = e && e.length ? this.write(e) : "";
        return this.lastNeed ? t + "�" : t
    }
    ,
    o.prototype.text = function(e, t) {
        var r = function(e, t, r) {
            var i = t.length - 1;
            if (i < r)
                return 0;
            var n = a(t[i]);
            if (n >= 0)
                return n > 0 && (e.lastNeed = n - 1),
                n;
            if (--i < r || -2 === n)
                return 0;
            if ((n = a(t[i])) >= 0)
                return n > 0 && (e.lastNeed = n - 2),
                n;
            if (--i < r || -2 === n)
                return 0;
            if ((n = a(t[i])) >= 0)
                return n > 0 && (2 === n ? n = 0 : e.lastNeed = n - 3),
                n;
            return 0
        }(this, e, t);
        if (!this.lastNeed)
            return e.toString("utf8", t);
        this.lastTotal = r;
        var i = e.length - (r - this.lastNeed);
        return e.copy(this.lastChar, 0, i),
        e.toString("utf8", t, i)
    }
    ,
    o.prototype.fillLast = function(e) {
        if (this.lastNeed <= e.length)
            return e.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed),
            this.lastChar.toString(this.encoding, 0, this.lastTotal);
        e.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, e.length),
        this.lastNeed -= e.length
    }
}
, function(e, t, r) {
    "use strict";
    var i = r(60)
      , n = Object.keys || function(e) {
        var t = [];
        for (var r in e)
            t.push(r);
        return t
    }
    ;
    e.exports = h;
    var o = Object.create(r(52));
    o.inherits = r(4);
    var a = r(127)
      , s = r(83);
    o.inherits(h, a);
    for (var u = n(s.prototype), f = 0; f < u.length; f++) {
        var c = u[f];
        h.prototype[c] || (h.prototype[c] = s.prototype[c])
    }
    function h(e) {
        if (!(this instanceof h))
            return new h(e);
        a.call(this, e),
        s.call(this, e),
        e && !1 === e.readable && (this.readable = !1),
        e && !1 === e.writable && (this.writable = !1),
        this.allowHalfOpen = !0,
        e && !1 === e.allowHalfOpen && (this.allowHalfOpen = !1),
        this.once("end", l)
    }
    function l() {
        this.allowHalfOpen || this._writableState.ended || i.nextTick(d, this)
    }
    function d(e) {
        e.end()
    }
    Object.defineProperty(h.prototype, "writableHighWaterMark", {
        enumerable: !1,
        get: function() {
            return this._writableState.highWaterMark
        }
    }),
    Object.defineProperty(h.prototype, "destroyed", {
        get: function() {
            return void 0 !== this._readableState && void 0 !== this._writableState && (this._readableState.destroyed && this._writableState.destroyed)
        },
        set: function(e) {
            void 0 !== this._readableState && void 0 !== this._writableState && (this._readableState.destroyed = e,
            this._writableState.destroyed = e)
        }
    }),
    h.prototype._destroy = function(e, t) {
        this.push(null),
        this.end(),
        i.nextTick(t, e)
    }
}
, function(e, t, r) {
    "use strict";
    t.randomBytes = t.rng = t.pseudoRandomBytes = t.prng = r(32),
    t.createHash = t.Hash = r(29),
    t.createHmac = t.Hmac = r(131);
    var i = r(242)
      , n = Object.keys(i)
      , o = ["sha1", "sha224", "sha256", "sha384", "sha512", "md5", "rmd160"].concat(n);
    t.getHashes = function() {
        return o
    }
    ;
    var a = r(61);
    t.pbkdf2 = a.pbkdf2,
    t.pbkdf2Sync = a.pbkdf2Sync;
    var s = r(244);
    t.Cipher = s.Cipher,
    t.createCipher = s.createCipher,
    t.Cipheriv = s.Cipheriv,
    t.createCipheriv = s.createCipheriv,
    t.Decipher = s.Decipher,
    t.createDecipher = s.createDecipher,
    t.Decipheriv = s.Decipheriv,
    t.createDecipheriv = s.createDecipheriv,
    t.getCiphers = s.getCiphers,
    t.listCiphers = s.listCiphers;
    var u = r(259);
    t.DiffieHellmanGroup = u.DiffieHellmanGroup,
    t.createDiffieHellmanGroup = u.createDiffieHellmanGroup,
    t.getDiffieHellman = u.getDiffieHellman,
    t.createDiffieHellman = u.createDiffieHellman,
    t.DiffieHellman = u.DiffieHellman;
    var f = r(263);
    t.createSign = f.createSign,
    t.Sign = f.Sign,
    t.createVerify = f.createVerify,
    t.Verify = f.Verify,
    t.createECDH = r(304);
    var c = r(305);
    t.publicEncrypt = c.publicEncrypt,
    t.privateEncrypt = c.privateEncrypt,
    t.publicDecrypt = c.publicDecrypt,
    t.privateDecrypt = c.privateDecrypt;
    var h = r(308);
    t.randomFill = h.randomFill,
    t.randomFillSync = h.randomFillSync,
    t.createCredentials = function() {
        throw new Error(["sorry, createCredentials is not implemented yet", "we accept pull requests", "https://github.com/crypto-browserify/crypto-browserify"].join("\n"))
    }
    ,
    t.constants = {
        DH_CHECK_P_NOT_SAFE_PRIME: 2,
        DH_CHECK_P_NOT_PRIME: 1,
        DH_UNABLE_TO_CHECK_GENERATOR: 4,
        DH_NOT_SUITABLE_GENERATOR: 8,
        NPN_ENABLED: 1,
        ALPN_ENABLED: 1,
        RSA_PKCS1_PADDING: 1,
        RSA_SSLV23_PADDING: 2,
        RSA_NO_PADDING: 3,
        RSA_PKCS1_OAEP_PADDING: 4,
        RSA_X931_PADDING: 5,
        RSA_PKCS1_PSS_PADDING: 6,
        POINT_CONVERSION_COMPRESSED: 2,
        POINT_CONVERSION_UNCOMPRESSED: 4,
        POINT_CONVERSION_HYBRID: 6
    }
}
, function(e, t, r) {
    "use strict";
    var i = t;
    i.version = r(275).version,
    i.utils = r(22),
    i.rand = r(87),
    i.curve = r(154),
    i.curves = r(90),
    i.ec = r(286),
    i.eddsa = r(290)
}
, , , function(e, t, r) {
    var i = t;
    i.utils = r(26),
    i.common = r(54),
    i.sha = r(279),
    i.ripemd = r(283),
    i.hmac = r(284),
    i.sha1 = i.sha.sha1,
    i.sha256 = i.sha.sha256,
    i.sha224 = i.sha.sha224,
    i.sha384 = i.sha.sha384,
    i.sha512 = i.sha.sha512,
    i.ripemd160 = i.ripemd.ripemd160
}
, function(e, t, r) {
    "use strict";
    var i = {};
    function n(e, t, r) {
        r || (r = Error);
        var n = function(e) {
            var r, i;
            function n(r, i, n) {
                return e.call(this, function(e, r, i) {
                    return "string" == typeof t ? t : t(e, r, i)
                }(r, i, n)) || this
            }
            return i = e,
            (r = n).prototype = Object.create(i.prototype),
            r.prototype.constructor = r,
            r.__proto__ = i,
            n
        }(r);
        n.prototype.name = r.name,
        n.prototype.code = e,
        i[e] = n
    }
    function o(e, t) {
        if (Array.isArray(e)) {
            var r = e.length;
            return e = e.map((function(e) {
                return String(e)
            }
            )),
            r > 2 ? "one of ".concat(t, " ").concat(e.slice(0, r - 1).join(", "), ", or ") + e[r - 1] : 2 === r ? "one of ".concat(t, " ").concat(e[0], " or ").concat(e[1]) : "of ".concat(t, " ").concat(e[0])
        }
        return "of ".concat(t, " ").concat(String(e))
    }
    n("ERR_INVALID_OPT_VALUE", (function(e, t) {
        return 'The value "' + t + '" is invalid for option "' + e + '"'
    }
    ), TypeError),
    n("ERR_INVALID_ARG_TYPE", (function(e, t, r) {
        var i, n, a, s;
        if ("string" == typeof t && (n = "not ",
        t.substr(!a || a < 0 ? 0 : +a, n.length) === n) ? (i = "must not be",
        t = t.replace(/^not /, "")) : i = "must be",
        function(e, t, r) {
            return (void 0 === r || r > e.length) && (r = e.length),
            e.substring(r - t.length, r) === t
        }(e, " argument"))
            s = "The ".concat(e, " ").concat(i, " ").concat(o(t, "type"));
        else {
            var u = function(e, t, r) {
                return "number" != typeof r && (r = 0),
                !(r + t.length > e.length) && -1 !== e.indexOf(t, r)
            }(e, ".") ? "property" : "argument";
            s = 'The "'.concat(e, '" ').concat(u, " ").concat(i, " ").concat(o(t, "type"))
        }
        return s += ". Received type ".concat(typeof r)
    }
    ), TypeError),
    n("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF"),
    n("ERR_METHOD_NOT_IMPLEMENTED", (function(e) {
        return "The " + e + " method is not implemented"
    }
    )),
    n("ERR_STREAM_PREMATURE_CLOSE", "Premature close"),
    n("ERR_STREAM_DESTROYED", (function(e) {
        return "Cannot call " + e + " after a stream was destroyed"
    }
    )),
    n("ERR_MULTIPLE_CALLBACK", "Callback called multiple times"),
    n("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable"),
    n("ERR_STREAM_WRITE_AFTER_END", "write after end"),
    n("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError),
    n("ERR_UNKNOWN_ENCODING", (function(e) {
        return "Unknown encoding: " + e
    }
    ), TypeError),
    n("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event"),
    e.exports.codes = i
}
, function(e, t, r) {
    "use strict";
    (function(t) {
        var i = Object.keys || function(e) {
            var t = [];
            for (var r in e)
                t.push(r);
            return t
        }
        ;
        e.exports = f;
        var n = r(119)
          , o = r(123);
        r(4)(f, n);
        for (var a = i(o.prototype), s = 0; s < a.length; s++) {
            var u = a[s];
            f.prototype[u] || (f.prototype[u] = o.prototype[u])
        }
        function f(e) {
            if (!(this instanceof f))
                return new f(e);
            n.call(this, e),
            o.call(this, e),
            this.allowHalfOpen = !0,
            e && (!1 === e.readable && (this.readable = !1),
            !1 === e.writable && (this.writable = !1),
            !1 === e.allowHalfOpen && (this.allowHalfOpen = !1,
            this.once("end", c)))
        }
        function c() {
            this._writableState.ended || t.nextTick(h, this)
        }
        function h(e) {
            e.end()
        }
        Object.defineProperty(f.prototype, "writableHighWaterMark", {
            enumerable: !1,
            get: function() {
                return this._writableState.highWaterMark
            }
        }),
        Object.defineProperty(f.prototype, "writableBuffer", {
            enumerable: !1,
            get: function() {
                return this._writableState && this._writableState.getBuffer()
            }
        }),
        Object.defineProperty(f.prototype, "writableLength", {
            enumerable: !1,
            get: function() {
                return this._writableState.length
            }
        }),
        Object.defineProperty(f.prototype, "destroyed", {
            enumerable: !1,
            get: function() {
                return void 0 !== this._readableState && void 0 !== this._writableState && (this._readableState.destroyed && this._writableState.destroyed)
            },
            set: function(e) {
                void 0 !== this._readableState && void 0 !== this._writableState && (this._readableState.destroyed = e,
                this._writableState.destroyed = e)
            }
        })
    }
    ).call(this, r(14))
}
, function(e, t, r) {
    var i = r(5).Buffer;
    function n(e, t) {
        this._block = i.alloc(e),
        this._finalSize = t,
        this._blockSize = e,
        this._len = 0
    }
    n.prototype.update = function(e, t) {
        "string" == typeof e && (t = t || "utf8",
        e = i.from(e, t));
        for (var r = this._block, n = this._blockSize, o = e.length, a = this._len, s = 0; s < o; ) {
            for (var u = a % n, f = Math.min(o - s, n - u), c = 0; c < f; c++)
                r[u + c] = e[s + c];
            s += f,
            (a += f) % n == 0 && this._update(r)
        }
        return this._len += o,
        this
    }
    ,
    n.prototype.digest = function(e) {
        var t = this._len % this._blockSize;
        this._block[t] = 128,
        this._block.fill(0, t + 1),
        t >= this._finalSize && (this._update(this._block),
        this._block.fill(0));
        var r = 8 * this._len;
        if (r <= 4294967295)
            this._block.writeUInt32BE(r, this._blockSize - 4);
        else {
            var i = (4294967295 & r) >>> 0
              , n = (r - i) / 4294967296;
            this._block.writeUInt32BE(n, this._blockSize - 8),
            this._block.writeUInt32BE(i, this._blockSize - 4)
        }
        this._update(this._block);
        var o = this._hash();
        return e ? o.toString(e) : o
    }
    ,
    n.prototype._update = function() {
        throw new Error("_update must be implemented by subclass")
    }
    ,
    e.exports = n
}
, function(e, t, r) {
    "use strict";
    var i = {};
    function n(e, t, r) {
        r || (r = Error);
        var n = function(e) {
            var r, i;
            function n(r, i, n) {
                return e.call(this, function(e, r, i) {
                    return "string" == typeof t ? t : t(e, r, i)
                }(r, i, n)) || this
            }
            return i = e,
            (r = n).prototype = Object.create(i.prototype),
            r.prototype.constructor = r,
            r.__proto__ = i,
            n
        }(r);
        n.prototype.name = r.name,
        n.prototype.code = e,
        i[e] = n
    }
    function o(e, t) {
        if (Array.isArray(e)) {
            var r = e.length;
            return e = e.map((function(e) {
                return String(e)
            }
            )),
            r > 2 ? "one of ".concat(t, " ").concat(e.slice(0, r - 1).join(", "), ", or ") + e[r - 1] : 2 === r ? "one of ".concat(t, " ").concat(e[0], " or ").concat(e[1]) : "of ".concat(t, " ").concat(e[0])
        }
        return "of ".concat(t, " ").concat(String(e))
    }
    n("ERR_INVALID_OPT_VALUE", (function(e, t) {
        return 'The value "' + t + '" is invalid for option "' + e + '"'
    }
    ), TypeError),
    n("ERR_INVALID_ARG_TYPE", (function(e, t, r) {
        var i, n, a, s;
        if ("string" == typeof t && (n = "not ",
        t.substr(!a || a < 0 ? 0 : +a, n.length) === n) ? (i = "must not be",
        t = t.replace(/^not /, "")) : i = "must be",
        function(e, t, r) {
            return (void 0 === r || r > e.length) && (r = e.length),
            e.substring(r - t.length, r) === t
        }(e, " argument"))
            s = "The ".concat(e, " ").concat(i, " ").concat(o(t, "type"));
        else {
            var u = function(e, t, r) {
                return "number" != typeof r && (r = 0),
                !(r + t.length > e.length) && -1 !== e.indexOf(t, r)
            }(e, ".") ? "property" : "argument";
            s = 'The "'.concat(e, '" ').concat(u, " ").concat(i, " ").concat(o(t, "type"))
        }
        return s += ". Received type ".concat(typeof r)
    }
    ), TypeError),
    n("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF"),
    n("ERR_METHOD_NOT_IMPLEMENTED", (function(e) {
        return "The " + e + " method is not implemented"
    }
    )),
    n("ERR_STREAM_PREMATURE_CLOSE", "Premature close"),
    n("ERR_STREAM_DESTROYED", (function(e) {
        return "Cannot call " + e + " after a stream was destroyed"
    }
    )),
    n("ERR_MULTIPLE_CALLBACK", "Callback called multiple times"),
    n("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable"),
    n("ERR_STREAM_WRITE_AFTER_END", "write after end"),
    n("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError),
    n("ERR_UNKNOWN_ENCODING", (function(e) {
        return "Unknown encoding: " + e
    }
    ), TypeError),
    n("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event"),
    e.exports.codes = i
}
, function(e, t, r) {
    "use strict";
    (function(t) {
        var i = Object.keys || function(e) {
            var t = [];
            for (var r in e)
                t.push(r);
            return t
        }
        ;
        e.exports = f;
        var n = r(147)
          , o = r(151);
        r(4)(f, n);
        for (var a = i(o.prototype), s = 0; s < a.length; s++) {
            var u = a[s];
            f.prototype[u] || (f.prototype[u] = o.prototype[u])
        }
        function f(e) {
            if (!(this instanceof f))
                return new f(e);
            n.call(this, e),
            o.call(this, e),
            this.allowHalfOpen = !0,
            e && (!1 === e.readable && (this.readable = !1),
            !1 === e.writable && (this.writable = !1),
            !1 === e.allowHalfOpen && (this.allowHalfOpen = !1,
            this.once("end", c)))
        }
        function c() {
            this._writableState.ended || t.nextTick(h, this)
        }
        function h(e) {
            e.end()
        }
        Object.defineProperty(f.prototype, "writableHighWaterMark", {
            enumerable: !1,
            get: function() {
                return this._writableState.highWaterMark
            }
        }),
        Object.defineProperty(f.prototype, "writableBuffer", {
            enumerable: !1,
            get: function() {
                return this._writableState && this._writableState.getBuffer()
            }
        }),
        Object.defineProperty(f.prototype, "writableLength", {
            enumerable: !1,
            get: function() {
                return this._writableState.length
            }
        }),
        Object.defineProperty(f.prototype, "destroyed", {
            enumerable: !1,
            get: function() {
                return void 0 !== this._readableState && void 0 !== this._writableState && (this._readableState.destroyed && this._writableState.destroyed)
            },
            set: function(e) {
                void 0 !== this._readableState && void 0 !== this._writableState && (this._readableState.destroyed = e,
                this._writableState.destroyed = e)
            }
        })
    }
    ).call(this, r(14))
}
, , , , , function(e, t) {
    e.exports = function(e) {
        return e.webpackPolyfill || (e.deprecate = function() {}
        ,
        e.paths = [],
        e.children || (e.children = []),
        Object.defineProperty(e, "loaded", {
            enumerable: !0,
            get: function() {
                return e.l
            }
        }),
        Object.defineProperty(e, "id", {
            enumerable: !0,
            get: function() {
                return e.i
            }
        }),
        e.webpackPolyfill = 1),
        e
    }
}
, , function(e, t, r) {
    (function(e) {
        function r(e) {
            return Object.prototype.toString.call(e)
        }
        t.isArray = function(e) {
            return Array.isArray ? Array.isArray(e) : "[object Array]" === r(e)
        }
        ,
        t.isBoolean = function(e) {
            return "boolean" == typeof e
        }
        ,
        t.isNull = function(e) {
            return null === e
        }
        ,
        t.isNullOrUndefined = function(e) {
            return null == e
        }
        ,
        t.isNumber = function(e) {
            return "number" == typeof e
        }
        ,
        t.isString = function(e) {
            return "string" == typeof e
        }
        ,
        t.isSymbol = function(e) {
            return "symbol" == typeof e
        }
        ,
        t.isUndefined = function(e) {
            return void 0 === e
        }
        ,
        t.isRegExp = function(e) {
            return "[object RegExp]" === r(e)
        }
        ,
        t.isObject = function(e) {
            return "object" == typeof e && null !== e
        }
        ,
        t.isDate = function(e) {
            return "[object Date]" === r(e)
        }
        ,
        t.isError = function(e) {
            return "[object Error]" === r(e) || e instanceof Error
        }
        ,
        t.isFunction = function(e) {
            return "function" == typeof e
        }
        ,
        t.isPrimitive = function(e) {
            return null === e || "boolean" == typeof e || "number" == typeof e || "string" == typeof e || "symbol" == typeof e || void 0 === e
        }
        ,
        t.isBuffer = e.isBuffer
    }
    ).call(this, r(8).Buffer)
}
, function(e, t, r) {
    (function(t) {
        e.exports = function(e, r) {
            for (var i = Math.min(e.length, r.length), n = new t(i), o = 0; o < i; ++o)
                n[o] = e[o] ^ r[o];
            return n
        }
    }
    ).call(this, r(8).Buffer)
}
, function(e, t, r) {
    "use strict";
    var i = r(26)
      , n = r(18);
    function o() {
        this.pending = null,
        this.pendingTotal = 0,
        this.blockSize = this.constructor.blockSize,
        this.outSize = this.constructor.outSize,
        this.hmacStrength = this.constructor.hmacStrength,
        this.padLength = this.constructor.padLength / 8,
        this.endian = "big",
        this._delta8 = this.blockSize / 8,
        this._delta32 = this.blockSize / 32
    }
    t.BlockHash = o,
    o.prototype.update = function(e, t) {
        if (e = i.toArray(e, t),
        this.pending ? this.pending = this.pending.concat(e) : this.pending = e,
        this.pendingTotal += e.length,
        this.pending.length >= this._delta8) {
            var r = (e = this.pending).length % this._delta8;
            this.pending = e.slice(e.length - r, e.length),
            0 === this.pending.length && (this.pending = null),
            e = i.join32(e, 0, e.length - r, this.endian);
            for (var n = 0; n < e.length; n += this._delta32)
                this._update(e, n, n + this._delta32)
        }
        return this
    }
    ,
    o.prototype.digest = function(e) {
        return this.update(this._pad()),
        n(null === this.pending),
        this._digest(e)
    }
    ,
    o.prototype._pad = function() {
        var e = this.pendingTotal
          , t = this._delta8
          , r = t - (e + this.padLength) % t
          , i = new Array(r + this.padLength);
        i[0] = 128;
        for (var n = 1; n < r; n++)
            i[n] = 0;
        if (e <<= 3,
        "big" === this.endian) {
            for (var o = 8; o < this.padLength; o++)
                i[n++] = 0;
            i[n++] = 0,
            i[n++] = 0,
            i[n++] = 0,
            i[n++] = 0,
            i[n++] = e >>> 24 & 255,
            i[n++] = e >>> 16 & 255,
            i[n++] = e >>> 8 & 255,
            i[n++] = 255 & e
        } else
            for (i[n++] = 255 & e,
            i[n++] = e >>> 8 & 255,
            i[n++] = e >>> 16 & 255,
            i[n++] = e >>> 24 & 255,
            i[n++] = 0,
            i[n++] = 0,
            i[n++] = 0,
            i[n++] = 0,
            o = 8; o < this.padLength; o++)
                i[n++] = 0;
        return i
    }
}
, function(e, t, r) {
    "use strict";
    const i = r(4)
      , n = r(93).Reporter
      , o = r(91).Buffer;
    function a(e, t) {
        n.call(this, t),
        o.isBuffer(e) ? (this.base = e,
        this.offset = 0,
        this.length = e.length) : this.error("Input not Buffer")
    }
    function s(e, t) {
        if (Array.isArray(e))
            this.length = 0,
            this.value = e.map((function(e) {
                return s.isEncoderBuffer(e) || (e = new s(e,t)),
                this.length += e.length,
                e
            }
            ), this);
        else if ("number" == typeof e) {
            if (!(0 <= e && e <= 255))
                return t.error("non-byte EncoderBuffer value");
            this.value = e,
            this.length = 1
        } else if ("string" == typeof e)
            this.value = e,
            this.length = o.byteLength(e);
        else {
            if (!o.isBuffer(e))
                return t.error("Unsupported type: " + typeof e);
            this.value = e,
            this.length = e.length
        }
    }
    i(a, n),
    t.DecoderBuffer = a,
    a.isDecoderBuffer = function(e) {
        if (e instanceof a)
            return !0;
        return "object" == typeof e && o.isBuffer(e.base) && "DecoderBuffer" === e.constructor.name && "number" == typeof e.offset && "number" == typeof e.length && "function" == typeof e.save && "function" == typeof e.restore && "function" == typeof e.isEmpty && "function" == typeof e.readUInt8 && "function" == typeof e.skip && "function" == typeof e.raw
    }
    ,
    a.prototype.save = function() {
        return {
            offset: this.offset,
            reporter: n.prototype.save.call(this)
        }
    }
    ,
    a.prototype.restore = function(e) {
        const t = new a(this.base);
        return t.offset = e.offset,
        t.length = this.offset,
        this.offset = e.offset,
        n.prototype.restore.call(this, e.reporter),
        t
    }
    ,
    a.prototype.isEmpty = function() {
        return this.offset === this.length
    }
    ,
    a.prototype.readUInt8 = function(e) {
        return this.offset + 1 <= this.length ? this.base.readUInt8(this.offset++, !0) : this.error(e || "DecoderBuffer overrun")
    }
    ,
    a.prototype.skip = function(e, t) {
        if (!(this.offset + e <= this.length))
            return this.error(t || "DecoderBuffer overrun");
        const r = new a(this.base);
        return r._reporterState = this._reporterState,
        r.offset = this.offset,
        r.length = this.offset + e,
        this.offset += e,
        r
    }
    ,
    a.prototype.raw = function(e) {
        return this.base.slice(e ? e.offset : this.offset, this.length)
    }
    ,
    t.EncoderBuffer = s,
    s.isEncoderBuffer = function(e) {
        if (e instanceof s)
            return !0;
        return "object" == typeof e && "EncoderBuffer" === e.constructor.name && "number" == typeof e.length && "function" == typeof e.join
    }
    ,
    s.prototype.join = function(e, t) {
        return e || (e = o.alloc(this.length)),
        t || (t = 0),
        0 === this.length || (Array.isArray(this.value) ? this.value.forEach((function(r) {
            r.join(e, t),
            t += r.length
        }
        )) : ("number" == typeof this.value ? e[t] = this.value : "string" == typeof this.value ? e.write(this.value, t) : o.isBuffer(this.value) && this.value.copy(e, t),
        t += this.length)),
        e
    }
}
, function(e, t, r) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    var i = r(11).__importStar(r(96));
    function n(e) {
        return !!e.toHexString
    }
    function o(e) {
        return "object" == typeof e && "function" == typeof e.slice || (e.slice = function() {
            var t = Array.prototype.slice.call(arguments);
            return o(new Uint8Array(Array.prototype.slice.apply(e, [t[0], t[1]])))
        }
        ),
        e
    }
    function a(e) {
        if (!e || parseInt(String(e.length)) !== e.length || "string" == typeof e)
            return !1;
        for (var t = 0; t < e.length; t++) {
            var r = e[t];
            if (r < 0 || r >= 256 || parseInt(String(r)) !== r)
                return !1
        }
        return !0
    }
    function s(e) {
        if (null == e && i.throwError("cannot convert null value to array", i.INVALID_ARGUMENT, {
            arg: "value",
            value: e
        }),
        n(e) && (e = e.toHexString()),
        "string" == typeof e) {
            var t = e.match(/^(0x)?[0-9a-fA-F]*$/);
            t || i.throwError("invalid hexidecimal string", i.INVALID_ARGUMENT, {
                arg: "value",
                value: e
            }),
            null !== t && "0x" !== t[1] && i.throwError("hex string must have 0x prefix", i.INVALID_ARGUMENT, {
                arg: "value",
                value: e
            }),
            (e = e.substring(2)).length % 2 && (e = "0" + e);
            for (var r = [], s = 0; s < e.length; s += 2)
                r.push(parseInt(e.substr(s, 2), 16));
            return o(new Uint8Array(r))
        }
        return a(e) ? o(new Uint8Array(e)) : (i.throwError("invalid arrayify value", null, {
            arg: "value",
            value: e,
            type: typeof e
        }),
        null)
    }
    function u(e) {
        if (null === e)
            throw new Error("concat objects is null");
        for (var t = [], r = 0, i = 0; i < e.length; i++) {
            var n = s(e[i]);
            if (null == n)
                throw new Error("arrayify failed");
            t.push(n),
            r += n.length
        }
        var a = new Uint8Array(r)
          , u = 0;
        for (i = 0; i < t.length; i++)
            a.set(t[i], u),
            u += t[i].length;
        return o(a)
    }
    function f(e, t) {
        return !("string" != typeof e || !e.match(/^0x[0-9A-Fa-f]*$/)) && (!t || e.length === 2 + 2 * t)
    }
    t.isHexable = n,
    t.isArrayish = a,
    t.arrayify = s,
    t.concat = u,
    t.stripZeros = function(e) {
        var t = s(e);
        if (null === t)
            throw new Error("arrayify failed");
        if (0 === t.length)
            return t;
        for (var r = 0; 0 === t[r]; )
            r++;
        return r && (t = t.slice(r)),
        t
    }
    ,
    t.padZeros = function(e, t) {
        var r = s(e);
        if (null === r)
            throw new Error("arrayify failed");
        if (t < r.length)
            throw new Error("cannot pad");
        var i = new Uint8Array(t);
        return i.set(r, t - r.length),
        o(i)
    }
    ,
    t.isHexString = f;
    function c(e) {
        if (n(e))
            return e.toHexString();
        if ("number" == typeof e) {
            e < 0 && i.throwError("cannot hexlify negative value", i.INVALID_ARGUMENT, {
                arg: "value",
                value: e
            }),
            e >= 9007199254740991 && i.throwError("out-of-range", i.NUMERIC_FAULT, {
                operartion: "hexlify",
                fault: "out-of-safe-range"
            });
            for (var t = ""; e; )
                t = "0123456789abcdef"[15 & e] + t,
                e = Math.floor(e / 16);
            return t.length ? (t.length % 2 && (t = "0" + t),
            "0x" + t) : "0x00"
        }
        if ("string" == typeof e) {
            var r = e.match(/^(0x)?[0-9a-fA-F]*$/);
            return r || i.throwError("invalid hexidecimal string", i.INVALID_ARGUMENT, {
                arg: "value",
                value: e
            }),
            null !== r && "0x" !== r[1] && i.throwError("hex string must have 0x prefix", i.INVALID_ARGUMENT, {
                arg: "value",
                value: e
            }),
            e.length % 2 && (e = "0x0" + e.substring(2)),
            e
        }
        if (a(e)) {
            for (var o = [], s = 0; s < e.length; s++) {
                var u = e[s];
                o.push("0123456789abcdef"[(240 & u) >> 4] + "0123456789abcdef"[15 & u])
            }
            return "0x" + o.join("")
        }
        return i.throwError("invalid hexlify value", null, {
            arg: "value",
            value: e
        }),
        "never"
    }
    function h(e, t) {
        for (f(e) || i.throwError("invalid hex string", i.INVALID_ARGUMENT, {
            arg: "value",
            value: e
        }); e.length < 2 * t + 2; )
            e = "0x0" + e.substring(2);
        return e
    }
    function l(e) {
        return e && null != e.r && null != e.s
    }
    function d(e) {
        if (void 0 !== e) {
            var t = 0
              , r = "0x"
              , n = "0x";
            if (l(e)) {
                null == e.v && null == e.recoveryParam && i.throwError("at least on of recoveryParam or v must be specified", i.INVALID_ARGUMENT, {
                    argument: "signature",
                    value: e
                }),
                r = h(e.r, 32),
                n = h(e.s, 32),
                "string" == typeof (t = e.v || 0) && (t = parseInt(t, 16));
                var o = e.recoveryParam || 0;
                null == o && null != e.v && (o = 1 - t % 2),
                t = 27 + o
            } else {
                var a = s(e) || new Uint8Array;
                if (65 !== a.length)
                    throw new Error("invalid signature");
                r = c(a.slice(0, 32)),
                n = c(a.slice(32, 64)),
                27 !== (t = a[64]) && 28 !== t && (t = 27 + t % 2)
            }
            return {
                r: r,
                s: n,
                recoveryParam: t - 27,
                v: t
            }
        }
        throw new Error("signature is not found")
    }
    t.hexlify = c,
    t.hexDataLength = function(e) {
        return f(e) && e.length % 2 == 0 ? (e.length - 2) / 2 : null
    }
    ,
    t.hexDataSlice = function(e, t, r) {
        return f(e) || i.throwError("invalid hex data", i.INVALID_ARGUMENT, {
            arg: "value",
            value: e
        }),
        e.length % 2 != 0 && i.throwError("hex data length must be even", i.INVALID_ARGUMENT, {
            arg: "value",
            value: e
        }),
        t = 2 + 2 * t,
        null != r ? "0x" + e.substring(t, 2 + 2 * r) : "0x" + e.substring(t)
    }
    ,
    t.hexStripZeros = function(e) {
        for (f(e) || i.throwError("invalid hex string", i.INVALID_ARGUMENT, {
            arg: "value",
            value: e
        }); e.length > 3 && "0x0" === e.substring(0, 3); )
            e = "0x" + e.substring(3);
        return e
    }
    ,
    t.hexZeroPad = h,
    t.bytesPadLeft = function(e, t) {
        f(e) || i.throwError("invalid hex string", i.INVALID_ARGUMENT, {
            arg: "value",
            value: e
        });
        var r = e.substring(2);
        if (r.length > 2 * t)
            throw new Error("hex string length = " + r.length + " beyond byteLength=" + t);
        var n = 2 * t - r.length;
        return "0x" + "0".repeat(n) + r
    }
    ,
    t.bytesPadRight = function(e, t) {
        f(e) || i.throwError("invalid hex string", i.INVALID_ARGUMENT, {
            arg: "value",
            value: e
        });
        var r = e.substring(2);
        if (r.length > 2 * t)
            throw new Error("hex string length = " + r.length + " beyond byteLength=" + t);
        var n = 2 * t - r.length;
        return "0x" + r + "0".repeat(n)
    }
    ,
    t.isSignature = l,
    t.splitSignature = d,
    t.joinSignature = function(e) {
        return c(u([(e = d(e)).r, e.s, e.recoveryParam ? "0x1c" : "0x1b"]))
    }
    ,
    t.hexToByteArray = function(e) {
        for (var t = new Uint8Array(e.length / 2), r = 0; r < e.length; r += 2)
            t[r / 2] = parseInt(e.substring(r, r + 2), 16);
        return t
    }
    ,
    t.hexToIntArray = function(e) {
        if (!e || !t.isHex(e))
            return [];
        for (var r = [], i = 0; i < e.length; i++) {
            var n = e.charCodeAt(i)
              , o = n >> 8
              , a = 255 & n;
            o ? r.push(o, a) : r.push(a)
        }
        return r
    }
    ,
    t.isHex = function(e) {
        var t = e.replace("0x", "");
        return /[0-9a-f]*$/i.test(t)
    }
}
, , , , function(e, t, r) {
    "use strict";
    (function(t) {
        void 0 === t || !t.version || 0 === t.version.indexOf("v0.") || 0 === t.version.indexOf("v1.") && 0 !== t.version.indexOf("v1.8.") ? e.exports = {
            nextTick: function(e, r, i, n) {
                if ("function" != typeof e)
                    throw new TypeError('"callback" argument must be a function');
                var o, a, s = arguments.length;
                switch (s) {
                case 0:
                case 1:
                    return t.nextTick(e);
                case 2:
                    return t.nextTick((function() {
                        e.call(null, r)
                    }
                    ));
                case 3:
                    return t.nextTick((function() {
                        e.call(null, r, i)
                    }
                    ));
                case 4:
                    return t.nextTick((function() {
                        e.call(null, r, i, n)
                    }
                    ));
                default:
                    for (o = new Array(s - 1),
                    a = 0; a < o.length; )
                        o[a++] = arguments[a];
                    return t.nextTick((function() {
                        e.apply(null, o)
                    }
                    ))
                }
            }
        } : e.exports = t
    }
    ).call(this, r(14))
}
, function(e, t, r) {
    t.pbkdf2 = r(243),
    t.pbkdf2Sync = r(136)
}
, function(e, t, r) {
    var i = r(5).Buffer;
    function n(e) {
        i.isBuffer(e) || (e = i.from(e));
        for (var t = e.length / 4 | 0, r = new Array(t), n = 0; n < t; n++)
            r[n] = e.readUInt32BE(4 * n);
        return r
    }
    function o(e) {
        for (; 0 < e.length; e++)
            e[0] = 0
    }
    function a(e, t, r, i, n) {
        for (var o, a, s, u, f = r[0], c = r[1], h = r[2], l = r[3], d = e[0] ^ t[0], p = e[1] ^ t[1], b = e[2] ^ t[2], m = e[3] ^ t[3], g = 4, v = 1; v < n; v++)
            o = f[d >>> 24] ^ c[p >>> 16 & 255] ^ h[b >>> 8 & 255] ^ l[255 & m] ^ t[g++],
            a = f[p >>> 24] ^ c[b >>> 16 & 255] ^ h[m >>> 8 & 255] ^ l[255 & d] ^ t[g++],
            s = f[b >>> 24] ^ c[m >>> 16 & 255] ^ h[d >>> 8 & 255] ^ l[255 & p] ^ t[g++],
            u = f[m >>> 24] ^ c[d >>> 16 & 255] ^ h[p >>> 8 & 255] ^ l[255 & b] ^ t[g++],
            d = o,
            p = a,
            b = s,
            m = u;
        return o = (i[d >>> 24] << 24 | i[p >>> 16 & 255] << 16 | i[b >>> 8 & 255] << 8 | i[255 & m]) ^ t[g++],
        a = (i[p >>> 24] << 24 | i[b >>> 16 & 255] << 16 | i[m >>> 8 & 255] << 8 | i[255 & d]) ^ t[g++],
        s = (i[b >>> 24] << 24 | i[m >>> 16 & 255] << 16 | i[d >>> 8 & 255] << 8 | i[255 & p]) ^ t[g++],
        u = (i[m >>> 24] << 24 | i[d >>> 16 & 255] << 16 | i[p >>> 8 & 255] << 8 | i[255 & b]) ^ t[g++],
        [o >>>= 0, a >>>= 0, s >>>= 0, u >>>= 0]
    }
    var s = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54]
      , u = function() {
        for (var e = new Array(256), t = 0; t < 256; t++)
            e[t] = t < 128 ? t << 1 : t << 1 ^ 283;
        for (var r = [], i = [], n = [[], [], [], []], o = [[], [], [], []], a = 0, s = 0, u = 0; u < 256; ++u) {
            var f = s ^ s << 1 ^ s << 2 ^ s << 3 ^ s << 4;
            f = f >>> 8 ^ 255 & f ^ 99,
            r[a] = f,
            i[f] = a;
            var c = e[a]
              , h = e[c]
              , l = e[h]
              , d = 257 * e[f] ^ 16843008 * f;
            n[0][a] = d << 24 | d >>> 8,
            n[1][a] = d << 16 | d >>> 16,
            n[2][a] = d << 8 | d >>> 24,
            n[3][a] = d,
            d = 16843009 * l ^ 65537 * h ^ 257 * c ^ 16843008 * a,
            o[0][f] = d << 24 | d >>> 8,
            o[1][f] = d << 16 | d >>> 16,
            o[2][f] = d << 8 | d >>> 24,
            o[3][f] = d,
            0 === a ? a = s = 1 : (a = c ^ e[e[e[l ^ c]]],
            s ^= e[e[s]])
        }
        return {
            SBOX: r,
            INV_SBOX: i,
            SUB_MIX: n,
            INV_SUB_MIX: o
        }
    }();
    function f(e) {
        this._key = n(e),
        this._reset()
    }
    f.blockSize = 16,
    f.keySize = 32,
    f.prototype.blockSize = f.blockSize,
    f.prototype.keySize = f.keySize,
    f.prototype._reset = function() {
        for (var e = this._key, t = e.length, r = t + 6, i = 4 * (r + 1), n = [], o = 0; o < t; o++)
            n[o] = e[o];
        for (o = t; o < i; o++) {
            var a = n[o - 1];
            o % t == 0 ? (a = a << 8 | a >>> 24,
            a = u.SBOX[a >>> 24] << 24 | u.SBOX[a >>> 16 & 255] << 16 | u.SBOX[a >>> 8 & 255] << 8 | u.SBOX[255 & a],
            a ^= s[o / t | 0] << 24) : t > 6 && o % t == 4 && (a = u.SBOX[a >>> 24] << 24 | u.SBOX[a >>> 16 & 255] << 16 | u.SBOX[a >>> 8 & 255] << 8 | u.SBOX[255 & a]),
            n[o] = n[o - t] ^ a
        }
        for (var f = [], c = 0; c < i; c++) {
            var h = i - c
              , l = n[h - (c % 4 ? 0 : 4)];
            f[c] = c < 4 || h <= 4 ? l : u.INV_SUB_MIX[0][u.SBOX[l >>> 24]] ^ u.INV_SUB_MIX[1][u.SBOX[l >>> 16 & 255]] ^ u.INV_SUB_MIX[2][u.SBOX[l >>> 8 & 255]] ^ u.INV_SUB_MIX[3][u.SBOX[255 & l]]
        }
        this._nRounds = r,
        this._keySchedule = n,
        this._invKeySchedule = f
    }
    ,
    f.prototype.encryptBlockRaw = function(e) {
        return a(e = n(e), this._keySchedule, u.SUB_MIX, u.SBOX, this._nRounds)
    }
    ,
    f.prototype.encryptBlock = function(e) {
        var t = this.encryptBlockRaw(e)
          , r = i.allocUnsafe(16);
        return r.writeUInt32BE(t[0], 0),
        r.writeUInt32BE(t[1], 4),
        r.writeUInt32BE(t[2], 8),
        r.writeUInt32BE(t[3], 12),
        r
    }
    ,
    f.prototype.decryptBlock = function(e) {
        var t = (e = n(e))[1];
        e[1] = e[3],
        e[3] = t;
        var r = a(e, this._invKeySchedule, u.INV_SUB_MIX, u.INV_SBOX, this._nRounds)
          , o = i.allocUnsafe(16);
        return o.writeUInt32BE(r[0], 0),
        o.writeUInt32BE(r[3], 4),
        o.writeUInt32BE(r[2], 8),
        o.writeUInt32BE(r[1], 12),
        o
    }
    ,
    f.prototype.scrub = function() {
        o(this._keySchedule),
        o(this._invKeySchedule),
        o(this._key)
    }
    ,
    e.exports.AES = f
}
, function(e, t, r) {
    var i = r(5).Buffer
      , n = r(78);
    e.exports = function(e, t, r, o) {
        if (i.isBuffer(e) || (e = i.from(e, "binary")),
        t && (i.isBuffer(t) || (t = i.from(t, "binary")),
        8 !== t.length))
            throw new RangeError("salt should be Buffer with 8 byte length");
        for (var a = r / 8, s = i.alloc(a), u = i.alloc(o || 0), f = i.alloc(0); a > 0 || o > 0; ) {
            var c = new n;
            c.update(f),
            c.update(e),
            t && c.update(t),
            f = c.digest();
            var h = 0;
            if (a > 0) {
                var l = s.length - a;
                h = Math.min(a, f.length),
                f.copy(s, l, 0, h),
                a -= h
            }
            if (h < f.length && o > 0) {
                var d = u.length - o
                  , p = Math.min(o, f.length - h);
                f.copy(u, d, h, h + p),
                o -= p
            }
        }
        return f.fill(0),
        {
            key: s,
            iv: u
        }
    }
}
, function(e, t, r) {
    "use strict";
    var i = r(7)
      , n = r(22)
      , o = n.getNAF
      , a = n.getJSF
      , s = n.assert;
    function u(e, t) {
        this.type = e,
        this.p = new i(t.p,16),
        this.red = t.prime ? i.red(t.prime) : i.mont(this.p),
        this.zero = new i(0).toRed(this.red),
        this.one = new i(1).toRed(this.red),
        this.two = new i(2).toRed(this.red),
        this.n = t.n && new i(t.n,16),
        this.g = t.g && this.pointFromJSON(t.g, t.gRed),
        this._wnafT1 = new Array(4),
        this._wnafT2 = new Array(4),
        this._wnafT3 = new Array(4),
        this._wnafT4 = new Array(4),
        this._bitLength = this.n ? this.n.bitLength() : 0;
        var r = this.n && this.p.div(this.n);
        !r || r.cmpn(100) > 0 ? this.redN = null : (this._maxwellTrick = !0,
        this.redN = this.n.toRed(this.red))
    }
    function f(e, t) {
        this.curve = e,
        this.type = t,
        this.precomputed = null
    }
    e.exports = u,
    u.prototype.point = function() {
        throw new Error("Not implemented")
    }
    ,
    u.prototype.validate = function() {
        throw new Error("Not implemented")
    }
    ,
    u.prototype._fixedNafMul = function(e, t) {
        s(e.precomputed);
        var r = e._getDoubles()
          , i = o(t, 1, this._bitLength)
          , n = (1 << r.step + 1) - (r.step % 2 == 0 ? 2 : 1);
        n /= 3;
        var a, u, f = [];
        for (a = 0; a < i.length; a += r.step) {
            u = 0;
            for (var c = a + r.step - 1; c >= a; c--)
                u = (u << 1) + i[c];
            f.push(u)
        }
        for (var h = this.jpoint(null, null, null), l = this.jpoint(null, null, null), d = n; d > 0; d--) {
            for (a = 0; a < f.length; a++)
                (u = f[a]) === d ? l = l.mixedAdd(r.points[a]) : u === -d && (l = l.mixedAdd(r.points[a].neg()));
            h = h.add(l)
        }
        return h.toP()
    }
    ,
    u.prototype._wnafMul = function(e, t) {
        var r = 4
          , i = e._getNAFPoints(r);
        r = i.wnd;
        for (var n = i.points, a = o(t, r, this._bitLength), u = this.jpoint(null, null, null), f = a.length - 1; f >= 0; f--) {
            for (var c = 0; f >= 0 && 0 === a[f]; f--)
                c++;
            if (f >= 0 && c++,
            u = u.dblp(c),
            f < 0)
                break;
            var h = a[f];
            s(0 !== h),
            u = "affine" === e.type ? h > 0 ? u.mixedAdd(n[h - 1 >> 1]) : u.mixedAdd(n[-h - 1 >> 1].neg()) : h > 0 ? u.add(n[h - 1 >> 1]) : u.add(n[-h - 1 >> 1].neg())
        }
        return "affine" === e.type ? u.toP() : u
    }
    ,
    u.prototype._wnafMulAdd = function(e, t, r, i, n) {
        var s, u, f, c = this._wnafT1, h = this._wnafT2, l = this._wnafT3, d = 0;
        for (s = 0; s < i; s++) {
            var p = (f = t[s])._getNAFPoints(e);
            c[s] = p.wnd,
            h[s] = p.points
        }
        for (s = i - 1; s >= 1; s -= 2) {
            var b = s - 1
              , m = s;
            if (1 === c[b] && 1 === c[m]) {
                var g = [t[b], null, null, t[m]];
                0 === t[b].y.cmp(t[m].y) ? (g[1] = t[b].add(t[m]),
                g[2] = t[b].toJ().mixedAdd(t[m].neg())) : 0 === t[b].y.cmp(t[m].y.redNeg()) ? (g[1] = t[b].toJ().mixedAdd(t[m]),
                g[2] = t[b].add(t[m].neg())) : (g[1] = t[b].toJ().mixedAdd(t[m]),
                g[2] = t[b].toJ().mixedAdd(t[m].neg()));
                var v = [-3, -1, -5, -7, 0, 7, 5, 1, 3]
                  , y = a(r[b], r[m]);
                for (d = Math.max(y[0].length, d),
                l[b] = new Array(d),
                l[m] = new Array(d),
                u = 0; u < d; u++) {
                    var w = 0 | y[0][u]
                      , _ = 0 | y[1][u];
                    l[b][u] = v[3 * (w + 1) + (_ + 1)],
                    l[m][u] = 0,
                    h[b] = g
                }
            } else
                l[b] = o(r[b], c[b], this._bitLength),
                l[m] = o(r[m], c[m], this._bitLength),
                d = Math.max(l[b].length, d),
                d = Math.max(l[m].length, d)
        }
        var E = this.jpoint(null, null, null)
          , M = this._wnafT4;
        for (s = d; s >= 0; s--) {
            for (var S = 0; s >= 0; ) {
                var A = !0;
                for (u = 0; u < i; u++)
                    M[u] = 0 | l[u][s],
                    0 !== M[u] && (A = !1);
                if (!A)
                    break;
                S++,
                s--
            }
            if (s >= 0 && S++,
            E = E.dblp(S),
            s < 0)
                break;
            for (u = 0; u < i; u++) {
                var k = M[u];
                0 !== k && (k > 0 ? f = h[u][k - 1 >> 1] : k < 0 && (f = h[u][-k - 1 >> 1].neg()),
                E = "affine" === f.type ? E.mixedAdd(f) : E.add(f))
            }
        }
        for (s = 0; s < i; s++)
            h[s] = null;
        return n ? E : E.toP()
    }
    ,
    u.BasePoint = f,
    f.prototype.eq = function() {
        throw new Error("Not implemented")
    }
    ,
    f.prototype.validate = function() {
        return this.curve.validate(this)
    }
    ,
    u.prototype.decodePoint = function(e, t) {
        e = n.toArray(e, t);
        var r = this.p.byteLength();
        if ((4 === e[0] || 6 === e[0] || 7 === e[0]) && e.length - 1 == 2 * r)
            return 6 === e[0] ? s(e[e.length - 1] % 2 == 0) : 7 === e[0] && s(e[e.length - 1] % 2 == 1),
            this.point(e.slice(1, 1 + r), e.slice(1 + r, 1 + 2 * r));
        if ((2 === e[0] || 3 === e[0]) && e.length - 1 === r)
            return this.pointFromX(e.slice(1, 1 + r), 3 === e[0]);
        throw new Error("Unknown point format")
    }
    ,
    f.prototype.encodeCompressed = function(e) {
        return this.encode(e, !0)
    }
    ,
    f.prototype._encode = function(e) {
        var t = this.curve.p.byteLength()
          , r = this.getX().toArray("be", t);
        return e ? [this.getY().isEven() ? 2 : 3].concat(r) : [4].concat(r, this.getY().toArray("be", t))
    }
    ,
    f.prototype.encode = function(e, t) {
        return n.encode(this._encode(t), e)
    }
    ,
    f.prototype.precompute = function(e) {
        if (this.precomputed)
            return this;
        var t = {
            doubles: null,
            naf: null,
            beta: null
        };
        return t.naf = this._getNAFPoints(8),
        t.doubles = this._getDoubles(4, e),
        t.beta = this._getBeta(),
        this.precomputed = t,
        this
    }
    ,
    f.prototype._hasDoubles = function(e) {
        if (!this.precomputed)
            return !1;
        var t = this.precomputed.doubles;
        return !!t && t.points.length >= Math.ceil((e.bitLength() + 1) / t.step)
    }
    ,
    f.prototype._getDoubles = function(e, t) {
        if (this.precomputed && this.precomputed.doubles)
            return this.precomputed.doubles;
        for (var r = [this], i = this, n = 0; n < t; n += e) {
            for (var o = 0; o < e; o++)
                i = i.dbl();
            r.push(i)
        }
        return {
            step: e,
            points: r
        }
    }
    ,
    f.prototype._getNAFPoints = function(e) {
        if (this.precomputed && this.precomputed.naf)
            return this.precomputed.naf;
        for (var t = [this], r = (1 << e) - 1, i = 1 === r ? null : this.dbl(), n = 1; n < r; n++)
            t[n] = t[n - 1].add(i);
        return {
            wnd: e,
            points: t
        }
    }
    ,
    f.prototype._getBeta = function() {
        return null
    }
    ,
    f.prototype.dblp = function(e) {
        for (var t = this, r = 0; r < e; r++)
            t = t.dbl();
        return t
    }
}
, function(e, t, r) {
    var i = r(294)
      , n = r(301)
      , o = r(302)
      , a = r(85)
      , s = r(61)
      , u = r(5).Buffer;
    function f(e) {
        var t;
        "object" != typeof e || u.isBuffer(e) || (t = e.passphrase,
        e = e.key),
        "string" == typeof e && (e = u.from(e));
        var r, f, c = o(e, t), h = c.tag, l = c.data;
        switch (h) {
        case "CERTIFICATE":
            f = i.certificate.decode(l, "der").tbsCertificate.subjectPublicKeyInfo;
        case "PUBLIC KEY":
            switch (f || (f = i.PublicKey.decode(l, "der")),
            r = f.algorithm.algorithm.join(".")) {
            case "1.2.840.113549.1.1.1":
                return i.RSAPublicKey.decode(f.subjectPublicKey.data, "der");
            case "1.2.840.10045.2.1":
                return f.subjectPrivateKey = f.subjectPublicKey,
                {
                    type: "ec",
                    data: f
                };
            case "1.2.840.10040.4.1":
                return f.algorithm.params.pub_key = i.DSAparam.decode(f.subjectPublicKey.data, "der"),
                {
                    type: "dsa",
                    data: f.algorithm.params
                };
            default:
                throw new Error("unknown key id " + r)
            }
        case "ENCRYPTED PRIVATE KEY":
            l = function(e, t) {
                var r = e.algorithm.decrypt.kde.kdeparams.salt
                  , i = parseInt(e.algorithm.decrypt.kde.kdeparams.iters.toString(), 10)
                  , o = n[e.algorithm.decrypt.cipher.algo.join(".")]
                  , f = e.algorithm.decrypt.cipher.iv
                  , c = e.subjectPrivateKey
                  , h = parseInt(o.split("-")[1], 10) / 8
                  , l = s.pbkdf2Sync(t, r, i, h, "sha1")
                  , d = a.createDecipheriv(o, l, f)
                  , p = [];
                return p.push(d.update(c)),
                p.push(d.final()),
                u.concat(p)
            }(l = i.EncryptedPrivateKey.decode(l, "der"), t);
        case "PRIVATE KEY":
            switch (r = (f = i.PrivateKey.decode(l, "der")).algorithm.algorithm.join(".")) {
            case "1.2.840.113549.1.1.1":
                return i.RSAPrivateKey.decode(f.subjectPrivateKey, "der");
            case "1.2.840.10045.2.1":
                return {
                    curve: f.algorithm.curve,
                    privateKey: i.ECPrivateKey.decode(f.subjectPrivateKey, "der").privateKey
                };
            case "1.2.840.10040.4.1":
                return f.algorithm.params.priv_key = i.DSAparam.decode(f.subjectPrivateKey, "der"),
                {
                    type: "dsa",
                    params: f.algorithm.params
                };
            default:
                throw new Error("unknown key id " + r)
            }
        case "RSA PUBLIC KEY":
            return i.RSAPublicKey.decode(l, "der");
        case "RSA PRIVATE KEY":
            return i.RSAPrivateKey.decode(l, "der");
        case "DSA PRIVATE KEY":
            return {
                type: "dsa",
                params: i.DSAPrivateKey.decode(l, "der")
            };
        case "EC PRIVATE KEY":
            return {
                curve: (l = i.ECPrivateKey.decode(l, "der")).parameters.value,
                privateKey: l.privateKey
            };
        default:
            throw new Error("unknown key type " + h)
        }
    }
    e.exports = f,
    f.signature = i.signature
}
, function(e, t, r) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    var i = r(11)
      , n = i.__importDefault(r(37))
      , o = i.__importStar(r(56))
      , a = i.__importStar(r(96))
      , s = r(97)
      , u = r(95)
      , f = r(10)
      , c = r(170)
      , h = n.default.ec("secp256k1");
    function l(e, t, r) {
        return d(e, t) === r
    }
    function d(e, t) {
        var r = o.splitSignature(t)
          , i = {
            r: o.arrayify(r.r),
            s: o.arrayify(r.s)
        }
          , n = h.recoverPubKey(o.arrayify(e), i, r.recoveryParam).encode("hex", !1);
        return "0x" + h.keyFromPublic(n, "hex").getPublic(!0, "hex")
    }
    t.generatePrivateKey = function() {
        var e = "0x" + u.randomBytes(16)
          , t = s.keccak256(o.concat(["0x" + u.randomBytes(32), e || "0x" + u.randomBytes(32)]))
          , r = o.concat([o.concat(["0x" + u.randomBytes(32), t]), "0x" + u.randomBytes(32)]);
        return s.keccak256(r)
    }
    ,
    t.getPubkeyFromPrivateKey = function(e) {
        return "0x" + t.getPublic(e, !0)
    }
    ,
    t.getAddressFromPrivateKey = function(e) {
        var r = "0x" + t.getPublic(e).slice(2);
        return "0x" + s.keccak256(r).slice(-40)
    }
    ,
    t.getPublic = function(e, r) {
        if (!f.isPrivateKey(e) || !t.validatePrivateKey(e))
            throw new Error(e + " is not PrivateKey");
        return h.keyFromPrivate(f.strip0x(e), "hex").getPublic(r || !1, "hex")
    }
    ,
    t.getAddressFromPublicKey = function(e) {
        var t = h.keyFromPublic(e.slice(2), "hex").getPublic(!1, "hex");
        return "0x" + s.keccak256("0x" + t.slice(2)).slice(-40)
    }
    ,
    t.toChecksumAddress = function(e) {
        "string" == typeof e && e.match(/^0x[0-9A-Fa-f]{40}$/) || a.throwError("invalid address", a.INVALID_ARGUMENT, {
            arg: "address",
            value: e
        });
        for (var t = (e = e.toLowerCase()).substring(2).split(""), r = new Uint8Array(40), i = 0; i < 40; i++)
            r[i] = t[i].charCodeAt(0);
        r = o.arrayify(s.keccak256(r)) || r;
        for (i = 0; i < 40; i += 2)
            r[i >> 1] >> 4 >= 8 && (t[i] = t[i].toUpperCase()),
            (15 & r[i >> 1]) >= 8 && (t[i + 1] = t[i + 1].toUpperCase());
        return "0x" + t.join("")
    }
    ,
    t.sign = function(e, t) {
        if (!f.isPrivateKey(t))
            throw new Error(t + " is not PrivateKey");
        var r = h.keyFromPrivate(f.strip0x(t), "hex")
          , i = r.sign(o.arrayify(e), {
            canonical: !0
        })
          , n = "0x" + r.getPublic(!0, "hex")
          , a = {
            recoveryParam: i.recoveryParam,
            r: o.hexZeroPad("0x" + i.r.toString(16), 32),
            s: o.hexZeroPad("0x" + i.s.toString(16), 32),
            v: 27 + i.recoveryParam
        };
        if (l(e, a, n))
            return a;
        throw new Error("signing process failed")
    }
    ,
    t.getContractAddress = function(e, t) {
        if (!e)
            throw new Error("missing from address");
        return "0x" + s.keccak256(c.encode([e, o.stripZeros(o.hexlify(t))])).substring(26)
    }
    ,
    t.verifySignature = l,
    t.recoverPublicKey = d,
    t.recoverAddress = function(e, r) {
        return t.getAddressFromPublicKey(d(o.arrayify(e) || new Uint8Array, r))
    }
    ,
    t.isValidChecksumAddress = function(e) {
        return f.isAddress(e.replace("0x", "")) && t.toChecksumAddress(e) === e
    }
    ,
    t.validatePrivateKey = function(e) {
        return h.keyFromPrivate(f.strip0x(e), "hex").validate().result
    }
}
, , function(e, t, r) {
    /*! MIT License. Copyright 2015-2018 Richard Moore <me@ricmoo.com>. See LICENSE.txt. */
    !function(t) {
        "use strict";
        function r(e) {
            return parseInt(e) === e
        }
        function i(e) {
            if (!r(e.length))
                return !1;
            for (var t = 0; t < e.length; t++)
                if (!r(e[t]) || e[t] < 0 || e[t] > 255)
                    return !1;
            return !0
        }
        function n(e, t) {
            if (e.buffer && "Uint8Array" === e.name)
                return t && (e = e.slice ? e.slice() : Array.prototype.slice.call(e)),
                e;
            if (Array.isArray(e)) {
                if (!i(e))
                    throw new Error("Array contains invalid value: " + e);
                return new Uint8Array(e)
            }
            if (r(e.length) && i(e))
                return new Uint8Array(e);
            throw new Error("unsupported array-like object")
        }
        function o(e) {
            return new Uint8Array(e)
        }
        function a(e, t, r, i, n) {
            null == i && null == n || (e = e.slice ? e.slice(i, n) : Array.prototype.slice.call(e, i, n)),
            t.set(e, r)
        }
        var s, u = {
            toBytes: function(e) {
                var t = []
                  , r = 0;
                for (e = encodeURI(e); r < e.length; ) {
                    var i = e.charCodeAt(r++);
                    37 === i ? (t.push(parseInt(e.substr(r, 2), 16)),
                    r += 2) : t.push(i)
                }
                return n(t)
            },
            fromBytes: function(e) {
                for (var t = [], r = 0; r < e.length; ) {
                    var i = e[r];
                    i < 128 ? (t.push(String.fromCharCode(i)),
                    r++) : i > 191 && i < 224 ? (t.push(String.fromCharCode((31 & i) << 6 | 63 & e[r + 1])),
                    r += 2) : (t.push(String.fromCharCode((15 & i) << 12 | (63 & e[r + 1]) << 6 | 63 & e[r + 2])),
                    r += 3)
                }
                return t.join("")
            }
        }, f = (s = "0123456789abcdef",
        {
            toBytes: function(e) {
                for (var t = [], r = 0; r < e.length; r += 2)
                    t.push(parseInt(e.substr(r, 2), 16));
                return t
            },
            fromBytes: function(e) {
                for (var t = [], r = 0; r < e.length; r++) {
                    var i = e[r];
                    t.push(s[(240 & i) >> 4] + s[15 & i])
                }
                return t.join("")
            }
        }), c = {
            16: 10,
            24: 12,
            32: 14
        }, h = [1, 2, 4, 8, 16, 32, 64, 128, 27, 54, 108, 216, 171, 77, 154, 47, 94, 188, 99, 198, 151, 53, 106, 212, 179, 125, 250, 239, 197, 145], l = [99, 124, 119, 123, 242, 107, 111, 197, 48, 1, 103, 43, 254, 215, 171, 118, 202, 130, 201, 125, 250, 89, 71, 240, 173, 212, 162, 175, 156, 164, 114, 192, 183, 253, 147, 38, 54, 63, 247, 204, 52, 165, 229, 241, 113, 216, 49, 21, 4, 199, 35, 195, 24, 150, 5, 154, 7, 18, 128, 226, 235, 39, 178, 117, 9, 131, 44, 26, 27, 110, 90, 160, 82, 59, 214, 179, 41, 227, 47, 132, 83, 209, 0, 237, 32, 252, 177, 91, 106, 203, 190, 57, 74, 76, 88, 207, 208, 239, 170, 251, 67, 77, 51, 133, 69, 249, 2, 127, 80, 60, 159, 168, 81, 163, 64, 143, 146, 157, 56, 245, 188, 182, 218, 33, 16, 255, 243, 210, 205, 12, 19, 236, 95, 151, 68, 23, 196, 167, 126, 61, 100, 93, 25, 115, 96, 129, 79, 220, 34, 42, 144, 136, 70, 238, 184, 20, 222, 94, 11, 219, 224, 50, 58, 10, 73, 6, 36, 92, 194, 211, 172, 98, 145, 149, 228, 121, 231, 200, 55, 109, 141, 213, 78, 169, 108, 86, 244, 234, 101, 122, 174, 8, 186, 120, 37, 46, 28, 166, 180, 198, 232, 221, 116, 31, 75, 189, 139, 138, 112, 62, 181, 102, 72, 3, 246, 14, 97, 53, 87, 185, 134, 193, 29, 158, 225, 248, 152, 17, 105, 217, 142, 148, 155, 30, 135, 233, 206, 85, 40, 223, 140, 161, 137, 13, 191, 230, 66, 104, 65, 153, 45, 15, 176, 84, 187, 22], d = [82, 9, 106, 213, 48, 54, 165, 56, 191, 64, 163, 158, 129, 243, 215, 251, 124, 227, 57, 130, 155, 47, 255, 135, 52, 142, 67, 68, 196, 222, 233, 203, 84, 123, 148, 50, 166, 194, 35, 61, 238, 76, 149, 11, 66, 250, 195, 78, 8, 46, 161, 102, 40, 217, 36, 178, 118, 91, 162, 73, 109, 139, 209, 37, 114, 248, 246, 100, 134, 104, 152, 22, 212, 164, 92, 204, 93, 101, 182, 146, 108, 112, 72, 80, 253, 237, 185, 218, 94, 21, 70, 87, 167, 141, 157, 132, 144, 216, 171, 0, 140, 188, 211, 10, 247, 228, 88, 5, 184, 179, 69, 6, 208, 44, 30, 143, 202, 63, 15, 2, 193, 175, 189, 3, 1, 19, 138, 107, 58, 145, 17, 65, 79, 103, 220, 234, 151, 242, 207, 206, 240, 180, 230, 115, 150, 172, 116, 34, 231, 173, 53, 133, 226, 249, 55, 232, 28, 117, 223, 110, 71, 241, 26, 113, 29, 41, 197, 137, 111, 183, 98, 14, 170, 24, 190, 27, 252, 86, 62, 75, 198, 210, 121, 32, 154, 219, 192, 254, 120, 205, 90, 244, 31, 221, 168, 51, 136, 7, 199, 49, 177, 18, 16, 89, 39, 128, 236, 95, 96, 81, 127, 169, 25, 181, 74, 13, 45, 229, 122, 159, 147, 201, 156, 239, 160, 224, 59, 77, 174, 42, 245, 176, 200, 235, 187, 60, 131, 83, 153, 97, 23, 43, 4, 126, 186, 119, 214, 38, 225, 105, 20, 99, 85, 33, 12, 125], p = [3328402341, 4168907908, 4000806809, 4135287693, 4294111757, 3597364157, 3731845041, 2445657428, 1613770832, 33620227, 3462883241, 1445669757, 3892248089, 3050821474, 1303096294, 3967186586, 2412431941, 528646813, 2311702848, 4202528135, 4026202645, 2992200171, 2387036105, 4226871307, 1101901292, 3017069671, 1604494077, 1169141738, 597466303, 1403299063, 3832705686, 2613100635, 1974974402, 3791519004, 1033081774, 1277568618, 1815492186, 2118074177, 4126668546, 2211236943, 1748251740, 1369810420, 3521504564, 4193382664, 3799085459, 2883115123, 1647391059, 706024767, 134480908, 2512897874, 1176707941, 2646852446, 806885416, 932615841, 168101135, 798661301, 235341577, 605164086, 461406363, 3756188221, 3454790438, 1311188841, 2142417613, 3933566367, 302582043, 495158174, 1479289972, 874125870, 907746093, 3698224818, 3025820398, 1537253627, 2756858614, 1983593293, 3084310113, 2108928974, 1378429307, 3722699582, 1580150641, 327451799, 2790478837, 3117535592, 0, 3253595436, 1075847264, 3825007647, 2041688520, 3059440621, 3563743934, 2378943302, 1740553945, 1916352843, 2487896798, 2555137236, 2958579944, 2244988746, 3151024235, 3320835882, 1336584933, 3992714006, 2252555205, 2588757463, 1714631509, 293963156, 2319795663, 3925473552, 67240454, 4269768577, 2689618160, 2017213508, 631218106, 1269344483, 2723238387, 1571005438, 2151694528, 93294474, 1066570413, 563977660, 1882732616, 4059428100, 1673313503, 2008463041, 2950355573, 1109467491, 537923632, 3858759450, 4260623118, 3218264685, 2177748300, 403442708, 638784309, 3287084079, 3193921505, 899127202, 2286175436, 773265209, 2479146071, 1437050866, 4236148354, 2050833735, 3362022572, 3126681063, 840505643, 3866325909, 3227541664, 427917720, 2655997905, 2749160575, 1143087718, 1412049534, 999329963, 193497219, 2353415882, 3354324521, 1807268051, 672404540, 2816401017, 3160301282, 369822493, 2916866934, 3688947771, 1681011286, 1949973070, 336202270, 2454276571, 201721354, 1210328172, 3093060836, 2680341085, 3184776046, 1135389935, 3294782118, 965841320, 831886756, 3554993207, 4068047243, 3588745010, 2345191491, 1849112409, 3664604599, 26054028, 2983581028, 2622377682, 1235855840, 3630984372, 2891339514, 4092916743, 3488279077, 3395642799, 4101667470, 1202630377, 268961816, 1874508501, 4034427016, 1243948399, 1546530418, 941366308, 1470539505, 1941222599, 2546386513, 3421038627, 2715671932, 3899946140, 1042226977, 2521517021, 1639824860, 227249030, 260737669, 3765465232, 2084453954, 1907733956, 3429263018, 2420656344, 100860677, 4160157185, 470683154, 3261161891, 1781871967, 2924959737, 1773779408, 394692241, 2579611992, 974986535, 664706745, 3655459128, 3958962195, 731420851, 571543859, 3530123707, 2849626480, 126783113, 865375399, 765172662, 1008606754, 361203602, 3387549984, 2278477385, 2857719295, 1344809080, 2782912378, 59542671, 1503764984, 160008576, 437062935, 1707065306, 3622233649, 2218934982, 3496503480, 2185314755, 697932208, 1512910199, 504303377, 2075177163, 2824099068, 1841019862, 739644986], b = [2781242211, 2230877308, 2582542199, 2381740923, 234877682, 3184946027, 2984144751, 1418839493, 1348481072, 50462977, 2848876391, 2102799147, 434634494, 1656084439, 3863849899, 2599188086, 1167051466, 2636087938, 1082771913, 2281340285, 368048890, 3954334041, 3381544775, 201060592, 3963727277, 1739838676, 4250903202, 3930435503, 3206782108, 4149453988, 2531553906, 1536934080, 3262494647, 484572669, 2923271059, 1783375398, 1517041206, 1098792767, 49674231, 1334037708, 1550332980, 4098991525, 886171109, 150598129, 2481090929, 1940642008, 1398944049, 1059722517, 201851908, 1385547719, 1699095331, 1587397571, 674240536, 2704774806, 252314885, 3039795866, 151914247, 908333586, 2602270848, 1038082786, 651029483, 1766729511, 3447698098, 2682942837, 454166793, 2652734339, 1951935532, 775166490, 758520603, 3000790638, 4004797018, 4217086112, 4137964114, 1299594043, 1639438038, 3464344499, 2068982057, 1054729187, 1901997871, 2534638724, 4121318227, 1757008337, 0, 750906861, 1614815264, 535035132, 3363418545, 3988151131, 3201591914, 1183697867, 3647454910, 1265776953, 3734260298, 3566750796, 3903871064, 1250283471, 1807470800, 717615087, 3847203498, 384695291, 3313910595, 3617213773, 1432761139, 2484176261, 3481945413, 283769337, 100925954, 2180939647, 4037038160, 1148730428, 3123027871, 3813386408, 4087501137, 4267549603, 3229630528, 2315620239, 2906624658, 3156319645, 1215313976, 82966005, 3747855548, 3245848246, 1974459098, 1665278241, 807407632, 451280895, 251524083, 1841287890, 1283575245, 337120268, 891687699, 801369324, 3787349855, 2721421207, 3431482436, 959321879, 1469301956, 4065699751, 2197585534, 1199193405, 2898814052, 3887750493, 724703513, 2514908019, 2696962144, 2551808385, 3516813135, 2141445340, 1715741218, 2119445034, 2872807568, 2198571144, 3398190662, 700968686, 3547052216, 1009259540, 2041044702, 3803995742, 487983883, 1991105499, 1004265696, 1449407026, 1316239930, 504629770, 3683797321, 168560134, 1816667172, 3837287516, 1570751170, 1857934291, 4014189740, 2797888098, 2822345105, 2754712981, 936633572, 2347923833, 852879335, 1133234376, 1500395319, 3084545389, 2348912013, 1689376213, 3533459022, 3762923945, 3034082412, 4205598294, 133428468, 634383082, 2949277029, 2398386810, 3913789102, 403703816, 3580869306, 2297460856, 1867130149, 1918643758, 607656988, 4049053350, 3346248884, 1368901318, 600565992, 2090982877, 2632479860, 557719327, 3717614411, 3697393085, 2249034635, 2232388234, 2430627952, 1115438654, 3295786421, 2865522278, 3633334344, 84280067, 33027830, 303828494, 2747425121, 1600795957, 4188952407, 3496589753, 2434238086, 1486471617, 658119965, 3106381470, 953803233, 334231800, 3005978776, 857870609, 3151128937, 1890179545, 2298973838, 2805175444, 3056442267, 574365214, 2450884487, 550103529, 1233637070, 4289353045, 2018519080, 2057691103, 2399374476, 4166623649, 2148108681, 387583245, 3664101311, 836232934, 3330556482, 3100665960, 3280093505, 2955516313, 2002398509, 287182607, 3413881008, 4238890068, 3597515707, 975967766], m = [1671808611, 2089089148, 2006576759, 2072901243, 4061003762, 1807603307, 1873927791, 3310653893, 810573872, 16974337, 1739181671, 729634347, 4263110654, 3613570519, 2883997099, 1989864566, 3393556426, 2191335298, 3376449993, 2106063485, 4195741690, 1508618841, 1204391495, 4027317232, 2917941677, 3563566036, 2734514082, 2951366063, 2629772188, 2767672228, 1922491506, 3227229120, 3082974647, 4246528509, 2477669779, 644500518, 911895606, 1061256767, 4144166391, 3427763148, 878471220, 2784252325, 3845444069, 4043897329, 1905517169, 3631459288, 827548209, 356461077, 67897348, 3344078279, 593839651, 3277757891, 405286936, 2527147926, 84871685, 2595565466, 118033927, 305538066, 2157648768, 3795705826, 3945188843, 661212711, 2999812018, 1973414517, 152769033, 2208177539, 745822252, 439235610, 455947803, 1857215598, 1525593178, 2700827552, 1391895634, 994932283, 3596728278, 3016654259, 695947817, 3812548067, 795958831, 2224493444, 1408607827, 3513301457, 0, 3979133421, 543178784, 4229948412, 2982705585, 1542305371, 1790891114, 3410398667, 3201918910, 961245753, 1256100938, 1289001036, 1491644504, 3477767631, 3496721360, 4012557807, 2867154858, 4212583931, 1137018435, 1305975373, 861234739, 2241073541, 1171229253, 4178635257, 33948674, 2139225727, 1357946960, 1011120188, 2679776671, 2833468328, 1374921297, 2751356323, 1086357568, 2408187279, 2460827538, 2646352285, 944271416, 4110742005, 3168756668, 3066132406, 3665145818, 560153121, 271589392, 4279952895, 4077846003, 3530407890, 3444343245, 202643468, 322250259, 3962553324, 1608629855, 2543990167, 1154254916, 389623319, 3294073796, 2817676711, 2122513534, 1028094525, 1689045092, 1575467613, 422261273, 1939203699, 1621147744, 2174228865, 1339137615, 3699352540, 577127458, 712922154, 2427141008, 2290289544, 1187679302, 3995715566, 3100863416, 339486740, 3732514782, 1591917662, 186455563, 3681988059, 3762019296, 844522546, 978220090, 169743370, 1239126601, 101321734, 611076132, 1558493276, 3260915650, 3547250131, 2901361580, 1655096418, 2443721105, 2510565781, 3828863972, 2039214713, 3878868455, 3359869896, 928607799, 1840765549, 2374762893, 3580146133, 1322425422, 2850048425, 1823791212, 1459268694, 4094161908, 3928346602, 1706019429, 2056189050, 2934523822, 135794696, 3134549946, 2022240376, 628050469, 779246638, 472135708, 2800834470, 3032970164, 3327236038, 3894660072, 3715932637, 1956440180, 522272287, 1272813131, 3185336765, 2340818315, 2323976074, 1888542832, 1044544574, 3049550261, 1722469478, 1222152264, 50660867, 4127324150, 236067854, 1638122081, 895445557, 1475980887, 3117443513, 2257655686, 3243809217, 489110045, 2662934430, 3778599393, 4162055160, 2561878936, 288563729, 1773916777, 3648039385, 2391345038, 2493985684, 2612407707, 505560094, 2274497927, 3911240169, 3460925390, 1442818645, 678973480, 3749357023, 2358182796, 2717407649, 2306869641, 219617805, 3218761151, 3862026214, 1120306242, 1756942440, 1103331905, 2578459033, 762796589, 252780047, 2966125488, 1425844308, 3151392187, 372911126], g = [1667474886, 2088535288, 2004326894, 2071694838, 4075949567, 1802223062, 1869591006, 3318043793, 808472672, 16843522, 1734846926, 724270422, 4278065639, 3621216949, 2880169549, 1987484396, 3402253711, 2189597983, 3385409673, 2105378810, 4210693615, 1499065266, 1195886990, 4042263547, 2913856577, 3570689971, 2728590687, 2947541573, 2627518243, 2762274643, 1920112356, 3233831835, 3082273397, 4261223649, 2475929149, 640051788, 909531756, 1061110142, 4160160501, 3435941763, 875846760, 2779116625, 3857003729, 4059105529, 1903268834, 3638064043, 825316194, 353713962, 67374088, 3351728789, 589522246, 3284360861, 404236336, 2526454071, 84217610, 2593830191, 117901582, 303183396, 2155911963, 3806477791, 3958056653, 656894286, 2998062463, 1970642922, 151591698, 2206440989, 741110872, 437923380, 454765878, 1852748508, 1515908788, 2694904667, 1381168804, 993742198, 3604373943, 3014905469, 690584402, 3823320797, 791638366, 2223281939, 1398011302, 3520161977, 0, 3991743681, 538992704, 4244381667, 2981218425, 1532751286, 1785380564, 3419096717, 3200178535, 960056178, 1246420628, 1280103576, 1482221744, 3486468741, 3503319995, 4025428677, 2863326543, 4227536621, 1128514950, 1296947098, 859002214, 2240123921, 1162203018, 4193849577, 33687044, 2139062782, 1347481760, 1010582648, 2678045221, 2829640523, 1364325282, 2745433693, 1077985408, 2408548869, 2459086143, 2644360225, 943212656, 4126475505, 3166494563, 3065430391, 3671750063, 555836226, 269496352, 4294908645, 4092792573, 3537006015, 3452783745, 202118168, 320025894, 3974901699, 1600119230, 2543297077, 1145359496, 387397934, 3301201811, 2812801621, 2122220284, 1027426170, 1684319432, 1566435258, 421079858, 1936954854, 1616945344, 2172753945, 1330631070, 3705438115, 572679748, 707427924, 2425400123, 2290647819, 1179044492, 4008585671, 3099120491, 336870440, 3739122087, 1583276732, 185277718, 3688593069, 3772791771, 842159716, 976899700, 168435220, 1229577106, 101059084, 606366792, 1549591736, 3267517855, 3553849021, 2897014595, 1650632388, 2442242105, 2509612081, 3840161747, 2038008818, 3890688725, 3368567691, 926374254, 1835907034, 2374863873, 3587531953, 1313788572, 2846482505, 1819063512, 1448540844, 4109633523, 3941213647, 1701162954, 2054852340, 2930698567, 134748176, 3132806511, 2021165296, 623210314, 774795868, 471606328, 2795958615, 3031746419, 3334885783, 3907527627, 3722280097, 1953799400, 522133822, 1263263126, 3183336545, 2341176845, 2324333839, 1886425312, 1044267644, 3048588401, 1718004428, 1212733584, 50529542, 4143317495, 235803164, 1633788866, 892690282, 1465383342, 3115962473, 2256965911, 3250673817, 488449850, 2661202215, 3789633753, 4177007595, 2560144171, 286339874, 1768537042, 3654906025, 2391705863, 2492770099, 2610673197, 505291324, 2273808917, 3924369609, 3469625735, 1431699370, 673740880, 3755965093, 2358021891, 2711746649, 2307489801, 218961690, 3217021541, 3873845719, 1111672452, 1751693520, 1094828930, 2576986153, 757954394, 252645662, 2964376443, 1414855848, 3149649517, 370555436], v = [1374988112, 2118214995, 437757123, 975658646, 1001089995, 530400753, 2902087851, 1273168787, 540080725, 2910219766, 2295101073, 4110568485, 1340463100, 3307916247, 641025152, 3043140495, 3736164937, 632953703, 1172967064, 1576976609, 3274667266, 2169303058, 2370213795, 1809054150, 59727847, 361929877, 3211623147, 2505202138, 3569255213, 1484005843, 1239443753, 2395588676, 1975683434, 4102977912, 2572697195, 666464733, 3202437046, 4035489047, 3374361702, 2110667444, 1675577880, 3843699074, 2538681184, 1649639237, 2976151520, 3144396420, 4269907996, 4178062228, 1883793496, 2403728665, 2497604743, 1383856311, 2876494627, 1917518562, 3810496343, 1716890410, 3001755655, 800440835, 2261089178, 3543599269, 807962610, 599762354, 33778362, 3977675356, 2328828971, 2809771154, 4077384432, 1315562145, 1708848333, 101039829, 3509871135, 3299278474, 875451293, 2733856160, 92987698, 2767645557, 193195065, 1080094634, 1584504582, 3178106961, 1042385657, 2531067453, 3711829422, 1306967366, 2438237621, 1908694277, 67556463, 1615861247, 429456164, 3602770327, 2302690252, 1742315127, 2968011453, 126454664, 3877198648, 2043211483, 2709260871, 2084704233, 4169408201, 0, 159417987, 841739592, 504459436, 1817866830, 4245618683, 260388950, 1034867998, 908933415, 168810852, 1750902305, 2606453969, 607530554, 202008497, 2472011535, 3035535058, 463180190, 2160117071, 1641816226, 1517767529, 470948374, 3801332234, 3231722213, 1008918595, 303765277, 235474187, 4069246893, 766945465, 337553864, 1475418501, 2943682380, 4003061179, 2743034109, 4144047775, 1551037884, 1147550661, 1543208500, 2336434550, 3408119516, 3069049960, 3102011747, 3610369226, 1113818384, 328671808, 2227573024, 2236228733, 3535486456, 2935566865, 3341394285, 496906059, 3702665459, 226906860, 2009195472, 733156972, 2842737049, 294930682, 1206477858, 2835123396, 2700099354, 1451044056, 573804783, 2269728455, 3644379585, 2362090238, 2564033334, 2801107407, 2776292904, 3669462566, 1068351396, 742039012, 1350078989, 1784663195, 1417561698, 4136440770, 2430122216, 775550814, 2193862645, 2673705150, 1775276924, 1876241833, 3475313331, 3366754619, 270040487, 3902563182, 3678124923, 3441850377, 1851332852, 3969562369, 2203032232, 3868552805, 2868897406, 566021896, 4011190502, 3135740889, 1248802510, 3936291284, 699432150, 832877231, 708780849, 3332740144, 899835584, 1951317047, 4236429990, 3767586992, 866637845, 4043610186, 1106041591, 2144161806, 395441711, 1984812685, 1139781709, 3433712980, 3835036895, 2664543715, 1282050075, 3240894392, 1181045119, 2640243204, 25965917, 4203181171, 4211818798, 3009879386, 2463879762, 3910161971, 1842759443, 2597806476, 933301370, 1509430414, 3943906441, 3467192302, 3076639029, 3776767469, 2051518780, 2631065433, 1441952575, 404016761, 1942435775, 1408749034, 1610459739, 3745345300, 2017778566, 3400528769, 3110650942, 941896748, 3265478751, 371049330, 3168937228, 675039627, 4279080257, 967311729, 135050206, 3635733660, 1683407248, 2076935265, 3576870512, 1215061108, 3501741890], y = [1347548327, 1400783205, 3273267108, 2520393566, 3409685355, 4045380933, 2880240216, 2471224067, 1428173050, 4138563181, 2441661558, 636813900, 4233094615, 3620022987, 2149987652, 2411029155, 1239331162, 1730525723, 2554718734, 3781033664, 46346101, 310463728, 2743944855, 3328955385, 3875770207, 2501218972, 3955191162, 3667219033, 768917123, 3545789473, 692707433, 1150208456, 1786102409, 2029293177, 1805211710, 3710368113, 3065962831, 401639597, 1724457132, 3028143674, 409198410, 2196052529, 1620529459, 1164071807, 3769721975, 2226875310, 486441376, 2499348523, 1483753576, 428819965, 2274680428, 3075636216, 598438867, 3799141122, 1474502543, 711349675, 129166120, 53458370, 2592523643, 2782082824, 4063242375, 2988687269, 3120694122, 1559041666, 730517276, 2460449204, 4042459122, 2706270690, 3446004468, 3573941694, 533804130, 2328143614, 2637442643, 2695033685, 839224033, 1973745387, 957055980, 2856345839, 106852767, 1371368976, 4181598602, 1033297158, 2933734917, 1179510461, 3046200461, 91341917, 1862534868, 4284502037, 605657339, 2547432937, 3431546947, 2003294622, 3182487618, 2282195339, 954669403, 3682191598, 1201765386, 3917234703, 3388507166, 0, 2198438022, 1211247597, 2887651696, 1315723890, 4227665663, 1443857720, 507358933, 657861945, 1678381017, 560487590, 3516619604, 975451694, 2970356327, 261314535, 3535072918, 2652609425, 1333838021, 2724322336, 1767536459, 370938394, 182621114, 3854606378, 1128014560, 487725847, 185469197, 2918353863, 3106780840, 3356761769, 2237133081, 1286567175, 3152976349, 4255350624, 2683765030, 3160175349, 3309594171, 878443390, 1988838185, 3704300486, 1756818940, 1673061617, 3403100636, 272786309, 1075025698, 545572369, 2105887268, 4174560061, 296679730, 1841768865, 1260232239, 4091327024, 3960309330, 3497509347, 1814803222, 2578018489, 4195456072, 575138148, 3299409036, 446754879, 3629546796, 4011996048, 3347532110, 3252238545, 4270639778, 915985419, 3483825537, 681933534, 651868046, 2755636671, 3828103837, 223377554, 2607439820, 1649704518, 3270937875, 3901806776, 1580087799, 4118987695, 3198115200, 2087309459, 2842678573, 3016697106, 1003007129, 2802849917, 1860738147, 2077965243, 164439672, 4100872472, 32283319, 2827177882, 1709610350, 2125135846, 136428751, 3874428392, 3652904859, 3460984630, 3572145929, 3593056380, 2939266226, 824852259, 818324884, 3224740454, 930369212, 2801566410, 2967507152, 355706840, 1257309336, 4148292826, 243256656, 790073846, 2373340630, 1296297904, 1422699085, 3756299780, 3818836405, 457992840, 3099667487, 2135319889, 77422314, 1560382517, 1945798516, 788204353, 1521706781, 1385356242, 870912086, 325965383, 2358957921, 2050466060, 2388260884, 2313884476, 4006521127, 901210569, 3990953189, 1014646705, 1503449823, 1062597235, 2031621326, 3212035895, 3931371469, 1533017514, 350174575, 2256028891, 2177544179, 1052338372, 741876788, 1606591296, 1914052035, 213705253, 2334669897, 1107234197, 1899603969, 3725069491, 2631447780, 2422494913, 1635502980, 1893020342, 1950903388, 1120974935], w = [2807058932, 1699970625, 2764249623, 1586903591, 1808481195, 1173430173, 1487645946, 59984867, 4199882800, 1844882806, 1989249228, 1277555970, 3623636965, 3419915562, 1149249077, 2744104290, 1514790577, 459744698, 244860394, 3235995134, 1963115311, 4027744588, 2544078150, 4190530515, 1608975247, 2627016082, 2062270317, 1507497298, 2200818878, 567498868, 1764313568, 3359936201, 2305455554, 2037970062, 1047239e3, 1910319033, 1337376481, 2904027272, 2892417312, 984907214, 1243112415, 830661914, 861968209, 2135253587, 2011214180, 2927934315, 2686254721, 731183368, 1750626376, 4246310725, 1820824798, 4172763771, 3542330227, 48394827, 2404901663, 2871682645, 671593195, 3254988725, 2073724613, 145085239, 2280796200, 2779915199, 1790575107, 2187128086, 472615631, 3029510009, 4075877127, 3802222185, 4107101658, 3201631749, 1646252340, 4270507174, 1402811438, 1436590835, 3778151818, 3950355702, 3963161475, 4020912224, 2667994737, 273792366, 2331590177, 104699613, 95345982, 3175501286, 2377486676, 1560637892, 3564045318, 369057872, 4213447064, 3919042237, 1137477952, 2658625497, 1119727848, 2340947849, 1530455833, 4007360968, 172466556, 266959938, 516552836, 0, 2256734592, 3980931627, 1890328081, 1917742170, 4294704398, 945164165, 3575528878, 958871085, 3647212047, 2787207260, 1423022939, 775562294, 1739656202, 3876557655, 2530391278, 2443058075, 3310321856, 547512796, 1265195639, 437656594, 3121275539, 719700128, 3762502690, 387781147, 218828297, 3350065803, 2830708150, 2848461854, 428169201, 122466165, 3720081049, 1627235199, 648017665, 4122762354, 1002783846, 2117360635, 695634755, 3336358691, 4234721005, 4049844452, 3704280881, 2232435299, 574624663, 287343814, 612205898, 1039717051, 840019705, 2708326185, 793451934, 821288114, 1391201670, 3822090177, 376187827, 3113855344, 1224348052, 1679968233, 2361698556, 1058709744, 752375421, 2431590963, 1321699145, 3519142200, 2734591178, 188127444, 2177869557, 3727205754, 2384911031, 3215212461, 2648976442, 2450346104, 3432737375, 1180849278, 331544205, 3102249176, 4150144569, 2952102595, 2159976285, 2474404304, 766078933, 313773861, 2570832044, 2108100632, 1668212892, 3145456443, 2013908262, 418672217, 3070356634, 2594734927, 1852171925, 3867060991, 3473416636, 3907448597, 2614737639, 919489135, 164948639, 2094410160, 2997825956, 590424639, 2486224549, 1723872674, 3157750862, 3399941250, 3501252752, 3625268135, 2555048196, 3673637356, 1343127501, 4130281361, 3599595085, 2957853679, 1297403050, 81781910, 3051593425, 2283490410, 532201772, 1367295589, 3926170974, 895287692, 1953757831, 1093597963, 492483431, 3528626907, 1446242576, 1192455638, 1636604631, 209336225, 344873464, 1015671571, 669961897, 3375740769, 3857572124, 2973530695, 3747192018, 1933530610, 3464042516, 935293895, 3454686199, 2858115069, 1863638845, 3683022916, 4085369519, 3292445032, 875313188, 1080017571, 3279033885, 621591778, 1233856572, 2504130317, 24197544, 3017672716, 3835484340, 3247465558, 2220981195, 3060847922, 1551124588, 1463996600], _ = [4104605777, 1097159550, 396673818, 660510266, 2875968315, 2638606623, 4200115116, 3808662347, 821712160, 1986918061, 3430322568, 38544885, 3856137295, 718002117, 893681702, 1654886325, 2975484382, 3122358053, 3926825029, 4274053469, 796197571, 1290801793, 1184342925, 3556361835, 2405426947, 2459735317, 1836772287, 1381620373, 3196267988, 1948373848, 3764988233, 3385345166, 3263785589, 2390325492, 1480485785, 3111247143, 3780097726, 2293045232, 548169417, 3459953789, 3746175075, 439452389, 1362321559, 1400849762, 1685577905, 1806599355, 2174754046, 137073913, 1214797936, 1174215055, 3731654548, 2079897426, 1943217067, 1258480242, 529487843, 1437280870, 3945269170, 3049390895, 3313212038, 923313619, 679998e3, 3215307299, 57326082, 377642221, 3474729866, 2041877159, 133361907, 1776460110, 3673476453, 96392454, 878845905, 2801699524, 777231668, 4082475170, 2330014213, 4142626212, 2213296395, 1626319424, 1906247262, 1846563261, 562755902, 3708173718, 1040559837, 3871163981, 1418573201, 3294430577, 114585348, 1343618912, 2566595609, 3186202582, 1078185097, 3651041127, 3896688048, 2307622919, 425408743, 3371096953, 2081048481, 1108339068, 2216610296, 0, 2156299017, 736970802, 292596766, 1517440620, 251657213, 2235061775, 2933202493, 758720310, 265905162, 1554391400, 1532285339, 908999204, 174567692, 1474760595, 4002861748, 2610011675, 3234156416, 3693126241, 2001430874, 303699484, 2478443234, 2687165888, 585122620, 454499602, 151849742, 2345119218, 3064510765, 514443284, 4044981591, 1963412655, 2581445614, 2137062819, 19308535, 1928707164, 1715193156, 4219352155, 1126790795, 600235211, 3992742070, 3841024952, 836553431, 1669664834, 2535604243, 3323011204, 1243905413, 3141400786, 4180808110, 698445255, 2653899549, 2989552604, 2253581325, 3252932727, 3004591147, 1891211689, 2487810577, 3915653703, 4237083816, 4030667424, 2100090966, 865136418, 1229899655, 953270745, 3399679628, 3557504664, 4118925222, 2061379749, 3079546586, 2915017791, 983426092, 2022837584, 1607244650, 2118541908, 2366882550, 3635996816, 972512814, 3283088770, 1568718495, 3499326569, 3576539503, 621982671, 2895723464, 410887952, 2623762152, 1002142683, 645401037, 1494807662, 2595684844, 1335535747, 2507040230, 4293295786, 3167684641, 367585007, 3885750714, 1865862730, 2668221674, 2960971305, 2763173681, 1059270954, 2777952454, 2724642869, 1320957812, 2194319100, 2429595872, 2815956275, 77089521, 3973773121, 3444575871, 2448830231, 1305906550, 4021308739, 2857194700, 2516901860, 3518358430, 1787304780, 740276417, 1699839814, 1592394909, 2352307457, 2272556026, 188821243, 1729977011, 3687994002, 274084841, 3594982253, 3613494426, 2701949495, 4162096729, 322734571, 2837966542, 1640576439, 484830689, 1202797690, 3537852828, 4067639125, 349075736, 3342319475, 4157467219, 4255800159, 1030690015, 1155237496, 2951971274, 1757691577, 607398968, 2738905026, 499347990, 3794078908, 1011452712, 227885567, 2818666809, 213114376, 3034881240, 1455525988, 3414450555, 850817237, 1817998408, 3092726480], E = [0, 235474187, 470948374, 303765277, 941896748, 908933415, 607530554, 708780849, 1883793496, 2118214995, 1817866830, 1649639237, 1215061108, 1181045119, 1417561698, 1517767529, 3767586992, 4003061179, 4236429990, 4069246893, 3635733660, 3602770327, 3299278474, 3400528769, 2430122216, 2664543715, 2362090238, 2193862645, 2835123396, 2801107407, 3035535058, 3135740889, 3678124923, 3576870512, 3341394285, 3374361702, 3810496343, 3977675356, 4279080257, 4043610186, 2876494627, 2776292904, 3076639029, 3110650942, 2472011535, 2640243204, 2403728665, 2169303058, 1001089995, 899835584, 666464733, 699432150, 59727847, 226906860, 530400753, 294930682, 1273168787, 1172967064, 1475418501, 1509430414, 1942435775, 2110667444, 1876241833, 1641816226, 2910219766, 2743034109, 2976151520, 3211623147, 2505202138, 2606453969, 2302690252, 2269728455, 3711829422, 3543599269, 3240894392, 3475313331, 3843699074, 3943906441, 4178062228, 4144047775, 1306967366, 1139781709, 1374988112, 1610459739, 1975683434, 2076935265, 1775276924, 1742315127, 1034867998, 866637845, 566021896, 800440835, 92987698, 193195065, 429456164, 395441711, 1984812685, 2017778566, 1784663195, 1683407248, 1315562145, 1080094634, 1383856311, 1551037884, 101039829, 135050206, 437757123, 337553864, 1042385657, 807962610, 573804783, 742039012, 2531067453, 2564033334, 2328828971, 2227573024, 2935566865, 2700099354, 3001755655, 3168937228, 3868552805, 3902563182, 4203181171, 4102977912, 3736164937, 3501741890, 3265478751, 3433712980, 1106041591, 1340463100, 1576976609, 1408749034, 2043211483, 2009195472, 1708848333, 1809054150, 832877231, 1068351396, 766945465, 599762354, 159417987, 126454664, 361929877, 463180190, 2709260871, 2943682380, 3178106961, 3009879386, 2572697195, 2538681184, 2236228733, 2336434550, 3509871135, 3745345300, 3441850377, 3274667266, 3910161971, 3877198648, 4110568485, 4211818798, 2597806476, 2497604743, 2261089178, 2295101073, 2733856160, 2902087851, 3202437046, 2968011453, 3936291284, 3835036895, 4136440770, 4169408201, 3535486456, 3702665459, 3467192302, 3231722213, 2051518780, 1951317047, 1716890410, 1750902305, 1113818384, 1282050075, 1584504582, 1350078989, 168810852, 67556463, 371049330, 404016761, 841739592, 1008918595, 775550814, 540080725, 3969562369, 3801332234, 4035489047, 4269907996, 3569255213, 3669462566, 3366754619, 3332740144, 2631065433, 2463879762, 2160117071, 2395588676, 2767645557, 2868897406, 3102011747, 3069049960, 202008497, 33778362, 270040487, 504459436, 875451293, 975658646, 675039627, 641025152, 2084704233, 1917518562, 1615861247, 1851332852, 1147550661, 1248802510, 1484005843, 1451044056, 933301370, 967311729, 733156972, 632953703, 260388950, 25965917, 328671808, 496906059, 1206477858, 1239443753, 1543208500, 1441952575, 2144161806, 1908694277, 1675577880, 1842759443, 3610369226, 3644379585, 3408119516, 3307916247, 4011190502, 3776767469, 4077384432, 4245618683, 2809771154, 2842737049, 3144396420, 3043140495, 2673705150, 2438237621, 2203032232, 2370213795], M = [0, 185469197, 370938394, 487725847, 741876788, 657861945, 975451694, 824852259, 1483753576, 1400783205, 1315723890, 1164071807, 1950903388, 2135319889, 1649704518, 1767536459, 2967507152, 3152976349, 2801566410, 2918353863, 2631447780, 2547432937, 2328143614, 2177544179, 3901806776, 3818836405, 4270639778, 4118987695, 3299409036, 3483825537, 3535072918, 3652904859, 2077965243, 1893020342, 1841768865, 1724457132, 1474502543, 1559041666, 1107234197, 1257309336, 598438867, 681933534, 901210569, 1052338372, 261314535, 77422314, 428819965, 310463728, 3409685355, 3224740454, 3710368113, 3593056380, 3875770207, 3960309330, 4045380933, 4195456072, 2471224067, 2554718734, 2237133081, 2388260884, 3212035895, 3028143674, 2842678573, 2724322336, 4138563181, 4255350624, 3769721975, 3955191162, 3667219033, 3516619604, 3431546947, 3347532110, 2933734917, 2782082824, 3099667487, 3016697106, 2196052529, 2313884476, 2499348523, 2683765030, 1179510461, 1296297904, 1347548327, 1533017514, 1786102409, 1635502980, 2087309459, 2003294622, 507358933, 355706840, 136428751, 53458370, 839224033, 957055980, 605657339, 790073846, 2373340630, 2256028891, 2607439820, 2422494913, 2706270690, 2856345839, 3075636216, 3160175349, 3573941694, 3725069491, 3273267108, 3356761769, 4181598602, 4063242375, 4011996048, 3828103837, 1033297158, 915985419, 730517276, 545572369, 296679730, 446754879, 129166120, 213705253, 1709610350, 1860738147, 1945798516, 2029293177, 1239331162, 1120974935, 1606591296, 1422699085, 4148292826, 4233094615, 3781033664, 3931371469, 3682191598, 3497509347, 3446004468, 3328955385, 2939266226, 2755636671, 3106780840, 2988687269, 2198438022, 2282195339, 2501218972, 2652609425, 1201765386, 1286567175, 1371368976, 1521706781, 1805211710, 1620529459, 2105887268, 1988838185, 533804130, 350174575, 164439672, 46346101, 870912086, 954669403, 636813900, 788204353, 2358957921, 2274680428, 2592523643, 2441661558, 2695033685, 2880240216, 3065962831, 3182487618, 3572145929, 3756299780, 3270937875, 3388507166, 4174560061, 4091327024, 4006521127, 3854606378, 1014646705, 930369212, 711349675, 560487590, 272786309, 457992840, 106852767, 223377554, 1678381017, 1862534868, 1914052035, 2031621326, 1211247597, 1128014560, 1580087799, 1428173050, 32283319, 182621114, 401639597, 486441376, 768917123, 651868046, 1003007129, 818324884, 1503449823, 1385356242, 1333838021, 1150208456, 1973745387, 2125135846, 1673061617, 1756818940, 2970356327, 3120694122, 2802849917, 2887651696, 2637442643, 2520393566, 2334669897, 2149987652, 3917234703, 3799141122, 4284502037, 4100872472, 3309594171, 3460984630, 3545789473, 3629546796, 2050466060, 1899603969, 1814803222, 1730525723, 1443857720, 1560382517, 1075025698, 1260232239, 575138148, 692707433, 878443390, 1062597235, 243256656, 91341917, 409198410, 325965383, 3403100636, 3252238545, 3704300486, 3620022987, 3874428392, 3990953189, 4042459122, 4227665663, 2460449204, 2578018489, 2226875310, 2411029155, 3198115200, 3046200461, 2827177882, 2743944855], S = [0, 218828297, 437656594, 387781147, 875313188, 958871085, 775562294, 590424639, 1750626376, 1699970625, 1917742170, 2135253587, 1551124588, 1367295589, 1180849278, 1265195639, 3501252752, 3720081049, 3399941250, 3350065803, 3835484340, 3919042237, 4270507174, 4085369519, 3102249176, 3051593425, 2734591178, 2952102595, 2361698556, 2177869557, 2530391278, 2614737639, 3145456443, 3060847922, 2708326185, 2892417312, 2404901663, 2187128086, 2504130317, 2555048196, 3542330227, 3727205754, 3375740769, 3292445032, 3876557655, 3926170974, 4246310725, 4027744588, 1808481195, 1723872674, 1910319033, 2094410160, 1608975247, 1391201670, 1173430173, 1224348052, 59984867, 244860394, 428169201, 344873464, 935293895, 984907214, 766078933, 547512796, 1844882806, 1627235199, 2011214180, 2062270317, 1507497298, 1423022939, 1137477952, 1321699145, 95345982, 145085239, 532201772, 313773861, 830661914, 1015671571, 731183368, 648017665, 3175501286, 2957853679, 2807058932, 2858115069, 2305455554, 2220981195, 2474404304, 2658625497, 3575528878, 3625268135, 3473416636, 3254988725, 3778151818, 3963161475, 4213447064, 4130281361, 3599595085, 3683022916, 3432737375, 3247465558, 3802222185, 4020912224, 4172763771, 4122762354, 3201631749, 3017672716, 2764249623, 2848461854, 2331590177, 2280796200, 2431590963, 2648976442, 104699613, 188127444, 472615631, 287343814, 840019705, 1058709744, 671593195, 621591778, 1852171925, 1668212892, 1953757831, 2037970062, 1514790577, 1463996600, 1080017571, 1297403050, 3673637356, 3623636965, 3235995134, 3454686199, 4007360968, 3822090177, 4107101658, 4190530515, 2997825956, 3215212461, 2830708150, 2779915199, 2256734592, 2340947849, 2627016082, 2443058075, 172466556, 122466165, 273792366, 492483431, 1047239e3, 861968209, 612205898, 695634755, 1646252340, 1863638845, 2013908262, 1963115311, 1446242576, 1530455833, 1277555970, 1093597963, 1636604631, 1820824798, 2073724613, 1989249228, 1436590835, 1487645946, 1337376481, 1119727848, 164948639, 81781910, 331544205, 516552836, 1039717051, 821288114, 669961897, 719700128, 2973530695, 3157750862, 2871682645, 2787207260, 2232435299, 2283490410, 2667994737, 2450346104, 3647212047, 3564045318, 3279033885, 3464042516, 3980931627, 3762502690, 4150144569, 4199882800, 3070356634, 3121275539, 2904027272, 2686254721, 2200818878, 2384911031, 2570832044, 2486224549, 3747192018, 3528626907, 3310321856, 3359936201, 3950355702, 3867060991, 4049844452, 4234721005, 1739656202, 1790575107, 2108100632, 1890328081, 1402811438, 1586903591, 1233856572, 1149249077, 266959938, 48394827, 369057872, 418672217, 1002783846, 919489135, 567498868, 752375421, 209336225, 24197544, 376187827, 459744698, 945164165, 895287692, 574624663, 793451934, 1679968233, 1764313568, 2117360635, 1933530610, 1343127501, 1560637892, 1243112415, 1192455638, 3704280881, 3519142200, 3336358691, 3419915562, 3907448597, 3857572124, 4075877127, 4294704398, 3029510009, 3113855344, 2927934315, 2744104290, 2159976285, 2377486676, 2594734927, 2544078150], A = [0, 151849742, 303699484, 454499602, 607398968, 758720310, 908999204, 1059270954, 1214797936, 1097159550, 1517440620, 1400849762, 1817998408, 1699839814, 2118541908, 2001430874, 2429595872, 2581445614, 2194319100, 2345119218, 3034881240, 3186202582, 2801699524, 2951971274, 3635996816, 3518358430, 3399679628, 3283088770, 4237083816, 4118925222, 4002861748, 3885750714, 1002142683, 850817237, 698445255, 548169417, 529487843, 377642221, 227885567, 77089521, 1943217067, 2061379749, 1640576439, 1757691577, 1474760595, 1592394909, 1174215055, 1290801793, 2875968315, 2724642869, 3111247143, 2960971305, 2405426947, 2253581325, 2638606623, 2487810577, 3808662347, 3926825029, 4044981591, 4162096729, 3342319475, 3459953789, 3576539503, 3693126241, 1986918061, 2137062819, 1685577905, 1836772287, 1381620373, 1532285339, 1078185097, 1229899655, 1040559837, 923313619, 740276417, 621982671, 439452389, 322734571, 137073913, 19308535, 3871163981, 4021308739, 4104605777, 4255800159, 3263785589, 3414450555, 3499326569, 3651041127, 2933202493, 2815956275, 3167684641, 3049390895, 2330014213, 2213296395, 2566595609, 2448830231, 1305906550, 1155237496, 1607244650, 1455525988, 1776460110, 1626319424, 2079897426, 1928707164, 96392454, 213114376, 396673818, 514443284, 562755902, 679998e3, 865136418, 983426092, 3708173718, 3557504664, 3474729866, 3323011204, 4180808110, 4030667424, 3945269170, 3794078908, 2507040230, 2623762152, 2272556026, 2390325492, 2975484382, 3092726480, 2738905026, 2857194700, 3973773121, 3856137295, 4274053469, 4157467219, 3371096953, 3252932727, 3673476453, 3556361835, 2763173681, 2915017791, 3064510765, 3215307299, 2156299017, 2307622919, 2459735317, 2610011675, 2081048481, 1963412655, 1846563261, 1729977011, 1480485785, 1362321559, 1243905413, 1126790795, 878845905, 1030690015, 645401037, 796197571, 274084841, 425408743, 38544885, 188821243, 3613494426, 3731654548, 3313212038, 3430322568, 4082475170, 4200115116, 3780097726, 3896688048, 2668221674, 2516901860, 2366882550, 2216610296, 3141400786, 2989552604, 2837966542, 2687165888, 1202797690, 1320957812, 1437280870, 1554391400, 1669664834, 1787304780, 1906247262, 2022837584, 265905162, 114585348, 499347990, 349075736, 736970802, 585122620, 972512814, 821712160, 2595684844, 2478443234, 2293045232, 2174754046, 3196267988, 3079546586, 2895723464, 2777952454, 3537852828, 3687994002, 3234156416, 3385345166, 4142626212, 4293295786, 3841024952, 3992742070, 174567692, 57326082, 410887952, 292596766, 777231668, 660510266, 1011452712, 893681702, 1108339068, 1258480242, 1343618912, 1494807662, 1715193156, 1865862730, 1948373848, 2100090966, 2701949495, 2818666809, 3004591147, 3122358053, 2235061775, 2352307457, 2535604243, 2653899549, 3915653703, 3764988233, 4219352155, 4067639125, 3444575871, 3294430577, 3746175075, 3594982253, 836553431, 953270745, 600235211, 718002117, 367585007, 484830689, 133361907, 251657213, 2041877159, 1891211689, 1806599355, 1654886325, 1568718495, 1418573201, 1335535747, 1184342925];
        function k(e) {
            for (var t = [], r = 0; r < e.length; r += 4)
                t.push(e[r] << 24 | e[r + 1] << 16 | e[r + 2] << 8 | e[r + 3]);
            return t
        }
        var x = function(e) {
            if (!(this instanceof x))
                throw Error("AES must be instanitated with `new`");
            Object.defineProperty(this, "key", {
                value: n(e, !0)
            }),
            this._prepare()
        };
        x.prototype._prepare = function() {
            var e = c[this.key.length];
            if (null == e)
                throw new Error("invalid key size (must be 16, 24 or 32 bytes)");
            this._Ke = [],
            this._Kd = [];
            for (var t = 0; t <= e; t++)
                this._Ke.push([0, 0, 0, 0]),
                this._Kd.push([0, 0, 0, 0]);
            var r, i = 4 * (e + 1), n = this.key.length / 4, o = k(this.key);
            for (t = 0; t < n; t++)
                r = t >> 2,
                this._Ke[r][t % 4] = o[t],
                this._Kd[e - r][t % 4] = o[t];
            for (var a, s = 0, u = n; u < i; ) {
                if (a = o[n - 1],
                o[0] ^= l[a >> 16 & 255] << 24 ^ l[a >> 8 & 255] << 16 ^ l[255 & a] << 8 ^ l[a >> 24 & 255] ^ h[s] << 24,
                s += 1,
                8 != n)
                    for (t = 1; t < n; t++)
                        o[t] ^= o[t - 1];
                else {
                    for (t = 1; t < n / 2; t++)
                        o[t] ^= o[t - 1];
                    a = o[n / 2 - 1],
                    o[n / 2] ^= l[255 & a] ^ l[a >> 8 & 255] << 8 ^ l[a >> 16 & 255] << 16 ^ l[a >> 24 & 255] << 24;
                    for (t = n / 2 + 1; t < n; t++)
                        o[t] ^= o[t - 1]
                }
                for (t = 0; t < n && u < i; )
                    f = u >> 2,
                    d = u % 4,
                    this._Ke[f][d] = o[t],
                    this._Kd[e - f][d] = o[t++],
                    u++
            }
            for (var f = 1; f < e; f++)
                for (var d = 0; d < 4; d++)
                    a = this._Kd[f][d],
                    this._Kd[f][d] = E[a >> 24 & 255] ^ M[a >> 16 & 255] ^ S[a >> 8 & 255] ^ A[255 & a]
        }
        ,
        x.prototype.encrypt = function(e) {
            if (16 != e.length)
                throw new Error("invalid plaintext size (must be 16 bytes)");
            for (var t = this._Ke.length - 1, r = [0, 0, 0, 0], i = k(e), n = 0; n < 4; n++)
                i[n] ^= this._Ke[0][n];
            for (var a = 1; a < t; a++) {
                for (n = 0; n < 4; n++)
                    r[n] = p[i[n] >> 24 & 255] ^ b[i[(n + 1) % 4] >> 16 & 255] ^ m[i[(n + 2) % 4] >> 8 & 255] ^ g[255 & i[(n + 3) % 4]] ^ this._Ke[a][n];
                i = r.slice()
            }
            var s, u = o(16);
            for (n = 0; n < 4; n++)
                s = this._Ke[t][n],
                u[4 * n] = 255 & (l[i[n] >> 24 & 255] ^ s >> 24),
                u[4 * n + 1] = 255 & (l[i[(n + 1) % 4] >> 16 & 255] ^ s >> 16),
                u[4 * n + 2] = 255 & (l[i[(n + 2) % 4] >> 8 & 255] ^ s >> 8),
                u[4 * n + 3] = 255 & (l[255 & i[(n + 3) % 4]] ^ s);
            return u
        }
        ,
        x.prototype.decrypt = function(e) {
            if (16 != e.length)
                throw new Error("invalid ciphertext size (must be 16 bytes)");
            for (var t = this._Kd.length - 1, r = [0, 0, 0, 0], i = k(e), n = 0; n < 4; n++)
                i[n] ^= this._Kd[0][n];
            for (var a = 1; a < t; a++) {
                for (n = 0; n < 4; n++)
                    r[n] = v[i[n] >> 24 & 255] ^ y[i[(n + 3) % 4] >> 16 & 255] ^ w[i[(n + 2) % 4] >> 8 & 255] ^ _[255 & i[(n + 1) % 4]] ^ this._Kd[a][n];
                i = r.slice()
            }
            var s, u = o(16);
            for (n = 0; n < 4; n++)
                s = this._Kd[t][n],
                u[4 * n] = 255 & (d[i[n] >> 24 & 255] ^ s >> 24),
                u[4 * n + 1] = 255 & (d[i[(n + 3) % 4] >> 16 & 255] ^ s >> 16),
                u[4 * n + 2] = 255 & (d[i[(n + 2) % 4] >> 8 & 255] ^ s >> 8),
                u[4 * n + 3] = 255 & (d[255 & i[(n + 1) % 4]] ^ s);
            return u
        }
        ;
        var R = function(e) {
            if (!(this instanceof R))
                throw Error("AES must be instanitated with `new`");
            this.description = "Electronic Code Block",
            this.name = "ecb",
            this._aes = new x(e)
        };
        R.prototype.encrypt = function(e) {
            if ((e = n(e)).length % 16 != 0)
                throw new Error("invalid plaintext size (must be multiple of 16 bytes)");
            for (var t = o(e.length), r = o(16), i = 0; i < e.length; i += 16)
                a(e, r, 0, i, i + 16),
                a(r = this._aes.encrypt(r), t, i);
            return t
        }
        ,
        R.prototype.decrypt = function(e) {
            if ((e = n(e)).length % 16 != 0)
                throw new Error("invalid ciphertext size (must be multiple of 16 bytes)");
            for (var t = o(e.length), r = o(16), i = 0; i < e.length; i += 16)
                a(e, r, 0, i, i + 16),
                a(r = this._aes.decrypt(r), t, i);
            return t
        }
        ;
        var I = function(e, t) {
            if (!(this instanceof I))
                throw Error("AES must be instanitated with `new`");
            if (this.description = "Cipher Block Chaining",
            this.name = "cbc",
            t) {
                if (16 != t.length)
                    throw new Error("invalid initialation vector size (must be 16 bytes)")
            } else
                t = o(16);
            this._lastCipherblock = n(t, !0),
            this._aes = new x(e)
        };
        I.prototype.encrypt = function(e) {
            if ((e = n(e)).length % 16 != 0)
                throw new Error("invalid plaintext size (must be multiple of 16 bytes)");
            for (var t = o(e.length), r = o(16), i = 0; i < e.length; i += 16) {
                a(e, r, 0, i, i + 16);
                for (var s = 0; s < 16; s++)
                    r[s] ^= this._lastCipherblock[s];
                this._lastCipherblock = this._aes.encrypt(r),
                a(this._lastCipherblock, t, i)
            }
            return t
        }
        ,
        I.prototype.decrypt = function(e) {
            if ((e = n(e)).length % 16 != 0)
                throw new Error("invalid ciphertext size (must be multiple of 16 bytes)");
            for (var t = o(e.length), r = o(16), i = 0; i < e.length; i += 16) {
                a(e, r, 0, i, i + 16),
                r = this._aes.decrypt(r);
                for (var s = 0; s < 16; s++)
                    t[i + s] = r[s] ^ this._lastCipherblock[s];
                a(e, this._lastCipherblock, 0, i, i + 16)
            }
            return t
        }
        ;
        var T = function(e, t, r) {
            if (!(this instanceof T))
                throw Error("AES must be instanitated with `new`");
            if (this.description = "Cipher Feedback",
            this.name = "cfb",
            t) {
                if (16 != t.length)
                    throw new Error("invalid initialation vector size (must be 16 size)")
            } else
                t = o(16);
            r || (r = 1),
            this.segmentSize = r,
            this._shiftRegister = n(t, !0),
            this._aes = new x(e)
        };
        T.prototype.encrypt = function(e) {
            if (e.length % this.segmentSize != 0)
                throw new Error("invalid plaintext size (must be segmentSize bytes)");
            for (var t, r = n(e, !0), i = 0; i < r.length; i += this.segmentSize) {
                t = this._aes.encrypt(this._shiftRegister);
                for (var o = 0; o < this.segmentSize; o++)
                    r[i + o] ^= t[o];
                a(this._shiftRegister, this._shiftRegister, 0, this.segmentSize),
                a(r, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize)
            }
            return r
        }
        ,
        T.prototype.decrypt = function(e) {
            if (e.length % this.segmentSize != 0)
                throw new Error("invalid ciphertext size (must be segmentSize bytes)");
            for (var t, r = n(e, !0), i = 0; i < r.length; i += this.segmentSize) {
                t = this._aes.encrypt(this._shiftRegister);
                for (var o = 0; o < this.segmentSize; o++)
                    r[i + o] ^= t[o];
                a(this._shiftRegister, this._shiftRegister, 0, this.segmentSize),
                a(e, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize)
            }
            return r
        }
        ;
        var P = function(e, t) {
            if (!(this instanceof P))
                throw Error("AES must be instanitated with `new`");
            if (this.description = "Output Feedback",
            this.name = "ofb",
            t) {
                if (16 != t.length)
                    throw new Error("invalid initialation vector size (must be 16 bytes)")
            } else
                t = o(16);
            this._lastPrecipher = n(t, !0),
            this._lastPrecipherIndex = 16,
            this._aes = new x(e)
        };
        P.prototype.encrypt = function(e) {
            for (var t = n(e, !0), r = 0; r < t.length; r++)
                16 === this._lastPrecipherIndex && (this._lastPrecipher = this._aes.encrypt(this._lastPrecipher),
                this._lastPrecipherIndex = 0),
                t[r] ^= this._lastPrecipher[this._lastPrecipherIndex++];
            return t
        }
        ,
        P.prototype.decrypt = P.prototype.encrypt;
        var N = function(e) {
            if (!(this instanceof N))
                throw Error("Counter must be instanitated with `new`");
            0 === e || e || (e = 1),
            "number" == typeof e ? (this._counter = o(16),
            this.setValue(e)) : this.setBytes(e)
        };
        N.prototype.setValue = function(e) {
            if ("number" != typeof e || parseInt(e) != e)
                throw new Error("invalid counter value (must be an integer)");
            if (e > Number.MAX_SAFE_INTEGER)
                throw new Error("integer value out of safe range");
            for (var t = 15; t >= 0; --t)
                this._counter[t] = e % 256,
                e = parseInt(e / 256)
        }
        ,
        N.prototype.setBytes = function(e) {
            if (16 != (e = n(e, !0)).length)
                throw new Error("invalid counter bytes size (must be 16 bytes)");
            this._counter = e
        }
        ,
        N.prototype.increment = function() {
            for (var e = 15; e >= 0; e--) {
                if (255 !== this._counter[e]) {
                    this._counter[e]++;
                    break
                }
                this._counter[e] = 0
            }
        }
        ;
        var C = function(e, t) {
            if (!(this instanceof C))
                throw Error("AES must be instanitated with `new`");
            this.description = "Counter",
            this.name = "ctr",
            t instanceof N || (t = new N(t)),
            this._counter = t,
            this._remainingCounter = null,
            this._remainingCounterIndex = 16,
            this._aes = new x(e)
        };
        C.prototype.encrypt = function(e) {
            for (var t = n(e, !0), r = 0; r < t.length; r++)
                16 === this._remainingCounterIndex && (this._remainingCounter = this._aes.encrypt(this._counter._counter),
                this._remainingCounterIndex = 0,
                this._counter.increment()),
                t[r] ^= this._remainingCounter[this._remainingCounterIndex++];
            return t
        }
        ,
        C.prototype.decrypt = C.prototype.encrypt;
        var B = {
            AES: x,
            Counter: N,
            ModeOfOperation: {
                ecb: R,
                cbc: I,
                cfb: T,
                ofb: P,
                ctr: C
            },
            utils: {
                hex: f,
                utf8: u
            },
            padding: {
                pkcs7: {
                    pad: function(e) {
                        var t = 16 - (e = n(e, !0)).length % 16
                          , r = o(e.length + t);
                        a(e, r);
                        for (var i = e.length; i < r.length; i++)
                            r[i] = t;
                        return r
                    },
                    strip: function(e) {
                        if ((e = n(e, !0)).length < 16)
                            throw new Error("PKCS#7 invalid length");
                        var t = e[e.length - 1];
                        if (t > 16)
                            throw new Error("PKCS#7 padding byte out of range");
                        for (var r = e.length - t, i = 0; i < t; i++)
                            if (e[r + i] !== t)
                                throw new Error("PKCS#7 invalid padding byte");
                        var s = o(r);
                        return a(e, s, 0, 0, r),
                        s
                    }
                }
            },
            _arrayTest: {
                coerceArray: n,
                createArray: o,
                copyArray: a
            }
        };
        e.exports = B
    }()
}
, function(e, t, r) {
    "use strict";
    var i = r(8).Buffer
      , n = r(4)
      , o = r(118)
      , a = new Array(16)
      , s = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13]
      , u = [5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11]
      , f = [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6]
      , c = [8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11]
      , h = [0, 1518500249, 1859775393, 2400959708, 2840853838]
      , l = [1352829926, 1548603684, 1836072691, 2053994217, 0];
    function d() {
        o.call(this, 64),
        this._a = 1732584193,
        this._b = 4023233417,
        this._c = 2562383102,
        this._d = 271733878,
        this._e = 3285377520
    }
    function p(e, t) {
        return e << t | e >>> 32 - t
    }
    function b(e, t, r, i, n, o, a, s) {
        return p(e + (t ^ r ^ i) + o + a | 0, s) + n | 0
    }
    function m(e, t, r, i, n, o, a, s) {
        return p(e + (t & r | ~t & i) + o + a | 0, s) + n | 0
    }
    function g(e, t, r, i, n, o, a, s) {
        return p(e + ((t | ~r) ^ i) + o + a | 0, s) + n | 0
    }
    function v(e, t, r, i, n, o, a, s) {
        return p(e + (t & i | r & ~i) + o + a | 0, s) + n | 0
    }
    function y(e, t, r, i, n, o, a, s) {
        return p(e + (t ^ (r | ~i)) + o + a | 0, s) + n | 0
    }
    n(d, o),
    d.prototype._update = function() {
        for (var e = a, t = 0; t < 16; ++t)
            e[t] = this._block.readInt32LE(4 * t);
        for (var r = 0 | this._a, i = 0 | this._b, n = 0 | this._c, o = 0 | this._d, d = 0 | this._e, w = 0 | this._a, _ = 0 | this._b, E = 0 | this._c, M = 0 | this._d, S = 0 | this._e, A = 0; A < 80; A += 1) {
            var k, x;
            A < 16 ? (k = b(r, i, n, o, d, e[s[A]], h[0], f[A]),
            x = y(w, _, E, M, S, e[u[A]], l[0], c[A])) : A < 32 ? (k = m(r, i, n, o, d, e[s[A]], h[1], f[A]),
            x = v(w, _, E, M, S, e[u[A]], l[1], c[A])) : A < 48 ? (k = g(r, i, n, o, d, e[s[A]], h[2], f[A]),
            x = g(w, _, E, M, S, e[u[A]], l[2], c[A])) : A < 64 ? (k = v(r, i, n, o, d, e[s[A]], h[3], f[A]),
            x = m(w, _, E, M, S, e[u[A]], l[3], c[A])) : (k = y(r, i, n, o, d, e[s[A]], h[4], f[A]),
            x = b(w, _, E, M, S, e[u[A]], l[4], c[A])),
            r = d,
            d = o,
            o = p(n, 10),
            n = i,
            i = k,
            w = S,
            S = M,
            M = p(E, 10),
            E = _,
            _ = x
        }
        var R = this._b + n + M | 0;
        this._b = this._c + o + S | 0,
        this._c = this._d + d + w | 0,
        this._d = this._e + r + _ | 0,
        this._e = this._a + i + E | 0,
        this._a = R
    }
    ,
    d.prototype._digest = function() {
        this._block[this._blockOffset++] = 128,
        this._blockOffset > 56 && (this._block.fill(0, this._blockOffset, 64),
        this._update(),
        this._blockOffset = 0),
        this._block.fill(0, this._blockOffset, 56),
        this._block.writeUInt32LE(this._length[0], 56),
        this._block.writeUInt32LE(this._length[1], 60),
        this._update();
        var e = i.alloc ? i.alloc(20) : new i(20);
        return e.writeInt32LE(this._a, 0),
        e.writeInt32LE(this._b, 4),
        e.writeInt32LE(this._c, 8),
        e.writeInt32LE(this._d, 12),
        e.writeInt32LE(this._e, 16),
        e
    }
    ,
    e.exports = d
}
, function(e, t, r) {
    (t = e.exports = r(127)).Stream = t,
    t.Readable = t,
    t.Writable = r(83),
    t.Duplex = r(35),
    t.Transform = r(130),
    t.PassThrough = r(236)
}
, , , , , , , function(e, t, r) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }),
    t.isKeyString = function(e, t) {
        return !!e.replace("0x", "").match("^[0-9a-fA-F]{" + t + "}$")
    }
    ,
    t.isKeyString.validator = "isKeyString",
    t.isAddress = function(e) {
        return t.isKeyString(e, 40)
    }
    ,
    t.isAddress.validator = "isAddress",
    t.isPrivateKey = function(e) {
        return t.isKeyString(e, 64)
    }
    ,
    t.isPrivateKey.validator = "isPrivateKey",
    t.isPublicKey = function(e) {
        return t.isKeyString(e, 66)
    }
    ,
    t.isPublicKey.validator = "isPublicKey",
    t.isHash = function(e) {
        return t.isKeyString(e, 64)
    }
    ,
    t.isHash.validator = "isHash",
    t.isNumber = function(e) {
        return e === +e
    }
    ,
    t.isNumber.validator = "isNumber",
    t.isInt = function(e) {
        return t.isNumber(e) && Number.isInteger(e)
    }
    ,
    t.isInt.validator = "isInt",
    t.isString = function(e) {
        return e === "" + e
    }
    ,
    t.isString.validator = "isString",
    t.isBoolean = function(e) {
        return e === !!e
    }
    ,
    t.isBoolean.validator = "isBoolean",
    t.isArray = function(e) {
        return Array.isArray(e)
    }
    ,
    t.isArray.validator = "isArray",
    t.isJsonString = function(e) {
        try {
            return !!JSON.parse(e) && t.isObject(JSON.parse(e))
        } catch (e) {
            return !1
        }
    }
    ,
    t.isJsonString.validator = "isJsonString",
    t.isObject = function(e) {
        return null !== e && !Array.isArray(e) && "object" == typeof e
    }
    ,
    t.isObject.validator = "isObject",
    t.isFunction = function(e) {
        return "function" == typeof e
    }
    ,
    t.isFunction.validator = "isFunction",
    t.isHex = function(e) {
        if (!t.isString(e))
            throw new Error(e + " is not string");
        return (e.startsWith("0x") || e.startsWith("-0x")) && t.isNumber(Number.parseInt(("" + e).toLowerCase().replace("0x", ""), 16))
    }
    ,
    t.isHex.validator = "isHex",
    t.isHttp = function(e) {
        if (t.isString(e))
            return e.startsWith("http://") || e.startsWith("https://");
        throw new Error(e + " is not valid url")
    }
    ,
    t.isHttp.validator = "isHttp",
    t.isWs = function(e) {
        if (t.isString(e))
            return e.startsWith("ws://") || e.startsWith("wss://");
        throw new Error(e + " is not valid url")
    }
    ,
    t.isWs.validator = "isWs",
    function(e) {
        e.earliest = "earliest",
        e.pending = "pending",
        e.latest = "latest"
    }(t.DefaultBlockParams || (t.DefaultBlockParams = {})),
    t.isBlockNumber = function(e) {
        if (!t.isString(e))
            throw new Error(e + " is not valid blockNumber");
        return t.isHex(e) || ["earliest", "pending", "latest"].some((function(t) {
            return t === e
        }
        ))
    }
    ,
    t.isBlockNumber.validator = "isBlockNumber",
    t.isBech32Address = function(e) {
        return !!e.match(/^one1[qpzry9x8gf2tvdw0s3jn54khce6mua7l]{38}/)
    }
    ,
    t.isBech32Address.validator = "isBech32Address",
    t.isBech32TestNetAddress = function(e) {
        return !!e.match(/^tone1[qpzry9x8gf2tvdw0s3jn54khce6mua7l]{38}/)
    }
    ,
    t.isBech32TestNetAddress.validator = "isBech32TestNetAddress",
    t.isValidAddress = function(e) {
        if (!t.isString(e))
            throw new Error(e + " is not string");
        return !!(t.isAddress(e) || t.isBech32Address(e) || t.isBech32TestNetAddress(e))
    }
    ,
    t.isValidAddress.validator = "isValidAddress"
}
, function(e, t, r) {
    "use strict";
    var i = r(4)
      , n = r(118)
      , o = r(5).Buffer
      , a = new Array(16);
    function s() {
        n.call(this, 64),
        this._a = 1732584193,
        this._b = 4023233417,
        this._c = 2562383102,
        this._d = 271733878
    }
    function u(e, t) {
        return e << t | e >>> 32 - t
    }
    function f(e, t, r, i, n, o, a) {
        return u(e + (t & r | ~t & i) + n + o | 0, a) + t | 0
    }
    function c(e, t, r, i, n, o, a) {
        return u(e + (t & i | r & ~i) + n + o | 0, a) + t | 0
    }
    function h(e, t, r, i, n, o, a) {
        return u(e + (t ^ r ^ i) + n + o | 0, a) + t | 0
    }
    function l(e, t, r, i, n, o, a) {
        return u(e + (r ^ (t | ~i)) + n + o | 0, a) + t | 0
    }
    i(s, n),
    s.prototype._update = function() {
        for (var e = a, t = 0; t < 16; ++t)
            e[t] = this._block.readInt32LE(4 * t);
        var r = this._a
          , i = this._b
          , n = this._c
          , o = this._d;
        r = f(r, i, n, o, e[0], 3614090360, 7),
        o = f(o, r, i, n, e[1], 3905402710, 12),
        n = f(n, o, r, i, e[2], 606105819, 17),
        i = f(i, n, o, r, e[3], 3250441966, 22),
        r = f(r, i, n, o, e[4], 4118548399, 7),
        o = f(o, r, i, n, e[5], 1200080426, 12),
        n = f(n, o, r, i, e[6], 2821735955, 17),
        i = f(i, n, o, r, e[7], 4249261313, 22),
        r = f(r, i, n, o, e[8], 1770035416, 7),
        o = f(o, r, i, n, e[9], 2336552879, 12),
        n = f(n, o, r, i, e[10], 4294925233, 17),
        i = f(i, n, o, r, e[11], 2304563134, 22),
        r = f(r, i, n, o, e[12], 1804603682, 7),
        o = f(o, r, i, n, e[13], 4254626195, 12),
        n = f(n, o, r, i, e[14], 2792965006, 17),
        r = c(r, i = f(i, n, o, r, e[15], 1236535329, 22), n, o, e[1], 4129170786, 5),
        o = c(o, r, i, n, e[6], 3225465664, 9),
        n = c(n, o, r, i, e[11], 643717713, 14),
        i = c(i, n, o, r, e[0], 3921069994, 20),
        r = c(r, i, n, o, e[5], 3593408605, 5),
        o = c(o, r, i, n, e[10], 38016083, 9),
        n = c(n, o, r, i, e[15], 3634488961, 14),
        i = c(i, n, o, r, e[4], 3889429448, 20),
        r = c(r, i, n, o, e[9], 568446438, 5),
        o = c(o, r, i, n, e[14], 3275163606, 9),
        n = c(n, o, r, i, e[3], 4107603335, 14),
        i = c(i, n, o, r, e[8], 1163531501, 20),
        r = c(r, i, n, o, e[13], 2850285829, 5),
        o = c(o, r, i, n, e[2], 4243563512, 9),
        n = c(n, o, r, i, e[7], 1735328473, 14),
        r = h(r, i = c(i, n, o, r, e[12], 2368359562, 20), n, o, e[5], 4294588738, 4),
        o = h(o, r, i, n, e[8], 2272392833, 11),
        n = h(n, o, r, i, e[11], 1839030562, 16),
        i = h(i, n, o, r, e[14], 4259657740, 23),
        r = h(r, i, n, o, e[1], 2763975236, 4),
        o = h(o, r, i, n, e[4], 1272893353, 11),
        n = h(n, o, r, i, e[7], 4139469664, 16),
        i = h(i, n, o, r, e[10], 3200236656, 23),
        r = h(r, i, n, o, e[13], 681279174, 4),
        o = h(o, r, i, n, e[0], 3936430074, 11),
        n = h(n, o, r, i, e[3], 3572445317, 16),
        i = h(i, n, o, r, e[6], 76029189, 23),
        r = h(r, i, n, o, e[9], 3654602809, 4),
        o = h(o, r, i, n, e[12], 3873151461, 11),
        n = h(n, o, r, i, e[15], 530742520, 16),
        r = l(r, i = h(i, n, o, r, e[2], 3299628645, 23), n, o, e[0], 4096336452, 6),
        o = l(o, r, i, n, e[7], 1126891415, 10),
        n = l(n, o, r, i, e[14], 2878612391, 15),
        i = l(i, n, o, r, e[5], 4237533241, 21),
        r = l(r, i, n, o, e[12], 1700485571, 6),
        o = l(o, r, i, n, e[3], 2399980690, 10),
        n = l(n, o, r, i, e[10], 4293915773, 15),
        i = l(i, n, o, r, e[1], 2240044497, 21),
        r = l(r, i, n, o, e[8], 1873313359, 6),
        o = l(o, r, i, n, e[15], 4264355552, 10),
        n = l(n, o, r, i, e[6], 2734768916, 15),
        i = l(i, n, o, r, e[13], 1309151649, 21),
        r = l(r, i, n, o, e[4], 4149444226, 6),
        o = l(o, r, i, n, e[11], 3174756917, 10),
        n = l(n, o, r, i, e[2], 718787259, 15),
        i = l(i, n, o, r, e[9], 3951481745, 21),
        this._a = this._a + r | 0,
        this._b = this._b + i | 0,
        this._c = this._c + n | 0,
        this._d = this._d + o | 0
    }
    ,
    s.prototype._digest = function() {
        this._block[this._blockOffset++] = 128,
        this._blockOffset > 56 && (this._block.fill(0, this._blockOffset, 64),
        this._update(),
        this._blockOffset = 0),
        this._block.fill(0, this._blockOffset, 56),
        this._block.writeUInt32LE(this._length[0], 56),
        this._block.writeUInt32LE(this._length[1], 60),
        this._update();
        var e = o.allocUnsafe(16);
        return e.writeInt32LE(this._a, 0),
        e.writeInt32LE(this._b, 4),
        e.writeInt32LE(this._c, 8),
        e.writeInt32LE(this._d, 12),
        e
    }
    ,
    e.exports = s
}
, function(e, t, r) {
    (function(t) {
        function r(e) {
            try {
                if (!t.localStorage)
                    return !1
            } catch (e) {
                return !1
            }
            var r = t.localStorage[e];
            return null != r && "true" === String(r).toLowerCase()
        }
        e.exports = function(e, t) {
            if (r("noDeprecation"))
                return e;
            var i = !1;
            return function() {
                if (!i) {
                    if (r("throwDeprecation"))
                        throw new Error(t);
                    r("traceDeprecation") ? console.trace(t) : console.warn(t),
                    i = !0
                }
                return e.apply(this, arguments)
            }
        }
    }
    ).call(this, r(13))
}
, function(e, t, r) {
    "use strict";
    var i = r(41).codes.ERR_STREAM_PREMATURE_CLOSE;
    function n() {}
    e.exports = function e(t, r, o) {
        if ("function" == typeof r)
            return e(t, null, r);
        r || (r = {}),
        o = function(e) {
            var t = !1;
            return function() {
                if (!t) {
                    t = !0;
                    for (var r = arguments.length, i = new Array(r), n = 0; n < r; n++)
                        i[n] = arguments[n];
                    e.apply(this, i)
                }
            }
        }(o || n);
        var a = r.readable || !1 !== r.readable && t.readable
          , s = r.writable || !1 !== r.writable && t.writable
          , u = function() {
            t.writable || c()
        }
          , f = t._writableState && t._writableState.finished
          , c = function() {
            s = !1,
            f = !0,
            a || o.call(t)
        }
          , h = t._readableState && t._readableState.endEmitted
          , l = function() {
            a = !1,
            h = !0,
            s || o.call(t)
        }
          , d = function(e) {
            o.call(t, e)
        }
          , p = function() {
            var e;
            return a && !h ? (t._readableState && t._readableState.ended || (e = new i),
            o.call(t, e)) : s && !f ? (t._writableState && t._writableState.ended || (e = new i),
            o.call(t, e)) : void 0
        }
          , b = function() {
            t.req.on("finish", c)
        };
        return !function(e) {
            return e.setHeader && "function" == typeof e.abort
        }(t) ? s && !t._writableState && (t.on("end", u),
        t.on("close", u)) : (t.on("complete", c),
        t.on("abort", p),
        t.req ? b() : t.on("request", b)),
        t.on("end", l),
        t.on("finish", c),
        !1 !== r.error && t.on("error", d),
        t.on("close", p),
        function() {
            t.removeListener("complete", c),
            t.removeListener("abort", p),
            t.removeListener("request", b),
            t.req && t.req.removeListener("finish", c),
            t.removeListener("end", u),
            t.removeListener("close", u),
            t.removeListener("finish", c),
            t.removeListener("end", l),
            t.removeListener("error", d),
            t.removeListener("close", p)
        }
    }
}
, function(e, t, r) {
    (t = e.exports = function(e) {
        e = e.toLowerCase();
        var r = t[e];
        if (!r)
            throw new Error(e + " is not supported (we accept pull requests)");
        return new r
    }
    ).sha = r(227),
    t.sha1 = r(228),
    t.sha224 = r(229),
    t.sha256 = r(125),
    t.sha384 = r(230),
    t.sha512 = r(126)
}
, function(e, t, r) {
    var i = r(8)
      , n = i.Buffer;
    function o(e, t) {
        for (var r in e)
            t[r] = e[r]
    }
    function a(e, t, r) {
        return n(e, t, r)
    }
    n.from && n.alloc && n.allocUnsafe && n.allocUnsafeSlow ? e.exports = i : (o(i, t),
    t.Buffer = a),
    o(n, a),
    a.from = function(e, t, r) {
        if ("number" == typeof e)
            throw new TypeError("Argument must not be a number");
        return n(e, t, r)
    }
    ,
    a.alloc = function(e, t, r) {
        if ("number" != typeof e)
            throw new TypeError("Argument must be a number");
        var i = n(e);
        return void 0 !== t ? "string" == typeof r ? i.fill(t, r) : i.fill(t) : i.fill(0),
        i
    }
    ,
    a.allocUnsafe = function(e) {
        if ("number" != typeof e)
            throw new TypeError("Argument must be a number");
        return n(e)
    }
    ,
    a.allocUnsafeSlow = function(e) {
        if ("number" != typeof e)
            throw new TypeError("Argument must be a number");
        return i.SlowBuffer(e)
    }
}
, function(e, t, r) {
    "use strict";
    (function(t, i, n) {
        var o = r(60);
        function a(e) {
            var t = this;
            this.next = null,
            this.entry = null,
            this.finish = function() {
                !function(e, t, r) {
                    var i = e.entry;
                    e.entry = null;
                    for (; i; ) {
                        var n = i.callback;
                        t.pendingcb--,
                        n(r),
                        i = i.next
                    }
                    t.corkedRequestsFree ? t.corkedRequestsFree.next = e : t.corkedRequestsFree = e
                }(t, e)
            }
        }
        e.exports = v;
        var s, u = !t.browser && ["v0.10", "v0.9."].indexOf(t.version.slice(0, 5)) > -1 ? i : o.nextTick;
        v.WritableState = g;
        var f = Object.create(r(52));
        f.inherits = r(4);
        var c = {
            deprecate: r(79)
        }
          , h = r(128)
          , l = r(82).Buffer
          , d = n.Uint8Array || function() {}
        ;
        var p, b = r(129);
        function m() {}
        function g(e, t) {
            s = s || r(35),
            e = e || {};
            var i = t instanceof s;
            this.objectMode = !!e.objectMode,
            i && (this.objectMode = this.objectMode || !!e.writableObjectMode);
            var n = e.highWaterMark
              , f = e.writableHighWaterMark
              , c = this.objectMode ? 16 : 16384;
            this.highWaterMark = n || 0 === n ? n : i && (f || 0 === f) ? f : c,
            this.highWaterMark = Math.floor(this.highWaterMark),
            this.finalCalled = !1,
            this.needDrain = !1,
            this.ending = !1,
            this.ended = !1,
            this.finished = !1,
            this.destroyed = !1;
            var h = !1 === e.decodeStrings;
            this.decodeStrings = !h,
            this.defaultEncoding = e.defaultEncoding || "utf8",
            this.length = 0,
            this.writing = !1,
            this.corked = 0,
            this.sync = !0,
            this.bufferProcessing = !1,
            this.onwrite = function(e) {
                !function(e, t) {
                    var r = e._writableState
                      , i = r.sync
                      , n = r.writecb;
                    if (function(e) {
                        e.writing = !1,
                        e.writecb = null,
                        e.length -= e.writelen,
                        e.writelen = 0
                    }(r),
                    t)
                        !function(e, t, r, i, n) {
                            --t.pendingcb,
                            r ? (o.nextTick(n, i),
                            o.nextTick(S, e, t),
                            e._writableState.errorEmitted = !0,
                            e.emit("error", i)) : (n(i),
                            e._writableState.errorEmitted = !0,
                            e.emit("error", i),
                            S(e, t))
                        }(e, r, i, t, n);
                    else {
                        var a = E(r);
                        a || r.corked || r.bufferProcessing || !r.bufferedRequest || _(e, r),
                        i ? u(w, e, r, a, n) : w(e, r, a, n)
                    }
                }(t, e)
            }
            ,
            this.writecb = null,
            this.writelen = 0,
            this.bufferedRequest = null,
            this.lastBufferedRequest = null,
            this.pendingcb = 0,
            this.prefinished = !1,
            this.errorEmitted = !1,
            this.bufferedRequestCount = 0,
            this.corkedRequestsFree = new a(this)
        }
        function v(e) {
            if (s = s || r(35),
            !(p.call(v, this) || this instanceof s))
                return new v(e);
            this._writableState = new g(e,this),
            this.writable = !0,
            e && ("function" == typeof e.write && (this._write = e.write),
            "function" == typeof e.writev && (this._writev = e.writev),
            "function" == typeof e.destroy && (this._destroy = e.destroy),
            "function" == typeof e.final && (this._final = e.final)),
            h.call(this)
        }
        function y(e, t, r, i, n, o, a) {
            t.writelen = i,
            t.writecb = a,
            t.writing = !0,
            t.sync = !0,
            r ? e._writev(n, t.onwrite) : e._write(n, o, t.onwrite),
            t.sync = !1
        }
        function w(e, t, r, i) {
            r || function(e, t) {
                0 === t.length && t.needDrain && (t.needDrain = !1,
                e.emit("drain"))
            }(e, t),
            t.pendingcb--,
            i(),
            S(e, t)
        }
        function _(e, t) {
            t.bufferProcessing = !0;
            var r = t.bufferedRequest;
            if (e._writev && r && r.next) {
                var i = t.bufferedRequestCount
                  , n = new Array(i)
                  , o = t.corkedRequestsFree;
                o.entry = r;
                for (var s = 0, u = !0; r; )
                    n[s] = r,
                    r.isBuf || (u = !1),
                    r = r.next,
                    s += 1;
                n.allBuffers = u,
                y(e, t, !0, t.length, n, "", o.finish),
                t.pendingcb++,
                t.lastBufferedRequest = null,
                o.next ? (t.corkedRequestsFree = o.next,
                o.next = null) : t.corkedRequestsFree = new a(t),
                t.bufferedRequestCount = 0
            } else {
                for (; r; ) {
                    var f = r.chunk
                      , c = r.encoding
                      , h = r.callback;
                    if (y(e, t, !1, t.objectMode ? 1 : f.length, f, c, h),
                    r = r.next,
                    t.bufferedRequestCount--,
                    t.writing)
                        break
                }
                null === r && (t.lastBufferedRequest = null)
            }
            t.bufferedRequest = r,
            t.bufferProcessing = !1
        }
        function E(e) {
            return e.ending && 0 === e.length && null === e.bufferedRequest && !e.finished && !e.writing
        }
        function M(e, t) {
            e._final((function(r) {
                t.pendingcb--,
                r && e.emit("error", r),
                t.prefinished = !0,
                e.emit("prefinish"),
                S(e, t)
            }
            ))
        }
        function S(e, t) {
            var r = E(t);
            return r && (!function(e, t) {
                t.prefinished || t.finalCalled || ("function" == typeof e._final ? (t.pendingcb++,
                t.finalCalled = !0,
                o.nextTick(M, e, t)) : (t.prefinished = !0,
                e.emit("prefinish")))
            }(e, t),
            0 === t.pendingcb && (t.finished = !0,
            e.emit("finish"))),
            r
        }
        f.inherits(v, h),
        g.prototype.getBuffer = function() {
            for (var e = this.bufferedRequest, t = []; e; )
                t.push(e),
                e = e.next;
            return t
        }
        ,
        function() {
            try {
                Object.defineProperty(g.prototype, "buffer", {
                    get: c.deprecate((function() {
                        return this.getBuffer()
                    }
                    ), "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
                })
            } catch (e) {}
        }(),
        "function" == typeof Symbol && Symbol.hasInstance && "function" == typeof Function.prototype[Symbol.hasInstance] ? (p = Function.prototype[Symbol.hasInstance],
        Object.defineProperty(v, Symbol.hasInstance, {
            value: function(e) {
                return !!p.call(this, e) || this === v && (e && e._writableState instanceof g)
            }
        })) : p = function(e) {
            return e instanceof this
        }
        ,
        v.prototype.pipe = function() {
            this.emit("error", new Error("Cannot pipe, not readable"))
        }
        ,
        v.prototype.write = function(e, t, r) {
            var i, n = this._writableState, a = !1, s = !n.objectMode && (i = e,
            l.isBuffer(i) || i instanceof d);
            return s && !l.isBuffer(e) && (e = function(e) {
                return l.from(e)
            }(e)),
            "function" == typeof t && (r = t,
            t = null),
            s ? t = "buffer" : t || (t = n.defaultEncoding),
            "function" != typeof r && (r = m),
            n.ended ? function(e, t) {
                var r = new Error("write after end");
                e.emit("error", r),
                o.nextTick(t, r)
            }(this, r) : (s || function(e, t, r, i) {
                var n = !0
                  , a = !1;
                return null === r ? a = new TypeError("May not write null values to stream") : "string" == typeof r || void 0 === r || t.objectMode || (a = new TypeError("Invalid non-string/buffer chunk")),
                a && (e.emit("error", a),
                o.nextTick(i, a),
                n = !1),
                n
            }(this, n, e, r)) && (n.pendingcb++,
            a = function(e, t, r, i, n, o) {
                if (!r) {
                    var a = function(e, t, r) {
                        e.objectMode || !1 === e.decodeStrings || "string" != typeof t || (t = l.from(t, r));
                        return t
                    }(t, i, n);
                    i !== a && (r = !0,
                    n = "buffer",
                    i = a)
                }
                var s = t.objectMode ? 1 : i.length;
                t.length += s;
                var u = t.length < t.highWaterMark;
                u || (t.needDrain = !0);
                if (t.writing || t.corked) {
                    var f = t.lastBufferedRequest;
                    t.lastBufferedRequest = {
                        chunk: i,
                        encoding: n,
                        isBuf: r,
                        callback: o,
                        next: null
                    },
                    f ? f.next = t.lastBufferedRequest : t.bufferedRequest = t.lastBufferedRequest,
                    t.bufferedRequestCount += 1
                } else
                    y(e, t, !1, s, i, n, o);
                return u
            }(this, n, s, e, t, r)),
            a
        }
        ,
        v.prototype.cork = function() {
            this._writableState.corked++
        }
        ,
        v.prototype.uncork = function() {
            var e = this._writableState;
            e.corked && (e.corked--,
            e.writing || e.corked || e.finished || e.bufferProcessing || !e.bufferedRequest || _(this, e))
        }
        ,
        v.prototype.setDefaultEncoding = function(e) {
            if ("string" == typeof e && (e = e.toLowerCase()),
            !(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((e + "").toLowerCase()) > -1))
                throw new TypeError("Unknown encoding: " + e);
            return this._writableState.defaultEncoding = e,
            this
        }
        ,
        Object.defineProperty(v.prototype, "writableHighWaterMark", {
            enumerable: !1,
            get: function() {
                return this._writableState.highWaterMark
            }
        }),
        v.prototype._write = function(e, t, r) {
            r(new Error("_write() is not implemented"))
        }
        ,
        v.prototype._writev = null,
        v.prototype.end = function(e, t, r) {
            var i = this._writableState;
            "function" == typeof e ? (r = e,
            e = null,
            t = null) : "function" == typeof t && (r = t,
            t = null),
            null != e && this.write(e, t),
            i.corked && (i.corked = 1,
            this.uncork()),
            i.ending || i.finished || function(e, t, r) {
                t.ending = !0,
                S(e, t),
                r && (t.finished ? o.nextTick(r) : e.once("finish", r));
                t.ended = !0,
                e.writable = !1
            }(this, i, r)
        }
        ,
        Object.defineProperty(v.prototype, "destroyed", {
            get: function() {
                return void 0 !== this._writableState && this._writableState.destroyed
            },
            set: function(e) {
                this._writableState && (this._writableState.destroyed = e)
            }
        }),
        v.prototype.destroy = b.destroy,
        v.prototype._undestroy = b.undestroy,
        v.prototype._destroy = function(e, t) {
            this.end(),
            t(e)
        }
    }
    ).call(this, r(14), r(105).setImmediate, r(13))
}
, function(e, t, r) {
    "use strict";
    var i = r(18);
    function n(e) {
        this.options = e,
        this.type = this.options.type,
        this.blockSize = 8,
        this._init(),
        this.buffer = new Array(this.blockSize),
        this.bufferOff = 0
    }
    e.exports = n,
    n.prototype._init = function() {}
    ,
    n.prototype.update = function(e) {
        return 0 === e.length ? [] : "decrypt" === this.type ? this._updateDecrypt(e) : this._updateEncrypt(e)
    }
    ,
    n.prototype._buffer = function(e, t) {
        for (var r = Math.min(this.buffer.length - this.bufferOff, e.length - t), i = 0; i < r; i++)
            this.buffer[this.bufferOff + i] = e[t + i];
        return this.bufferOff += r,
        r
    }
    ,
    n.prototype._flushBuffer = function(e, t) {
        return this._update(this.buffer, 0, e, t),
        this.bufferOff = 0,
        this.blockSize
    }
    ,
    n.prototype._updateEncrypt = function(e) {
        var t = 0
          , r = 0
          , i = (this.bufferOff + e.length) / this.blockSize | 0
          , n = new Array(i * this.blockSize);
        0 !== this.bufferOff && (t += this._buffer(e, t),
        this.bufferOff === this.buffer.length && (r += this._flushBuffer(n, r)));
        for (var o = e.length - (e.length - t) % this.blockSize; t < o; t += this.blockSize)
            this._update(e, t, n, r),
            r += this.blockSize;
        for (; t < e.length; t++,
        this.bufferOff++)
            this.buffer[this.bufferOff] = e[t];
        return n
    }
    ,
    n.prototype._updateDecrypt = function(e) {
        for (var t = 0, r = 0, i = Math.ceil((this.bufferOff + e.length) / this.blockSize) - 1, n = new Array(i * this.blockSize); i > 0; i--)
            t += this._buffer(e, t),
            r += this._flushBuffer(n, r);
        return t += this._buffer(e, t),
        n
    }
    ,
    n.prototype.final = function(e) {
        var t, r;
        return e && (t = this.update(e)),
        r = "encrypt" === this.type ? this._finalEncrypt() : this._finalDecrypt(),
        t ? t.concat(r) : r
    }
    ,
    n.prototype._pad = function(e, t) {
        if (0 === t)
            return !1;
        for (; t < e.length; )
            e[t++] = 0;
        return !0
    }
    ,
    n.prototype._finalEncrypt = function() {
        if (!this._pad(this.buffer, this.bufferOff))
            return [];
        var e = new Array(this.blockSize);
        return this._update(this.buffer, 0, e, 0),
        e
    }
    ,
    n.prototype._unpad = function(e) {
        return e
    }
    ,
    n.prototype._finalDecrypt = function() {
        i.equal(this.bufferOff, this.blockSize, "Not enough data to decrypt");
        var e = new Array(this.blockSize);
        return this._flushBuffer(e, 0),
        this._unpad(e)
    }
}
, function(e, t, r) {
    var i = r(249)
      , n = r(257)
      , o = r(142);
    t.createCipher = t.Cipher = i.createCipher,
    t.createCipheriv = t.Cipheriv = i.createCipheriv,
    t.createDecipher = t.Decipher = n.createDecipher,
    t.createDecipheriv = t.Decipheriv = n.createDecipheriv,
    t.listCiphers = t.getCiphers = function() {
        return Object.keys(o)
    }
}
, function(e, t, r) {
    var i = {
        ECB: r(250),
        CBC: r(251),
        CFB: r(252),
        CFB8: r(253),
        CFB1: r(254),
        OFB: r(255),
        CTR: r(140),
        GCM: r(140)
    }
      , n = r(142);
    for (var o in n)
        n[o].module = i[n[o].mode];
    e.exports = n
}
, function(e, t, r) {
    var i;
    function n(e) {
        this.rand = e
    }
    if (e.exports = function(e) {
        return i || (i = new n(null)),
        i.generate(e)
    }
    ,
    e.exports.Rand = n,
    n.prototype.generate = function(e) {
        return this._rand(e)
    }
    ,
    n.prototype._rand = function(e) {
        if (this.rand.getBytes)
            return this.rand.getBytes(e);
        for (var t = new Uint8Array(e), r = 0; r < t.length; r++)
            t[r] = this.rand.getByte();
        return t
    }
    ,
    "object" == typeof self)
        self.crypto && self.crypto.getRandomValues ? n.prototype._rand = function(e) {
            var t = new Uint8Array(e);
            return self.crypto.getRandomValues(t),
            t
        }
        : self.msCrypto && self.msCrypto.getRandomValues ? n.prototype._rand = function(e) {
            var t = new Uint8Array(e);
            return self.msCrypto.getRandomValues(t),
            t
        }
        : "object" == typeof window && (n.prototype._rand = function() {
            throw new Error("Not implemented yet")
        }
        );
    else
        try {
            var o = r(260);
            if ("function" != typeof o.randomBytes)
                throw new Error("Not supported");
            n.prototype._rand = function(e) {
                return o.randomBytes(e)
            }
        } catch (e) {}
}
, function(e, t, r) {
    "use strict";
    var i = r(44).codes.ERR_STREAM_PREMATURE_CLOSE;
    function n() {}
    e.exports = function e(t, r, o) {
        if ("function" == typeof r)
            return e(t, null, r);
        r || (r = {}),
        o = function(e) {
            var t = !1;
            return function() {
                if (!t) {
                    t = !0;
                    for (var r = arguments.length, i = new Array(r), n = 0; n < r; n++)
                        i[n] = arguments[n];
                    e.apply(this, i)
                }
            }
        }(o || n);
        var a = r.readable || !1 !== r.readable && t.readable
          , s = r.writable || !1 !== r.writable && t.writable
          , u = function() {
            t.writable || c()
        }
          , f = t._writableState && t._writableState.finished
          , c = function() {
            s = !1,
            f = !0,
            a || o.call(t)
        }
          , h = t._readableState && t._readableState.endEmitted
          , l = function() {
            a = !1,
            h = !0,
            s || o.call(t)
        }
          , d = function(e) {
            o.call(t, e)
        }
          , p = function() {
            var e;
            return a && !h ? (t._readableState && t._readableState.ended || (e = new i),
            o.call(t, e)) : s && !f ? (t._writableState && t._writableState.ended || (e = new i),
            o.call(t, e)) : void 0
        }
          , b = function() {
            t.req.on("finish", c)
        };
        return !function(e) {
            return e.setHeader && "function" == typeof e.abort
        }(t) ? s && !t._writableState && (t.on("end", u),
        t.on("close", u)) : (t.on("complete", c),
        t.on("abort", p),
        t.req ? b() : t.on("request", b)),
        t.on("end", l),
        t.on("finish", c),
        !1 !== r.error && t.on("error", d),
        t.on("close", p),
        function() {
            t.removeListener("complete", c),
            t.removeListener("abort", p),
            t.removeListener("request", b),
            t.req && t.req.removeListener("finish", c),
            t.removeListener("end", u),
            t.removeListener("close", u),
            t.removeListener("finish", c),
            t.removeListener("end", l),
            t.removeListener("error", d),
            t.removeListener("close", p)
        }
    }
}
, function(e, t, r) {
    (function(t) {
        var i = r(273)
          , n = r(32);
        function o(e) {
            var t, r = e.modulus.byteLength();
            do {
                t = new i(n(r))
            } while (t.cmp(e.modulus) >= 0 || !t.umod(e.prime1) || !t.umod(e.prime2));
            return t
        }
        function a(e, r) {
            var n = function(e) {
                var t = o(e);
                return {
                    blinder: t.toRed(i.mont(e.modulus)).redPow(new i(e.publicExponent)).fromRed(),
                    unblinder: t.invm(e.modulus)
                }
            }(r)
              , a = r.modulus.byteLength()
              , s = new i(e).mul(n.blinder).umod(r.modulus)
              , u = s.toRed(i.mont(r.prime1))
              , f = s.toRed(i.mont(r.prime2))
              , c = r.coefficient
              , h = r.prime1
              , l = r.prime2
              , d = u.redPow(r.exponent1).fromRed()
              , p = f.redPow(r.exponent2).fromRed()
              , b = d.isub(p).imul(c).umod(h).imul(l);
            return p.iadd(b).imul(n.unblinder).umod(r.modulus).toArrayLike(t, "be", a)
        }
        a.getr = o,
        e.exports = a
    }
    ).call(this, r(8).Buffer)
}
, function(e, t, r) {
    "use strict";
    var i, n = t, o = r(40), a = r(154), s = r(22).assert;
    function u(e) {
        "short" === e.type ? this.curve = new a.short(e) : "edwards" === e.type ? this.curve = new a.edwards(e) : this.curve = new a.mont(e),
        this.g = this.curve.g,
        this.n = this.curve.n,
        this.hash = e.hash,
        s(this.g.validate(), "Invalid curve"),
        s(this.g.mul(this.n).isInfinity(), "Invalid curve, G*N != O")
    }
    function f(e, t) {
        Object.defineProperty(n, e, {
            configurable: !0,
            enumerable: !0,
            get: function() {
                var r = new u(t);
                return Object.defineProperty(n, e, {
                    configurable: !0,
                    enumerable: !0,
                    value: r
                }),
                r
            }
        })
    }
    n.PresetCurve = u,
    f("p192", {
        type: "short",
        prime: "p192",
        p: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",
        a: "ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",
        b: "64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",
        n: "ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",
        hash: o.sha256,
        gRed: !1,
        g: ["188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012", "07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"]
    }),
    f("p224", {
        type: "short",
        prime: "p224",
        p: "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",
        a: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",
        b: "b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",
        n: "ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",
        hash: o.sha256,
        gRed: !1,
        g: ["b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21", "bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"]
    }),
    f("p256", {
        type: "short",
        prime: null,
        p: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",
        a: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",
        b: "5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",
        n: "ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",
        hash: o.sha256,
        gRed: !1,
        g: ["6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296", "4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"]
    }),
    f("p384", {
        type: "short",
        prime: null,
        p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",
        a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",
        b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",
        n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",
        hash: o.sha384,
        gRed: !1,
        g: ["aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7", "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"]
    }),
    f("p521", {
        type: "short",
        prime: null,
        p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",
        a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",
        b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",
        n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",
        hash: o.sha512,
        gRed: !1,
        g: ["000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66", "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"]
    }),
    f("curve25519", {
        type: "mont",
        prime: "p25519",
        p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
        a: "76d06",
        b: "1",
        n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
        hash: o.sha256,
        gRed: !1,
        g: ["9"]
    }),
    f("ed25519", {
        type: "edwards",
        prime: "p25519",
        p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
        a: "-1",
        c: "1",
        d: "52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",
        n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
        hash: o.sha256,
        gRed: !1,
        g: ["216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a", "6666666666666666666666666666666666666666666666666666666666666658"]
    });
    try {
        i = r(285)
    } catch (e) {
        i = void 0
    }
    f("secp256k1", {
        type: "short",
        prime: "k256",
        p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",
        a: "0",
        b: "7",
        n: "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",
        h: "1",
        hash: o.sha256,
        beta: "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",
        lambda: "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",
        basis: [{
            a: "3086d221a7d46bcde86c90e49284eb15",
            b: "-e4437ed6010e88286f547fa90abfe4c3"
        }, {
            a: "114ca50f7a8e2f3f657c1108d9d44cfd8",
            b: "3086d221a7d46bcde86c90e49284eb15"
        }],
        gRed: !1,
        g: ["79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798", "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8", i]
    })
}
, function(e, t, r) {
    "use strict";
    (function(t) {
        var i, n = r(8), o = n.Buffer, a = {};
        for (i in n)
            n.hasOwnProperty(i) && "SlowBuffer" !== i && "Buffer" !== i && (a[i] = n[i]);
        var s = a.Buffer = {};
        for (i in o)
            o.hasOwnProperty(i) && "allocUnsafe" !== i && "allocUnsafeSlow" !== i && (s[i] = o[i]);
        if (a.Buffer.prototype = o.prototype,
        s.from && s.from !== Uint8Array.from || (s.from = function(e, t, r) {
            if ("number" == typeof e)
                throw new TypeError('The "value" argument must not be of type number. Received type ' + typeof e);
            if (e && void 0 === e.length)
                throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof e);
            return o(e, t, r)
        }
        ),
        s.alloc || (s.alloc = function(e, t, r) {
            if ("number" != typeof e)
                throw new TypeError('The "size" argument must be of type number. Received type ' + typeof e);
            if (e < 0 || e >= 2 * (1 << 30))
                throw new RangeError('The value "' + e + '" is invalid for option "size"');
            var i = o(e);
            return t && 0 !== t.length ? "string" == typeof r ? i.fill(t, r) : i.fill(t) : i.fill(0),
            i
        }
        ),
        !a.kStringMaxLength)
            try {
                a.kStringMaxLength = t.binding("buffer").kStringMaxLength
            } catch (e) {}
        a.constants || (a.constants = {
            MAX_LENGTH: a.kMaxLength
        },
        a.kStringMaxLength && (a.constants.MAX_STRING_LENGTH = a.kStringMaxLength)),
        e.exports = a
    }
    ).call(this, r(14))
}
, function(e, t, r) {
    "use strict";
    const i = r(93).Reporter
      , n = r(55).EncoderBuffer
      , o = r(55).DecoderBuffer
      , a = r(18)
      , s = ["seq", "seqof", "set", "setof", "objid", "bool", "gentime", "utctime", "null_", "enum", "int", "objDesc", "bitstr", "bmpstr", "charstr", "genstr", "graphstr", "ia5str", "iso646str", "numstr", "octstr", "printstr", "t61str", "unistr", "utf8str", "videostr"]
      , u = ["key", "obj", "use", "optional", "explicit", "implicit", "def", "choice", "any", "contains"].concat(s);
    function f(e, t, r) {
        const i = {};
        this._baseState = i,
        i.name = r,
        i.enc = e,
        i.parent = t || null,
        i.children = null,
        i.tag = null,
        i.args = null,
        i.reverseArgs = null,
        i.choice = null,
        i.optional = !1,
        i.any = !1,
        i.obj = !1,
        i.use = null,
        i.useDecoder = null,
        i.key = null,
        i.default = null,
        i.explicit = null,
        i.implicit = null,
        i.contains = null,
        i.parent || (i.children = [],
        this._wrap())
    }
    e.exports = f;
    const c = ["enc", "parent", "children", "tag", "args", "reverseArgs", "choice", "optional", "any", "obj", "use", "alteredUse", "key", "default", "explicit", "implicit", "contains"];
    f.prototype.clone = function() {
        const e = this._baseState
          , t = {};
        c.forEach((function(r) {
            t[r] = e[r]
        }
        ));
        const r = new this.constructor(t.parent);
        return r._baseState = t,
        r
    }
    ,
    f.prototype._wrap = function() {
        const e = this._baseState;
        u.forEach((function(t) {
            this[t] = function() {
                const r = new this.constructor(this);
                return e.children.push(r),
                r[t].apply(r, arguments)
            }
        }
        ), this)
    }
    ,
    f.prototype._init = function(e) {
        const t = this._baseState;
        a(null === t.parent),
        e.call(this),
        t.children = t.children.filter((function(e) {
            return e._baseState.parent === this
        }
        ), this),
        a.equal(t.children.length, 1, "Root node can have only one child")
    }
    ,
    f.prototype._useArgs = function(e) {
        const t = this._baseState
          , r = e.filter((function(e) {
            return e instanceof this.constructor
        }
        ), this);
        e = e.filter((function(e) {
            return !(e instanceof this.constructor)
        }
        ), this),
        0 !== r.length && (a(null === t.children),
        t.children = r,
        r.forEach((function(e) {
            e._baseState.parent = this
        }
        ), this)),
        0 !== e.length && (a(null === t.args),
        t.args = e,
        t.reverseArgs = e.map((function(e) {
            if ("object" != typeof e || e.constructor !== Object)
                return e;
            const t = {};
            return Object.keys(e).forEach((function(r) {
                r == (0 | r) && (r |= 0);
                const i = e[r];
                t[i] = r
            }
            )),
            t
        }
        )))
    }
    ,
    ["_peekTag", "_decodeTag", "_use", "_decodeStr", "_decodeObjid", "_decodeTime", "_decodeNull", "_decodeInt", "_decodeBool", "_decodeList", "_encodeComposite", "_encodeStr", "_encodeObjid", "_encodeTime", "_encodeNull", "_encodeInt", "_encodeBool"].forEach((function(e) {
        f.prototype[e] = function() {
            const t = this._baseState;
            throw new Error(e + " not implemented for encoding: " + t.enc)
        }
    }
    )),
    s.forEach((function(e) {
        f.prototype[e] = function() {
            const t = this._baseState
              , r = Array.prototype.slice.call(arguments);
            return a(null === t.tag),
            t.tag = e,
            this._useArgs(r),
            this
        }
    }
    )),
    f.prototype.use = function(e) {
        a(e);
        const t = this._baseState;
        return a(null === t.use),
        t.use = e,
        this
    }
    ,
    f.prototype.optional = function() {
        return this._baseState.optional = !0,
        this
    }
    ,
    f.prototype.def = function(e) {
        const t = this._baseState;
        return a(null === t.default),
        t.default = e,
        t.optional = !0,
        this
    }
    ,
    f.prototype.explicit = function(e) {
        const t = this._baseState;
        return a(null === t.explicit && null === t.implicit),
        t.explicit = e,
        this
    }
    ,
    f.prototype.implicit = function(e) {
        const t = this._baseState;
        return a(null === t.explicit && null === t.implicit),
        t.implicit = e,
        this
    }
    ,
    f.prototype.obj = function() {
        const e = this._baseState
          , t = Array.prototype.slice.call(arguments);
        return e.obj = !0,
        0 !== t.length && this._useArgs(t),
        this
    }
    ,
    f.prototype.key = function(e) {
        const t = this._baseState;
        return a(null === t.key),
        t.key = e,
        this
    }
    ,
    f.prototype.any = function() {
        return this._baseState.any = !0,
        this
    }
    ,
    f.prototype.choice = function(e) {
        const t = this._baseState;
        return a(null === t.choice),
        t.choice = e,
        this._useArgs(Object.keys(e).map((function(t) {
            return e[t]
        }
        ))),
        this
    }
    ,
    f.prototype.contains = function(e) {
        const t = this._baseState;
        return a(null === t.use),
        t.contains = e,
        this
    }
    ,
    f.prototype._decode = function(e, t) {
        const r = this._baseState;
        if (null === r.parent)
            return e.wrapResult(r.children[0]._decode(e, t));
        let i, n = r.default, a = !0, s = null;
        if (null !== r.key && (s = e.enterKey(r.key)),
        r.optional) {
            let i = null;
            if (null !== r.explicit ? i = r.explicit : null !== r.implicit ? i = r.implicit : null !== r.tag && (i = r.tag),
            null !== i || r.any) {
                if (a = this._peekTag(e, i, r.any),
                e.isError(a))
                    return a
            } else {
                const i = e.save();
                try {
                    null === r.choice ? this._decodeGeneric(r.tag, e, t) : this._decodeChoice(e, t),
                    a = !0
                } catch (e) {
                    a = !1
                }
                e.restore(i)
            }
        }
        if (r.obj && a && (i = e.enterObject()),
        a) {
            if (null !== r.explicit) {
                const t = this._decodeTag(e, r.explicit);
                if (e.isError(t))
                    return t;
                e = t
            }
            const i = e.offset;
            if (null === r.use && null === r.choice) {
                let t;
                r.any && (t = e.save());
                const i = this._decodeTag(e, null !== r.implicit ? r.implicit : r.tag, r.any);
                if (e.isError(i))
                    return i;
                r.any ? n = e.raw(t) : e = i
            }
            if (t && t.track && null !== r.tag && t.track(e.path(), i, e.length, "tagged"),
            t && t.track && null !== r.tag && t.track(e.path(), e.offset, e.length, "content"),
            r.any || (n = null === r.choice ? this._decodeGeneric(r.tag, e, t) : this._decodeChoice(e, t)),
            e.isError(n))
                return n;
            if (r.any || null !== r.choice || null === r.children || r.children.forEach((function(r) {
                r._decode(e, t)
            }
            )),
            r.contains && ("octstr" === r.tag || "bitstr" === r.tag)) {
                const i = new o(n);
                n = this._getUse(r.contains, e._reporterState.obj)._decode(i, t)
            }
        }
        return r.obj && a && (n = e.leaveObject(i)),
        null === r.key || null === n && !0 !== a ? null !== s && e.exitKey(s) : e.leaveKey(s, r.key, n),
        n
    }
    ,
    f.prototype._decodeGeneric = function(e, t, r) {
        const i = this._baseState;
        return "seq" === e || "set" === e ? null : "seqof" === e || "setof" === e ? this._decodeList(t, e, i.args[0], r) : /str$/.test(e) ? this._decodeStr(t, e, r) : "objid" === e && i.args ? this._decodeObjid(t, i.args[0], i.args[1], r) : "objid" === e ? this._decodeObjid(t, null, null, r) : "gentime" === e || "utctime" === e ? this._decodeTime(t, e, r) : "null_" === e ? this._decodeNull(t, r) : "bool" === e ? this._decodeBool(t, r) : "objDesc" === e ? this._decodeStr(t, e, r) : "int" === e || "enum" === e ? this._decodeInt(t, i.args && i.args[0], r) : null !== i.use ? this._getUse(i.use, t._reporterState.obj)._decode(t, r) : t.error("unknown tag: " + e)
    }
    ,
    f.prototype._getUse = function(e, t) {
        const r = this._baseState;
        return r.useDecoder = this._use(e, t),
        a(null === r.useDecoder._baseState.parent),
        r.useDecoder = r.useDecoder._baseState.children[0],
        r.implicit !== r.useDecoder._baseState.implicit && (r.useDecoder = r.useDecoder.clone(),
        r.useDecoder._baseState.implicit = r.implicit),
        r.useDecoder
    }
    ,
    f.prototype._decodeChoice = function(e, t) {
        const r = this._baseState;
        let i = null
          , n = !1;
        return Object.keys(r.choice).some((function(o) {
            const a = e.save()
              , s = r.choice[o];
            try {
                const r = s._decode(e, t);
                if (e.isError(r))
                    return !1;
                i = {
                    type: o,
                    value: r
                },
                n = !0
            } catch (t) {
                return e.restore(a),
                !1
            }
            return !0
        }
        ), this),
        n ? i : e.error("Choice not matched")
    }
    ,
    f.prototype._createEncoderBuffer = function(e) {
        return new n(e,this.reporter)
    }
    ,
    f.prototype._encode = function(e, t, r) {
        const i = this._baseState;
        if (null !== i.default && i.default === e)
            return;
        const n = this._encodeValue(e, t, r);
        return void 0 === n || this._skipDefault(n, t, r) ? void 0 : n
    }
    ,
    f.prototype._encodeValue = function(e, t, r) {
        const n = this._baseState;
        if (null === n.parent)
            return n.children[0]._encode(e, t || new i);
        let o = null;
        if (this.reporter = t,
        n.optional && void 0 === e) {
            if (null === n.default)
                return;
            e = n.default
        }
        let a = null
          , s = !1;
        if (n.any)
            o = this._createEncoderBuffer(e);
        else if (n.choice)
            o = this._encodeChoice(e, t);
        else if (n.contains)
            a = this._getUse(n.contains, r)._encode(e, t),
            s = !0;
        else if (n.children)
            a = n.children.map((function(r) {
                if ("null_" === r._baseState.tag)
                    return r._encode(null, t, e);
                if (null === r._baseState.key)
                    return t.error("Child should have a key");
                const i = t.enterKey(r._baseState.key);
                if ("object" != typeof e)
                    return t.error("Child expected, but input is not object");
                const n = r._encode(e[r._baseState.key], t, e);
                return t.leaveKey(i),
                n
            }
            ), this).filter((function(e) {
                return e
            }
            )),
            a = this._createEncoderBuffer(a);
        else if ("seqof" === n.tag || "setof" === n.tag) {
            if (!n.args || 1 !== n.args.length)
                return t.error("Too many args for : " + n.tag);
            if (!Array.isArray(e))
                return t.error("seqof/setof, but data is not Array");
            const r = this.clone();
            r._baseState.implicit = null,
            a = this._createEncoderBuffer(e.map((function(r) {
                const i = this._baseState;
                return this._getUse(i.args[0], e)._encode(r, t)
            }
            ), r))
        } else
            null !== n.use ? o = this._getUse(n.use, r)._encode(e, t) : (a = this._encodePrimitive(n.tag, e),
            s = !0);
        if (!n.any && null === n.choice) {
            const e = null !== n.implicit ? n.implicit : n.tag
              , r = null === n.implicit ? "universal" : "context";
            null === e ? null === n.use && t.error("Tag could be omitted only for .use()") : null === n.use && (o = this._encodeComposite(e, s, r, a))
        }
        return null !== n.explicit && (o = this._encodeComposite(n.explicit, !1, "context", o)),
        o
    }
    ,
    f.prototype._encodeChoice = function(e, t) {
        const r = this._baseState
          , i = r.choice[e.type];
        return i || a(!1, e.type + " not found in " + JSON.stringify(Object.keys(r.choice))),
        i._encode(e.value, t)
    }
    ,
    f.prototype._encodePrimitive = function(e, t) {
        const r = this._baseState;
        if (/str$/.test(e))
            return this._encodeStr(t, e);
        if ("objid" === e && r.args)
            return this._encodeObjid(t, r.reverseArgs[0], r.args[1]);
        if ("objid" === e)
            return this._encodeObjid(t, null, null);
        if ("gentime" === e || "utctime" === e)
            return this._encodeTime(t, e);
        if ("null_" === e)
            return this._encodeNull();
        if ("int" === e || "enum" === e)
            return this._encodeInt(t, r.args && r.reverseArgs[0]);
        if ("bool" === e)
            return this._encodeBool(t);
        if ("objDesc" === e)
            return this._encodeStr(t, e);
        throw new Error("Unsupported tag: " + e)
    }
    ,
    f.prototype._isNumstr = function(e) {
        return /^[0-9 ]*$/.test(e)
    }
    ,
    f.prototype._isPrintstr = function(e) {
        return /^[A-Za-z0-9 '()+,-./:=?]*$/.test(e)
    }
}
, function(e, t, r) {
    "use strict";
    const i = r(4);
    function n(e) {
        this._reporterState = {
            obj: null,
            path: [],
            options: e || {},
            errors: []
        }
    }
    function o(e, t) {
        this.path = e,
        this.rethrow(t)
    }
    t.Reporter = n,
    n.prototype.isError = function(e) {
        return e instanceof o
    }
    ,
    n.prototype.save = function() {
        const e = this._reporterState;
        return {
            obj: e.obj,
            pathLen: e.path.length
        }
    }
    ,
    n.prototype.restore = function(e) {
        const t = this._reporterState;
        t.obj = e.obj,
        t.path = t.path.slice(0, e.pathLen)
    }
    ,
    n.prototype.enterKey = function(e) {
        return this._reporterState.path.push(e)
    }
    ,
    n.prototype.exitKey = function(e) {
        const t = this._reporterState;
        t.path = t.path.slice(0, e - 1)
    }
    ,
    n.prototype.leaveKey = function(e, t, r) {
        const i = this._reporterState;
        this.exitKey(e),
        null !== i.obj && (i.obj[t] = r)
    }
    ,
    n.prototype.path = function() {
        return this._reporterState.path.join("/")
    }
    ,
    n.prototype.enterObject = function() {
        const e = this._reporterState
          , t = e.obj;
        return e.obj = {},
        t
    }
    ,
    n.prototype.leaveObject = function(e) {
        const t = this._reporterState
          , r = t.obj;
        return t.obj = e,
        r
    }
    ,
    n.prototype.error = function(e) {
        let t;
        const r = this._reporterState
          , i = e instanceof o;
        if (t = i ? e : new o(r.path.map((function(e) {
            return "[" + JSON.stringify(e) + "]"
        }
        )).join(""),e.message || e,e.stack),
        !r.options.partial)
            throw t;
        return i || r.errors.push(t),
        t
    }
    ,
    n.prototype.wrapResult = function(e) {
        const t = this._reporterState;
        return t.options.partial ? {
            result: this.isError(e) ? null : e,
            errors: t.errors
        } : e
    }
    ,
    i(o, Error),
    o.prototype.rethrow = function(e) {
        if (this.message = e + " at: " + (this.path || "(shallow)"),
        Error.captureStackTrace && Error.captureStackTrace(this, o),
        !this.stack)
            try {
                throw new Error(this.message)
            } catch (e) {
                this.stack = e.stack
            }
        return this
    }
}
, function(e, t, r) {
    "use strict";
    function i(e) {
        const t = {};
        return Object.keys(e).forEach((function(r) {
            (0 | r) == r && (r |= 0);
            const i = e[r];
            t[i] = r
        }
        )),
        t
    }
    t.tagClass = {
        0: "universal",
        1: "application",
        2: "context",
        3: "private"
    },
    t.tagClassByName = i(t.tagClass),
    t.tag = {
        0: "end",
        1: "bool",
        2: "int",
        3: "bitstr",
        4: "octstr",
        5: "null_",
        6: "objid",
        7: "objDesc",
        8: "external",
        9: "real",
        10: "enum",
        11: "embed",
        12: "utf8str",
        13: "relativeOid",
        16: "seq",
        17: "set",
        18: "numstr",
        19: "printstr",
        20: "t61str",
        21: "videostr",
        22: "ia5str",
        23: "utctime",
        24: "gentime",
        25: "graphstr",
        26: "iso646str",
        27: "genstr",
        28: "unistr",
        29: "charstr",
        30: "bmpstr"
    },
    t.tagByName = i(t.tag)
}
, function(e, t, r) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }),
    t.randomBytes = function(e) {
        var t;
        t = "undefined" != typeof window && window.crypto && window.crypto.getRandomValues ? window.crypto.getRandomValues(new Uint8Array(e)) : r(36).randomBytes(e);
        for (var i = "", n = 0; n < e; n += 1)
            i += ("00" + t[n].toString(16)).slice(-2);
        return i
    }
}
, function(e, t, r) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }),
    t.UNKNOWN_ERROR = "UNKNOWN_ERROR",
    t.NOT_IMPLEMENTED = "NOT_IMPLEMENTED",
    t.MISSING_NEW = "MISSING_NEW",
    t.CALL_EXCEPTION = "CALL_EXCEPTION",
    t.INVALID_ARGUMENT = "INVALID_ARGUMENT",
    t.MISSING_ARGUMENT = "MISSING_ARGUMENT",
    t.UNEXPECTED_ARGUMENT = "UNEXPECTED_ARGUMENT",
    t.NUMERIC_FAULT = "NUMERIC_FAULT",
    t.INSUFFICIENT_FUNDS = "INSUFFICIENT_FUNDS",
    t.NONCE_EXPIRED = "NONCE_EXPIRED",
    t.REPLACEMENT_UNDERPRICED = "REPLACEMENT_UNDERPRICED",
    t.UNSUPPORTED_OPERATION = "UNSUPPORTED_OPERATION";
    var i = !1
      , n = !1;
    function o(e, r, i) {
        if (n)
            throw new Error("unknown error");
        r || (r = t.UNKNOWN_ERROR),
        i || (i = {});
        var o = [];
        Object.keys(i).forEach((function(e) {
            try {
                o.push(e + "=" + JSON.stringify(i[e]))
            } catch (t) {
                o.push(e + "=" + JSON.stringify(i[e].toString()))
            }
        }
        )),
        o.push("version=#version");
        var a = e;
        o.length && (e += " (" + o.join(", ") + ")");
        var s = new Error(e);
        throw s.reason = a,
        s.code = r,
        Object.keys(i).forEach((function(e) {
            s[e] = i[e]
        }
        )),
        s
    }
    t.throwError = o,
    t.checkNew = function(e, r) {
        e instanceof r || o("missing new", t.MISSING_NEW, {
            name: r.name
        })
    }
    ,
    t.checkArgumentCount = function(e, r, i) {
        i || (i = ""),
        e < r && o("missing argument" + i, t.MISSING_ARGUMENT, {
            count: e,
            expectedCount: r
        }),
        e > r && o("too many arguments" + i, t.UNEXPECTED_ARGUMENT, {
            count: e,
            expectedCount: r
        })
    }
    ,
    t.setCensorship = function(e, r) {
        i && o("error censorship permanent", t.UNSUPPORTED_OPERATION, {
            operation: "setCensorship"
        }),
        n = !!e,
        i = !!r
    }
    ,
    t.checkNormalize = function() {
        try {
            if (["NFD", "NFC", "NFKD", "NFKC"].forEach((function(e) {
                try {
                    "test".normalize(e)
                } catch (t) {
                    throw new Error("missing " + e)
                }
            }
            )),
            String.fromCharCode(233).normalize("NFD") !== String.fromCharCode(101, 769))
                throw new Error("broken implementation")
        } catch (e) {
            o("platform missing String.prototype.normalize", t.UNSUPPORTED_OPERATION, {
                operation: "String.prototype.normalize",
                form: e.message
            })
        }
    }
    ;
    var a = {
        debug: 1,
        default: 2,
        info: 2,
        warn: 3,
        error: 4,
        off: 5
    }
      , s = a.default;
    function u(e, t) {
        s > a[e] || console.log.apply(console, t)
    }
    function f() {
        for (var e = [], t = 0; t < arguments.length; t++)
            e[t] = arguments[t];
        u("warn", e)
    }
    t.setLogLevel = function(e) {
        var t = a[e];
        null != t ? s = t : f("invliad log level - " + e)
    }
    ,
    t.warn = f,
    t.info = function() {
        for (var e = [], t = 0; t < arguments.length; t++)
            e[t] = arguments[t];
        u("info", e)
    }
}
, function(e, t, r) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    var i = r(11).__importStar(r(169))
      , n = r(56);
    t.keccak256 = function(e) {
        var t = n.arrayify(e);
        if (t)
            return "0x" + i.keccak_256(t);
        throw new Error("arrayify failed")
    }
}
, , , , , function(e, t, r) {
    "use strict";
    r.r(t);
    var i = r(10)
      , n = i.ChainID
      , o = i.ChainType;
    t.default = {
        networks: [{
            id: 1,
            chainId: n.HmyMainnet,
            name: "Mainnet",
            apiUrl: "https://api.s0.t.hmny.io",
            type: o.Harmony
        }, {
            id: 2,
            chainId: n.HmyTestnet,
            name: "Testnet",
            apiUrl: "https://api.s0.b.hmny.io",
            type: o.Harmony
        }, {
            id: 3,
            chainId: n.HmyLocal,
            name: "Localnet",
            apiUrl: "http://127.0.0.1:9500",
            type: o.Harmony
        }]
    }
}
, , , function(e, t, r) {
    (function(e) {
        var i = void 0 !== e && e || "undefined" != typeof self && self || window
          , n = Function.prototype.apply;
        function o(e, t) {
            this._id = e,
            this._clearFn = t
        }
        t.setTimeout = function() {
            return new o(n.call(setTimeout, i, arguments),clearTimeout)
        }
        ,
        t.setInterval = function() {
            return new o(n.call(setInterval, i, arguments),clearInterval)
        }
        ,
        t.clearTimeout = t.clearInterval = function(e) {
            e && e.close()
        }
        ,
        o.prototype.unref = o.prototype.ref = function() {}
        ,
        o.prototype.close = function() {
            this._clearFn.call(i, this._id)
        }
        ,
        t.enroll = function(e, t) {
            clearTimeout(e._idleTimeoutId),
            e._idleTimeout = t
        }
        ,
        t.unenroll = function(e) {
            clearTimeout(e._idleTimeoutId),
            e._idleTimeout = -1
        }
        ,
        t._unrefActive = t.active = function(e) {
            clearTimeout(e._idleTimeoutId);
            var t = e._idleTimeout;
            t >= 0 && (e._idleTimeoutId = setTimeout((function() {
                e._onTimeout && e._onTimeout()
            }
            ), t))
        }
        ,
        r(235),
        t.setImmediate = "undefined" != typeof self && self.setImmediate || void 0 !== e && e.setImmediate || this && this.setImmediate,
        t.clearImmediate = "undefined" != typeof self && self.clearImmediate || void 0 !== e && e.clearImmediate || this && this.clearImmediate
    }
    ).call(this, r(13))
}
, , , , , , , , , , , , function(e, t) {
    var r = {}.toString;
    e.exports = Array.isArray || function(e) {
        return "[object Array]" == r.call(e)
    }
}
, function(e, t, r) {
    "use strict";
    var i = r(5).Buffer
      , n = r(219).Transform;
    function o(e) {
        n.call(this),
        this._block = i.allocUnsafe(e),
        this._blockSize = e,
        this._blockOffset = 0,
        this._length = [0, 0, 0, 0],
        this._finalized = !1
    }
    r(4)(o, n),
    o.prototype._transform = function(e, t, r) {
        var i = null;
        try {
            this.update(e, t)
        } catch (e) {
            i = e
        }
        r(i)
    }
    ,
    o.prototype._flush = function(e) {
        var t = null;
        try {
            this.push(this.digest())
        } catch (e) {
            t = e
        }
        e(t)
    }
    ,
    o.prototype.update = function(e, t) {
        if (function(e, t) {
            if (!i.isBuffer(e) && "string" != typeof e)
                throw new TypeError(t + " must be a string or a buffer")
        }(e, "Data"),
        this._finalized)
            throw new Error("Digest already called");
        i.isBuffer(e) || (e = i.from(e, t));
        for (var r = this._block, n = 0; this._blockOffset + e.length - n >= this._blockSize; ) {
            for (var o = this._blockOffset; o < this._blockSize; )
                r[o++] = e[n++];
            this._update(),
            this._blockOffset = 0
        }
        for (; n < e.length; )
            r[this._blockOffset++] = e[n++];
        for (var a = 0, s = 8 * e.length; s > 0; ++a)
            this._length[a] += s,
            (s = this._length[a] / 4294967296 | 0) > 0 && (this._length[a] -= 4294967296 * s);
        return this
    }
    ,
    o.prototype._update = function() {
        throw new Error("_update is not implemented")
    }
    ,
    o.prototype.digest = function(e) {
        if (this._finalized)
            throw new Error("Digest already called");
        this._finalized = !0;
        var t = this._digest();
        void 0 !== e && (t = t.toString(e)),
        this._block.fill(0),
        this._blockOffset = 0;
        for (var r = 0; r < 4; ++r)
            this._length[r] = 0;
        return t
    }
    ,
    o.prototype._digest = function() {
        throw new Error("_digest is not implemented")
    }
    ,
    e.exports = o
}
, function(e, t, r) {
    "use strict";
    (function(t, i) {
        var n;
        e.exports = A,
        A.ReadableState = S;
        r(31).EventEmitter;
        var o = function(e, t) {
            return e.listeners(t).length
        }
          , a = r(120)
          , s = r(8).Buffer
          , u = t.Uint8Array || function() {}
        ;
        var f, c = r(220);
        f = c && c.debuglog ? c.debuglog("stream") : function() {}
        ;
        var h, l, d, p = r(221), b = r(121), m = r(122).getHighWaterMark, g = r(41).codes, v = g.ERR_INVALID_ARG_TYPE, y = g.ERR_STREAM_PUSH_AFTER_EOF, w = g.ERR_METHOD_NOT_IMPLEMENTED, _ = g.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;
        r(4)(A, a);
        var E = b.errorOrDestroy
          , M = ["error", "close", "destroy", "pause", "resume"];
        function S(e, t, i) {
            n = n || r(42),
            e = e || {},
            "boolean" != typeof i && (i = t instanceof n),
            this.objectMode = !!e.objectMode,
            i && (this.objectMode = this.objectMode || !!e.readableObjectMode),
            this.highWaterMark = m(this, e, "readableHighWaterMark", i),
            this.buffer = new p,
            this.length = 0,
            this.pipes = null,
            this.pipesCount = 0,
            this.flowing = null,
            this.ended = !1,
            this.endEmitted = !1,
            this.reading = !1,
            this.sync = !0,
            this.needReadable = !1,
            this.emittedReadable = !1,
            this.readableListening = !1,
            this.resumeScheduled = !1,
            this.paused = !0,
            this.emitClose = !1 !== e.emitClose,
            this.autoDestroy = !!e.autoDestroy,
            this.destroyed = !1,
            this.defaultEncoding = e.defaultEncoding || "utf8",
            this.awaitDrain = 0,
            this.readingMore = !1,
            this.decoder = null,
            this.encoding = null,
            e.encoding && (h || (h = r(34).StringDecoder),
            this.decoder = new h(e.encoding),
            this.encoding = e.encoding)
        }
        function A(e) {
            if (n = n || r(42),
            !(this instanceof A))
                return new A(e);
            var t = this instanceof n;
            this._readableState = new S(e,this,t),
            this.readable = !0,
            e && ("function" == typeof e.read && (this._read = e.read),
            "function" == typeof e.destroy && (this._destroy = e.destroy)),
            a.call(this)
        }
        function k(e, t, r, i, n) {
            f("readableAddChunk", t);
            var o, a = e._readableState;
            if (null === t)
                a.reading = !1,
                function(e, t) {
                    if (f("onEofChunk"),
                    t.ended)
                        return;
                    if (t.decoder) {
                        var r = t.decoder.end();
                        r && r.length && (t.buffer.push(r),
                        t.length += t.objectMode ? 1 : r.length)
                    }
                    t.ended = !0,
                    t.sync ? I(e) : (t.needReadable = !1,
                    t.emittedReadable || (t.emittedReadable = !0,
                    T(e)))
                }(e, a);
            else if (n || (o = function(e, t) {
                var r;
                i = t,
                s.isBuffer(i) || i instanceof u || "string" == typeof t || void 0 === t || e.objectMode || (r = new v("chunk",["string", "Buffer", "Uint8Array"],t));
                var i;
                return r
            }(a, t)),
            o)
                E(e, o);
            else if (a.objectMode || t && t.length > 0)
                if ("string" == typeof t || a.objectMode || Object.getPrototypeOf(t) === s.prototype || (t = function(e) {
                    return s.from(e)
                }(t)),
                i)
                    a.endEmitted ? E(e, new _) : x(e, a, t, !0);
                else if (a.ended)
                    E(e, new y);
                else {
                    if (a.destroyed)
                        return !1;
                    a.reading = !1,
                    a.decoder && !r ? (t = a.decoder.write(t),
                    a.objectMode || 0 !== t.length ? x(e, a, t, !1) : P(e, a)) : x(e, a, t, !1)
                }
            else
                i || (a.reading = !1,
                P(e, a));
            return !a.ended && (a.length < a.highWaterMark || 0 === a.length)
        }
        function x(e, t, r, i) {
            t.flowing && 0 === t.length && !t.sync ? (t.awaitDrain = 0,
            e.emit("data", r)) : (t.length += t.objectMode ? 1 : r.length,
            i ? t.buffer.unshift(r) : t.buffer.push(r),
            t.needReadable && I(e)),
            P(e, t)
        }
        Object.defineProperty(A.prototype, "destroyed", {
            enumerable: !1,
            get: function() {
                return void 0 !== this._readableState && this._readableState.destroyed
            },
            set: function(e) {
                this._readableState && (this._readableState.destroyed = e)
            }
        }),
        A.prototype.destroy = b.destroy,
        A.prototype._undestroy = b.undestroy,
        A.prototype._destroy = function(e, t) {
            t(e)
        }
        ,
        A.prototype.push = function(e, t) {
            var r, i = this._readableState;
            return i.objectMode ? r = !0 : "string" == typeof e && ((t = t || i.defaultEncoding) !== i.encoding && (e = s.from(e, t),
            t = ""),
            r = !0),
            k(this, e, t, !1, r)
        }
        ,
        A.prototype.unshift = function(e) {
            return k(this, e, null, !0, !1)
        }
        ,
        A.prototype.isPaused = function() {
            return !1 === this._readableState.flowing
        }
        ,
        A.prototype.setEncoding = function(e) {
            h || (h = r(34).StringDecoder);
            var t = new h(e);
            this._readableState.decoder = t,
            this._readableState.encoding = this._readableState.decoder.encoding;
            for (var i = this._readableState.buffer.head, n = ""; null !== i; )
                n += t.write(i.data),
                i = i.next;
            return this._readableState.buffer.clear(),
            "" !== n && this._readableState.buffer.push(n),
            this._readableState.length = n.length,
            this
        }
        ;
        function R(e, t) {
            return e <= 0 || 0 === t.length && t.ended ? 0 : t.objectMode ? 1 : e != e ? t.flowing && t.length ? t.buffer.head.data.length : t.length : (e > t.highWaterMark && (t.highWaterMark = function(e) {
                return e >= 1073741824 ? e = 1073741824 : (e--,
                e |= e >>> 1,
                e |= e >>> 2,
                e |= e >>> 4,
                e |= e >>> 8,
                e |= e >>> 16,
                e++),
                e
            }(e)),
            e <= t.length ? e : t.ended ? t.length : (t.needReadable = !0,
            0))
        }
        function I(e) {
            var t = e._readableState;
            f("emitReadable", t.needReadable, t.emittedReadable),
            t.needReadable = !1,
            t.emittedReadable || (f("emitReadable", t.flowing),
            t.emittedReadable = !0,
            i.nextTick(T, e))
        }
        function T(e) {
            var t = e._readableState;
            f("emitReadable_", t.destroyed, t.length, t.ended),
            t.destroyed || !t.length && !t.ended || (e.emit("readable"),
            t.emittedReadable = !1),
            t.needReadable = !t.flowing && !t.ended && t.length <= t.highWaterMark,
            L(e)
        }
        function P(e, t) {
            t.readingMore || (t.readingMore = !0,
            i.nextTick(N, e, t))
        }
        function N(e, t) {
            for (; !t.reading && !t.ended && (t.length < t.highWaterMark || t.flowing && 0 === t.length); ) {
                var r = t.length;
                if (f("maybeReadMore read 0"),
                e.read(0),
                r === t.length)
                    break
            }
            t.readingMore = !1
        }
        function C(e) {
            var t = e._readableState;
            t.readableListening = e.listenerCount("readable") > 0,
            t.resumeScheduled && !t.paused ? t.flowing = !0 : e.listenerCount("data") > 0 && e.resume()
        }
        function B(e) {
            f("readable nexttick read 0"),
            e.read(0)
        }
        function O(e, t) {
            f("resume", t.reading),
            t.reading || e.read(0),
            t.resumeScheduled = !1,
            e.emit("resume"),
            L(e),
            t.flowing && !t.reading && e.read(0)
        }
        function L(e) {
            var t = e._readableState;
            for (f("flow", t.flowing); t.flowing && null !== e.read(); )
                ;
        }
        function j(e, t) {
            return 0 === t.length ? null : (t.objectMode ? r = t.buffer.shift() : !e || e >= t.length ? (r = t.decoder ? t.buffer.join("") : 1 === t.buffer.length ? t.buffer.first() : t.buffer.concat(t.length),
            t.buffer.clear()) : r = t.buffer.consume(e, t.decoder),
            r);
            var r
        }
        function D(e) {
            var t = e._readableState;
            f("endReadable", t.endEmitted),
            t.endEmitted || (t.ended = !0,
            i.nextTick(z, t, e))
        }
        function z(e, t) {
            if (f("endReadableNT", e.endEmitted, e.length),
            !e.endEmitted && 0 === e.length && (e.endEmitted = !0,
            t.readable = !1,
            t.emit("end"),
            e.autoDestroy)) {
                var r = t._writableState;
                (!r || r.autoDestroy && r.finished) && t.destroy()
            }
        }
        function U(e, t) {
            for (var r = 0, i = e.length; r < i; r++)
                if (e[r] === t)
                    return r;
            return -1
        }
        A.prototype.read = function(e) {
            f("read", e),
            e = parseInt(e, 10);
            var t = this._readableState
              , r = e;
            if (0 !== e && (t.emittedReadable = !1),
            0 === e && t.needReadable && ((0 !== t.highWaterMark ? t.length >= t.highWaterMark : t.length > 0) || t.ended))
                return f("read: emitReadable", t.length, t.ended),
                0 === t.length && t.ended ? D(this) : I(this),
                null;
            if (0 === (e = R(e, t)) && t.ended)
                return 0 === t.length && D(this),
                null;
            var i, n = t.needReadable;
            return f("need readable", n),
            (0 === t.length || t.length - e < t.highWaterMark) && f("length less than watermark", n = !0),
            t.ended || t.reading ? f("reading or ended", n = !1) : n && (f("do read"),
            t.reading = !0,
            t.sync = !0,
            0 === t.length && (t.needReadable = !0),
            this._read(t.highWaterMark),
            t.sync = !1,
            t.reading || (e = R(r, t))),
            null === (i = e > 0 ? j(e, t) : null) ? (t.needReadable = t.length <= t.highWaterMark,
            e = 0) : (t.length -= e,
            t.awaitDrain = 0),
            0 === t.length && (t.ended || (t.needReadable = !0),
            r !== e && t.ended && D(this)),
            null !== i && this.emit("data", i),
            i
        }
        ,
        A.prototype._read = function(e) {
            E(this, new w("_read()"))
        }
        ,
        A.prototype.pipe = function(e, t) {
            var r = this
              , n = this._readableState;
            switch (n.pipesCount) {
            case 0:
                n.pipes = e;
                break;
            case 1:
                n.pipes = [n.pipes, e];
                break;
            default:
                n.pipes.push(e)
            }
            n.pipesCount += 1,
            f("pipe count=%d opts=%j", n.pipesCount, t);
            var a = (!t || !1 !== t.end) && e !== i.stdout && e !== i.stderr ? u : m;
            function s(t, i) {
                f("onunpipe"),
                t === r && i && !1 === i.hasUnpiped && (i.hasUnpiped = !0,
                f("cleanup"),
                e.removeListener("close", p),
                e.removeListener("finish", b),
                e.removeListener("drain", c),
                e.removeListener("error", d),
                e.removeListener("unpipe", s),
                r.removeListener("end", u),
                r.removeListener("end", m),
                r.removeListener("data", l),
                h = !0,
                !n.awaitDrain || e._writableState && !e._writableState.needDrain || c())
            }
            function u() {
                f("onend"),
                e.end()
            }
            n.endEmitted ? i.nextTick(a) : r.once("end", a),
            e.on("unpipe", s);
            var c = function(e) {
                return function() {
                    var t = e._readableState;
                    f("pipeOnDrain", t.awaitDrain),
                    t.awaitDrain && t.awaitDrain--,
                    0 === t.awaitDrain && o(e, "data") && (t.flowing = !0,
                    L(e))
                }
            }(r);
            e.on("drain", c);
            var h = !1;
            function l(t) {
                f("ondata");
                var i = e.write(t);
                f("dest.write", i),
                !1 === i && ((1 === n.pipesCount && n.pipes === e || n.pipesCount > 1 && -1 !== U(n.pipes, e)) && !h && (f("false write response, pause", n.awaitDrain),
                n.awaitDrain++),
                r.pause())
            }
            function d(t) {
                f("onerror", t),
                m(),
                e.removeListener("error", d),
                0 === o(e, "error") && E(e, t)
            }
            function p() {
                e.removeListener("finish", b),
                m()
            }
            function b() {
                f("onfinish"),
                e.removeListener("close", p),
                m()
            }
            function m() {
                f("unpipe"),
                r.unpipe(e)
            }
            return r.on("data", l),
            function(e, t, r) {
                if ("function" == typeof e.prependListener)
                    return e.prependListener(t, r);
                e._events && e._events[t] ? Array.isArray(e._events[t]) ? e._events[t].unshift(r) : e._events[t] = [r, e._events[t]] : e.on(t, r)
            }(e, "error", d),
            e.once("close", p),
            e.once("finish", b),
            e.emit("pipe", r),
            n.flowing || (f("pipe resume"),
            r.resume()),
            e
        }
        ,
        A.prototype.unpipe = function(e) {
            var t = this._readableState
              , r = {
                hasUnpiped: !1
            };
            if (0 === t.pipesCount)
                return this;
            if (1 === t.pipesCount)
                return e && e !== t.pipes || (e || (e = t.pipes),
                t.pipes = null,
                t.pipesCount = 0,
                t.flowing = !1,
                e && e.emit("unpipe", this, r)),
                this;
            if (!e) {
                var i = t.pipes
                  , n = t.pipesCount;
                t.pipes = null,
                t.pipesCount = 0,
                t.flowing = !1;
                for (var o = 0; o < n; o++)
                    i[o].emit("unpipe", this, {
                        hasUnpiped: !1
                    });
                return this
            }
            var a = U(t.pipes, e);
            return -1 === a || (t.pipes.splice(a, 1),
            t.pipesCount -= 1,
            1 === t.pipesCount && (t.pipes = t.pipes[0]),
            e.emit("unpipe", this, r)),
            this
        }
        ,
        A.prototype.on = function(e, t) {
            var r = a.prototype.on.call(this, e, t)
              , n = this._readableState;
            return "data" === e ? (n.readableListening = this.listenerCount("readable") > 0,
            !1 !== n.flowing && this.resume()) : "readable" === e && (n.endEmitted || n.readableListening || (n.readableListening = n.needReadable = !0,
            n.flowing = !1,
            n.emittedReadable = !1,
            f("on readable", n.length, n.reading),
            n.length ? I(this) : n.reading || i.nextTick(B, this))),
            r
        }
        ,
        A.prototype.addListener = A.prototype.on,
        A.prototype.removeListener = function(e, t) {
            var r = a.prototype.removeListener.call(this, e, t);
            return "readable" === e && i.nextTick(C, this),
            r
        }
        ,
        A.prototype.removeAllListeners = function(e) {
            var t = a.prototype.removeAllListeners.apply(this, arguments);
            return "readable" !== e && void 0 !== e || i.nextTick(C, this),
            t
        }
        ,
        A.prototype.resume = function() {
            var e = this._readableState;
            return e.flowing || (f("resume"),
            e.flowing = !e.readableListening,
            function(e, t) {
                t.resumeScheduled || (t.resumeScheduled = !0,
                i.nextTick(O, e, t))
            }(this, e)),
            e.paused = !1,
            this
        }
        ,
        A.prototype.pause = function() {
            return f("call pause flowing=%j", this._readableState.flowing),
            !1 !== this._readableState.flowing && (f("pause"),
            this._readableState.flowing = !1,
            this.emit("pause")),
            this._readableState.paused = !0,
            this
        }
        ,
        A.prototype.wrap = function(e) {
            var t = this
              , r = this._readableState
              , i = !1;
            for (var n in e.on("end", (function() {
                if (f("wrapped end"),
                r.decoder && !r.ended) {
                    var e = r.decoder.end();
                    e && e.length && t.push(e)
                }
                t.push(null)
            }
            )),
            e.on("data", (function(n) {
                (f("wrapped data"),
                r.decoder && (n = r.decoder.write(n)),
                r.objectMode && null == n) || (r.objectMode || n && n.length) && (t.push(n) || (i = !0,
                e.pause()))
            }
            )),
            e)
                void 0 === this[n] && "function" == typeof e[n] && (this[n] = function(t) {
                    return function() {
                        return e[t].apply(e, arguments)
                    }
                }(n));
            for (var o = 0; o < M.length; o++)
                e.on(M[o], this.emit.bind(this, M[o]));
            return this._read = function(t) {
                f("wrapped _read", t),
                i && (i = !1,
                e.resume())
            }
            ,
            this
        }
        ,
        "function" == typeof Symbol && (A.prototype[Symbol.asyncIterator] = function() {
            return void 0 === l && (l = r(223)),
            l(this)
        }
        ),
        Object.defineProperty(A.prototype, "readableHighWaterMark", {
            enumerable: !1,
            get: function() {
                return this._readableState.highWaterMark
            }
        }),
        Object.defineProperty(A.prototype, "readableBuffer", {
            enumerable: !1,
            get: function() {
                return this._readableState && this._readableState.buffer
            }
        }),
        Object.defineProperty(A.prototype, "readableFlowing", {
            enumerable: !1,
            get: function() {
                return this._readableState.flowing
            },
            set: function(e) {
                this._readableState && (this._readableState.flowing = e)
            }
        }),
        A._fromList = j,
        Object.defineProperty(A.prototype, "readableLength", {
            enumerable: !1,
            get: function() {
                return this._readableState.length
            }
        }),
        "function" == typeof Symbol && (A.from = function(e, t) {
            return void 0 === d && (d = r(224)),
            d(A, e, t)
        }
        )
    }
    ).call(this, r(13), r(14))
}
, function(e, t, r) {
    e.exports = r(31).EventEmitter
}
, function(e, t, r) {
    "use strict";
    (function(t) {
        function r(e, t) {
            n(e, t),
            i(e)
        }
        function i(e) {
            e._writableState && !e._writableState.emitClose || e._readableState && !e._readableState.emitClose || e.emit("close")
        }
        function n(e, t) {
            e.emit("error", t)
        }
        e.exports = {
            destroy: function(e, o) {
                var a = this
                  , s = this._readableState && this._readableState.destroyed
                  , u = this._writableState && this._writableState.destroyed;
                return s || u ? (o ? o(e) : e && (this._writableState ? this._writableState.errorEmitted || (this._writableState.errorEmitted = !0,
                t.nextTick(n, this, e)) : t.nextTick(n, this, e)),
                this) : (this._readableState && (this._readableState.destroyed = !0),
                this._writableState && (this._writableState.destroyed = !0),
                this._destroy(e || null, (function(e) {
                    !o && e ? a._writableState ? a._writableState.errorEmitted ? t.nextTick(i, a) : (a._writableState.errorEmitted = !0,
                    t.nextTick(r, a, e)) : t.nextTick(r, a, e) : o ? (t.nextTick(i, a),
                    o(e)) : t.nextTick(i, a)
                }
                )),
                this)
            },
            undestroy: function() {
                this._readableState && (this._readableState.destroyed = !1,
                this._readableState.reading = !1,
                this._readableState.ended = !1,
                this._readableState.endEmitted = !1),
                this._writableState && (this._writableState.destroyed = !1,
                this._writableState.ended = !1,
                this._writableState.ending = !1,
                this._writableState.finalCalled = !1,
                this._writableState.prefinished = !1,
                this._writableState.finished = !1,
                this._writableState.errorEmitted = !1)
            },
            errorOrDestroy: function(e, t) {
                var r = e._readableState
                  , i = e._writableState;
                r && r.autoDestroy || i && i.autoDestroy ? e.destroy(t) : e.emit("error", t)
            }
        }
    }
    ).call(this, r(14))
}
, function(e, t, r) {
    "use strict";
    var i = r(41).codes.ERR_INVALID_OPT_VALUE;
    e.exports = {
        getHighWaterMark: function(e, t, r, n) {
            var o = function(e, t, r) {
                return null != e.highWaterMark ? e.highWaterMark : t ? e[r] : null
            }(t, n, r);
            if (null != o) {
                if (!isFinite(o) || Math.floor(o) !== o || o < 0)
                    throw new i(n ? r : "highWaterMark",o);
                return Math.floor(o)
            }
            return e.objectMode ? 16 : 16384
        }
    }
}
, function(e, t, r) {
    "use strict";
    (function(t, i) {
        function n(e) {
            var t = this;
            this.next = null,
            this.entry = null,
            this.finish = function() {
                !function(e, t, r) {
                    var i = e.entry;
                    e.entry = null;
                    for (; i; ) {
                        var n = i.callback;
                        t.pendingcb--,
                        n(r),
                        i = i.next
                    }
                    t.corkedRequestsFree.next = e
                }(t, e)
            }
        }
        var o;
        e.exports = A,
        A.WritableState = S;
        var a = {
            deprecate: r(79)
        }
          , s = r(120)
          , u = r(8).Buffer
          , f = t.Uint8Array || function() {}
        ;
        var c, h = r(121), l = r(122).getHighWaterMark, d = r(41).codes, p = d.ERR_INVALID_ARG_TYPE, b = d.ERR_METHOD_NOT_IMPLEMENTED, m = d.ERR_MULTIPLE_CALLBACK, g = d.ERR_STREAM_CANNOT_PIPE, v = d.ERR_STREAM_DESTROYED, y = d.ERR_STREAM_NULL_VALUES, w = d.ERR_STREAM_WRITE_AFTER_END, _ = d.ERR_UNKNOWN_ENCODING, E = h.errorOrDestroy;
        function M() {}
        function S(e, t, a) {
            o = o || r(42),
            e = e || {},
            "boolean" != typeof a && (a = t instanceof o),
            this.objectMode = !!e.objectMode,
            a && (this.objectMode = this.objectMode || !!e.writableObjectMode),
            this.highWaterMark = l(this, e, "writableHighWaterMark", a),
            this.finalCalled = !1,
            this.needDrain = !1,
            this.ending = !1,
            this.ended = !1,
            this.finished = !1,
            this.destroyed = !1;
            var s = !1 === e.decodeStrings;
            this.decodeStrings = !s,
            this.defaultEncoding = e.defaultEncoding || "utf8",
            this.length = 0,
            this.writing = !1,
            this.corked = 0,
            this.sync = !0,
            this.bufferProcessing = !1,
            this.onwrite = function(e) {
                !function(e, t) {
                    var r = e._writableState
                      , n = r.sync
                      , o = r.writecb;
                    if ("function" != typeof o)
                        throw new m;
                    if (function(e) {
                        e.writing = !1,
                        e.writecb = null,
                        e.length -= e.writelen,
                        e.writelen = 0
                    }(r),
                    t)
                        !function(e, t, r, n, o) {
                            --t.pendingcb,
                            r ? (i.nextTick(o, n),
                            i.nextTick(P, e, t),
                            e._writableState.errorEmitted = !0,
                            E(e, n)) : (o(n),
                            e._writableState.errorEmitted = !0,
                            E(e, n),
                            P(e, t))
                        }(e, r, n, t, o);
                    else {
                        var a = I(r) || e.destroyed;
                        a || r.corked || r.bufferProcessing || !r.bufferedRequest || R(e, r),
                        n ? i.nextTick(x, e, r, a, o) : x(e, r, a, o)
                    }
                }(t, e)
            }
            ,
            this.writecb = null,
            this.writelen = 0,
            this.bufferedRequest = null,
            this.lastBufferedRequest = null,
            this.pendingcb = 0,
            this.prefinished = !1,
            this.errorEmitted = !1,
            this.emitClose = !1 !== e.emitClose,
            this.autoDestroy = !!e.autoDestroy,
            this.bufferedRequestCount = 0,
            this.corkedRequestsFree = new n(this)
        }
        function A(e) {
            var t = this instanceof (o = o || r(42));
            if (!t && !c.call(A, this))
                return new A(e);
            this._writableState = new S(e,this,t),
            this.writable = !0,
            e && ("function" == typeof e.write && (this._write = e.write),
            "function" == typeof e.writev && (this._writev = e.writev),
            "function" == typeof e.destroy && (this._destroy = e.destroy),
            "function" == typeof e.final && (this._final = e.final)),
            s.call(this)
        }
        function k(e, t, r, i, n, o, a) {
            t.writelen = i,
            t.writecb = a,
            t.writing = !0,
            t.sync = !0,
            t.destroyed ? t.onwrite(new v("write")) : r ? e._writev(n, t.onwrite) : e._write(n, o, t.onwrite),
            t.sync = !1
        }
        function x(e, t, r, i) {
            r || function(e, t) {
                0 === t.length && t.needDrain && (t.needDrain = !1,
                e.emit("drain"))
            }(e, t),
            t.pendingcb--,
            i(),
            P(e, t)
        }
        function R(e, t) {
            t.bufferProcessing = !0;
            var r = t.bufferedRequest;
            if (e._writev && r && r.next) {
                var i = t.bufferedRequestCount
                  , o = new Array(i)
                  , a = t.corkedRequestsFree;
                a.entry = r;
                for (var s = 0, u = !0; r; )
                    o[s] = r,
                    r.isBuf || (u = !1),
                    r = r.next,
                    s += 1;
                o.allBuffers = u,
                k(e, t, !0, t.length, o, "", a.finish),
                t.pendingcb++,
                t.lastBufferedRequest = null,
                a.next ? (t.corkedRequestsFree = a.next,
                a.next = null) : t.corkedRequestsFree = new n(t),
                t.bufferedRequestCount = 0
            } else {
                for (; r; ) {
                    var f = r.chunk
                      , c = r.encoding
                      , h = r.callback;
                    if (k(e, t, !1, t.objectMode ? 1 : f.length, f, c, h),
                    r = r.next,
                    t.bufferedRequestCount--,
                    t.writing)
                        break
                }
                null === r && (t.lastBufferedRequest = null)
            }
            t.bufferedRequest = r,
            t.bufferProcessing = !1
        }
        function I(e) {
            return e.ending && 0 === e.length && null === e.bufferedRequest && !e.finished && !e.writing
        }
        function T(e, t) {
            e._final((function(r) {
                t.pendingcb--,
                r && E(e, r),
                t.prefinished = !0,
                e.emit("prefinish"),
                P(e, t)
            }
            ))
        }
        function P(e, t) {
            var r = I(t);
            if (r && (function(e, t) {
                t.prefinished || t.finalCalled || ("function" != typeof e._final || t.destroyed ? (t.prefinished = !0,
                e.emit("prefinish")) : (t.pendingcb++,
                t.finalCalled = !0,
                i.nextTick(T, e, t)))
            }(e, t),
            0 === t.pendingcb && (t.finished = !0,
            e.emit("finish"),
            t.autoDestroy))) {
                var n = e._readableState;
                (!n || n.autoDestroy && n.endEmitted) && e.destroy()
            }
            return r
        }
        r(4)(A, s),
        S.prototype.getBuffer = function() {
            for (var e = this.bufferedRequest, t = []; e; )
                t.push(e),
                e = e.next;
            return t
        }
        ,
        function() {
            try {
                Object.defineProperty(S.prototype, "buffer", {
                    get: a.deprecate((function() {
                        return this.getBuffer()
                    }
                    ), "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
                })
            } catch (e) {}
        }(),
        "function" == typeof Symbol && Symbol.hasInstance && "function" == typeof Function.prototype[Symbol.hasInstance] ? (c = Function.prototype[Symbol.hasInstance],
        Object.defineProperty(A, Symbol.hasInstance, {
            value: function(e) {
                return !!c.call(this, e) || this === A && (e && e._writableState instanceof S)
            }
        })) : c = function(e) {
            return e instanceof this
        }
        ,
        A.prototype.pipe = function() {
            E(this, new g)
        }
        ,
        A.prototype.write = function(e, t, r) {
            var n, o = this._writableState, a = !1, s = !o.objectMode && (n = e,
            u.isBuffer(n) || n instanceof f);
            return s && !u.isBuffer(e) && (e = function(e) {
                return u.from(e)
            }(e)),
            "function" == typeof t && (r = t,
            t = null),
            s ? t = "buffer" : t || (t = o.defaultEncoding),
            "function" != typeof r && (r = M),
            o.ending ? function(e, t) {
                var r = new w;
                E(e, r),
                i.nextTick(t, r)
            }(this, r) : (s || function(e, t, r, n) {
                var o;
                return null === r ? o = new y : "string" == typeof r || t.objectMode || (o = new p("chunk",["string", "Buffer"],r)),
                !o || (E(e, o),
                i.nextTick(n, o),
                !1)
            }(this, o, e, r)) && (o.pendingcb++,
            a = function(e, t, r, i, n, o) {
                if (!r) {
                    var a = function(e, t, r) {
                        e.objectMode || !1 === e.decodeStrings || "string" != typeof t || (t = u.from(t, r));
                        return t
                    }(t, i, n);
                    i !== a && (r = !0,
                    n = "buffer",
                    i = a)
                }
                var s = t.objectMode ? 1 : i.length;
                t.length += s;
                var f = t.length < t.highWaterMark;
                f || (t.needDrain = !0);
                if (t.writing || t.corked) {
                    var c = t.lastBufferedRequest;
                    t.lastBufferedRequest = {
                        chunk: i,
                        encoding: n,
                        isBuf: r,
                        callback: o,
                        next: null
                    },
                    c ? c.next = t.lastBufferedRequest : t.bufferedRequest = t.lastBufferedRequest,
                    t.bufferedRequestCount += 1
                } else
                    k(e, t, !1, s, i, n, o);
                return f
            }(this, o, s, e, t, r)),
            a
        }
        ,
        A.prototype.cork = function() {
            this._writableState.corked++
        }
        ,
        A.prototype.uncork = function() {
            var e = this._writableState;
            e.corked && (e.corked--,
            e.writing || e.corked || e.bufferProcessing || !e.bufferedRequest || R(this, e))
        }
        ,
        A.prototype.setDefaultEncoding = function(e) {
            if ("string" == typeof e && (e = e.toLowerCase()),
            !(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((e + "").toLowerCase()) > -1))
                throw new _(e);
            return this._writableState.defaultEncoding = e,
            this
        }
        ,
        Object.defineProperty(A.prototype, "writableBuffer", {
            enumerable: !1,
            get: function() {
                return this._writableState && this._writableState.getBuffer()
            }
        }),
        Object.defineProperty(A.prototype, "writableHighWaterMark", {
            enumerable: !1,
            get: function() {
                return this._writableState.highWaterMark
            }
        }),
        A.prototype._write = function(e, t, r) {
            r(new b("_write()"))
        }
        ,
        A.prototype._writev = null,
        A.prototype.end = function(e, t, r) {
            var n = this._writableState;
            return "function" == typeof e ? (r = e,
            e = null,
            t = null) : "function" == typeof t && (r = t,
            t = null),
            null != e && this.write(e, t),
            n.corked && (n.corked = 1,
            this.uncork()),
            n.ending || function(e, t, r) {
                t.ending = !0,
                P(e, t),
                r && (t.finished ? i.nextTick(r) : e.once("finish", r));
                t.ended = !0,
                e.writable = !1
            }(this, n, r),
            this
        }
        ,
        Object.defineProperty(A.prototype, "writableLength", {
            enumerable: !1,
            get: function() {
                return this._writableState.length
            }
        }),
        Object.defineProperty(A.prototype, "destroyed", {
            enumerable: !1,
            get: function() {
                return void 0 !== this._writableState && this._writableState.destroyed
            },
            set: function(e) {
                this._writableState && (this._writableState.destroyed = e)
            }
        }),
        A.prototype.destroy = h.destroy,
        A.prototype._undestroy = h.undestroy,
        A.prototype._destroy = function(e, t) {
            t(e)
        }
    }
    ).call(this, r(13), r(14))
}
, function(e, t, r) {
    "use strict";
    e.exports = c;
    var i = r(41).codes
      , n = i.ERR_METHOD_NOT_IMPLEMENTED
      , o = i.ERR_MULTIPLE_CALLBACK
      , a = i.ERR_TRANSFORM_ALREADY_TRANSFORMING
      , s = i.ERR_TRANSFORM_WITH_LENGTH_0
      , u = r(42);
    function f(e, t) {
        var r = this._transformState;
        r.transforming = !1;
        var i = r.writecb;
        if (null === i)
            return this.emit("error", new o);
        r.writechunk = null,
        r.writecb = null,
        null != t && this.push(t),
        i(e);
        var n = this._readableState;
        n.reading = !1,
        (n.needReadable || n.length < n.highWaterMark) && this._read(n.highWaterMark)
    }
    function c(e) {
        if (!(this instanceof c))
            return new c(e);
        u.call(this, e),
        this._transformState = {
            afterTransform: f.bind(this),
            needTransform: !1,
            transforming: !1,
            writecb: null,
            writechunk: null,
            writeencoding: null
        },
        this._readableState.needReadable = !0,
        this._readableState.sync = !1,
        e && ("function" == typeof e.transform && (this._transform = e.transform),
        "function" == typeof e.flush && (this._flush = e.flush)),
        this.on("prefinish", h)
    }
    function h() {
        var e = this;
        "function" != typeof this._flush || this._readableState.destroyed ? l(this, null, null) : this._flush((function(t, r) {
            l(e, t, r)
        }
        ))
    }
    function l(e, t, r) {
        if (t)
            return e.emit("error", t);
        if (null != r && e.push(r),
        e._writableState.length)
            throw new s;
        if (e._transformState.transforming)
            throw new a;
        return e.push(null)
    }
    r(4)(c, u),
    c.prototype.push = function(e, t) {
        return this._transformState.needTransform = !1,
        u.prototype.push.call(this, e, t)
    }
    ,
    c.prototype._transform = function(e, t, r) {
        r(new n("_transform()"))
    }
    ,
    c.prototype._write = function(e, t, r) {
        var i = this._transformState;
        if (i.writecb = r,
        i.writechunk = e,
        i.writeencoding = t,
        !i.transforming) {
            var n = this._readableState;
            (i.needTransform || n.needReadable || n.length < n.highWaterMark) && this._read(n.highWaterMark)
        }
    }
    ,
    c.prototype._read = function(e) {
        var t = this._transformState;
        null === t.writechunk || t.transforming ? t.needTransform = !0 : (t.transforming = !0,
        this._transform(t.writechunk, t.writeencoding, t.afterTransform))
    }
    ,
    c.prototype._destroy = function(e, t) {
        u.prototype._destroy.call(this, e, (function(e) {
            t(e)
        }
        ))
    }
}
, function(e, t, r) {
    var i = r(4)
      , n = r(43)
      , o = r(5).Buffer
      , a = [1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298]
      , s = new Array(64);
    function u() {
        this.init(),
        this._w = s,
        n.call(this, 64, 56)
    }
    function f(e, t, r) {
        return r ^ e & (t ^ r)
    }
    function c(e, t, r) {
        return e & t | r & (e | t)
    }
    function h(e) {
        return (e >>> 2 | e << 30) ^ (e >>> 13 | e << 19) ^ (e >>> 22 | e << 10)
    }
    function l(e) {
        return (e >>> 6 | e << 26) ^ (e >>> 11 | e << 21) ^ (e >>> 25 | e << 7)
    }
    function d(e) {
        return (e >>> 7 | e << 25) ^ (e >>> 18 | e << 14) ^ e >>> 3
    }
    i(u, n),
    u.prototype.init = function() {
        return this._a = 1779033703,
        this._b = 3144134277,
        this._c = 1013904242,
        this._d = 2773480762,
        this._e = 1359893119,
        this._f = 2600822924,
        this._g = 528734635,
        this._h = 1541459225,
        this
    }
    ,
    u.prototype._update = function(e) {
        for (var t, r = this._w, i = 0 | this._a, n = 0 | this._b, o = 0 | this._c, s = 0 | this._d, u = 0 | this._e, p = 0 | this._f, b = 0 | this._g, m = 0 | this._h, g = 0; g < 16; ++g)
            r[g] = e.readInt32BE(4 * g);
        for (; g < 64; ++g)
            r[g] = 0 | (((t = r[g - 2]) >>> 17 | t << 15) ^ (t >>> 19 | t << 13) ^ t >>> 10) + r[g - 7] + d(r[g - 15]) + r[g - 16];
        for (var v = 0; v < 64; ++v) {
            var y = m + l(u) + f(u, p, b) + a[v] + r[v] | 0
              , w = h(i) + c(i, n, o) | 0;
            m = b,
            b = p,
            p = u,
            u = s + y | 0,
            s = o,
            o = n,
            n = i,
            i = y + w | 0
        }
        this._a = i + this._a | 0,
        this._b = n + this._b | 0,
        this._c = o + this._c | 0,
        this._d = s + this._d | 0,
        this._e = u + this._e | 0,
        this._f = p + this._f | 0,
        this._g = b + this._g | 0,
        this._h = m + this._h | 0
    }
    ,
    u.prototype._hash = function() {
        var e = o.allocUnsafe(32);
        return e.writeInt32BE(this._a, 0),
        e.writeInt32BE(this._b, 4),
        e.writeInt32BE(this._c, 8),
        e.writeInt32BE(this._d, 12),
        e.writeInt32BE(this._e, 16),
        e.writeInt32BE(this._f, 20),
        e.writeInt32BE(this._g, 24),
        e.writeInt32BE(this._h, 28),
        e
    }
    ,
    e.exports = u
}
, function(e, t, r) {
    var i = r(4)
      , n = r(43)
      , o = r(5).Buffer
      , a = [1116352408, 3609767458, 1899447441, 602891725, 3049323471, 3964484399, 3921009573, 2173295548, 961987163, 4081628472, 1508970993, 3053834265, 2453635748, 2937671579, 2870763221, 3664609560, 3624381080, 2734883394, 310598401, 1164996542, 607225278, 1323610764, 1426881987, 3590304994, 1925078388, 4068182383, 2162078206, 991336113, 2614888103, 633803317, 3248222580, 3479774868, 3835390401, 2666613458, 4022224774, 944711139, 264347078, 2341262773, 604807628, 2007800933, 770255983, 1495990901, 1249150122, 1856431235, 1555081692, 3175218132, 1996064986, 2198950837, 2554220882, 3999719339, 2821834349, 766784016, 2952996808, 2566594879, 3210313671, 3203337956, 3336571891, 1034457026, 3584528711, 2466948901, 113926993, 3758326383, 338241895, 168717936, 666307205, 1188179964, 773529912, 1546045734, 1294757372, 1522805485, 1396182291, 2643833823, 1695183700, 2343527390, 1986661051, 1014477480, 2177026350, 1206759142, 2456956037, 344077627, 2730485921, 1290863460, 2820302411, 3158454273, 3259730800, 3505952657, 3345764771, 106217008, 3516065817, 3606008344, 3600352804, 1432725776, 4094571909, 1467031594, 275423344, 851169720, 430227734, 3100823752, 506948616, 1363258195, 659060556, 3750685593, 883997877, 3785050280, 958139571, 3318307427, 1322822218, 3812723403, 1537002063, 2003034995, 1747873779, 3602036899, 1955562222, 1575990012, 2024104815, 1125592928, 2227730452, 2716904306, 2361852424, 442776044, 2428436474, 593698344, 2756734187, 3733110249, 3204031479, 2999351573, 3329325298, 3815920427, 3391569614, 3928383900, 3515267271, 566280711, 3940187606, 3454069534, 4118630271, 4000239992, 116418474, 1914138554, 174292421, 2731055270, 289380356, 3203993006, 460393269, 320620315, 685471733, 587496836, 852142971, 1086792851, 1017036298, 365543100, 1126000580, 2618297676, 1288033470, 3409855158, 1501505948, 4234509866, 1607167915, 987167468, 1816402316, 1246189591]
      , s = new Array(160);
    function u() {
        this.init(),
        this._w = s,
        n.call(this, 128, 112)
    }
    function f(e, t, r) {
        return r ^ e & (t ^ r)
    }
    function c(e, t, r) {
        return e & t | r & (e | t)
    }
    function h(e, t) {
        return (e >>> 28 | t << 4) ^ (t >>> 2 | e << 30) ^ (t >>> 7 | e << 25)
    }
    function l(e, t) {
        return (e >>> 14 | t << 18) ^ (e >>> 18 | t << 14) ^ (t >>> 9 | e << 23)
    }
    function d(e, t) {
        return (e >>> 1 | t << 31) ^ (e >>> 8 | t << 24) ^ e >>> 7
    }
    function p(e, t) {
        return (e >>> 1 | t << 31) ^ (e >>> 8 | t << 24) ^ (e >>> 7 | t << 25)
    }
    function b(e, t) {
        return (e >>> 19 | t << 13) ^ (t >>> 29 | e << 3) ^ e >>> 6
    }
    function m(e, t) {
        return (e >>> 19 | t << 13) ^ (t >>> 29 | e << 3) ^ (e >>> 6 | t << 26)
    }
    function g(e, t) {
        return e >>> 0 < t >>> 0 ? 1 : 0
    }
    i(u, n),
    u.prototype.init = function() {
        return this._ah = 1779033703,
        this._bh = 3144134277,
        this._ch = 1013904242,
        this._dh = 2773480762,
        this._eh = 1359893119,
        this._fh = 2600822924,
        this._gh = 528734635,
        this._hh = 1541459225,
        this._al = 4089235720,
        this._bl = 2227873595,
        this._cl = 4271175723,
        this._dl = 1595750129,
        this._el = 2917565137,
        this._fl = 725511199,
        this._gl = 4215389547,
        this._hl = 327033209,
        this
    }
    ,
    u.prototype._update = function(e) {
        for (var t = this._w, r = 0 | this._ah, i = 0 | this._bh, n = 0 | this._ch, o = 0 | this._dh, s = 0 | this._eh, u = 0 | this._fh, v = 0 | this._gh, y = 0 | this._hh, w = 0 | this._al, _ = 0 | this._bl, E = 0 | this._cl, M = 0 | this._dl, S = 0 | this._el, A = 0 | this._fl, k = 0 | this._gl, x = 0 | this._hl, R = 0; R < 32; R += 2)
            t[R] = e.readInt32BE(4 * R),
            t[R + 1] = e.readInt32BE(4 * R + 4);
        for (; R < 160; R += 2) {
            var I = t[R - 30]
              , T = t[R - 30 + 1]
              , P = d(I, T)
              , N = p(T, I)
              , C = b(I = t[R - 4], T = t[R - 4 + 1])
              , B = m(T, I)
              , O = t[R - 14]
              , L = t[R - 14 + 1]
              , j = t[R - 32]
              , D = t[R - 32 + 1]
              , z = N + L | 0
              , U = P + O + g(z, N) | 0;
            U = (U = U + C + g(z = z + B | 0, B) | 0) + j + g(z = z + D | 0, D) | 0,
            t[R] = U,
            t[R + 1] = z
        }
        for (var q = 0; q < 160; q += 2) {
            U = t[q],
            z = t[q + 1];
            var K = c(r, i, n)
              , F = c(w, _, E)
              , H = h(r, w)
              , V = h(w, r)
              , Y = l(s, S)
              , G = l(S, s)
              , W = a[q]
              , Z = a[q + 1]
              , J = f(s, u, v)
              , X = f(S, A, k)
              , Q = x + G | 0
              , $ = y + Y + g(Q, x) | 0;
            $ = ($ = ($ = $ + J + g(Q = Q + X | 0, X) | 0) + W + g(Q = Q + Z | 0, Z) | 0) + U + g(Q = Q + z | 0, z) | 0;
            var ee = V + F | 0
              , te = H + K + g(ee, V) | 0;
            y = v,
            x = k,
            v = u,
            k = A,
            u = s,
            A = S,
            s = o + $ + g(S = M + Q | 0, M) | 0,
            o = n,
            M = E,
            n = i,
            E = _,
            i = r,
            _ = w,
            r = $ + te + g(w = Q + ee | 0, Q) | 0
        }
        this._al = this._al + w | 0,
        this._bl = this._bl + _ | 0,
        this._cl = this._cl + E | 0,
        this._dl = this._dl + M | 0,
        this._el = this._el + S | 0,
        this._fl = this._fl + A | 0,
        this._gl = this._gl + k | 0,
        this._hl = this._hl + x | 0,
        this._ah = this._ah + r + g(this._al, w) | 0,
        this._bh = this._bh + i + g(this._bl, _) | 0,
        this._ch = this._ch + n + g(this._cl, E) | 0,
        this._dh = this._dh + o + g(this._dl, M) | 0,
        this._eh = this._eh + s + g(this._el, S) | 0,
        this._fh = this._fh + u + g(this._fl, A) | 0,
        this._gh = this._gh + v + g(this._gl, k) | 0,
        this._hh = this._hh + y + g(this._hl, x) | 0
    }
    ,
    u.prototype._hash = function() {
        var e = o.allocUnsafe(64);
        function t(t, r, i) {
            e.writeInt32BE(t, i),
            e.writeInt32BE(r, i + 4)
        }
        return t(this._ah, this._al, 0),
        t(this._bh, this._bl, 8),
        t(this._ch, this._cl, 16),
        t(this._dh, this._dl, 24),
        t(this._eh, this._el, 32),
        t(this._fh, this._fl, 40),
        t(this._gh, this._gl, 48),
        t(this._hh, this._hl, 56),
        e
    }
    ,
    e.exports = u
}
, function(e, t, r) {
    "use strict";
    (function(t, i) {
        var n = r(60);
        e.exports = y;
        var o, a = r(117);
        y.ReadableState = v;
        r(31).EventEmitter;
        var s = function(e, t) {
            return e.listeners(t).length
        }
          , u = r(128)
          , f = r(82).Buffer
          , c = t.Uint8Array || function() {}
        ;
        var h = Object.create(r(52));
        h.inherits = r(4);
        var l = r(232)
          , d = void 0;
        d = l && l.debuglog ? l.debuglog("stream") : function() {}
        ;
        var p, b = r(233), m = r(129);
        h.inherits(y, u);
        var g = ["error", "close", "destroy", "pause", "resume"];
        function v(e, t) {
            e = e || {};
            var i = t instanceof (o = o || r(35));
            this.objectMode = !!e.objectMode,
            i && (this.objectMode = this.objectMode || !!e.readableObjectMode);
            var n = e.highWaterMark
              , a = e.readableHighWaterMark
              , s = this.objectMode ? 16 : 16384;
            this.highWaterMark = n || 0 === n ? n : i && (a || 0 === a) ? a : s,
            this.highWaterMark = Math.floor(this.highWaterMark),
            this.buffer = new b,
            this.length = 0,
            this.pipes = null,
            this.pipesCount = 0,
            this.flowing = null,
            this.ended = !1,
            this.endEmitted = !1,
            this.reading = !1,
            this.sync = !0,
            this.needReadable = !1,
            this.emittedReadable = !1,
            this.readableListening = !1,
            this.resumeScheduled = !1,
            this.destroyed = !1,
            this.defaultEncoding = e.defaultEncoding || "utf8",
            this.awaitDrain = 0,
            this.readingMore = !1,
            this.decoder = null,
            this.encoding = null,
            e.encoding && (p || (p = r(34).StringDecoder),
            this.decoder = new p(e.encoding),
            this.encoding = e.encoding)
        }
        function y(e) {
            if (o = o || r(35),
            !(this instanceof y))
                return new y(e);
            this._readableState = new v(e,this),
            this.readable = !0,
            e && ("function" == typeof e.read && (this._read = e.read),
            "function" == typeof e.destroy && (this._destroy = e.destroy)),
            u.call(this)
        }
        function w(e, t, r, i, n) {
            var o, a = e._readableState;
            null === t ? (a.reading = !1,
            function(e, t) {
                if (t.ended)
                    return;
                if (t.decoder) {
                    var r = t.decoder.end();
                    r && r.length && (t.buffer.push(r),
                    t.length += t.objectMode ? 1 : r.length)
                }
                t.ended = !0,
                M(e)
            }(e, a)) : (n || (o = function(e, t) {
                var r;
                i = t,
                f.isBuffer(i) || i instanceof c || "string" == typeof t || void 0 === t || e.objectMode || (r = new TypeError("Invalid non-string/buffer chunk"));
                var i;
                return r
            }(a, t)),
            o ? e.emit("error", o) : a.objectMode || t && t.length > 0 ? ("string" == typeof t || a.objectMode || Object.getPrototypeOf(t) === f.prototype || (t = function(e) {
                return f.from(e)
            }(t)),
            i ? a.endEmitted ? e.emit("error", new Error("stream.unshift() after end event")) : _(e, a, t, !0) : a.ended ? e.emit("error", new Error("stream.push() after EOF")) : (a.reading = !1,
            a.decoder && !r ? (t = a.decoder.write(t),
            a.objectMode || 0 !== t.length ? _(e, a, t, !1) : A(e, a)) : _(e, a, t, !1))) : i || (a.reading = !1));
            return function(e) {
                return !e.ended && (e.needReadable || e.length < e.highWaterMark || 0 === e.length)
            }(a)
        }
        function _(e, t, r, i) {
            t.flowing && 0 === t.length && !t.sync ? (e.emit("data", r),
            e.read(0)) : (t.length += t.objectMode ? 1 : r.length,
            i ? t.buffer.unshift(r) : t.buffer.push(r),
            t.needReadable && M(e)),
            A(e, t)
        }
        Object.defineProperty(y.prototype, "destroyed", {
            get: function() {
                return void 0 !== this._readableState && this._readableState.destroyed
            },
            set: function(e) {
                this._readableState && (this._readableState.destroyed = e)
            }
        }),
        y.prototype.destroy = m.destroy,
        y.prototype._undestroy = m.undestroy,
        y.prototype._destroy = function(e, t) {
            this.push(null),
            t(e)
        }
        ,
        y.prototype.push = function(e, t) {
            var r, i = this._readableState;
            return i.objectMode ? r = !0 : "string" == typeof e && ((t = t || i.defaultEncoding) !== i.encoding && (e = f.from(e, t),
            t = ""),
            r = !0),
            w(this, e, t, !1, r)
        }
        ,
        y.prototype.unshift = function(e) {
            return w(this, e, null, !0, !1)
        }
        ,
        y.prototype.isPaused = function() {
            return !1 === this._readableState.flowing
        }
        ,
        y.prototype.setEncoding = function(e) {
            return p || (p = r(34).StringDecoder),
            this._readableState.decoder = new p(e),
            this._readableState.encoding = e,
            this
        }
        ;
        function E(e, t) {
            return e <= 0 || 0 === t.length && t.ended ? 0 : t.objectMode ? 1 : e != e ? t.flowing && t.length ? t.buffer.head.data.length : t.length : (e > t.highWaterMark && (t.highWaterMark = function(e) {
                return e >= 8388608 ? e = 8388608 : (e--,
                e |= e >>> 1,
                e |= e >>> 2,
                e |= e >>> 4,
                e |= e >>> 8,
                e |= e >>> 16,
                e++),
                e
            }(e)),
            e <= t.length ? e : t.ended ? t.length : (t.needReadable = !0,
            0))
        }
        function M(e) {
            var t = e._readableState;
            t.needReadable = !1,
            t.emittedReadable || (d("emitReadable", t.flowing),
            t.emittedReadable = !0,
            t.sync ? n.nextTick(S, e) : S(e))
        }
        function S(e) {
            d("emit readable"),
            e.emit("readable"),
            I(e)
        }
        function A(e, t) {
            t.readingMore || (t.readingMore = !0,
            n.nextTick(k, e, t))
        }
        function k(e, t) {
            for (var r = t.length; !t.reading && !t.flowing && !t.ended && t.length < t.highWaterMark && (d("maybeReadMore read 0"),
            e.read(0),
            r !== t.length); )
                r = t.length;
            t.readingMore = !1
        }
        function x(e) {
            d("readable nexttick read 0"),
            e.read(0)
        }
        function R(e, t) {
            t.reading || (d("resume read 0"),
            e.read(0)),
            t.resumeScheduled = !1,
            t.awaitDrain = 0,
            e.emit("resume"),
            I(e),
            t.flowing && !t.reading && e.read(0)
        }
        function I(e) {
            var t = e._readableState;
            for (d("flow", t.flowing); t.flowing && null !== e.read(); )
                ;
        }
        function T(e, t) {
            return 0 === t.length ? null : (t.objectMode ? r = t.buffer.shift() : !e || e >= t.length ? (r = t.decoder ? t.buffer.join("") : 1 === t.buffer.length ? t.buffer.head.data : t.buffer.concat(t.length),
            t.buffer.clear()) : r = function(e, t, r) {
                var i;
                e < t.head.data.length ? (i = t.head.data.slice(0, e),
                t.head.data = t.head.data.slice(e)) : i = e === t.head.data.length ? t.shift() : r ? function(e, t) {
                    var r = t.head
                      , i = 1
                      , n = r.data;
                    e -= n.length;
                    for (; r = r.next; ) {
                        var o = r.data
                          , a = e > o.length ? o.length : e;
                        if (a === o.length ? n += o : n += o.slice(0, e),
                        0 === (e -= a)) {
                            a === o.length ? (++i,
                            r.next ? t.head = r.next : t.head = t.tail = null) : (t.head = r,
                            r.data = o.slice(a));
                            break
                        }
                        ++i
                    }
                    return t.length -= i,
                    n
                }(e, t) : function(e, t) {
                    var r = f.allocUnsafe(e)
                      , i = t.head
                      , n = 1;
                    i.data.copy(r),
                    e -= i.data.length;
                    for (; i = i.next; ) {
                        var o = i.data
                          , a = e > o.length ? o.length : e;
                        if (o.copy(r, r.length - e, 0, a),
                        0 === (e -= a)) {
                            a === o.length ? (++n,
                            i.next ? t.head = i.next : t.head = t.tail = null) : (t.head = i,
                            i.data = o.slice(a));
                            break
                        }
                        ++n
                    }
                    return t.length -= n,
                    r
                }(e, t);
                return i
            }(e, t.buffer, t.decoder),
            r);
            var r
        }
        function P(e) {
            var t = e._readableState;
            if (t.length > 0)
                throw new Error('"endReadable()" called on non-empty stream');
            t.endEmitted || (t.ended = !0,
            n.nextTick(N, t, e))
        }
        function N(e, t) {
            e.endEmitted || 0 !== e.length || (e.endEmitted = !0,
            t.readable = !1,
            t.emit("end"))
        }
        function C(e, t) {
            for (var r = 0, i = e.length; r < i; r++)
                if (e[r] === t)
                    return r;
            return -1
        }
        y.prototype.read = function(e) {
            d("read", e),
            e = parseInt(e, 10);
            var t = this._readableState
              , r = e;
            if (0 !== e && (t.emittedReadable = !1),
            0 === e && t.needReadable && (t.length >= t.highWaterMark || t.ended))
                return d("read: emitReadable", t.length, t.ended),
                0 === t.length && t.ended ? P(this) : M(this),
                null;
            if (0 === (e = E(e, t)) && t.ended)
                return 0 === t.length && P(this),
                null;
            var i, n = t.needReadable;
            return d("need readable", n),
            (0 === t.length || t.length - e < t.highWaterMark) && d("length less than watermark", n = !0),
            t.ended || t.reading ? d("reading or ended", n = !1) : n && (d("do read"),
            t.reading = !0,
            t.sync = !0,
            0 === t.length && (t.needReadable = !0),
            this._read(t.highWaterMark),
            t.sync = !1,
            t.reading || (e = E(r, t))),
            null === (i = e > 0 ? T(e, t) : null) ? (t.needReadable = !0,
            e = 0) : t.length -= e,
            0 === t.length && (t.ended || (t.needReadable = !0),
            r !== e && t.ended && P(this)),
            null !== i && this.emit("data", i),
            i
        }
        ,
        y.prototype._read = function(e) {
            this.emit("error", new Error("_read() is not implemented"))
        }
        ,
        y.prototype.pipe = function(e, t) {
            var r = this
              , o = this._readableState;
            switch (o.pipesCount) {
            case 0:
                o.pipes = e;
                break;
            case 1:
                o.pipes = [o.pipes, e];
                break;
            default:
                o.pipes.push(e)
            }
            o.pipesCount += 1,
            d("pipe count=%d opts=%j", o.pipesCount, t);
            var u = (!t || !1 !== t.end) && e !== i.stdout && e !== i.stderr ? c : y;
            function f(t, i) {
                d("onunpipe"),
                t === r && i && !1 === i.hasUnpiped && (i.hasUnpiped = !0,
                d("cleanup"),
                e.removeListener("close", g),
                e.removeListener("finish", v),
                e.removeListener("drain", h),
                e.removeListener("error", m),
                e.removeListener("unpipe", f),
                r.removeListener("end", c),
                r.removeListener("end", y),
                r.removeListener("data", b),
                l = !0,
                !o.awaitDrain || e._writableState && !e._writableState.needDrain || h())
            }
            function c() {
                d("onend"),
                e.end()
            }
            o.endEmitted ? n.nextTick(u) : r.once("end", u),
            e.on("unpipe", f);
            var h = function(e) {
                return function() {
                    var t = e._readableState;
                    d("pipeOnDrain", t.awaitDrain),
                    t.awaitDrain && t.awaitDrain--,
                    0 === t.awaitDrain && s(e, "data") && (t.flowing = !0,
                    I(e))
                }
            }(r);
            e.on("drain", h);
            var l = !1;
            var p = !1;
            function b(t) {
                d("ondata"),
                p = !1,
                !1 !== e.write(t) || p || ((1 === o.pipesCount && o.pipes === e || o.pipesCount > 1 && -1 !== C(o.pipes, e)) && !l && (d("false write response, pause", r._readableState.awaitDrain),
                r._readableState.awaitDrain++,
                p = !0),
                r.pause())
            }
            function m(t) {
                d("onerror", t),
                y(),
                e.removeListener("error", m),
                0 === s(e, "error") && e.emit("error", t)
            }
            function g() {
                e.removeListener("finish", v),
                y()
            }
            function v() {
                d("onfinish"),
                e.removeListener("close", g),
                y()
            }
            function y() {
                d("unpipe"),
                r.unpipe(e)
            }
            return r.on("data", b),
            function(e, t, r) {
                if ("function" == typeof e.prependListener)
                    return e.prependListener(t, r);
                e._events && e._events[t] ? a(e._events[t]) ? e._events[t].unshift(r) : e._events[t] = [r, e._events[t]] : e.on(t, r)
            }(e, "error", m),
            e.once("close", g),
            e.once("finish", v),
            e.emit("pipe", r),
            o.flowing || (d("pipe resume"),
            r.resume()),
            e
        }
        ,
        y.prototype.unpipe = function(e) {
            var t = this._readableState
              , r = {
                hasUnpiped: !1
            };
            if (0 === t.pipesCount)
                return this;
            if (1 === t.pipesCount)
                return e && e !== t.pipes || (e || (e = t.pipes),
                t.pipes = null,
                t.pipesCount = 0,
                t.flowing = !1,
                e && e.emit("unpipe", this, r)),
                this;
            if (!e) {
                var i = t.pipes
                  , n = t.pipesCount;
                t.pipes = null,
                t.pipesCount = 0,
                t.flowing = !1;
                for (var o = 0; o < n; o++)
                    i[o].emit("unpipe", this, r);
                return this
            }
            var a = C(t.pipes, e);
            return -1 === a || (t.pipes.splice(a, 1),
            t.pipesCount -= 1,
            1 === t.pipesCount && (t.pipes = t.pipes[0]),
            e.emit("unpipe", this, r)),
            this
        }
        ,
        y.prototype.on = function(e, t) {
            var r = u.prototype.on.call(this, e, t);
            if ("data" === e)
                !1 !== this._readableState.flowing && this.resume();
            else if ("readable" === e) {
                var i = this._readableState;
                i.endEmitted || i.readableListening || (i.readableListening = i.needReadable = !0,
                i.emittedReadable = !1,
                i.reading ? i.length && M(this) : n.nextTick(x, this))
            }
            return r
        }
        ,
        y.prototype.addListener = y.prototype.on,
        y.prototype.resume = function() {
            var e = this._readableState;
            return e.flowing || (d("resume"),
            e.flowing = !0,
            function(e, t) {
                t.resumeScheduled || (t.resumeScheduled = !0,
                n.nextTick(R, e, t))
            }(this, e)),
            this
        }
        ,
        y.prototype.pause = function() {
            return d("call pause flowing=%j", this._readableState.flowing),
            !1 !== this._readableState.flowing && (d("pause"),
            this._readableState.flowing = !1,
            this.emit("pause")),
            this
        }
        ,
        y.prototype.wrap = function(e) {
            var t = this
              , r = this._readableState
              , i = !1;
            for (var n in e.on("end", (function() {
                if (d("wrapped end"),
                r.decoder && !r.ended) {
                    var e = r.decoder.end();
                    e && e.length && t.push(e)
                }
                t.push(null)
            }
            )),
            e.on("data", (function(n) {
                (d("wrapped data"),
                r.decoder && (n = r.decoder.write(n)),
                r.objectMode && null == n) || (r.objectMode || n && n.length) && (t.push(n) || (i = !0,
                e.pause()))
            }
            )),
            e)
                void 0 === this[n] && "function" == typeof e[n] && (this[n] = function(t) {
                    return function() {
                        return e[t].apply(e, arguments)
                    }
                }(n));
            for (var o = 0; o < g.length; o++)
                e.on(g[o], this.emit.bind(this, g[o]));
            return this._read = function(t) {
                d("wrapped _read", t),
                i && (i = !1,
                e.resume())
            }
            ,
            this
        }
        ,
        Object.defineProperty(y.prototype, "readableHighWaterMark", {
            enumerable: !1,
            get: function() {
                return this._readableState.highWaterMark
            }
        }),
        y._fromList = T
    }
    ).call(this, r(13), r(14))
}
, function(e, t, r) {
    e.exports = r(31).EventEmitter
}
, function(e, t, r) {
    "use strict";
    var i = r(60);
    function n(e, t) {
        e.emit("error", t)
    }
    e.exports = {
        destroy: function(e, t) {
            var r = this
              , o = this._readableState && this._readableState.destroyed
              , a = this._writableState && this._writableState.destroyed;
            return o || a ? (t ? t(e) : !e || this._writableState && this._writableState.errorEmitted || i.nextTick(n, this, e),
            this) : (this._readableState && (this._readableState.destroyed = !0),
            this._writableState && (this._writableState.destroyed = !0),
            this._destroy(e || null, (function(e) {
                !t && e ? (i.nextTick(n, r, e),
                r._writableState && (r._writableState.errorEmitted = !0)) : t && t(e)
            }
            )),
            this)
        },
        undestroy: function() {
            this._readableState && (this._readableState.destroyed = !1,
            this._readableState.reading = !1,
            this._readableState.ended = !1,
            this._readableState.endEmitted = !1),
            this._writableState && (this._writableState.destroyed = !1,
            this._writableState.ended = !1,
            this._writableState.ending = !1,
            this._writableState.finished = !1,
            this._writableState.errorEmitted = !1)
        }
    }
}
, function(e, t, r) {
    "use strict";
    e.exports = a;
    var i = r(35)
      , n = Object.create(r(52));
    function o(e, t) {
        var r = this._transformState;
        r.transforming = !1;
        var i = r.writecb;
        if (!i)
            return this.emit("error", new Error("write callback called multiple times"));
        r.writechunk = null,
        r.writecb = null,
        null != t && this.push(t),
        i(e);
        var n = this._readableState;
        n.reading = !1,
        (n.needReadable || n.length < n.highWaterMark) && this._read(n.highWaterMark)
    }
    function a(e) {
        if (!(this instanceof a))
            return new a(e);
        i.call(this, e),
        this._transformState = {
            afterTransform: o.bind(this),
            needTransform: !1,
            transforming: !1,
            writecb: null,
            writechunk: null,
            writeencoding: null
        },
        this._readableState.needReadable = !0,
        this._readableState.sync = !1,
        e && ("function" == typeof e.transform && (this._transform = e.transform),
        "function" == typeof e.flush && (this._flush = e.flush)),
        this.on("prefinish", s)
    }
    function s() {
        var e = this;
        "function" == typeof this._flush ? this._flush((function(t, r) {
            u(e, t, r)
        }
        )) : u(this, null, null)
    }
    function u(e, t, r) {
        if (t)
            return e.emit("error", t);
        if (null != r && e.push(r),
        e._writableState.length)
            throw new Error("Calling transform done when ws.length != 0");
        if (e._transformState.transforming)
            throw new Error("Calling transform done when still transforming");
        return e.push(null)
    }
    n.inherits = r(4),
    n.inherits(a, i),
    a.prototype.push = function(e, t) {
        return this._transformState.needTransform = !1,
        i.prototype.push.call(this, e, t)
    }
    ,
    a.prototype._transform = function(e, t, r) {
        throw new Error("_transform() is not implemented")
    }
    ,
    a.prototype._write = function(e, t, r) {
        var i = this._transformState;
        if (i.writecb = r,
        i.writechunk = e,
        i.writeencoding = t,
        !i.transforming) {
            var n = this._readableState;
            (i.needTransform || n.needReadable || n.length < n.highWaterMark) && this._read(n.highWaterMark)
        }
    }
    ,
    a.prototype._read = function(e) {
        var t = this._transformState;
        null !== t.writechunk && t.writecb && !t.transforming ? (t.transforming = !0,
        this._transform(t.writechunk, t.writeencoding, t.afterTransform)) : t.needTransform = !0
    }
    ,
    a.prototype._destroy = function(e, t) {
        var r = this;
        i.prototype._destroy.call(this, e, (function(e) {
            t(e),
            r.emit("close")
        }
        ))
    }
}
, function(e, t, r) {
    "use strict";
    var i = r(4)
      , n = r(241)
      , o = r(30)
      , a = r(5).Buffer
      , s = r(132)
      , u = r(69)
      , f = r(81)
      , c = a.alloc(128);
    function h(e, t) {
        o.call(this, "digest"),
        "string" == typeof t && (t = a.from(t));
        var r = "sha512" === e || "sha384" === e ? 128 : 64;
        (this._alg = e,
        this._key = t,
        t.length > r) ? t = ("rmd160" === e ? new u : f(e)).update(t).digest() : t.length < r && (t = a.concat([t, c], r));
        for (var i = this._ipad = a.allocUnsafe(r), n = this._opad = a.allocUnsafe(r), s = 0; s < r; s++)
            i[s] = 54 ^ t[s],
            n[s] = 92 ^ t[s];
        this._hash = "rmd160" === e ? new u : f(e),
        this._hash.update(i)
    }
    i(h, o),
    h.prototype._update = function(e) {
        this._hash.update(e)
    }
    ,
    h.prototype._final = function() {
        var e = this._hash.digest();
        return ("rmd160" === this._alg ? new u : f(this._alg)).update(this._opad).update(e).digest()
    }
    ,
    e.exports = function(e, t) {
        return "rmd160" === (e = e.toLowerCase()) || "ripemd160" === e ? new h("rmd160",t) : "md5" === e ? new n(s,t) : new h(e,t)
    }
}
, function(e, t, r) {
    var i = r(78);
    e.exports = function(e) {
        return (new i).update(e).digest()
    }
}
, function(e) {
    e.exports = JSON.parse('{"sha224WithRSAEncryption":{"sign":"rsa","hash":"sha224","id":"302d300d06096086480165030402040500041c"},"RSA-SHA224":{"sign":"ecdsa/rsa","hash":"sha224","id":"302d300d06096086480165030402040500041c"},"sha256WithRSAEncryption":{"sign":"rsa","hash":"sha256","id":"3031300d060960864801650304020105000420"},"RSA-SHA256":{"sign":"ecdsa/rsa","hash":"sha256","id":"3031300d060960864801650304020105000420"},"sha384WithRSAEncryption":{"sign":"rsa","hash":"sha384","id":"3041300d060960864801650304020205000430"},"RSA-SHA384":{"sign":"ecdsa/rsa","hash":"sha384","id":"3041300d060960864801650304020205000430"},"sha512WithRSAEncryption":{"sign":"rsa","hash":"sha512","id":"3051300d060960864801650304020305000440"},"RSA-SHA512":{"sign":"ecdsa/rsa","hash":"sha512","id":"3051300d060960864801650304020305000440"},"RSA-SHA1":{"sign":"rsa","hash":"sha1","id":"3021300906052b0e03021a05000414"},"ecdsa-with-SHA1":{"sign":"ecdsa","hash":"sha1","id":""},"sha256":{"sign":"ecdsa","hash":"sha256","id":""},"sha224":{"sign":"ecdsa","hash":"sha224","id":""},"sha384":{"sign":"ecdsa","hash":"sha384","id":""},"sha512":{"sign":"ecdsa","hash":"sha512","id":""},"DSA-SHA":{"sign":"dsa","hash":"sha1","id":""},"DSA-SHA1":{"sign":"dsa","hash":"sha1","id":""},"DSA":{"sign":"dsa","hash":"sha1","id":""},"DSA-WITH-SHA224":{"sign":"dsa","hash":"sha224","id":""},"DSA-SHA224":{"sign":"dsa","hash":"sha224","id":""},"DSA-WITH-SHA256":{"sign":"dsa","hash":"sha256","id":""},"DSA-SHA256":{"sign":"dsa","hash":"sha256","id":""},"DSA-WITH-SHA384":{"sign":"dsa","hash":"sha384","id":""},"DSA-SHA384":{"sign":"dsa","hash":"sha384","id":""},"DSA-WITH-SHA512":{"sign":"dsa","hash":"sha512","id":""},"DSA-SHA512":{"sign":"dsa","hash":"sha512","id":""},"DSA-RIPEMD160":{"sign":"dsa","hash":"rmd160","id":""},"ripemd160WithRSA":{"sign":"rsa","hash":"rmd160","id":"3021300906052b2403020105000414"},"RSA-RIPEMD160":{"sign":"rsa","hash":"rmd160","id":"3021300906052b2403020105000414"},"md5WithRSAEncryption":{"sign":"rsa","hash":"md5","id":"3020300c06082a864886f70d020505000410"},"RSA-MD5":{"sign":"rsa","hash":"md5","id":"3020300c06082a864886f70d020505000410"}}')
}
, function(e, t) {
    var r = Math.pow(2, 30) - 1;
    e.exports = function(e, t) {
        if ("number" != typeof e)
            throw new TypeError("Iterations not a number");
        if (e < 0)
            throw new TypeError("Bad iterations");
        if ("number" != typeof t)
            throw new TypeError("Key length not a number");
        if (t < 0 || t > r || t != t)
            throw new TypeError("Bad key length")
    }
}
, function(e, t, r) {
    (function(t, r) {
        var i;
        if (t.process && t.process.browser)
            i = "utf-8";
        else if (t.process && t.process.version) {
            i = parseInt(r.version.split(".")[0].slice(1), 10) >= 6 ? "utf-8" : "binary"
        } else
            i = "utf-8";
        e.exports = i
    }
    ).call(this, r(13), r(14))
}
, function(e, t, r) {
    var i = r(132)
      , n = r(69)
      , o = r(81)
      , a = r(5).Buffer
      , s = r(134)
      , u = r(135)
      , f = r(137)
      , c = a.alloc(128)
      , h = {
        md5: 16,
        sha1: 20,
        sha224: 28,
        sha256: 32,
        sha384: 48,
        sha512: 64,
        rmd160: 20,
        ripemd160: 20
    };
    function l(e, t, r) {
        var s = function(e) {
            function t(t) {
                return o(e).update(t).digest()
            }
            return "rmd160" === e || "ripemd160" === e ? function(e) {
                return (new n).update(e).digest()
            }
            : "md5" === e ? i : t
        }(e)
          , u = "sha512" === e || "sha384" === e ? 128 : 64;
        t.length > u ? t = s(t) : t.length < u && (t = a.concat([t, c], u));
        for (var f = a.allocUnsafe(u + h[e]), l = a.allocUnsafe(u + h[e]), d = 0; d < u; d++)
            f[d] = 54 ^ t[d],
            l[d] = 92 ^ t[d];
        var p = a.allocUnsafe(u + r + 4);
        f.copy(p, 0, 0, u),
        this.ipad1 = p,
        this.ipad2 = f,
        this.opad = l,
        this.alg = e,
        this.blocksize = u,
        this.hash = s,
        this.size = h[e]
    }
    l.prototype.run = function(e, t) {
        return e.copy(t, this.blocksize),
        this.hash(t).copy(this.opad, this.blocksize),
        this.hash(this.opad)
    }
    ,
    e.exports = function(e, t, r, i, n) {
        s(r, i);
        var o = new l(n = n || "sha1",e = f(e, u, "Password"),(t = f(t, u, "Salt")).length)
          , c = a.allocUnsafe(i)
          , d = a.allocUnsafe(t.length + 4);
        t.copy(d, 0, 0, t.length);
        for (var p = 0, b = h[n], m = Math.ceil(i / b), g = 1; g <= m; g++) {
            d.writeUInt32BE(g, t.length);
            for (var v = o.run(d, o.ipad1), y = v, w = 1; w < r; w++) {
                y = o.run(y, o.ipad2);
                for (var _ = 0; _ < b; _++)
                    v[_] ^= y[_]
            }
            v.copy(c, p),
            p += b
        }
        return c
    }
}
, function(e, t, r) {
    var i = r(5).Buffer;
    e.exports = function(e, t, r) {
        if (i.isBuffer(e))
            return e;
        if ("string" == typeof e)
            return i.from(e, t);
        if (ArrayBuffer.isView(e))
            return i.from(e.buffer);
        throw new TypeError(r + " must be a string, a Buffer, a typed array or a DataView")
    }
}
, function(e, t, r) {
    "use strict";
    t.readUInt32BE = function(e, t) {
        return (e[0 + t] << 24 | e[1 + t] << 16 | e[2 + t] << 8 | e[3 + t]) >>> 0
    }
    ,
    t.writeUInt32BE = function(e, t, r) {
        e[0 + r] = t >>> 24,
        e[1 + r] = t >>> 16 & 255,
        e[2 + r] = t >>> 8 & 255,
        e[3 + r] = 255 & t
    }
    ,
    t.ip = function(e, t, r, i) {
        for (var n = 0, o = 0, a = 6; a >= 0; a -= 2) {
            for (var s = 0; s <= 24; s += 8)
                n <<= 1,
                n |= t >>> s + a & 1;
            for (s = 0; s <= 24; s += 8)
                n <<= 1,
                n |= e >>> s + a & 1
        }
        for (a = 6; a >= 0; a -= 2) {
            for (s = 1; s <= 25; s += 8)
                o <<= 1,
                o |= t >>> s + a & 1;
            for (s = 1; s <= 25; s += 8)
                o <<= 1,
                o |= e >>> s + a & 1
        }
        r[i + 0] = n >>> 0,
        r[i + 1] = o >>> 0
    }
    ,
    t.rip = function(e, t, r, i) {
        for (var n = 0, o = 0, a = 0; a < 4; a++)
            for (var s = 24; s >= 0; s -= 8)
                n <<= 1,
                n |= t >>> s + a & 1,
                n <<= 1,
                n |= e >>> s + a & 1;
        for (a = 4; a < 8; a++)
            for (s = 24; s >= 0; s -= 8)
                o <<= 1,
                o |= t >>> s + a & 1,
                o <<= 1,
                o |= e >>> s + a & 1;
        r[i + 0] = n >>> 0,
        r[i + 1] = o >>> 0
    }
    ,
    t.pc1 = function(e, t, r, i) {
        for (var n = 0, o = 0, a = 7; a >= 5; a--) {
            for (var s = 0; s <= 24; s += 8)
                n <<= 1,
                n |= t >> s + a & 1;
            for (s = 0; s <= 24; s += 8)
                n <<= 1,
                n |= e >> s + a & 1
        }
        for (s = 0; s <= 24; s += 8)
            n <<= 1,
            n |= t >> s + a & 1;
        for (a = 1; a <= 3; a++) {
            for (s = 0; s <= 24; s += 8)
                o <<= 1,
                o |= t >> s + a & 1;
            for (s = 0; s <= 24; s += 8)
                o <<= 1,
                o |= e >> s + a & 1
        }
        for (s = 0; s <= 24; s += 8)
            o <<= 1,
            o |= e >> s + a & 1;
        r[i + 0] = n >>> 0,
        r[i + 1] = o >>> 0
    }
    ,
    t.r28shl = function(e, t) {
        return e << t & 268435455 | e >>> 28 - t
    }
    ;
    var i = [14, 11, 17, 4, 27, 23, 25, 0, 13, 22, 7, 18, 5, 9, 16, 24, 2, 20, 12, 21, 1, 8, 15, 26, 15, 4, 25, 19, 9, 1, 26, 16, 5, 11, 23, 8, 12, 7, 17, 0, 22, 3, 10, 14, 6, 20, 27, 24];
    t.pc2 = function(e, t, r, n) {
        for (var o = 0, a = 0, s = i.length >>> 1, u = 0; u < s; u++)
            o <<= 1,
            o |= e >>> i[u] & 1;
        for (u = s; u < i.length; u++)
            a <<= 1,
            a |= t >>> i[u] & 1;
        r[n + 0] = o >>> 0,
        r[n + 1] = a >>> 0
    }
    ,
    t.expand = function(e, t, r) {
        var i = 0
          , n = 0;
        i = (1 & e) << 5 | e >>> 27;
        for (var o = 23; o >= 15; o -= 4)
            i <<= 6,
            i |= e >>> o & 63;
        for (o = 11; o >= 3; o -= 4)
            n |= e >>> o & 63,
            n <<= 6;
        n |= (31 & e) << 1 | e >>> 31,
        t[r + 0] = i >>> 0,
        t[r + 1] = n >>> 0
    }
    ;
    var n = [14, 0, 4, 15, 13, 7, 1, 4, 2, 14, 15, 2, 11, 13, 8, 1, 3, 10, 10, 6, 6, 12, 12, 11, 5, 9, 9, 5, 0, 3, 7, 8, 4, 15, 1, 12, 14, 8, 8, 2, 13, 4, 6, 9, 2, 1, 11, 7, 15, 5, 12, 11, 9, 3, 7, 14, 3, 10, 10, 0, 5, 6, 0, 13, 15, 3, 1, 13, 8, 4, 14, 7, 6, 15, 11, 2, 3, 8, 4, 14, 9, 12, 7, 0, 2, 1, 13, 10, 12, 6, 0, 9, 5, 11, 10, 5, 0, 13, 14, 8, 7, 10, 11, 1, 10, 3, 4, 15, 13, 4, 1, 2, 5, 11, 8, 6, 12, 7, 6, 12, 9, 0, 3, 5, 2, 14, 15, 9, 10, 13, 0, 7, 9, 0, 14, 9, 6, 3, 3, 4, 15, 6, 5, 10, 1, 2, 13, 8, 12, 5, 7, 14, 11, 12, 4, 11, 2, 15, 8, 1, 13, 1, 6, 10, 4, 13, 9, 0, 8, 6, 15, 9, 3, 8, 0, 7, 11, 4, 1, 15, 2, 14, 12, 3, 5, 11, 10, 5, 14, 2, 7, 12, 7, 13, 13, 8, 14, 11, 3, 5, 0, 6, 6, 15, 9, 0, 10, 3, 1, 4, 2, 7, 8, 2, 5, 12, 11, 1, 12, 10, 4, 14, 15, 9, 10, 3, 6, 15, 9, 0, 0, 6, 12, 10, 11, 1, 7, 13, 13, 8, 15, 9, 1, 4, 3, 5, 14, 11, 5, 12, 2, 7, 8, 2, 4, 14, 2, 14, 12, 11, 4, 2, 1, 12, 7, 4, 10, 7, 11, 13, 6, 1, 8, 5, 5, 0, 3, 15, 15, 10, 13, 3, 0, 9, 14, 8, 9, 6, 4, 11, 2, 8, 1, 12, 11, 7, 10, 1, 13, 14, 7, 2, 8, 13, 15, 6, 9, 15, 12, 0, 5, 9, 6, 10, 3, 4, 0, 5, 14, 3, 12, 10, 1, 15, 10, 4, 15, 2, 9, 7, 2, 12, 6, 9, 8, 5, 0, 6, 13, 1, 3, 13, 4, 14, 14, 0, 7, 11, 5, 3, 11, 8, 9, 4, 14, 3, 15, 2, 5, 12, 2, 9, 8, 5, 12, 15, 3, 10, 7, 11, 0, 14, 4, 1, 10, 7, 1, 6, 13, 0, 11, 8, 6, 13, 4, 13, 11, 0, 2, 11, 14, 7, 15, 4, 0, 9, 8, 1, 13, 10, 3, 14, 12, 3, 9, 5, 7, 12, 5, 2, 10, 15, 6, 8, 1, 6, 1, 6, 4, 11, 11, 13, 13, 8, 12, 1, 3, 4, 7, 10, 14, 7, 10, 9, 15, 5, 6, 0, 8, 15, 0, 14, 5, 2, 9, 3, 2, 12, 13, 1, 2, 15, 8, 13, 4, 8, 6, 10, 15, 3, 11, 7, 1, 4, 10, 12, 9, 5, 3, 6, 14, 11, 5, 0, 0, 14, 12, 9, 7, 2, 7, 2, 11, 1, 4, 14, 1, 7, 9, 4, 12, 10, 14, 8, 2, 13, 0, 15, 6, 12, 10, 9, 13, 0, 15, 3, 3, 5, 5, 6, 8, 11];
    t.substitute = function(e, t) {
        for (var r = 0, i = 0; i < 4; i++) {
            r <<= 4,
            r |= n[64 * i + (e >>> 18 - 6 * i & 63)]
        }
        for (i = 0; i < 4; i++) {
            r <<= 4,
            r |= n[256 + 64 * i + (t >>> 18 - 6 * i & 63)]
        }
        return r >>> 0
    }
    ;
    var o = [16, 25, 12, 11, 3, 20, 4, 15, 31, 17, 9, 6, 27, 14, 1, 22, 30, 24, 8, 18, 0, 5, 29, 23, 13, 19, 2, 26, 10, 21, 28, 7];
    t.permute = function(e) {
        for (var t = 0, r = 0; r < o.length; r++)
            t <<= 1,
            t |= e >>> o[r] & 1;
        return t >>> 0
    }
    ,
    t.padSplit = function(e, t, r) {
        for (var i = e.toString(2); i.length < t; )
            i = "0" + i;
        for (var n = [], o = 0; o < t; o += r)
            n.push(i.slice(o, o + r));
        return n.join(" ")
    }
}
, function(e, t, r) {
    "use strict";
    var i = r(18)
      , n = r(4)
      , o = r(138)
      , a = r(84);
    function s() {
        this.tmp = new Array(2),
        this.keys = null
    }
    function u(e) {
        a.call(this, e);
        var t = new s;
        this._desState = t,
        this.deriveKeys(t, e.key)
    }
    n(u, a),
    e.exports = u,
    u.create = function(e) {
        return new u(e)
    }
    ;
    var f = [1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1];
    u.prototype.deriveKeys = function(e, t) {
        e.keys = new Array(32),
        i.equal(t.length, this.blockSize, "Invalid key length");
        var r = o.readUInt32BE(t, 0)
          , n = o.readUInt32BE(t, 4);
        o.pc1(r, n, e.tmp, 0),
        r = e.tmp[0],
        n = e.tmp[1];
        for (var a = 0; a < e.keys.length; a += 2) {
            var s = f[a >>> 1];
            r = o.r28shl(r, s),
            n = o.r28shl(n, s),
            o.pc2(r, n, e.keys, a)
        }
    }
    ,
    u.prototype._update = function(e, t, r, i) {
        var n = this._desState
          , a = o.readUInt32BE(e, t)
          , s = o.readUInt32BE(e, t + 4);
        o.ip(a, s, n.tmp, 0),
        a = n.tmp[0],
        s = n.tmp[1],
        "encrypt" === this.type ? this._encrypt(n, a, s, n.tmp, 0) : this._decrypt(n, a, s, n.tmp, 0),
        a = n.tmp[0],
        s = n.tmp[1],
        o.writeUInt32BE(r, a, i),
        o.writeUInt32BE(r, s, i + 4)
    }
    ,
    u.prototype._pad = function(e, t) {
        for (var r = e.length - t, i = t; i < e.length; i++)
            e[i] = r;
        return !0
    }
    ,
    u.prototype._unpad = function(e) {
        for (var t = e[e.length - 1], r = e.length - t; r < e.length; r++)
            i.equal(e[r], t);
        return e.slice(0, e.length - t)
    }
    ,
    u.prototype._encrypt = function(e, t, r, i, n) {
        for (var a = t, s = r, u = 0; u < e.keys.length; u += 2) {
            var f = e.keys[u]
              , c = e.keys[u + 1];
            o.expand(s, e.tmp, 0),
            f ^= e.tmp[0],
            c ^= e.tmp[1];
            var h = o.substitute(f, c)
              , l = s;
            s = (a ^ o.permute(h)) >>> 0,
            a = l
        }
        o.rip(s, a, i, n)
    }
    ,
    u.prototype._decrypt = function(e, t, r, i, n) {
        for (var a = r, s = t, u = e.keys.length - 2; u >= 0; u -= 2) {
            var f = e.keys[u]
              , c = e.keys[u + 1];
            o.expand(a, e.tmp, 0),
            f ^= e.tmp[0],
            c ^= e.tmp[1];
            var h = o.substitute(f, c)
              , l = a;
            a = (s ^ o.permute(h)) >>> 0,
            s = l
        }
        o.rip(a, s, i, n)
    }
}
, function(e, t, r) {
    var i = r(53)
      , n = r(5).Buffer
      , o = r(141);
    function a(e) {
        var t = e._cipher.encryptBlockRaw(e._prev);
        return o(e._prev),
        t
    }
    t.encrypt = function(e, t) {
        var r = Math.ceil(t.length / 16)
          , o = e._cache.length;
        e._cache = n.concat([e._cache, n.allocUnsafe(16 * r)]);
        for (var s = 0; s < r; s++) {
            var u = a(e)
              , f = o + 16 * s;
            e._cache.writeUInt32BE(u[0], f + 0),
            e._cache.writeUInt32BE(u[1], f + 4),
            e._cache.writeUInt32BE(u[2], f + 8),
            e._cache.writeUInt32BE(u[3], f + 12)
        }
        var c = e._cache.slice(0, t.length);
        return e._cache = e._cache.slice(t.length),
        i(t, c)
    }
}
, function(e, t) {
    e.exports = function(e) {
        for (var t, r = e.length; r--; ) {
            if (255 !== (t = e.readUInt8(r))) {
                t++,
                e.writeUInt8(t, r);
                break
            }
            e.writeUInt8(0, r)
        }
    }
}
, function(e) {
    e.exports = JSON.parse('{"aes-128-ecb":{"cipher":"AES","key":128,"iv":0,"mode":"ECB","type":"block"},"aes-192-ecb":{"cipher":"AES","key":192,"iv":0,"mode":"ECB","type":"block"},"aes-256-ecb":{"cipher":"AES","key":256,"iv":0,"mode":"ECB","type":"block"},"aes-128-cbc":{"cipher":"AES","key":128,"iv":16,"mode":"CBC","type":"block"},"aes-192-cbc":{"cipher":"AES","key":192,"iv":16,"mode":"CBC","type":"block"},"aes-256-cbc":{"cipher":"AES","key":256,"iv":16,"mode":"CBC","type":"block"},"aes128":{"cipher":"AES","key":128,"iv":16,"mode":"CBC","type":"block"},"aes192":{"cipher":"AES","key":192,"iv":16,"mode":"CBC","type":"block"},"aes256":{"cipher":"AES","key":256,"iv":16,"mode":"CBC","type":"block"},"aes-128-cfb":{"cipher":"AES","key":128,"iv":16,"mode":"CFB","type":"stream"},"aes-192-cfb":{"cipher":"AES","key":192,"iv":16,"mode":"CFB","type":"stream"},"aes-256-cfb":{"cipher":"AES","key":256,"iv":16,"mode":"CFB","type":"stream"},"aes-128-cfb8":{"cipher":"AES","key":128,"iv":16,"mode":"CFB8","type":"stream"},"aes-192-cfb8":{"cipher":"AES","key":192,"iv":16,"mode":"CFB8","type":"stream"},"aes-256-cfb8":{"cipher":"AES","key":256,"iv":16,"mode":"CFB8","type":"stream"},"aes-128-cfb1":{"cipher":"AES","key":128,"iv":16,"mode":"CFB1","type":"stream"},"aes-192-cfb1":{"cipher":"AES","key":192,"iv":16,"mode":"CFB1","type":"stream"},"aes-256-cfb1":{"cipher":"AES","key":256,"iv":16,"mode":"CFB1","type":"stream"},"aes-128-ofb":{"cipher":"AES","key":128,"iv":16,"mode":"OFB","type":"stream"},"aes-192-ofb":{"cipher":"AES","key":192,"iv":16,"mode":"OFB","type":"stream"},"aes-256-ofb":{"cipher":"AES","key":256,"iv":16,"mode":"OFB","type":"stream"},"aes-128-ctr":{"cipher":"AES","key":128,"iv":16,"mode":"CTR","type":"stream"},"aes-192-ctr":{"cipher":"AES","key":192,"iv":16,"mode":"CTR","type":"stream"},"aes-256-ctr":{"cipher":"AES","key":256,"iv":16,"mode":"CTR","type":"stream"},"aes-128-gcm":{"cipher":"AES","key":128,"iv":12,"mode":"GCM","type":"auth"},"aes-192-gcm":{"cipher":"AES","key":192,"iv":12,"mode":"GCM","type":"auth"},"aes-256-gcm":{"cipher":"AES","key":256,"iv":12,"mode":"GCM","type":"auth"}}')
}
, function(e, t, r) {
    var i = r(62)
      , n = r(5).Buffer
      , o = r(30)
      , a = r(4)
      , s = r(256)
      , u = r(53)
      , f = r(141);
    function c(e, t, r, a) {
        o.call(this);
        var u = n.alloc(4, 0);
        this._cipher = new i.AES(t);
        var c = this._cipher.encryptBlock(u);
        this._ghash = new s(c),
        r = function(e, t, r) {
            if (12 === t.length)
                return e._finID = n.concat([t, n.from([0, 0, 0, 1])]),
                n.concat([t, n.from([0, 0, 0, 2])]);
            var i = new s(r)
              , o = t.length
              , a = o % 16;
            i.update(t),
            a && (a = 16 - a,
            i.update(n.alloc(a, 0))),
            i.update(n.alloc(8, 0));
            var u = 8 * o
              , c = n.alloc(8);
            c.writeUIntBE(u, 0, 8),
            i.update(c),
            e._finID = i.state;
            var h = n.from(e._finID);
            return f(h),
            h
        }(this, r, c),
        this._prev = n.from(r),
        this._cache = n.allocUnsafe(0),
        this._secCache = n.allocUnsafe(0),
        this._decrypt = a,
        this._alen = 0,
        this._len = 0,
        this._mode = e,
        this._authTag = null,
        this._called = !1
    }
    a(c, o),
    c.prototype._update = function(e) {
        if (!this._called && this._alen) {
            var t = 16 - this._alen % 16;
            t < 16 && (t = n.alloc(t, 0),
            this._ghash.update(t))
        }
        this._called = !0;
        var r = this._mode.encrypt(this, e);
        return this._decrypt ? this._ghash.update(e) : this._ghash.update(r),
        this._len += e.length,
        r
    }
    ,
    c.prototype._final = function() {
        if (this._decrypt && !this._authTag)
            throw new Error("Unsupported state or unable to authenticate data");
        var e = u(this._ghash.final(8 * this._alen, 8 * this._len), this._cipher.encryptBlock(this._finID));
        if (this._decrypt && function(e, t) {
            var r = 0;
            e.length !== t.length && r++;
            for (var i = Math.min(e.length, t.length), n = 0; n < i; ++n)
                r += e[n] ^ t[n];
            return r
        }(e, this._authTag))
            throw new Error("Unsupported state or unable to authenticate data");
        this._authTag = e,
        this._cipher.scrub()
    }
    ,
    c.prototype.getAuthTag = function() {
        if (this._decrypt || !n.isBuffer(this._authTag))
            throw new Error("Attempting to get auth tag in unsupported state");
        return this._authTag
    }
    ,
    c.prototype.setAuthTag = function(e) {
        if (!this._decrypt)
            throw new Error("Attempting to set auth tag in unsupported state");
        this._authTag = e
    }
    ,
    c.prototype.setAAD = function(e) {
        if (this._called)
            throw new Error("Attempting to set AAD in unsupported state");
        this._ghash.update(e),
        this._alen += e.length
    }
    ,
    e.exports = c
}
, function(e, t, r) {
    var i = r(62)
      , n = r(5).Buffer
      , o = r(30);
    function a(e, t, r, a) {
        o.call(this),
        this._cipher = new i.AES(t),
        this._prev = n.from(r),
        this._cache = n.allocUnsafe(0),
        this._secCache = n.allocUnsafe(0),
        this._decrypt = a,
        this._mode = e
    }
    r(4)(a, o),
    a.prototype._update = function(e) {
        return this._mode.encrypt(this, e, this._decrypt)
    }
    ,
    a.prototype._final = function() {
        this._cipher.scrub()
    }
    ,
    e.exports = a
}
, function(e, t, r) {
    var i = r(32);
    e.exports = v,
    v.simpleSieve = m,
    v.fermatTest = g;
    var n = r(7)
      , o = new n(24)
      , a = new (r(146))
      , s = new n(1)
      , u = new n(2)
      , f = new n(5)
      , c = (new n(16),
    new n(8),
    new n(10))
      , h = new n(3)
      , l = (new n(7),
    new n(11))
      , d = new n(4)
      , p = (new n(12),
    null);
    function b() {
        if (null !== p)
            return p;
        var e = [];
        e[0] = 2;
        for (var t = 1, r = 3; r < 1048576; r += 2) {
            for (var i = Math.ceil(Math.sqrt(r)), n = 0; n < t && e[n] <= i && r % e[n] != 0; n++)
                ;
            t !== n && e[n] <= i || (e[t++] = r)
        }
        return p = e,
        e
    }
    function m(e) {
        for (var t = b(), r = 0; r < t.length; r++)
            if (0 === e.modn(t[r]))
                return 0 === e.cmpn(t[r]);
        return !0
    }
    function g(e) {
        var t = n.mont(e);
        return 0 === u.toRed(t).redPow(e.subn(1)).fromRed().cmpn(1)
    }
    function v(e, t) {
        if (e < 16)
            return new n(2 === t || 5 === t ? [140, 123] : [140, 39]);
        var r, p;
        for (t = new n(t); ; ) {
            for (r = new n(i(Math.ceil(e / 8))); r.bitLength() > e; )
                r.ishrn(1);
            if (r.isEven() && r.iadd(s),
            r.testn(1) || r.iadd(u),
            t.cmp(u)) {
                if (!t.cmp(f))
                    for (; r.mod(c).cmp(h); )
                        r.iadd(d)
            } else
                for (; r.mod(o).cmp(l); )
                    r.iadd(d);
            if (m(p = r.shrn(1)) && m(r) && g(p) && g(r) && a.test(p) && a.test(r))
                return r
        }
    }
}
, function(e, t, r) {
    var i = r(7)
      , n = r(87);
    function o(e) {
        this.rand = e || new n.Rand
    }
    e.exports = o,
    o.create = function(e) {
        return new o(e)
    }
    ,
    o.prototype._randbelow = function(e) {
        var t = e.bitLength()
          , r = Math.ceil(t / 8);
        do {
            var n = new i(this.rand.generate(r))
        } while (n.cmp(e) >= 0);
        return n
    }
    ,
    o.prototype._randrange = function(e, t) {
        var r = t.sub(e);
        return e.add(this._randbelow(r))
    }
    ,
    o.prototype.test = function(e, t, r) {
        var n = e.bitLength()
          , o = i.mont(e)
          , a = new i(1).toRed(o);
        t || (t = Math.max(1, n / 48 | 0));
        for (var s = e.subn(1), u = 0; !s.testn(u); u++)
            ;
        for (var f = e.shrn(u), c = s.toRed(o); t > 0; t--) {
            var h = this._randrange(new i(2), s);
            r && r(h);
            var l = h.toRed(o).redPow(f);
            if (0 !== l.cmp(a) && 0 !== l.cmp(c)) {
                for (var d = 1; d < u; d++) {
                    if (0 === (l = l.redSqr()).cmp(a))
                        return !1;
                    if (0 === l.cmp(c))
                        break
                }
                if (d === u)
                    return !1
            }
        }
        return !0
    }
    ,
    o.prototype.getDivisor = function(e, t) {
        var r = e.bitLength()
          , n = i.mont(e)
          , o = new i(1).toRed(n);
        t || (t = Math.max(1, r / 48 | 0));
        for (var a = e.subn(1), s = 0; !a.testn(s); s++)
            ;
        for (var u = e.shrn(s), f = a.toRed(n); t > 0; t--) {
            var c = this._randrange(new i(2), a)
              , h = e.gcd(c);
            if (0 !== h.cmpn(1))
                return h;
            var l = c.toRed(n).redPow(u);
            if (0 !== l.cmp(o) && 0 !== l.cmp(f)) {
                for (var d = 1; d < s; d++) {
                    if (0 === (l = l.redSqr()).cmp(o))
                        return l.fromRed().subn(1).gcd(e);
                    if (0 === l.cmp(f))
                        break
                }
                if (d === s)
                    return (l = l.redSqr()).fromRed().subn(1).gcd(e)
            }
        }
        return !1
    }
}
, function(e, t, r) {
    "use strict";
    (function(t, i) {
        var n;
        e.exports = A,
        A.ReadableState = S;
        r(31).EventEmitter;
        var o = function(e, t) {
            return e.listeners(t).length
        }
          , a = r(148)
          , s = r(8).Buffer
          , u = t.Uint8Array || function() {}
        ;
        var f, c = r(265);
        f = c && c.debuglog ? c.debuglog("stream") : function() {}
        ;
        var h, l, d, p = r(266), b = r(149), m = r(150).getHighWaterMark, g = r(44).codes, v = g.ERR_INVALID_ARG_TYPE, y = g.ERR_STREAM_PUSH_AFTER_EOF, w = g.ERR_METHOD_NOT_IMPLEMENTED, _ = g.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;
        r(4)(A, a);
        var E = b.errorOrDestroy
          , M = ["error", "close", "destroy", "pause", "resume"];
        function S(e, t, i) {
            n = n || r(45),
            e = e || {},
            "boolean" != typeof i && (i = t instanceof n),
            this.objectMode = !!e.objectMode,
            i && (this.objectMode = this.objectMode || !!e.readableObjectMode),
            this.highWaterMark = m(this, e, "readableHighWaterMark", i),
            this.buffer = new p,
            this.length = 0,
            this.pipes = null,
            this.pipesCount = 0,
            this.flowing = null,
            this.ended = !1,
            this.endEmitted = !1,
            this.reading = !1,
            this.sync = !0,
            this.needReadable = !1,
            this.emittedReadable = !1,
            this.readableListening = !1,
            this.resumeScheduled = !1,
            this.paused = !0,
            this.emitClose = !1 !== e.emitClose,
            this.autoDestroy = !!e.autoDestroy,
            this.destroyed = !1,
            this.defaultEncoding = e.defaultEncoding || "utf8",
            this.awaitDrain = 0,
            this.readingMore = !1,
            this.decoder = null,
            this.encoding = null,
            e.encoding && (h || (h = r(34).StringDecoder),
            this.decoder = new h(e.encoding),
            this.encoding = e.encoding)
        }
        function A(e) {
            if (n = n || r(45),
            !(this instanceof A))
                return new A(e);
            var t = this instanceof n;
            this._readableState = new S(e,this,t),
            this.readable = !0,
            e && ("function" == typeof e.read && (this._read = e.read),
            "function" == typeof e.destroy && (this._destroy = e.destroy)),
            a.call(this)
        }
        function k(e, t, r, i, n) {
            f("readableAddChunk", t);
            var o, a = e._readableState;
            if (null === t)
                a.reading = !1,
                function(e, t) {
                    if (f("onEofChunk"),
                    t.ended)
                        return;
                    if (t.decoder) {
                        var r = t.decoder.end();
                        r && r.length && (t.buffer.push(r),
                        t.length += t.objectMode ? 1 : r.length)
                    }
                    t.ended = !0,
                    t.sync ? I(e) : (t.needReadable = !1,
                    t.emittedReadable || (t.emittedReadable = !0,
                    T(e)))
                }(e, a);
            else if (n || (o = function(e, t) {
                var r;
                i = t,
                s.isBuffer(i) || i instanceof u || "string" == typeof t || void 0 === t || e.objectMode || (r = new v("chunk",["string", "Buffer", "Uint8Array"],t));
                var i;
                return r
            }(a, t)),
            o)
                E(e, o);
            else if (a.objectMode || t && t.length > 0)
                if ("string" == typeof t || a.objectMode || Object.getPrototypeOf(t) === s.prototype || (t = function(e) {
                    return s.from(e)
                }(t)),
                i)
                    a.endEmitted ? E(e, new _) : x(e, a, t, !0);
                else if (a.ended)
                    E(e, new y);
                else {
                    if (a.destroyed)
                        return !1;
                    a.reading = !1,
                    a.decoder && !r ? (t = a.decoder.write(t),
                    a.objectMode || 0 !== t.length ? x(e, a, t, !1) : P(e, a)) : x(e, a, t, !1)
                }
            else
                i || (a.reading = !1,
                P(e, a));
            return !a.ended && (a.length < a.highWaterMark || 0 === a.length)
        }
        function x(e, t, r, i) {
            t.flowing && 0 === t.length && !t.sync ? (t.awaitDrain = 0,
            e.emit("data", r)) : (t.length += t.objectMode ? 1 : r.length,
            i ? t.buffer.unshift(r) : t.buffer.push(r),
            t.needReadable && I(e)),
            P(e, t)
        }
        Object.defineProperty(A.prototype, "destroyed", {
            enumerable: !1,
            get: function() {
                return void 0 !== this._readableState && this._readableState.destroyed
            },
            set: function(e) {
                this._readableState && (this._readableState.destroyed = e)
            }
        }),
        A.prototype.destroy = b.destroy,
        A.prototype._undestroy = b.undestroy,
        A.prototype._destroy = function(e, t) {
            t(e)
        }
        ,
        A.prototype.push = function(e, t) {
            var r, i = this._readableState;
            return i.objectMode ? r = !0 : "string" == typeof e && ((t = t || i.defaultEncoding) !== i.encoding && (e = s.from(e, t),
            t = ""),
            r = !0),
            k(this, e, t, !1, r)
        }
        ,
        A.prototype.unshift = function(e) {
            return k(this, e, null, !0, !1)
        }
        ,
        A.prototype.isPaused = function() {
            return !1 === this._readableState.flowing
        }
        ,
        A.prototype.setEncoding = function(e) {
            h || (h = r(34).StringDecoder);
            var t = new h(e);
            this._readableState.decoder = t,
            this._readableState.encoding = this._readableState.decoder.encoding;
            for (var i = this._readableState.buffer.head, n = ""; null !== i; )
                n += t.write(i.data),
                i = i.next;
            return this._readableState.buffer.clear(),
            "" !== n && this._readableState.buffer.push(n),
            this._readableState.length = n.length,
            this
        }
        ;
        function R(e, t) {
            return e <= 0 || 0 === t.length && t.ended ? 0 : t.objectMode ? 1 : e != e ? t.flowing && t.length ? t.buffer.head.data.length : t.length : (e > t.highWaterMark && (t.highWaterMark = function(e) {
                return e >= 1073741824 ? e = 1073741824 : (e--,
                e |= e >>> 1,
                e |= e >>> 2,
                e |= e >>> 4,
                e |= e >>> 8,
                e |= e >>> 16,
                e++),
                e
            }(e)),
            e <= t.length ? e : t.ended ? t.length : (t.needReadable = !0,
            0))
        }
        function I(e) {
            var t = e._readableState;
            f("emitReadable", t.needReadable, t.emittedReadable),
            t.needReadable = !1,
            t.emittedReadable || (f("emitReadable", t.flowing),
            t.emittedReadable = !0,
            i.nextTick(T, e))
        }
        function T(e) {
            var t = e._readableState;
            f("emitReadable_", t.destroyed, t.length, t.ended),
            t.destroyed || !t.length && !t.ended || (e.emit("readable"),
            t.emittedReadable = !1),
            t.needReadable = !t.flowing && !t.ended && t.length <= t.highWaterMark,
            L(e)
        }
        function P(e, t) {
            t.readingMore || (t.readingMore = !0,
            i.nextTick(N, e, t))
        }
        function N(e, t) {
            for (; !t.reading && !t.ended && (t.length < t.highWaterMark || t.flowing && 0 === t.length); ) {
                var r = t.length;
                if (f("maybeReadMore read 0"),
                e.read(0),
                r === t.length)
                    break
            }
            t.readingMore = !1
        }
        function C(e) {
            var t = e._readableState;
            t.readableListening = e.listenerCount("readable") > 0,
            t.resumeScheduled && !t.paused ? t.flowing = !0 : e.listenerCount("data") > 0 && e.resume()
        }
        function B(e) {
            f("readable nexttick read 0"),
            e.read(0)
        }
        function O(e, t) {
            f("resume", t.reading),
            t.reading || e.read(0),
            t.resumeScheduled = !1,
            e.emit("resume"),
            L(e),
            t.flowing && !t.reading && e.read(0)
        }
        function L(e) {
            var t = e._readableState;
            for (f("flow", t.flowing); t.flowing && null !== e.read(); )
                ;
        }
        function j(e, t) {
            return 0 === t.length ? null : (t.objectMode ? r = t.buffer.shift() : !e || e >= t.length ? (r = t.decoder ? t.buffer.join("") : 1 === t.buffer.length ? t.buffer.first() : t.buffer.concat(t.length),
            t.buffer.clear()) : r = t.buffer.consume(e, t.decoder),
            r);
            var r
        }
        function D(e) {
            var t = e._readableState;
            f("endReadable", t.endEmitted),
            t.endEmitted || (t.ended = !0,
            i.nextTick(z, t, e))
        }
        function z(e, t) {
            if (f("endReadableNT", e.endEmitted, e.length),
            !e.endEmitted && 0 === e.length && (e.endEmitted = !0,
            t.readable = !1,
            t.emit("end"),
            e.autoDestroy)) {
                var r = t._writableState;
                (!r || r.autoDestroy && r.finished) && t.destroy()
            }
        }
        function U(e, t) {
            for (var r = 0, i = e.length; r < i; r++)
                if (e[r] === t)
                    return r;
            return -1
        }
        A.prototype.read = function(e) {
            f("read", e),
            e = parseInt(e, 10);
            var t = this._readableState
              , r = e;
            if (0 !== e && (t.emittedReadable = !1),
            0 === e && t.needReadable && ((0 !== t.highWaterMark ? t.length >= t.highWaterMark : t.length > 0) || t.ended))
                return f("read: emitReadable", t.length, t.ended),
                0 === t.length && t.ended ? D(this) : I(this),
                null;
            if (0 === (e = R(e, t)) && t.ended)
                return 0 === t.length && D(this),
                null;
            var i, n = t.needReadable;
            return f("need readable", n),
            (0 === t.length || t.length - e < t.highWaterMark) && f("length less than watermark", n = !0),
            t.ended || t.reading ? f("reading or ended", n = !1) : n && (f("do read"),
            t.reading = !0,
            t.sync = !0,
            0 === t.length && (t.needReadable = !0),
            this._read(t.highWaterMark),
            t.sync = !1,
            t.reading || (e = R(r, t))),
            null === (i = e > 0 ? j(e, t) : null) ? (t.needReadable = t.length <= t.highWaterMark,
            e = 0) : (t.length -= e,
            t.awaitDrain = 0),
            0 === t.length && (t.ended || (t.needReadable = !0),
            r !== e && t.ended && D(this)),
            null !== i && this.emit("data", i),
            i
        }
        ,
        A.prototype._read = function(e) {
            E(this, new w("_read()"))
        }
        ,
        A.prototype.pipe = function(e, t) {
            var r = this
              , n = this._readableState;
            switch (n.pipesCount) {
            case 0:
                n.pipes = e;
                break;
            case 1:
                n.pipes = [n.pipes, e];
                break;
            default:
                n.pipes.push(e)
            }
            n.pipesCount += 1,
            f("pipe count=%d opts=%j", n.pipesCount, t);
            var a = (!t || !1 !== t.end) && e !== i.stdout && e !== i.stderr ? u : m;
            function s(t, i) {
                f("onunpipe"),
                t === r && i && !1 === i.hasUnpiped && (i.hasUnpiped = !0,
                f("cleanup"),
                e.removeListener("close", p),
                e.removeListener("finish", b),
                e.removeListener("drain", c),
                e.removeListener("error", d),
                e.removeListener("unpipe", s),
                r.removeListener("end", u),
                r.removeListener("end", m),
                r.removeListener("data", l),
                h = !0,
                !n.awaitDrain || e._writableState && !e._writableState.needDrain || c())
            }
            function u() {
                f("onend"),
                e.end()
            }
            n.endEmitted ? i.nextTick(a) : r.once("end", a),
            e.on("unpipe", s);
            var c = function(e) {
                return function() {
                    var t = e._readableState;
                    f("pipeOnDrain", t.awaitDrain),
                    t.awaitDrain && t.awaitDrain--,
                    0 === t.awaitDrain && o(e, "data") && (t.flowing = !0,
                    L(e))
                }
            }(r);
            e.on("drain", c);
            var h = !1;
            function l(t) {
                f("ondata");
                var i = e.write(t);
                f("dest.write", i),
                !1 === i && ((1 === n.pipesCount && n.pipes === e || n.pipesCount > 1 && -1 !== U(n.pipes, e)) && !h && (f("false write response, pause", n.awaitDrain),
                n.awaitDrain++),
                r.pause())
            }
            function d(t) {
                f("onerror", t),
                m(),
                e.removeListener("error", d),
                0 === o(e, "error") && E(e, t)
            }
            function p() {
                e.removeListener("finish", b),
                m()
            }
            function b() {
                f("onfinish"),
                e.removeListener("close", p),
                m()
            }
            function m() {
                f("unpipe"),
                r.unpipe(e)
            }
            return r.on("data", l),
            function(e, t, r) {
                if ("function" == typeof e.prependListener)
                    return e.prependListener(t, r);
                e._events && e._events[t] ? Array.isArray(e._events[t]) ? e._events[t].unshift(r) : e._events[t] = [r, e._events[t]] : e.on(t, r)
            }(e, "error", d),
            e.once("close", p),
            e.once("finish", b),
            e.emit("pipe", r),
            n.flowing || (f("pipe resume"),
            r.resume()),
            e
        }
        ,
        A.prototype.unpipe = function(e) {
            var t = this._readableState
              , r = {
                hasUnpiped: !1
            };
            if (0 === t.pipesCount)
                return this;
            if (1 === t.pipesCount)
                return e && e !== t.pipes || (e || (e = t.pipes),
                t.pipes = null,
                t.pipesCount = 0,
                t.flowing = !1,
                e && e.emit("unpipe", this, r)),
                this;
            if (!e) {
                var i = t.pipes
                  , n = t.pipesCount;
                t.pipes = null,
                t.pipesCount = 0,
                t.flowing = !1;
                for (var o = 0; o < n; o++)
                    i[o].emit("unpipe", this, {
                        hasUnpiped: !1
                    });
                return this
            }
            var a = U(t.pipes, e);
            return -1 === a || (t.pipes.splice(a, 1),
            t.pipesCount -= 1,
            1 === t.pipesCount && (t.pipes = t.pipes[0]),
            e.emit("unpipe", this, r)),
            this
        }
        ,
        A.prototype.on = function(e, t) {
            var r = a.prototype.on.call(this, e, t)
              , n = this._readableState;
            return "data" === e ? (n.readableListening = this.listenerCount("readable") > 0,
            !1 !== n.flowing && this.resume()) : "readable" === e && (n.endEmitted || n.readableListening || (n.readableListening = n.needReadable = !0,
            n.flowing = !1,
            n.emittedReadable = !1,
            f("on readable", n.length, n.reading),
            n.length ? I(this) : n.reading || i.nextTick(B, this))),
            r
        }
        ,
        A.prototype.addListener = A.prototype.on,
        A.prototype.removeListener = function(e, t) {
            var r = a.prototype.removeListener.call(this, e, t);
            return "readable" === e && i.nextTick(C, this),
            r
        }
        ,
        A.prototype.removeAllListeners = function(e) {
            var t = a.prototype.removeAllListeners.apply(this, arguments);
            return "readable" !== e && void 0 !== e || i.nextTick(C, this),
            t
        }
        ,
        A.prototype.resume = function() {
            var e = this._readableState;
            return e.flowing || (f("resume"),
            e.flowing = !e.readableListening,
            function(e, t) {
                t.resumeScheduled || (t.resumeScheduled = !0,
                i.nextTick(O, e, t))
            }(this, e)),
            e.paused = !1,
            this
        }
        ,
        A.prototype.pause = function() {
            return f("call pause flowing=%j", this._readableState.flowing),
            !1 !== this._readableState.flowing && (f("pause"),
            this._readableState.flowing = !1,
            this.emit("pause")),
            this._readableState.paused = !0,
            this
        }
        ,
        A.prototype.wrap = function(e) {
            var t = this
              , r = this._readableState
              , i = !1;
            for (var n in e.on("end", (function() {
                if (f("wrapped end"),
                r.decoder && !r.ended) {
                    var e = r.decoder.end();
                    e && e.length && t.push(e)
                }
                t.push(null)
            }
            )),
            e.on("data", (function(n) {
                (f("wrapped data"),
                r.decoder && (n = r.decoder.write(n)),
                r.objectMode && null == n) || (r.objectMode || n && n.length) && (t.push(n) || (i = !0,
                e.pause()))
            }
            )),
            e)
                void 0 === this[n] && "function" == typeof e[n] && (this[n] = function(t) {
                    return function() {
                        return e[t].apply(e, arguments)
                    }
                }(n));
            for (var o = 0; o < M.length; o++)
                e.on(M[o], this.emit.bind(this, M[o]));
            return this._read = function(t) {
                f("wrapped _read", t),
                i && (i = !1,
                e.resume())
            }
            ,
            this
        }
        ,
        "function" == typeof Symbol && (A.prototype[Symbol.asyncIterator] = function() {
            return void 0 === l && (l = r(268)),
            l(this)
        }
        ),
        Object.defineProperty(A.prototype, "readableHighWaterMark", {
            enumerable: !1,
            get: function() {
                return this._readableState.highWaterMark
            }
        }),
        Object.defineProperty(A.prototype, "readableBuffer", {
            enumerable: !1,
            get: function() {
                return this._readableState && this._readableState.buffer
            }
        }),
        Object.defineProperty(A.prototype, "readableFlowing", {
            enumerable: !1,
            get: function() {
                return this._readableState.flowing
            },
            set: function(e) {
                this._readableState && (this._readableState.flowing = e)
            }
        }),
        A._fromList = j,
        Object.defineProperty(A.prototype, "readableLength", {
            enumerable: !1,
            get: function() {
                return this._readableState.length
            }
        }),
        "function" == typeof Symbol && (A.from = function(e, t) {
            return void 0 === d && (d = r(269)),
            d(A, e, t)
        }
        )
    }
    ).call(this, r(13), r(14))
}
, function(e, t, r) {
    e.exports = r(31).EventEmitter
}
, function(e, t, r) {
    "use strict";
    (function(t) {
        function r(e, t) {
            n(e, t),
            i(e)
        }
        function i(e) {
            e._writableState && !e._writableState.emitClose || e._readableState && !e._readableState.emitClose || e.emit("close")
        }
        function n(e, t) {
            e.emit("error", t)
        }
        e.exports = {
            destroy: function(e, o) {
                var a = this
                  , s = this._readableState && this._readableState.destroyed
                  , u = this._writableState && this._writableState.destroyed;
                return s || u ? (o ? o(e) : e && (this._writableState ? this._writableState.errorEmitted || (this._writableState.errorEmitted = !0,
                t.nextTick(n, this, e)) : t.nextTick(n, this, e)),
                this) : (this._readableState && (this._readableState.destroyed = !0),
                this._writableState && (this._writableState.destroyed = !0),
                this._destroy(e || null, (function(e) {
                    !o && e ? a._writableState ? a._writableState.errorEmitted ? t.nextTick(i, a) : (a._writableState.errorEmitted = !0,
                    t.nextTick(r, a, e)) : t.nextTick(r, a, e) : o ? (t.nextTick(i, a),
                    o(e)) : t.nextTick(i, a)
                }
                )),
                this)
            },
            undestroy: function() {
                this._readableState && (this._readableState.destroyed = !1,
                this._readableState.reading = !1,
                this._readableState.ended = !1,
                this._readableState.endEmitted = !1),
                this._writableState && (this._writableState.destroyed = !1,
                this._writableState.ended = !1,
                this._writableState.ending = !1,
                this._writableState.finalCalled = !1,
                this._writableState.prefinished = !1,
                this._writableState.finished = !1,
                this._writableState.errorEmitted = !1)
            },
            errorOrDestroy: function(e, t) {
                var r = e._readableState
                  , i = e._writableState;
                r && r.autoDestroy || i && i.autoDestroy ? e.destroy(t) : e.emit("error", t)
            }
        }
    }
    ).call(this, r(14))
}
, function(e, t, r) {
    "use strict";
    var i = r(44).codes.ERR_INVALID_OPT_VALUE;
    e.exports = {
        getHighWaterMark: function(e, t, r, n) {
            var o = function(e, t, r) {
                return null != e.highWaterMark ? e.highWaterMark : t ? e[r] : null
            }(t, n, r);
            if (null != o) {
                if (!isFinite(o) || Math.floor(o) !== o || o < 0)
                    throw new i(n ? r : "highWaterMark",o);
                return Math.floor(o)
            }
            return e.objectMode ? 16 : 16384
        }
    }
}
, function(e, t, r) {
    "use strict";
    (function(t, i) {
        function n(e) {
            var t = this;
            this.next = null,
            this.entry = null,
            this.finish = function() {
                !function(e, t, r) {
                    var i = e.entry;
                    e.entry = null;
                    for (; i; ) {
                        var n = i.callback;
                        t.pendingcb--,
                        n(r),
                        i = i.next
                    }
                    t.corkedRequestsFree.next = e
                }(t, e)
            }
        }
        var o;
        e.exports = A,
        A.WritableState = S;
        var a = {
            deprecate: r(79)
        }
          , s = r(148)
          , u = r(8).Buffer
          , f = t.Uint8Array || function() {}
        ;
        var c, h = r(149), l = r(150).getHighWaterMark, d = r(44).codes, p = d.ERR_INVALID_ARG_TYPE, b = d.ERR_METHOD_NOT_IMPLEMENTED, m = d.ERR_MULTIPLE_CALLBACK, g = d.ERR_STREAM_CANNOT_PIPE, v = d.ERR_STREAM_DESTROYED, y = d.ERR_STREAM_NULL_VALUES, w = d.ERR_STREAM_WRITE_AFTER_END, _ = d.ERR_UNKNOWN_ENCODING, E = h.errorOrDestroy;
        function M() {}
        function S(e, t, a) {
            o = o || r(45),
            e = e || {},
            "boolean" != typeof a && (a = t instanceof o),
            this.objectMode = !!e.objectMode,
            a && (this.objectMode = this.objectMode || !!e.writableObjectMode),
            this.highWaterMark = l(this, e, "writableHighWaterMark", a),
            this.finalCalled = !1,
            this.needDrain = !1,
            this.ending = !1,
            this.ended = !1,
            this.finished = !1,
            this.destroyed = !1;
            var s = !1 === e.decodeStrings;
            this.decodeStrings = !s,
            this.defaultEncoding = e.defaultEncoding || "utf8",
            this.length = 0,
            this.writing = !1,
            this.corked = 0,
            this.sync = !0,
            this.bufferProcessing = !1,
            this.onwrite = function(e) {
                !function(e, t) {
                    var r = e._writableState
                      , n = r.sync
                      , o = r.writecb;
                    if ("function" != typeof o)
                        throw new m;
                    if (function(e) {
                        e.writing = !1,
                        e.writecb = null,
                        e.length -= e.writelen,
                        e.writelen = 0
                    }(r),
                    t)
                        !function(e, t, r, n, o) {
                            --t.pendingcb,
                            r ? (i.nextTick(o, n),
                            i.nextTick(P, e, t),
                            e._writableState.errorEmitted = !0,
                            E(e, n)) : (o(n),
                            e._writableState.errorEmitted = !0,
                            E(e, n),
                            P(e, t))
                        }(e, r, n, t, o);
                    else {
                        var a = I(r) || e.destroyed;
                        a || r.corked || r.bufferProcessing || !r.bufferedRequest || R(e, r),
                        n ? i.nextTick(x, e, r, a, o) : x(e, r, a, o)
                    }
                }(t, e)
            }
            ,
            this.writecb = null,
            this.writelen = 0,
            this.bufferedRequest = null,
            this.lastBufferedRequest = null,
            this.pendingcb = 0,
            this.prefinished = !1,
            this.errorEmitted = !1,
            this.emitClose = !1 !== e.emitClose,
            this.autoDestroy = !!e.autoDestroy,
            this.bufferedRequestCount = 0,
            this.corkedRequestsFree = new n(this)
        }
        function A(e) {
            var t = this instanceof (o = o || r(45));
            if (!t && !c.call(A, this))
                return new A(e);
            this._writableState = new S(e,this,t),
            this.writable = !0,
            e && ("function" == typeof e.write && (this._write = e.write),
            "function" == typeof e.writev && (this._writev = e.writev),
            "function" == typeof e.destroy && (this._destroy = e.destroy),
            "function" == typeof e.final && (this._final = e.final)),
            s.call(this)
        }
        function k(e, t, r, i, n, o, a) {
            t.writelen = i,
            t.writecb = a,
            t.writing = !0,
            t.sync = !0,
            t.destroyed ? t.onwrite(new v("write")) : r ? e._writev(n, t.onwrite) : e._write(n, o, t.onwrite),
            t.sync = !1
        }
        function x(e, t, r, i) {
            r || function(e, t) {
                0 === t.length && t.needDrain && (t.needDrain = !1,
                e.emit("drain"))
            }(e, t),
            t.pendingcb--,
            i(),
            P(e, t)
        }
        function R(e, t) {
            t.bufferProcessing = !0;
            var r = t.bufferedRequest;
            if (e._writev && r && r.next) {
                var i = t.bufferedRequestCount
                  , o = new Array(i)
                  , a = t.corkedRequestsFree;
                a.entry = r;
                for (var s = 0, u = !0; r; )
                    o[s] = r,
                    r.isBuf || (u = !1),
                    r = r.next,
                    s += 1;
                o.allBuffers = u,
                k(e, t, !0, t.length, o, "", a.finish),
                t.pendingcb++,
                t.lastBufferedRequest = null,
                a.next ? (t.corkedRequestsFree = a.next,
                a.next = null) : t.corkedRequestsFree = new n(t),
                t.bufferedRequestCount = 0
            } else {
                for (; r; ) {
                    var f = r.chunk
                      , c = r.encoding
                      , h = r.callback;
                    if (k(e, t, !1, t.objectMode ? 1 : f.length, f, c, h),
                    r = r.next,
                    t.bufferedRequestCount--,
                    t.writing)
                        break
                }
                null === r && (t.lastBufferedRequest = null)
            }
            t.bufferedRequest = r,
            t.bufferProcessing = !1
        }
        function I(e) {
            return e.ending && 0 === e.length && null === e.bufferedRequest && !e.finished && !e.writing
        }
        function T(e, t) {
            e._final((function(r) {
                t.pendingcb--,
                r && E(e, r),
                t.prefinished = !0,
                e.emit("prefinish"),
                P(e, t)
            }
            ))
        }
        function P(e, t) {
            var r = I(t);
            if (r && (function(e, t) {
                t.prefinished || t.finalCalled || ("function" != typeof e._final || t.destroyed ? (t.prefinished = !0,
                e.emit("prefinish")) : (t.pendingcb++,
                t.finalCalled = !0,
                i.nextTick(T, e, t)))
            }(e, t),
            0 === t.pendingcb && (t.finished = !0,
            e.emit("finish"),
            t.autoDestroy))) {
                var n = e._readableState;
                (!n || n.autoDestroy && n.endEmitted) && e.destroy()
            }
            return r
        }
        r(4)(A, s),
        S.prototype.getBuffer = function() {
            for (var e = this.bufferedRequest, t = []; e; )
                t.push(e),
                e = e.next;
            return t
        }
        ,
        function() {
            try {
                Object.defineProperty(S.prototype, "buffer", {
                    get: a.deprecate((function() {
                        return this.getBuffer()
                    }
                    ), "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
                })
            } catch (e) {}
        }(),
        "function" == typeof Symbol && Symbol.hasInstance && "function" == typeof Function.prototype[Symbol.hasInstance] ? (c = Function.prototype[Symbol.hasInstance],
        Object.defineProperty(A, Symbol.hasInstance, {
            value: function(e) {
                return !!c.call(this, e) || this === A && (e && e._writableState instanceof S)
            }
        })) : c = function(e) {
            return e instanceof this
        }
        ,
        A.prototype.pipe = function() {
            E(this, new g)
        }
        ,
        A.prototype.write = function(e, t, r) {
            var n, o = this._writableState, a = !1, s = !o.objectMode && (n = e,
            u.isBuffer(n) || n instanceof f);
            return s && !u.isBuffer(e) && (e = function(e) {
                return u.from(e)
            }(e)),
            "function" == typeof t && (r = t,
            t = null),
            s ? t = "buffer" : t || (t = o.defaultEncoding),
            "function" != typeof r && (r = M),
            o.ending ? function(e, t) {
                var r = new w;
                E(e, r),
                i.nextTick(t, r)
            }(this, r) : (s || function(e, t, r, n) {
                var o;
                return null === r ? o = new y : "string" == typeof r || t.objectMode || (o = new p("chunk",["string", "Buffer"],r)),
                !o || (E(e, o),
                i.nextTick(n, o),
                !1)
            }(this, o, e, r)) && (o.pendingcb++,
            a = function(e, t, r, i, n, o) {
                if (!r) {
                    var a = function(e, t, r) {
                        e.objectMode || !1 === e.decodeStrings || "string" != typeof t || (t = u.from(t, r));
                        return t
                    }(t, i, n);
                    i !== a && (r = !0,
                    n = "buffer",
                    i = a)
                }
                var s = t.objectMode ? 1 : i.length;
                t.length += s;
                var f = t.length < t.highWaterMark;
                f || (t.needDrain = !0);
                if (t.writing || t.corked) {
                    var c = t.lastBufferedRequest;
                    t.lastBufferedRequest = {
                        chunk: i,
                        encoding: n,
                        isBuf: r,
                        callback: o,
                        next: null
                    },
                    c ? c.next = t.lastBufferedRequest : t.bufferedRequest = t.lastBufferedRequest,
                    t.bufferedRequestCount += 1
                } else
                    k(e, t, !1, s, i, n, o);
                return f
            }(this, o, s, e, t, r)),
            a
        }
        ,
        A.prototype.cork = function() {
            this._writableState.corked++
        }
        ,
        A.prototype.uncork = function() {
            var e = this._writableState;
            e.corked && (e.corked--,
            e.writing || e.corked || e.bufferProcessing || !e.bufferedRequest || R(this, e))
        }
        ,
        A.prototype.setDefaultEncoding = function(e) {
            if ("string" == typeof e && (e = e.toLowerCase()),
            !(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((e + "").toLowerCase()) > -1))
                throw new _(e);
            return this._writableState.defaultEncoding = e,
            this
        }
        ,
        Object.defineProperty(A.prototype, "writableBuffer", {
            enumerable: !1,
            get: function() {
                return this._writableState && this._writableState.getBuffer()
            }
        }),
        Object.defineProperty(A.prototype, "writableHighWaterMark", {
            enumerable: !1,
            get: function() {
                return this._writableState.highWaterMark
            }
        }),
        A.prototype._write = function(e, t, r) {
            r(new b("_write()"))
        }
        ,
        A.prototype._writev = null,
        A.prototype.end = function(e, t, r) {
            var n = this._writableState;
            return "function" == typeof e ? (r = e,
            e = null,
            t = null) : "function" == typeof t && (r = t,
            t = null),
            null != e && this.write(e, t),
            n.corked && (n.corked = 1,
            this.uncork()),
            n.ending || function(e, t, r) {
                t.ending = !0,
                P(e, t),
                r && (t.finished ? i.nextTick(r) : e.once("finish", r));
                t.ended = !0,
                e.writable = !1
            }(this, n, r),
            this
        }
        ,
        Object.defineProperty(A.prototype, "writableLength", {
            enumerable: !1,
            get: function() {
                return this._writableState.length
            }
        }),
        Object.defineProperty(A.prototype, "destroyed", {
            enumerable: !1,
            get: function() {
                return void 0 !== this._writableState && this._writableState.destroyed
            },
            set: function(e) {
                this._writableState && (this._writableState.destroyed = e)
            }
        }),
        A.prototype.destroy = h.destroy,
        A.prototype._undestroy = h.undestroy,
        A.prototype._destroy = function(e, t) {
            t(e)
        }
    }
    ).call(this, r(13), r(14))
}
, function(e, t, r) {
    "use strict";
    e.exports = c;
    var i = r(44).codes
      , n = i.ERR_METHOD_NOT_IMPLEMENTED
      , o = i.ERR_MULTIPLE_CALLBACK
      , a = i.ERR_TRANSFORM_ALREADY_TRANSFORMING
      , s = i.ERR_TRANSFORM_WITH_LENGTH_0
      , u = r(45);
    function f(e, t) {
        var r = this._transformState;
        r.transforming = !1;
        var i = r.writecb;
        if (null === i)
            return this.emit("error", new o);
        r.writechunk = null,
        r.writecb = null,
        null != t && this.push(t),
        i(e);
        var n = this._readableState;
        n.reading = !1,
        (n.needReadable || n.length < n.highWaterMark) && this._read(n.highWaterMark)
    }
    function c(e) {
        if (!(this instanceof c))
            return new c(e);
        u.call(this, e),
        this._transformState = {
            afterTransform: f.bind(this),
            needTransform: !1,
            transforming: !1,
            writecb: null,
            writechunk: null,
            writeencoding: null
        },
        this._readableState.needReadable = !0,
        this._readableState.sync = !1,
        e && ("function" == typeof e.transform && (this._transform = e.transform),
        "function" == typeof e.flush && (this._flush = e.flush)),
        this.on("prefinish", h)
    }
    function h() {
        var e = this;
        "function" != typeof this._flush || this._readableState.destroyed ? l(this, null, null) : this._flush((function(t, r) {
            l(e, t, r)
        }
        ))
    }
    function l(e, t, r) {
        if (t)
            return e.emit("error", t);
        if (null != r && e.push(r),
        e._writableState.length)
            throw new s;
        if (e._transformState.transforming)
            throw new a;
        return e.push(null)
    }
    r(4)(c, u),
    c.prototype.push = function(e, t) {
        return this._transformState.needTransform = !1,
        u.prototype.push.call(this, e, t)
    }
    ,
    c.prototype._transform = function(e, t, r) {
        r(new n("_transform()"))
    }
    ,
    c.prototype._write = function(e, t, r) {
        var i = this._transformState;
        if (i.writecb = r,
        i.writechunk = e,
        i.writeencoding = t,
        !i.transforming) {
            var n = this._readableState;
            (i.needTransform || n.needReadable || n.length < n.highWaterMark) && this._read(n.highWaterMark)
        }
    }
    ,
    c.prototype._read = function(e) {
        var t = this._transformState;
        null === t.writechunk || t.transforming ? t.needTransform = !0 : (t.transforming = !0,
        this._transform(t.writechunk, t.writeencoding, t.afterTransform))
    }
    ,
    c.prototype._destroy = function(e, t) {
        u.prototype._destroy.call(this, e, (function(e) {
            t(e)
        }
        ))
    }
}
, function(e, t, r) {
    "use strict";
    var i = t;
    function n(e) {
        return 1 === e.length ? "0" + e : e
    }
    function o(e) {
        for (var t = "", r = 0; r < e.length; r++)
            t += n(e[r].toString(16));
        return t
    }
    i.toArray = function(e, t) {
        if (Array.isArray(e))
            return e.slice();
        if (!e)
            return [];
        var r = [];
        if ("string" != typeof e) {
            for (var i = 0; i < e.length; i++)
                r[i] = 0 | e[i];
            return r
        }
        if ("hex" === t) {
            (e = e.replace(/[^a-z0-9]+/gi, "")).length % 2 != 0 && (e = "0" + e);
            for (i = 0; i < e.length; i += 2)
                r.push(parseInt(e[i] + e[i + 1], 16))
        } else
            for (i = 0; i < e.length; i++) {
                var n = e.charCodeAt(i)
                  , o = n >> 8
                  , a = 255 & n;
                o ? r.push(o, a) : r.push(a)
            }
        return r
    }
    ,
    i.zero2 = n,
    i.toHex = o,
    i.encode = function(e, t) {
        return "hex" === t ? o(e) : e
    }
}
, function(e, t, r) {
    "use strict";
    var i = t;
    i.base = r(64),
    i.short = r(276),
    i.mont = r(277),
    i.edwards = r(278)
}
, function(e, t, r) {
    "use strict";
    var i = r(26).rotr32;
    function n(e, t, r) {
        return e & t ^ ~e & r
    }
    function o(e, t, r) {
        return e & t ^ e & r ^ t & r
    }
    function a(e, t, r) {
        return e ^ t ^ r
    }
    t.ft_1 = function(e, t, r, i) {
        return 0 === e ? n(t, r, i) : 1 === e || 3 === e ? a(t, r, i) : 2 === e ? o(t, r, i) : void 0
    }
    ,
    t.ch32 = n,
    t.maj32 = o,
    t.p32 = a,
    t.s0_256 = function(e) {
        return i(e, 2) ^ i(e, 13) ^ i(e, 22)
    }
    ,
    t.s1_256 = function(e) {
        return i(e, 6) ^ i(e, 11) ^ i(e, 25)
    }
    ,
    t.g0_256 = function(e) {
        return i(e, 7) ^ i(e, 18) ^ e >>> 3
    }
    ,
    t.g1_256 = function(e) {
        return i(e, 17) ^ i(e, 19) ^ e >>> 10
    }
}
, function(e, t, r) {
    "use strict";
    var i = r(26)
      , n = r(54)
      , o = r(155)
      , a = r(18)
      , s = i.sum32
      , u = i.sum32_4
      , f = i.sum32_5
      , c = o.ch32
      , h = o.maj32
      , l = o.s0_256
      , d = o.s1_256
      , p = o.g0_256
      , b = o.g1_256
      , m = n.BlockHash
      , g = [1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298];
    function v() {
        if (!(this instanceof v))
            return new v;
        m.call(this),
        this.h = [1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225],
        this.k = g,
        this.W = new Array(64)
    }
    i.inherits(v, m),
    e.exports = v,
    v.blockSize = 512,
    v.outSize = 256,
    v.hmacStrength = 192,
    v.padLength = 64,
    v.prototype._update = function(e, t) {
        for (var r = this.W, i = 0; i < 16; i++)
            r[i] = e[t + i];
        for (; i < r.length; i++)
            r[i] = u(b(r[i - 2]), r[i - 7], p(r[i - 15]), r[i - 16]);
        var n = this.h[0]
          , o = this.h[1]
          , m = this.h[2]
          , g = this.h[3]
          , v = this.h[4]
          , y = this.h[5]
          , w = this.h[6]
          , _ = this.h[7];
        for (a(this.k.length === r.length),
        i = 0; i < r.length; i++) {
            var E = f(_, d(v), c(v, y, w), this.k[i], r[i])
              , M = s(l(n), h(n, o, m));
            _ = w,
            w = y,
            y = v,
            v = s(g, E),
            g = m,
            m = o,
            o = n,
            n = s(E, M)
        }
        this.h[0] = s(this.h[0], n),
        this.h[1] = s(this.h[1], o),
        this.h[2] = s(this.h[2], m),
        this.h[3] = s(this.h[3], g),
        this.h[4] = s(this.h[4], v),
        this.h[5] = s(this.h[5], y),
        this.h[6] = s(this.h[6], w),
        this.h[7] = s(this.h[7], _)
    }
    ,
    v.prototype._digest = function(e) {
        return "hex" === e ? i.toHex32(this.h, "big") : i.split32(this.h, "big")
    }
}
, function(e, t, r) {
    "use strict";
    var i = r(26)
      , n = r(54)
      , o = r(18)
      , a = i.rotr64_hi
      , s = i.rotr64_lo
      , u = i.shr64_hi
      , f = i.shr64_lo
      , c = i.sum64
      , h = i.sum64_hi
      , l = i.sum64_lo
      , d = i.sum64_4_hi
      , p = i.sum64_4_lo
      , b = i.sum64_5_hi
      , m = i.sum64_5_lo
      , g = n.BlockHash
      , v = [1116352408, 3609767458, 1899447441, 602891725, 3049323471, 3964484399, 3921009573, 2173295548, 961987163, 4081628472, 1508970993, 3053834265, 2453635748, 2937671579, 2870763221, 3664609560, 3624381080, 2734883394, 310598401, 1164996542, 607225278, 1323610764, 1426881987, 3590304994, 1925078388, 4068182383, 2162078206, 991336113, 2614888103, 633803317, 3248222580, 3479774868, 3835390401, 2666613458, 4022224774, 944711139, 264347078, 2341262773, 604807628, 2007800933, 770255983, 1495990901, 1249150122, 1856431235, 1555081692, 3175218132, 1996064986, 2198950837, 2554220882, 3999719339, 2821834349, 766784016, 2952996808, 2566594879, 3210313671, 3203337956, 3336571891, 1034457026, 3584528711, 2466948901, 113926993, 3758326383, 338241895, 168717936, 666307205, 1188179964, 773529912, 1546045734, 1294757372, 1522805485, 1396182291, 2643833823, 1695183700, 2343527390, 1986661051, 1014477480, 2177026350, 1206759142, 2456956037, 344077627, 2730485921, 1290863460, 2820302411, 3158454273, 3259730800, 3505952657, 3345764771, 106217008, 3516065817, 3606008344, 3600352804, 1432725776, 4094571909, 1467031594, 275423344, 851169720, 430227734, 3100823752, 506948616, 1363258195, 659060556, 3750685593, 883997877, 3785050280, 958139571, 3318307427, 1322822218, 3812723403, 1537002063, 2003034995, 1747873779, 3602036899, 1955562222, 1575990012, 2024104815, 1125592928, 2227730452, 2716904306, 2361852424, 442776044, 2428436474, 593698344, 2756734187, 3733110249, 3204031479, 2999351573, 3329325298, 3815920427, 3391569614, 3928383900, 3515267271, 566280711, 3940187606, 3454069534, 4118630271, 4000239992, 116418474, 1914138554, 174292421, 2731055270, 289380356, 3203993006, 460393269, 320620315, 685471733, 587496836, 852142971, 1086792851, 1017036298, 365543100, 1126000580, 2618297676, 1288033470, 3409855158, 1501505948, 4234509866, 1607167915, 987167468, 1816402316, 1246189591];
    function y() {
        if (!(this instanceof y))
            return new y;
        g.call(this),
        this.h = [1779033703, 4089235720, 3144134277, 2227873595, 1013904242, 4271175723, 2773480762, 1595750129, 1359893119, 2917565137, 2600822924, 725511199, 528734635, 4215389547, 1541459225, 327033209],
        this.k = v,
        this.W = new Array(160)
    }
    function w(e, t, r, i, n) {
        var o = e & r ^ ~e & n;
        return o < 0 && (o += 4294967296),
        o
    }
    function _(e, t, r, i, n, o) {
        var a = t & i ^ ~t & o;
        return a < 0 && (a += 4294967296),
        a
    }
    function E(e, t, r, i, n) {
        var o = e & r ^ e & n ^ r & n;
        return o < 0 && (o += 4294967296),
        o
    }
    function M(e, t, r, i, n, o) {
        var a = t & i ^ t & o ^ i & o;
        return a < 0 && (a += 4294967296),
        a
    }
    function S(e, t) {
        var r = a(e, t, 28) ^ a(t, e, 2) ^ a(t, e, 7);
        return r < 0 && (r += 4294967296),
        r
    }
    function A(e, t) {
        var r = s(e, t, 28) ^ s(t, e, 2) ^ s(t, e, 7);
        return r < 0 && (r += 4294967296),
        r
    }
    function k(e, t) {
        var r = a(e, t, 14) ^ a(e, t, 18) ^ a(t, e, 9);
        return r < 0 && (r += 4294967296),
        r
    }
    function x(e, t) {
        var r = s(e, t, 14) ^ s(e, t, 18) ^ s(t, e, 9);
        return r < 0 && (r += 4294967296),
        r
    }
    function R(e, t) {
        var r = a(e, t, 1) ^ a(e, t, 8) ^ u(e, t, 7);
        return r < 0 && (r += 4294967296),
        r
    }
    function I(e, t) {
        var r = s(e, t, 1) ^ s(e, t, 8) ^ f(e, t, 7);
        return r < 0 && (r += 4294967296),
        r
    }
    function T(e, t) {
        var r = a(e, t, 19) ^ a(t, e, 29) ^ u(e, t, 6);
        return r < 0 && (r += 4294967296),
        r
    }
    function P(e, t) {
        var r = s(e, t, 19) ^ s(t, e, 29) ^ f(e, t, 6);
        return r < 0 && (r += 4294967296),
        r
    }
    i.inherits(y, g),
    e.exports = y,
    y.blockSize = 1024,
    y.outSize = 512,
    y.hmacStrength = 192,
    y.padLength = 128,
    y.prototype._prepareBlock = function(e, t) {
        for (var r = this.W, i = 0; i < 32; i++)
            r[i] = e[t + i];
        for (; i < r.length; i += 2) {
            var n = T(r[i - 4], r[i - 3])
              , o = P(r[i - 4], r[i - 3])
              , a = r[i - 14]
              , s = r[i - 13]
              , u = R(r[i - 30], r[i - 29])
              , f = I(r[i - 30], r[i - 29])
              , c = r[i - 32]
              , h = r[i - 31];
            r[i] = d(n, o, a, s, u, f, c, h),
            r[i + 1] = p(n, o, a, s, u, f, c, h)
        }
    }
    ,
    y.prototype._update = function(e, t) {
        this._prepareBlock(e, t);
        var r = this.W
          , i = this.h[0]
          , n = this.h[1]
          , a = this.h[2]
          , s = this.h[3]
          , u = this.h[4]
          , f = this.h[5]
          , d = this.h[6]
          , p = this.h[7]
          , g = this.h[8]
          , v = this.h[9]
          , y = this.h[10]
          , R = this.h[11]
          , I = this.h[12]
          , T = this.h[13]
          , P = this.h[14]
          , N = this.h[15];
        o(this.k.length === r.length);
        for (var C = 0; C < r.length; C += 2) {
            var B = P
              , O = N
              , L = k(g, v)
              , j = x(g, v)
              , D = w(g, v, y, R, I)
              , z = _(g, v, y, R, I, T)
              , U = this.k[C]
              , q = this.k[C + 1]
              , K = r[C]
              , F = r[C + 1]
              , H = b(B, O, L, j, D, z, U, q, K, F)
              , V = m(B, O, L, j, D, z, U, q, K, F);
            B = S(i, n),
            O = A(i, n),
            L = E(i, n, a, s, u),
            j = M(i, n, a, s, u, f);
            var Y = h(B, O, L, j)
              , G = l(B, O, L, j);
            P = I,
            N = T,
            I = y,
            T = R,
            y = g,
            R = v,
            g = h(d, p, H, V),
            v = l(p, p, H, V),
            d = u,
            p = f,
            u = a,
            f = s,
            a = i,
            s = n,
            i = h(H, V, Y, G),
            n = l(H, V, Y, G)
        }
        c(this.h, 0, i, n),
        c(this.h, 2, a, s),
        c(this.h, 4, u, f),
        c(this.h, 6, d, p),
        c(this.h, 8, g, v),
        c(this.h, 10, y, R),
        c(this.h, 12, I, T),
        c(this.h, 14, P, N)
    }
    ,
    y.prototype._digest = function(e) {
        return "hex" === e ? i.toHex32(this.h, "big") : i.split32(this.h, "big")
    }
}
, function(e, t, r) {
    (function(e) {
        !function(e, t) {
            "use strict";
            function i(e, t) {
                if (!e)
                    throw new Error(t || "Assertion failed")
            }
            function n(e, t) {
                e.super_ = t;
                var r = function() {};
                r.prototype = t.prototype,
                e.prototype = new r,
                e.prototype.constructor = e
            }
            function o(e, t, r) {
                if (o.isBN(e))
                    return e;
                this.negative = 0,
                this.words = null,
                this.length = 0,
                this.red = null,
                null !== e && ("le" !== t && "be" !== t || (r = t,
                t = 10),
                this._init(e || 0, t || 10, r || "be"))
            }
            var a;
            "object" == typeof e ? e.exports = o : t.BN = o,
            o.BN = o,
            o.wordSize = 26;
            try {
                a = "undefined" != typeof window && void 0 !== window.Buffer ? window.Buffer : r(293).Buffer
            } catch (e) {}
            function s(e, t) {
                var r = e.charCodeAt(t);
                return r >= 48 && r <= 57 ? r - 48 : r >= 65 && r <= 70 ? r - 55 : r >= 97 && r <= 102 ? r - 87 : void i(!1, "Invalid character in " + e)
            }
            function u(e, t, r) {
                var i = s(e, r);
                return r - 1 >= t && (i |= s(e, r - 1) << 4),
                i
            }
            function f(e, t, r, n) {
                for (var o = 0, a = 0, s = Math.min(e.length, r), u = t; u < s; u++) {
                    var f = e.charCodeAt(u) - 48;
                    o *= n,
                    a = f >= 49 ? f - 49 + 10 : f >= 17 ? f - 17 + 10 : f,
                    i(f >= 0 && a < n, "Invalid character"),
                    o += a
                }
                return o
            }
            function c(e, t) {
                e.words = t.words,
                e.length = t.length,
                e.negative = t.negative,
                e.red = t.red
            }
            if (o.isBN = function(e) {
                return e instanceof o || null !== e && "object" == typeof e && e.constructor.wordSize === o.wordSize && Array.isArray(e.words)
            }
            ,
            o.max = function(e, t) {
                return e.cmp(t) > 0 ? e : t
            }
            ,
            o.min = function(e, t) {
                return e.cmp(t) < 0 ? e : t
            }
            ,
            o.prototype._init = function(e, t, r) {
                if ("number" == typeof e)
                    return this._initNumber(e, t, r);
                if ("object" == typeof e)
                    return this._initArray(e, t, r);
                "hex" === t && (t = 16),
                i(t === (0 | t) && t >= 2 && t <= 36);
                var n = 0;
                "-" === (e = e.toString().replace(/\s+/g, ""))[0] && (n++,
                this.negative = 1),
                n < e.length && (16 === t ? this._parseHex(e, n, r) : (this._parseBase(e, t, n),
                "le" === r && this._initArray(this.toArray(), t, r)))
            }
            ,
            o.prototype._initNumber = function(e, t, r) {
                e < 0 && (this.negative = 1,
                e = -e),
                e < 67108864 ? (this.words = [67108863 & e],
                this.length = 1) : e < 4503599627370496 ? (this.words = [67108863 & e, e / 67108864 & 67108863],
                this.length = 2) : (i(e < 9007199254740992),
                this.words = [67108863 & e, e / 67108864 & 67108863, 1],
                this.length = 3),
                "le" === r && this._initArray(this.toArray(), t, r)
            }
            ,
            o.prototype._initArray = function(e, t, r) {
                if (i("number" == typeof e.length),
                e.length <= 0)
                    return this.words = [0],
                    this.length = 1,
                    this;
                this.length = Math.ceil(e.length / 3),
                this.words = new Array(this.length);
                for (var n = 0; n < this.length; n++)
                    this.words[n] = 0;
                var o, a, s = 0;
                if ("be" === r)
                    for (n = e.length - 1,
                    o = 0; n >= 0; n -= 3)
                        a = e[n] | e[n - 1] << 8 | e[n - 2] << 16,
                        this.words[o] |= a << s & 67108863,
                        this.words[o + 1] = a >>> 26 - s & 67108863,
                        (s += 24) >= 26 && (s -= 26,
                        o++);
                else if ("le" === r)
                    for (n = 0,
                    o = 0; n < e.length; n += 3)
                        a = e[n] | e[n + 1] << 8 | e[n + 2] << 16,
                        this.words[o] |= a << s & 67108863,
                        this.words[o + 1] = a >>> 26 - s & 67108863,
                        (s += 24) >= 26 && (s -= 26,
                        o++);
                return this._strip()
            }
            ,
            o.prototype._parseHex = function(e, t, r) {
                this.length = Math.ceil((e.length - t) / 6),
                this.words = new Array(this.length);
                for (var i = 0; i < this.length; i++)
                    this.words[i] = 0;
                var n, o = 0, a = 0;
                if ("be" === r)
                    for (i = e.length - 1; i >= t; i -= 2)
                        n = u(e, t, i) << o,
                        this.words[a] |= 67108863 & n,
                        o >= 18 ? (o -= 18,
                        a += 1,
                        this.words[a] |= n >>> 26) : o += 8;
                else
                    for (i = (e.length - t) % 2 == 0 ? t + 1 : t; i < e.length; i += 2)
                        n = u(e, t, i) << o,
                        this.words[a] |= 67108863 & n,
                        o >= 18 ? (o -= 18,
                        a += 1,
                        this.words[a] |= n >>> 26) : o += 8;
                this._strip()
            }
            ,
            o.prototype._parseBase = function(e, t, r) {
                this.words = [0],
                this.length = 1;
                for (var i = 0, n = 1; n <= 67108863; n *= t)
                    i++;
                i--,
                n = n / t | 0;
                for (var o = e.length - r, a = o % i, s = Math.min(o, o - a) + r, u = 0, c = r; c < s; c += i)
                    u = f(e, c, c + i, t),
                    this.imuln(n),
                    this.words[0] + u < 67108864 ? this.words[0] += u : this._iaddn(u);
                if (0 !== a) {
                    var h = 1;
                    for (u = f(e, c, e.length, t),
                    c = 0; c < a; c++)
                        h *= t;
                    this.imuln(h),
                    this.words[0] + u < 67108864 ? this.words[0] += u : this._iaddn(u)
                }
                this._strip()
            }
            ,
            o.prototype.copy = function(e) {
                e.words = new Array(this.length);
                for (var t = 0; t < this.length; t++)
                    e.words[t] = this.words[t];
                e.length = this.length,
                e.negative = this.negative,
                e.red = this.red
            }
            ,
            o.prototype._move = function(e) {
                c(e, this)
            }
            ,
            o.prototype.clone = function() {
                var e = new o(null);
                return this.copy(e),
                e
            }
            ,
            o.prototype._expand = function(e) {
                for (; this.length < e; )
                    this.words[this.length++] = 0;
                return this
            }
            ,
            o.prototype._strip = function() {
                for (; this.length > 1 && 0 === this.words[this.length - 1]; )
                    this.length--;
                return this._normSign()
            }
            ,
            o.prototype._normSign = function() {
                return 1 === this.length && 0 === this.words[0] && (this.negative = 0),
                this
            }
            ,
            "undefined" != typeof Symbol && "function" == typeof Symbol.for)
                try {
                    o.prototype[Symbol.for("nodejs.util.inspect.custom")] = h
                } catch (e) {
                    o.prototype.inspect = h
                }
            else
                o.prototype.inspect = h;
            function h() {
                return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">"
            }
            var l = ["", "0", "00", "000", "0000", "00000", "000000", "0000000", "00000000", "000000000", "0000000000", "00000000000", "000000000000", "0000000000000", "00000000000000", "000000000000000", "0000000000000000", "00000000000000000", "000000000000000000", "0000000000000000000", "00000000000000000000", "000000000000000000000", "0000000000000000000000", "00000000000000000000000", "000000000000000000000000", "0000000000000000000000000"]
              , d = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
              , p = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 1e7, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64e6, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 243e5, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];
            o.prototype.toString = function(e, t) {
                var r;
                if (t = 0 | t || 1,
                16 === (e = e || 10) || "hex" === e) {
                    r = "";
                    for (var n = 0, o = 0, a = 0; a < this.length; a++) {
                        var s = this.words[a]
                          , u = (16777215 & (s << n | o)).toString(16);
                        r = 0 !== (o = s >>> 24 - n & 16777215) || a !== this.length - 1 ? l[6 - u.length] + u + r : u + r,
                        (n += 2) >= 26 && (n -= 26,
                        a--)
                    }
                    for (0 !== o && (r = o.toString(16) + r); r.length % t != 0; )
                        r = "0" + r;
                    return 0 !== this.negative && (r = "-" + r),
                    r
                }
                if (e === (0 | e) && e >= 2 && e <= 36) {
                    var f = d[e]
                      , c = p[e];
                    r = "";
                    var h = this.clone();
                    for (h.negative = 0; !h.isZero(); ) {
                        var b = h.modrn(c).toString(e);
                        r = (h = h.idivn(c)).isZero() ? b + r : l[f - b.length] + b + r
                    }
                    for (this.isZero() && (r = "0" + r); r.length % t != 0; )
                        r = "0" + r;
                    return 0 !== this.negative && (r = "-" + r),
                    r
                }
                i(!1, "Base should be between 2 and 36")
            }
            ,
            o.prototype.toNumber = function() {
                var e = this.words[0];
                return 2 === this.length ? e += 67108864 * this.words[1] : 3 === this.length && 1 === this.words[2] ? e += 4503599627370496 + 67108864 * this.words[1] : this.length > 2 && i(!1, "Number can only safely store up to 53 bits"),
                0 !== this.negative ? -e : e
            }
            ,
            o.prototype.toJSON = function() {
                return this.toString(16, 2)
            }
            ,
            a && (o.prototype.toBuffer = function(e, t) {
                return this.toArrayLike(a, e, t)
            }
            ),
            o.prototype.toArray = function(e, t) {
                return this.toArrayLike(Array, e, t)
            }
            ;
            function b(e, t, r) {
                r.negative = t.negative ^ e.negative;
                var i = e.length + t.length | 0;
                r.length = i,
                i = i - 1 | 0;
                var n = 0 | e.words[0]
                  , o = 0 | t.words[0]
                  , a = n * o
                  , s = 67108863 & a
                  , u = a / 67108864 | 0;
                r.words[0] = s;
                for (var f = 1; f < i; f++) {
                    for (var c = u >>> 26, h = 67108863 & u, l = Math.min(f, t.length - 1), d = Math.max(0, f - e.length + 1); d <= l; d++) {
                        var p = f - d | 0;
                        c += (a = (n = 0 | e.words[p]) * (o = 0 | t.words[d]) + h) / 67108864 | 0,
                        h = 67108863 & a
                    }
                    r.words[f] = 0 | h,
                    u = 0 | c
                }
                return 0 !== u ? r.words[f] = 0 | u : r.length--,
                r._strip()
            }
            o.prototype.toArrayLike = function(e, t, r) {
                this._strip();
                var n = this.byteLength()
                  , o = r || Math.max(1, n);
                i(n <= o, "byte array longer than desired length"),
                i(o > 0, "Requested array length <= 0");
                var a = function(e, t) {
                    return e.allocUnsafe ? e.allocUnsafe(t) : new e(t)
                }(e, o);
                return this["_toArrayLike" + ("le" === t ? "LE" : "BE")](a, n),
                a
            }
            ,
            o.prototype._toArrayLikeLE = function(e, t) {
                for (var r = 0, i = 0, n = 0, o = 0; n < this.length; n++) {
                    var a = this.words[n] << o | i;
                    e[r++] = 255 & a,
                    r < e.length && (e[r++] = a >> 8 & 255),
                    r < e.length && (e[r++] = a >> 16 & 255),
                    6 === o ? (r < e.length && (e[r++] = a >> 24 & 255),
                    i = 0,
                    o = 0) : (i = a >>> 24,
                    o += 2)
                }
                if (r < e.length)
                    for (e[r++] = i; r < e.length; )
                        e[r++] = 0
            }
            ,
            o.prototype._toArrayLikeBE = function(e, t) {
                for (var r = e.length - 1, i = 0, n = 0, o = 0; n < this.length; n++) {
                    var a = this.words[n] << o | i;
                    e[r--] = 255 & a,
                    r >= 0 && (e[r--] = a >> 8 & 255),
                    r >= 0 && (e[r--] = a >> 16 & 255),
                    6 === o ? (r >= 0 && (e[r--] = a >> 24 & 255),
                    i = 0,
                    o = 0) : (i = a >>> 24,
                    o += 2)
                }
                if (r >= 0)
                    for (e[r--] = i; r >= 0; )
                        e[r--] = 0
            }
            ,
            Math.clz32 ? o.prototype._countBits = function(e) {
                return 32 - Math.clz32(e)
            }
            : o.prototype._countBits = function(e) {
                var t = e
                  , r = 0;
                return t >= 4096 && (r += 13,
                t >>>= 13),
                t >= 64 && (r += 7,
                t >>>= 7),
                t >= 8 && (r += 4,
                t >>>= 4),
                t >= 2 && (r += 2,
                t >>>= 2),
                r + t
            }
            ,
            o.prototype._zeroBits = function(e) {
                if (0 === e)
                    return 26;
                var t = e
                  , r = 0;
                return 0 == (8191 & t) && (r += 13,
                t >>>= 13),
                0 == (127 & t) && (r += 7,
                t >>>= 7),
                0 == (15 & t) && (r += 4,
                t >>>= 4),
                0 == (3 & t) && (r += 2,
                t >>>= 2),
                0 == (1 & t) && r++,
                r
            }
            ,
            o.prototype.bitLength = function() {
                var e = this.words[this.length - 1]
                  , t = this._countBits(e);
                return 26 * (this.length - 1) + t
            }
            ,
            o.prototype.zeroBits = function() {
                if (this.isZero())
                    return 0;
                for (var e = 0, t = 0; t < this.length; t++) {
                    var r = this._zeroBits(this.words[t]);
                    if (e += r,
                    26 !== r)
                        break
                }
                return e
            }
            ,
            o.prototype.byteLength = function() {
                return Math.ceil(this.bitLength() / 8)
            }
            ,
            o.prototype.toTwos = function(e) {
                return 0 !== this.negative ? this.abs().inotn(e).iaddn(1) : this.clone()
            }
            ,
            o.prototype.fromTwos = function(e) {
                return this.testn(e - 1) ? this.notn(e).iaddn(1).ineg() : this.clone()
            }
            ,
            o.prototype.isNeg = function() {
                return 0 !== this.negative
            }
            ,
            o.prototype.neg = function() {
                return this.clone().ineg()
            }
            ,
            o.prototype.ineg = function() {
                return this.isZero() || (this.negative ^= 1),
                this
            }
            ,
            o.prototype.iuor = function(e) {
                for (; this.length < e.length; )
                    this.words[this.length++] = 0;
                for (var t = 0; t < e.length; t++)
                    this.words[t] = this.words[t] | e.words[t];
                return this._strip()
            }
            ,
            o.prototype.ior = function(e) {
                return i(0 == (this.negative | e.negative)),
                this.iuor(e)
            }
            ,
            o.prototype.or = function(e) {
                return this.length > e.length ? this.clone().ior(e) : e.clone().ior(this)
            }
            ,
            o.prototype.uor = function(e) {
                return this.length > e.length ? this.clone().iuor(e) : e.clone().iuor(this)
            }
            ,
            o.prototype.iuand = function(e) {
                var t;
                t = this.length > e.length ? e : this;
                for (var r = 0; r < t.length; r++)
                    this.words[r] = this.words[r] & e.words[r];
                return this.length = t.length,
                this._strip()
            }
            ,
            o.prototype.iand = function(e) {
                return i(0 == (this.negative | e.negative)),
                this.iuand(e)
            }
            ,
            o.prototype.and = function(e) {
                return this.length > e.length ? this.clone().iand(e) : e.clone().iand(this)
            }
            ,
            o.prototype.uand = function(e) {
                return this.length > e.length ? this.clone().iuand(e) : e.clone().iuand(this)
            }
            ,
            o.prototype.iuxor = function(e) {
                var t, r;
                this.length > e.length ? (t = this,
                r = e) : (t = e,
                r = this);
                for (var i = 0; i < r.length; i++)
                    this.words[i] = t.words[i] ^ r.words[i];
                if (this !== t)
                    for (; i < t.length; i++)
                        this.words[i] = t.words[i];
                return this.length = t.length,
                this._strip()
            }
            ,
            o.prototype.ixor = function(e) {
                return i(0 == (this.negative | e.negative)),
                this.iuxor(e)
            }
            ,
            o.prototype.xor = function(e) {
                return this.length > e.length ? this.clone().ixor(e) : e.clone().ixor(this)
            }
            ,
            o.prototype.uxor = function(e) {
                return this.length > e.length ? this.clone().iuxor(e) : e.clone().iuxor(this)
            }
            ,
            o.prototype.inotn = function(e) {
                i("number" == typeof e && e >= 0);
                var t = 0 | Math.ceil(e / 26)
                  , r = e % 26;
                this._expand(t),
                r > 0 && t--;
                for (var n = 0; n < t; n++)
                    this.words[n] = 67108863 & ~this.words[n];
                return r > 0 && (this.words[n] = ~this.words[n] & 67108863 >> 26 - r),
                this._strip()
            }
            ,
            o.prototype.notn = function(e) {
                return this.clone().inotn(e)
            }
            ,
            o.prototype.setn = function(e, t) {
                i("number" == typeof e && e >= 0);
                var r = e / 26 | 0
                  , n = e % 26;
                return this._expand(r + 1),
                this.words[r] = t ? this.words[r] | 1 << n : this.words[r] & ~(1 << n),
                this._strip()
            }
            ,
            o.prototype.iadd = function(e) {
                var t, r, i;
                if (0 !== this.negative && 0 === e.negative)
                    return this.negative = 0,
                    t = this.isub(e),
                    this.negative ^= 1,
                    this._normSign();
                if (0 === this.negative && 0 !== e.negative)
                    return e.negative = 0,
                    t = this.isub(e),
                    e.negative = 1,
                    t._normSign();
                this.length > e.length ? (r = this,
                i = e) : (r = e,
                i = this);
                for (var n = 0, o = 0; o < i.length; o++)
                    t = (0 | r.words[o]) + (0 | i.words[o]) + n,
                    this.words[o] = 67108863 & t,
                    n = t >>> 26;
                for (; 0 !== n && o < r.length; o++)
                    t = (0 | r.words[o]) + n,
                    this.words[o] = 67108863 & t,
                    n = t >>> 26;
                if (this.length = r.length,
                0 !== n)
                    this.words[this.length] = n,
                    this.length++;
                else if (r !== this)
                    for (; o < r.length; o++)
                        this.words[o] = r.words[o];
                return this
            }
            ,
            o.prototype.add = function(e) {
                var t;
                return 0 !== e.negative && 0 === this.negative ? (e.negative = 0,
                t = this.sub(e),
                e.negative ^= 1,
                t) : 0 === e.negative && 0 !== this.negative ? (this.negative = 0,
                t = e.sub(this),
                this.negative = 1,
                t) : this.length > e.length ? this.clone().iadd(e) : e.clone().iadd(this)
            }
            ,
            o.prototype.isub = function(e) {
                if (0 !== e.negative) {
                    e.negative = 0;
                    var t = this.iadd(e);
                    return e.negative = 1,
                    t._normSign()
                }
                if (0 !== this.negative)
                    return this.negative = 0,
                    this.iadd(e),
                    this.negative = 1,
                    this._normSign();
                var r, i, n = this.cmp(e);
                if (0 === n)
                    return this.negative = 0,
                    this.length = 1,
                    this.words[0] = 0,
                    this;
                n > 0 ? (r = this,
                i = e) : (r = e,
                i = this);
                for (var o = 0, a = 0; a < i.length; a++)
                    o = (t = (0 | r.words[a]) - (0 | i.words[a]) + o) >> 26,
                    this.words[a] = 67108863 & t;
                for (; 0 !== o && a < r.length; a++)
                    o = (t = (0 | r.words[a]) + o) >> 26,
                    this.words[a] = 67108863 & t;
                if (0 === o && a < r.length && r !== this)
                    for (; a < r.length; a++)
                        this.words[a] = r.words[a];
                return this.length = Math.max(this.length, a),
                r !== this && (this.negative = 1),
                this._strip()
            }
            ,
            o.prototype.sub = function(e) {
                return this.clone().isub(e)
            }
            ;
            var m = function(e, t, r) {
                var i, n, o, a = e.words, s = t.words, u = r.words, f = 0, c = 0 | a[0], h = 8191 & c, l = c >>> 13, d = 0 | a[1], p = 8191 & d, b = d >>> 13, m = 0 | a[2], g = 8191 & m, v = m >>> 13, y = 0 | a[3], w = 8191 & y, _ = y >>> 13, E = 0 | a[4], M = 8191 & E, S = E >>> 13, A = 0 | a[5], k = 8191 & A, x = A >>> 13, R = 0 | a[6], I = 8191 & R, T = R >>> 13, P = 0 | a[7], N = 8191 & P, C = P >>> 13, B = 0 | a[8], O = 8191 & B, L = B >>> 13, j = 0 | a[9], D = 8191 & j, z = j >>> 13, U = 0 | s[0], q = 8191 & U, K = U >>> 13, F = 0 | s[1], H = 8191 & F, V = F >>> 13, Y = 0 | s[2], G = 8191 & Y, W = Y >>> 13, Z = 0 | s[3], J = 8191 & Z, X = Z >>> 13, Q = 0 | s[4], $ = 8191 & Q, ee = Q >>> 13, te = 0 | s[5], re = 8191 & te, ie = te >>> 13, ne = 0 | s[6], oe = 8191 & ne, ae = ne >>> 13, se = 0 | s[7], ue = 8191 & se, fe = se >>> 13, ce = 0 | s[8], he = 8191 & ce, le = ce >>> 13, de = 0 | s[9], pe = 8191 & de, be = de >>> 13;
                r.negative = e.negative ^ t.negative,
                r.length = 19;
                var me = (f + (i = Math.imul(h, q)) | 0) + ((8191 & (n = (n = Math.imul(h, K)) + Math.imul(l, q) | 0)) << 13) | 0;
                f = ((o = Math.imul(l, K)) + (n >>> 13) | 0) + (me >>> 26) | 0,
                me &= 67108863,
                i = Math.imul(p, q),
                n = (n = Math.imul(p, K)) + Math.imul(b, q) | 0,
                o = Math.imul(b, K);
                var ge = (f + (i = i + Math.imul(h, H) | 0) | 0) + ((8191 & (n = (n = n + Math.imul(h, V) | 0) + Math.imul(l, H) | 0)) << 13) | 0;
                f = ((o = o + Math.imul(l, V) | 0) + (n >>> 13) | 0) + (ge >>> 26) | 0,
                ge &= 67108863,
                i = Math.imul(g, q),
                n = (n = Math.imul(g, K)) + Math.imul(v, q) | 0,
                o = Math.imul(v, K),
                i = i + Math.imul(p, H) | 0,
                n = (n = n + Math.imul(p, V) | 0) + Math.imul(b, H) | 0,
                o = o + Math.imul(b, V) | 0;
                var ve = (f + (i = i + Math.imul(h, G) | 0) | 0) + ((8191 & (n = (n = n + Math.imul(h, W) | 0) + Math.imul(l, G) | 0)) << 13) | 0;
                f = ((o = o + Math.imul(l, W) | 0) + (n >>> 13) | 0) + (ve >>> 26) | 0,
                ve &= 67108863,
                i = Math.imul(w, q),
                n = (n = Math.imul(w, K)) + Math.imul(_, q) | 0,
                o = Math.imul(_, K),
                i = i + Math.imul(g, H) | 0,
                n = (n = n + Math.imul(g, V) | 0) + Math.imul(v, H) | 0,
                o = o + Math.imul(v, V) | 0,
                i = i + Math.imul(p, G) | 0,
                n = (n = n + Math.imul(p, W) | 0) + Math.imul(b, G) | 0,
                o = o + Math.imul(b, W) | 0;
                var ye = (f + (i = i + Math.imul(h, J) | 0) | 0) + ((8191 & (n = (n = n + Math.imul(h, X) | 0) + Math.imul(l, J) | 0)) << 13) | 0;
                f = ((o = o + Math.imul(l, X) | 0) + (n >>> 13) | 0) + (ye >>> 26) | 0,
                ye &= 67108863,
                i = Math.imul(M, q),
                n = (n = Math.imul(M, K)) + Math.imul(S, q) | 0,
                o = Math.imul(S, K),
                i = i + Math.imul(w, H) | 0,
                n = (n = n + Math.imul(w, V) | 0) + Math.imul(_, H) | 0,
                o = o + Math.imul(_, V) | 0,
                i = i + Math.imul(g, G) | 0,
                n = (n = n + Math.imul(g, W) | 0) + Math.imul(v, G) | 0,
                o = o + Math.imul(v, W) | 0,
                i = i + Math.imul(p, J) | 0,
                n = (n = n + Math.imul(p, X) | 0) + Math.imul(b, J) | 0,
                o = o + Math.imul(b, X) | 0;
                var we = (f + (i = i + Math.imul(h, $) | 0) | 0) + ((8191 & (n = (n = n + Math.imul(h, ee) | 0) + Math.imul(l, $) | 0)) << 13) | 0;
                f = ((o = o + Math.imul(l, ee) | 0) + (n >>> 13) | 0) + (we >>> 26) | 0,
                we &= 67108863,
                i = Math.imul(k, q),
                n = (n = Math.imul(k, K)) + Math.imul(x, q) | 0,
                o = Math.imul(x, K),
                i = i + Math.imul(M, H) | 0,
                n = (n = n + Math.imul(M, V) | 0) + Math.imul(S, H) | 0,
                o = o + Math.imul(S, V) | 0,
                i = i + Math.imul(w, G) | 0,
                n = (n = n + Math.imul(w, W) | 0) + Math.imul(_, G) | 0,
                o = o + Math.imul(_, W) | 0,
                i = i + Math.imul(g, J) | 0,
                n = (n = n + Math.imul(g, X) | 0) + Math.imul(v, J) | 0,
                o = o + Math.imul(v, X) | 0,
                i = i + Math.imul(p, $) | 0,
                n = (n = n + Math.imul(p, ee) | 0) + Math.imul(b, $) | 0,
                o = o + Math.imul(b, ee) | 0;
                var _e = (f + (i = i + Math.imul(h, re) | 0) | 0) + ((8191 & (n = (n = n + Math.imul(h, ie) | 0) + Math.imul(l, re) | 0)) << 13) | 0;
                f = ((o = o + Math.imul(l, ie) | 0) + (n >>> 13) | 0) + (_e >>> 26) | 0,
                _e &= 67108863,
                i = Math.imul(I, q),
                n = (n = Math.imul(I, K)) + Math.imul(T, q) | 0,
                o = Math.imul(T, K),
                i = i + Math.imul(k, H) | 0,
                n = (n = n + Math.imul(k, V) | 0) + Math.imul(x, H) | 0,
                o = o + Math.imul(x, V) | 0,
                i = i + Math.imul(M, G) | 0,
                n = (n = n + Math.imul(M, W) | 0) + Math.imul(S, G) | 0,
                o = o + Math.imul(S, W) | 0,
                i = i + Math.imul(w, J) | 0,
                n = (n = n + Math.imul(w, X) | 0) + Math.imul(_, J) | 0,
                o = o + Math.imul(_, X) | 0,
                i = i + Math.imul(g, $) | 0,
                n = (n = n + Math.imul(g, ee) | 0) + Math.imul(v, $) | 0,
                o = o + Math.imul(v, ee) | 0,
                i = i + Math.imul(p, re) | 0,
                n = (n = n + Math.imul(p, ie) | 0) + Math.imul(b, re) | 0,
                o = o + Math.imul(b, ie) | 0;
                var Ee = (f + (i = i + Math.imul(h, oe) | 0) | 0) + ((8191 & (n = (n = n + Math.imul(h, ae) | 0) + Math.imul(l, oe) | 0)) << 13) | 0;
                f = ((o = o + Math.imul(l, ae) | 0) + (n >>> 13) | 0) + (Ee >>> 26) | 0,
                Ee &= 67108863,
                i = Math.imul(N, q),
                n = (n = Math.imul(N, K)) + Math.imul(C, q) | 0,
                o = Math.imul(C, K),
                i = i + Math.imul(I, H) | 0,
                n = (n = n + Math.imul(I, V) | 0) + Math.imul(T, H) | 0,
                o = o + Math.imul(T, V) | 0,
                i = i + Math.imul(k, G) | 0,
                n = (n = n + Math.imul(k, W) | 0) + Math.imul(x, G) | 0,
                o = o + Math.imul(x, W) | 0,
                i = i + Math.imul(M, J) | 0,
                n = (n = n + Math.imul(M, X) | 0) + Math.imul(S, J) | 0,
                o = o + Math.imul(S, X) | 0,
                i = i + Math.imul(w, $) | 0,
                n = (n = n + Math.imul(w, ee) | 0) + Math.imul(_, $) | 0,
                o = o + Math.imul(_, ee) | 0,
                i = i + Math.imul(g, re) | 0,
                n = (n = n + Math.imul(g, ie) | 0) + Math.imul(v, re) | 0,
                o = o + Math.imul(v, ie) | 0,
                i = i + Math.imul(p, oe) | 0,
                n = (n = n + Math.imul(p, ae) | 0) + Math.imul(b, oe) | 0,
                o = o + Math.imul(b, ae) | 0;
                var Me = (f + (i = i + Math.imul(h, ue) | 0) | 0) + ((8191 & (n = (n = n + Math.imul(h, fe) | 0) + Math.imul(l, ue) | 0)) << 13) | 0;
                f = ((o = o + Math.imul(l, fe) | 0) + (n >>> 13) | 0) + (Me >>> 26) | 0,
                Me &= 67108863,
                i = Math.imul(O, q),
                n = (n = Math.imul(O, K)) + Math.imul(L, q) | 0,
                o = Math.imul(L, K),
                i = i + Math.imul(N, H) | 0,
                n = (n = n + Math.imul(N, V) | 0) + Math.imul(C, H) | 0,
                o = o + Math.imul(C, V) | 0,
                i = i + Math.imul(I, G) | 0,
                n = (n = n + Math.imul(I, W) | 0) + Math.imul(T, G) | 0,
                o = o + Math.imul(T, W) | 0,
                i = i + Math.imul(k, J) | 0,
                n = (n = n + Math.imul(k, X) | 0) + Math.imul(x, J) | 0,
                o = o + Math.imul(x, X) | 0,
                i = i + Math.imul(M, $) | 0,
                n = (n = n + Math.imul(M, ee) | 0) + Math.imul(S, $) | 0,
                o = o + Math.imul(S, ee) | 0,
                i = i + Math.imul(w, re) | 0,
                n = (n = n + Math.imul(w, ie) | 0) + Math.imul(_, re) | 0,
                o = o + Math.imul(_, ie) | 0,
                i = i + Math.imul(g, oe) | 0,
                n = (n = n + Math.imul(g, ae) | 0) + Math.imul(v, oe) | 0,
                o = o + Math.imul(v, ae) | 0,
                i = i + Math.imul(p, ue) | 0,
                n = (n = n + Math.imul(p, fe) | 0) + Math.imul(b, ue) | 0,
                o = o + Math.imul(b, fe) | 0;
                var Se = (f + (i = i + Math.imul(h, he) | 0) | 0) + ((8191 & (n = (n = n + Math.imul(h, le) | 0) + Math.imul(l, he) | 0)) << 13) | 0;
                f = ((o = o + Math.imul(l, le) | 0) + (n >>> 13) | 0) + (Se >>> 26) | 0,
                Se &= 67108863,
                i = Math.imul(D, q),
                n = (n = Math.imul(D, K)) + Math.imul(z, q) | 0,
                o = Math.imul(z, K),
                i = i + Math.imul(O, H) | 0,
                n = (n = n + Math.imul(O, V) | 0) + Math.imul(L, H) | 0,
                o = o + Math.imul(L, V) | 0,
                i = i + Math.imul(N, G) | 0,
                n = (n = n + Math.imul(N, W) | 0) + Math.imul(C, G) | 0,
                o = o + Math.imul(C, W) | 0,
                i = i + Math.imul(I, J) | 0,
                n = (n = n + Math.imul(I, X) | 0) + Math.imul(T, J) | 0,
                o = o + Math.imul(T, X) | 0,
                i = i + Math.imul(k, $) | 0,
                n = (n = n + Math.imul(k, ee) | 0) + Math.imul(x, $) | 0,
                o = o + Math.imul(x, ee) | 0,
                i = i + Math.imul(M, re) | 0,
                n = (n = n + Math.imul(M, ie) | 0) + Math.imul(S, re) | 0,
                o = o + Math.imul(S, ie) | 0,
                i = i + Math.imul(w, oe) | 0,
                n = (n = n + Math.imul(w, ae) | 0) + Math.imul(_, oe) | 0,
                o = o + Math.imul(_, ae) | 0,
                i = i + Math.imul(g, ue) | 0,
                n = (n = n + Math.imul(g, fe) | 0) + Math.imul(v, ue) | 0,
                o = o + Math.imul(v, fe) | 0,
                i = i + Math.imul(p, he) | 0,
                n = (n = n + Math.imul(p, le) | 0) + Math.imul(b, he) | 0,
                o = o + Math.imul(b, le) | 0;
                var Ae = (f + (i = i + Math.imul(h, pe) | 0) | 0) + ((8191 & (n = (n = n + Math.imul(h, be) | 0) + Math.imul(l, pe) | 0)) << 13) | 0;
                f = ((o = o + Math.imul(l, be) | 0) + (n >>> 13) | 0) + (Ae >>> 26) | 0,
                Ae &= 67108863,
                i = Math.imul(D, H),
                n = (n = Math.imul(D, V)) + Math.imul(z, H) | 0,
                o = Math.imul(z, V),
                i = i + Math.imul(O, G) | 0,
                n = (n = n + Math.imul(O, W) | 0) + Math.imul(L, G) | 0,
                o = o + Math.imul(L, W) | 0,
                i = i + Math.imul(N, J) | 0,
                n = (n = n + Math.imul(N, X) | 0) + Math.imul(C, J) | 0,
                o = o + Math.imul(C, X) | 0,
                i = i + Math.imul(I, $) | 0,
                n = (n = n + Math.imul(I, ee) | 0) + Math.imul(T, $) | 0,
                o = o + Math.imul(T, ee) | 0,
                i = i + Math.imul(k, re) | 0,
                n = (n = n + Math.imul(k, ie) | 0) + Math.imul(x, re) | 0,
                o = o + Math.imul(x, ie) | 0,
                i = i + Math.imul(M, oe) | 0,
                n = (n = n + Math.imul(M, ae) | 0) + Math.imul(S, oe) | 0,
                o = o + Math.imul(S, ae) | 0,
                i = i + Math.imul(w, ue) | 0,
                n = (n = n + Math.imul(w, fe) | 0) + Math.imul(_, ue) | 0,
                o = o + Math.imul(_, fe) | 0,
                i = i + Math.imul(g, he) | 0,
                n = (n = n + Math.imul(g, le) | 0) + Math.imul(v, he) | 0,
                o = o + Math.imul(v, le) | 0;
                var ke = (f + (i = i + Math.imul(p, pe) | 0) | 0) + ((8191 & (n = (n = n + Math.imul(p, be) | 0) + Math.imul(b, pe) | 0)) << 13) | 0;
                f = ((o = o + Math.imul(b, be) | 0) + (n >>> 13) | 0) + (ke >>> 26) | 0,
                ke &= 67108863,
                i = Math.imul(D, G),
                n = (n = Math.imul(D, W)) + Math.imul(z, G) | 0,
                o = Math.imul(z, W),
                i = i + Math.imul(O, J) | 0,
                n = (n = n + Math.imul(O, X) | 0) + Math.imul(L, J) | 0,
                o = o + Math.imul(L, X) | 0,
                i = i + Math.imul(N, $) | 0,
                n = (n = n + Math.imul(N, ee) | 0) + Math.imul(C, $) | 0,
                o = o + Math.imul(C, ee) | 0,
                i = i + Math.imul(I, re) | 0,
                n = (n = n + Math.imul(I, ie) | 0) + Math.imul(T, re) | 0,
                o = o + Math.imul(T, ie) | 0,
                i = i + Math.imul(k, oe) | 0,
                n = (n = n + Math.imul(k, ae) | 0) + Math.imul(x, oe) | 0,
                o = o + Math.imul(x, ae) | 0,
                i = i + Math.imul(M, ue) | 0,
                n = (n = n + Math.imul(M, fe) | 0) + Math.imul(S, ue) | 0,
                o = o + Math.imul(S, fe) | 0,
                i = i + Math.imul(w, he) | 0,
                n = (n = n + Math.imul(w, le) | 0) + Math.imul(_, he) | 0,
                o = o + Math.imul(_, le) | 0;
                var xe = (f + (i = i + Math.imul(g, pe) | 0) | 0) + ((8191 & (n = (n = n + Math.imul(g, be) | 0) + Math.imul(v, pe) | 0)) << 13) | 0;
                f = ((o = o + Math.imul(v, be) | 0) + (n >>> 13) | 0) + (xe >>> 26) | 0,
                xe &= 67108863,
                i = Math.imul(D, J),
                n = (n = Math.imul(D, X)) + Math.imul(z, J) | 0,
                o = Math.imul(z, X),
                i = i + Math.imul(O, $) | 0,
                n = (n = n + Math.imul(O, ee) | 0) + Math.imul(L, $) | 0,
                o = o + Math.imul(L, ee) | 0,
                i = i + Math.imul(N, re) | 0,
                n = (n = n + Math.imul(N, ie) | 0) + Math.imul(C, re) | 0,
                o = o + Math.imul(C, ie) | 0,
                i = i + Math.imul(I, oe) | 0,
                n = (n = n + Math.imul(I, ae) | 0) + Math.imul(T, oe) | 0,
                o = o + Math.imul(T, ae) | 0,
                i = i + Math.imul(k, ue) | 0,
                n = (n = n + Math.imul(k, fe) | 0) + Math.imul(x, ue) | 0,
                o = o + Math.imul(x, fe) | 0,
                i = i + Math.imul(M, he) | 0,
                n = (n = n + Math.imul(M, le) | 0) + Math.imul(S, he) | 0,
                o = o + Math.imul(S, le) | 0;
                var Re = (f + (i = i + Math.imul(w, pe) | 0) | 0) + ((8191 & (n = (n = n + Math.imul(w, be) | 0) + Math.imul(_, pe) | 0)) << 13) | 0;
                f = ((o = o + Math.imul(_, be) | 0) + (n >>> 13) | 0) + (Re >>> 26) | 0,
                Re &= 67108863,
                i = Math.imul(D, $),
                n = (n = Math.imul(D, ee)) + Math.imul(z, $) | 0,
                o = Math.imul(z, ee),
                i = i + Math.imul(O, re) | 0,
                n = (n = n + Math.imul(O, ie) | 0) + Math.imul(L, re) | 0,
                o = o + Math.imul(L, ie) | 0,
                i = i + Math.imul(N, oe) | 0,
                n = (n = n + Math.imul(N, ae) | 0) + Math.imul(C, oe) | 0,
                o = o + Math.imul(C, ae) | 0,
                i = i + Math.imul(I, ue) | 0,
                n = (n = n + Math.imul(I, fe) | 0) + Math.imul(T, ue) | 0,
                o = o + Math.imul(T, fe) | 0,
                i = i + Math.imul(k, he) | 0,
                n = (n = n + Math.imul(k, le) | 0) + Math.imul(x, he) | 0,
                o = o + Math.imul(x, le) | 0;
                var Ie = (f + (i = i + Math.imul(M, pe) | 0) | 0) + ((8191 & (n = (n = n + Math.imul(M, be) | 0) + Math.imul(S, pe) | 0)) << 13) | 0;
                f = ((o = o + Math.imul(S, be) | 0) + (n >>> 13) | 0) + (Ie >>> 26) | 0,
                Ie &= 67108863,
                i = Math.imul(D, re),
                n = (n = Math.imul(D, ie)) + Math.imul(z, re) | 0,
                o = Math.imul(z, ie),
                i = i + Math.imul(O, oe) | 0,
                n = (n = n + Math.imul(O, ae) | 0) + Math.imul(L, oe) | 0,
                o = o + Math.imul(L, ae) | 0,
                i = i + Math.imul(N, ue) | 0,
                n = (n = n + Math.imul(N, fe) | 0) + Math.imul(C, ue) | 0,
                o = o + Math.imul(C, fe) | 0,
                i = i + Math.imul(I, he) | 0,
                n = (n = n + Math.imul(I, le) | 0) + Math.imul(T, he) | 0,
                o = o + Math.imul(T, le) | 0;
                var Te = (f + (i = i + Math.imul(k, pe) | 0) | 0) + ((8191 & (n = (n = n + Math.imul(k, be) | 0) + Math.imul(x, pe) | 0)) << 13) | 0;
                f = ((o = o + Math.imul(x, be) | 0) + (n >>> 13) | 0) + (Te >>> 26) | 0,
                Te &= 67108863,
                i = Math.imul(D, oe),
                n = (n = Math.imul(D, ae)) + Math.imul(z, oe) | 0,
                o = Math.imul(z, ae),
                i = i + Math.imul(O, ue) | 0,
                n = (n = n + Math.imul(O, fe) | 0) + Math.imul(L, ue) | 0,
                o = o + Math.imul(L, fe) | 0,
                i = i + Math.imul(N, he) | 0,
                n = (n = n + Math.imul(N, le) | 0) + Math.imul(C, he) | 0,
                o = o + Math.imul(C, le) | 0;
                var Pe = (f + (i = i + Math.imul(I, pe) | 0) | 0) + ((8191 & (n = (n = n + Math.imul(I, be) | 0) + Math.imul(T, pe) | 0)) << 13) | 0;
                f = ((o = o + Math.imul(T, be) | 0) + (n >>> 13) | 0) + (Pe >>> 26) | 0,
                Pe &= 67108863,
                i = Math.imul(D, ue),
                n = (n = Math.imul(D, fe)) + Math.imul(z, ue) | 0,
                o = Math.imul(z, fe),
                i = i + Math.imul(O, he) | 0,
                n = (n = n + Math.imul(O, le) | 0) + Math.imul(L, he) | 0,
                o = o + Math.imul(L, le) | 0;
                var Ne = (f + (i = i + Math.imul(N, pe) | 0) | 0) + ((8191 & (n = (n = n + Math.imul(N, be) | 0) + Math.imul(C, pe) | 0)) << 13) | 0;
                f = ((o = o + Math.imul(C, be) | 0) + (n >>> 13) | 0) + (Ne >>> 26) | 0,
                Ne &= 67108863,
                i = Math.imul(D, he),
                n = (n = Math.imul(D, le)) + Math.imul(z, he) | 0,
                o = Math.imul(z, le);
                var Ce = (f + (i = i + Math.imul(O, pe) | 0) | 0) + ((8191 & (n = (n = n + Math.imul(O, be) | 0) + Math.imul(L, pe) | 0)) << 13) | 0;
                f = ((o = o + Math.imul(L, be) | 0) + (n >>> 13) | 0) + (Ce >>> 26) | 0,
                Ce &= 67108863;
                var Be = (f + (i = Math.imul(D, pe)) | 0) + ((8191 & (n = (n = Math.imul(D, be)) + Math.imul(z, pe) | 0)) << 13) | 0;
                return f = ((o = Math.imul(z, be)) + (n >>> 13) | 0) + (Be >>> 26) | 0,
                Be &= 67108863,
                u[0] = me,
                u[1] = ge,
                u[2] = ve,
                u[3] = ye,
                u[4] = we,
                u[5] = _e,
                u[6] = Ee,
                u[7] = Me,
                u[8] = Se,
                u[9] = Ae,
                u[10] = ke,
                u[11] = xe,
                u[12] = Re,
                u[13] = Ie,
                u[14] = Te,
                u[15] = Pe,
                u[16] = Ne,
                u[17] = Ce,
                u[18] = Be,
                0 !== f && (u[19] = f,
                r.length++),
                r
            };
            function g(e, t, r) {
                r.negative = t.negative ^ e.negative,
                r.length = e.length + t.length;
                for (var i = 0, n = 0, o = 0; o < r.length - 1; o++) {
                    var a = n;
                    n = 0;
                    for (var s = 67108863 & i, u = Math.min(o, t.length - 1), f = Math.max(0, o - e.length + 1); f <= u; f++) {
                        var c = o - f
                          , h = (0 | e.words[c]) * (0 | t.words[f])
                          , l = 67108863 & h;
                        s = 67108863 & (l = l + s | 0),
                        n += (a = (a = a + (h / 67108864 | 0) | 0) + (l >>> 26) | 0) >>> 26,
                        a &= 67108863
                    }
                    r.words[o] = s,
                    i = a,
                    a = n
                }
                return 0 !== i ? r.words[o] = i : r.length--,
                r._strip()
            }
            function v(e, t, r) {
                return g(e, t, r)
            }
            function y(e, t) {
                this.x = e,
                this.y = t
            }
            Math.imul || (m = b),
            o.prototype.mulTo = function(e, t) {
                var r = this.length + e.length;
                return 10 === this.length && 10 === e.length ? m(this, e, t) : r < 63 ? b(this, e, t) : r < 1024 ? g(this, e, t) : v(this, e, t)
            }
            ,
            y.prototype.makeRBT = function(e) {
                for (var t = new Array(e), r = o.prototype._countBits(e) - 1, i = 0; i < e; i++)
                    t[i] = this.revBin(i, r, e);
                return t
            }
            ,
            y.prototype.revBin = function(e, t, r) {
                if (0 === e || e === r - 1)
                    return e;
                for (var i = 0, n = 0; n < t; n++)
                    i |= (1 & e) << t - n - 1,
                    e >>= 1;
                return i
            }
            ,
            y.prototype.permute = function(e, t, r, i, n, o) {
                for (var a = 0; a < o; a++)
                    i[a] = t[e[a]],
                    n[a] = r[e[a]]
            }
            ,
            y.prototype.transform = function(e, t, r, i, n, o) {
                this.permute(o, e, t, r, i, n);
                for (var a = 1; a < n; a <<= 1)
                    for (var s = a << 1, u = Math.cos(2 * Math.PI / s), f = Math.sin(2 * Math.PI / s), c = 0; c < n; c += s)
                        for (var h = u, l = f, d = 0; d < a; d++) {
                            var p = r[c + d]
                              , b = i[c + d]
                              , m = r[c + d + a]
                              , g = i[c + d + a]
                              , v = h * m - l * g;
                            g = h * g + l * m,
                            m = v,
                            r[c + d] = p + m,
                            i[c + d] = b + g,
                            r[c + d + a] = p - m,
                            i[c + d + a] = b - g,
                            d !== s && (v = u * h - f * l,
                            l = u * l + f * h,
                            h = v)
                        }
            }
            ,
            y.prototype.guessLen13b = function(e, t) {
                var r = 1 | Math.max(t, e)
                  , i = 1 & r
                  , n = 0;
                for (r = r / 2 | 0; r; r >>>= 1)
                    n++;
                return 1 << n + 1 + i
            }
            ,
            y.prototype.conjugate = function(e, t, r) {
                if (!(r <= 1))
                    for (var i = 0; i < r / 2; i++) {
                        var n = e[i];
                        e[i] = e[r - i - 1],
                        e[r - i - 1] = n,
                        n = t[i],
                        t[i] = -t[r - i - 1],
                        t[r - i - 1] = -n
                    }
            }
            ,
            y.prototype.normalize13b = function(e, t) {
                for (var r = 0, i = 0; i < t / 2; i++) {
                    var n = 8192 * Math.round(e[2 * i + 1] / t) + Math.round(e[2 * i] / t) + r;
                    e[i] = 67108863 & n,
                    r = n < 67108864 ? 0 : n / 67108864 | 0
                }
                return e
            }
            ,
            y.prototype.convert13b = function(e, t, r, n) {
                for (var o = 0, a = 0; a < t; a++)
                    o += 0 | e[a],
                    r[2 * a] = 8191 & o,
                    o >>>= 13,
                    r[2 * a + 1] = 8191 & o,
                    o >>>= 13;
                for (a = 2 * t; a < n; ++a)
                    r[a] = 0;
                i(0 === o),
                i(0 == (-8192 & o))
            }
            ,
            y.prototype.stub = function(e) {
                for (var t = new Array(e), r = 0; r < e; r++)
                    t[r] = 0;
                return t
            }
            ,
            y.prototype.mulp = function(e, t, r) {
                var i = 2 * this.guessLen13b(e.length, t.length)
                  , n = this.makeRBT(i)
                  , o = this.stub(i)
                  , a = new Array(i)
                  , s = new Array(i)
                  , u = new Array(i)
                  , f = new Array(i)
                  , c = new Array(i)
                  , h = new Array(i)
                  , l = r.words;
                l.length = i,
                this.convert13b(e.words, e.length, a, i),
                this.convert13b(t.words, t.length, f, i),
                this.transform(a, o, s, u, i, n),
                this.transform(f, o, c, h, i, n);
                for (var d = 0; d < i; d++) {
                    var p = s[d] * c[d] - u[d] * h[d];
                    u[d] = s[d] * h[d] + u[d] * c[d],
                    s[d] = p
                }
                return this.conjugate(s, u, i),
                this.transform(s, u, l, o, i, n),
                this.conjugate(l, o, i),
                this.normalize13b(l, i),
                r.negative = e.negative ^ t.negative,
                r.length = e.length + t.length,
                r._strip()
            }
            ,
            o.prototype.mul = function(e) {
                var t = new o(null);
                return t.words = new Array(this.length + e.length),
                this.mulTo(e, t)
            }
            ,
            o.prototype.mulf = function(e) {
                var t = new o(null);
                return t.words = new Array(this.length + e.length),
                v(this, e, t)
            }
            ,
            o.prototype.imul = function(e) {
                return this.clone().mulTo(e, this)
            }
            ,
            o.prototype.imuln = function(e) {
                var t = e < 0;
                t && (e = -e),
                i("number" == typeof e),
                i(e < 67108864);
                for (var r = 0, n = 0; n < this.length; n++) {
                    var o = (0 | this.words[n]) * e
                      , a = (67108863 & o) + (67108863 & r);
                    r >>= 26,
                    r += o / 67108864 | 0,
                    r += a >>> 26,
                    this.words[n] = 67108863 & a
                }
                return 0 !== r && (this.words[n] = r,
                this.length++),
                t ? this.ineg() : this
            }
            ,
            o.prototype.muln = function(e) {
                return this.clone().imuln(e)
            }
            ,
            o.prototype.sqr = function() {
                return this.mul(this)
            }
            ,
            o.prototype.isqr = function() {
                return this.imul(this.clone())
            }
            ,
            o.prototype.pow = function(e) {
                var t = function(e) {
                    for (var t = new Array(e.bitLength()), r = 0; r < t.length; r++) {
                        var i = r / 26 | 0
                          , n = r % 26;
                        t[r] = e.words[i] >>> n & 1
                    }
                    return t
                }(e);
                if (0 === t.length)
                    return new o(1);
                for (var r = this, i = 0; i < t.length && 0 === t[i]; i++,
                r = r.sqr())
                    ;
                if (++i < t.length)
                    for (var n = r.sqr(); i < t.length; i++,
                    n = n.sqr())
                        0 !== t[i] && (r = r.mul(n));
                return r
            }
            ,
            o.prototype.iushln = function(e) {
                i("number" == typeof e && e >= 0);
                var t, r = e % 26, n = (e - r) / 26, o = 67108863 >>> 26 - r << 26 - r;
                if (0 !== r) {
                    var a = 0;
                    for (t = 0; t < this.length; t++) {
                        var s = this.words[t] & o
                          , u = (0 | this.words[t]) - s << r;
                        this.words[t] = u | a,
                        a = s >>> 26 - r
                    }
                    a && (this.words[t] = a,
                    this.length++)
                }
                if (0 !== n) {
                    for (t = this.length - 1; t >= 0; t--)
                        this.words[t + n] = this.words[t];
                    for (t = 0; t < n; t++)
                        this.words[t] = 0;
                    this.length += n
                }
                return this._strip()
            }
            ,
            o.prototype.ishln = function(e) {
                return i(0 === this.negative),
                this.iushln(e)
            }
            ,
            o.prototype.iushrn = function(e, t, r) {
                var n;
                i("number" == typeof e && e >= 0),
                n = t ? (t - t % 26) / 26 : 0;
                var o = e % 26
                  , a = Math.min((e - o) / 26, this.length)
                  , s = 67108863 ^ 67108863 >>> o << o
                  , u = r;
                if (n -= a,
                n = Math.max(0, n),
                u) {
                    for (var f = 0; f < a; f++)
                        u.words[f] = this.words[f];
                    u.length = a
                }
                if (0 === a)
                    ;
                else if (this.length > a)
                    for (this.length -= a,
                    f = 0; f < this.length; f++)
                        this.words[f] = this.words[f + a];
                else
                    this.words[0] = 0,
                    this.length = 1;
                var c = 0;
                for (f = this.length - 1; f >= 0 && (0 !== c || f >= n); f--) {
                    var h = 0 | this.words[f];
                    this.words[f] = c << 26 - o | h >>> o,
                    c = h & s
                }
                return u && 0 !== c && (u.words[u.length++] = c),
                0 === this.length && (this.words[0] = 0,
                this.length = 1),
                this._strip()
            }
            ,
            o.prototype.ishrn = function(e, t, r) {
                return i(0 === this.negative),
                this.iushrn(e, t, r)
            }
            ,
            o.prototype.shln = function(e) {
                return this.clone().ishln(e)
            }
            ,
            o.prototype.ushln = function(e) {
                return this.clone().iushln(e)
            }
            ,
            o.prototype.shrn = function(e) {
                return this.clone().ishrn(e)
            }
            ,
            o.prototype.ushrn = function(e) {
                return this.clone().iushrn(e)
            }
            ,
            o.prototype.testn = function(e) {
                i("number" == typeof e && e >= 0);
                var t = e % 26
                  , r = (e - t) / 26
                  , n = 1 << t;
                return !(this.length <= r) && !!(this.words[r] & n)
            }
            ,
            o.prototype.imaskn = function(e) {
                i("number" == typeof e && e >= 0);
                var t = e % 26
                  , r = (e - t) / 26;
                if (i(0 === this.negative, "imaskn works only with positive numbers"),
                this.length <= r)
                    return this;
                if (0 !== t && r++,
                this.length = Math.min(r, this.length),
                0 !== t) {
                    var n = 67108863 ^ 67108863 >>> t << t;
                    this.words[this.length - 1] &= n
                }
                return this._strip()
            }
            ,
            o.prototype.maskn = function(e) {
                return this.clone().imaskn(e)
            }
            ,
            o.prototype.iaddn = function(e) {
                return i("number" == typeof e),
                i(e < 67108864),
                e < 0 ? this.isubn(-e) : 0 !== this.negative ? 1 === this.length && (0 | this.words[0]) <= e ? (this.words[0] = e - (0 | this.words[0]),
                this.negative = 0,
                this) : (this.negative = 0,
                this.isubn(e),
                this.negative = 1,
                this) : this._iaddn(e)
            }
            ,
            o.prototype._iaddn = function(e) {
                this.words[0] += e;
                for (var t = 0; t < this.length && this.words[t] >= 67108864; t++)
                    this.words[t] -= 67108864,
                    t === this.length - 1 ? this.words[t + 1] = 1 : this.words[t + 1]++;
                return this.length = Math.max(this.length, t + 1),
                this
            }
            ,
            o.prototype.isubn = function(e) {
                if (i("number" == typeof e),
                i(e < 67108864),
                e < 0)
                    return this.iaddn(-e);
                if (0 !== this.negative)
                    return this.negative = 0,
                    this.iaddn(e),
                    this.negative = 1,
                    this;
                if (this.words[0] -= e,
                1 === this.length && this.words[0] < 0)
                    this.words[0] = -this.words[0],
                    this.negative = 1;
                else
                    for (var t = 0; t < this.length && this.words[t] < 0; t++)
                        this.words[t] += 67108864,
                        this.words[t + 1] -= 1;
                return this._strip()
            }
            ,
            o.prototype.addn = function(e) {
                return this.clone().iaddn(e)
            }
            ,
            o.prototype.subn = function(e) {
                return this.clone().isubn(e)
            }
            ,
            o.prototype.iabs = function() {
                return this.negative = 0,
                this
            }
            ,
            o.prototype.abs = function() {
                return this.clone().iabs()
            }
            ,
            o.prototype._ishlnsubmul = function(e, t, r) {
                var n, o, a = e.length + r;
                this._expand(a);
                var s = 0;
                for (n = 0; n < e.length; n++) {
                    o = (0 | this.words[n + r]) + s;
                    var u = (0 | e.words[n]) * t;
                    s = ((o -= 67108863 & u) >> 26) - (u / 67108864 | 0),
                    this.words[n + r] = 67108863 & o
                }
                for (; n < this.length - r; n++)
                    s = (o = (0 | this.words[n + r]) + s) >> 26,
                    this.words[n + r] = 67108863 & o;
                if (0 === s)
                    return this._strip();
                for (i(-1 === s),
                s = 0,
                n = 0; n < this.length; n++)
                    s = (o = -(0 | this.words[n]) + s) >> 26,
                    this.words[n] = 67108863 & o;
                return this.negative = 1,
                this._strip()
            }
            ,
            o.prototype._wordDiv = function(e, t) {
                var r = (this.length,
                e.length)
                  , i = this.clone()
                  , n = e
                  , a = 0 | n.words[n.length - 1];
                0 !== (r = 26 - this._countBits(a)) && (n = n.ushln(r),
                i.iushln(r),
                a = 0 | n.words[n.length - 1]);
                var s, u = i.length - n.length;
                if ("mod" !== t) {
                    (s = new o(null)).length = u + 1,
                    s.words = new Array(s.length);
                    for (var f = 0; f < s.length; f++)
                        s.words[f] = 0
                }
                var c = i.clone()._ishlnsubmul(n, 1, u);
                0 === c.negative && (i = c,
                s && (s.words[u] = 1));
                for (var h = u - 1; h >= 0; h--) {
                    var l = 67108864 * (0 | i.words[n.length + h]) + (0 | i.words[n.length + h - 1]);
                    for (l = Math.min(l / a | 0, 67108863),
                    i._ishlnsubmul(n, l, h); 0 !== i.negative; )
                        l--,
                        i.negative = 0,
                        i._ishlnsubmul(n, 1, h),
                        i.isZero() || (i.negative ^= 1);
                    s && (s.words[h] = l)
                }
                return s && s._strip(),
                i._strip(),
                "div" !== t && 0 !== r && i.iushrn(r),
                {
                    div: s || null,
                    mod: i
                }
            }
            ,
            o.prototype.divmod = function(e, t, r) {
                return i(!e.isZero()),
                this.isZero() ? {
                    div: new o(0),
                    mod: new o(0)
                } : 0 !== this.negative && 0 === e.negative ? (s = this.neg().divmod(e, t),
                "mod" !== t && (n = s.div.neg()),
                "div" !== t && (a = s.mod.neg(),
                r && 0 !== a.negative && a.iadd(e)),
                {
                    div: n,
                    mod: a
                }) : 0 === this.negative && 0 !== e.negative ? (s = this.divmod(e.neg(), t),
                "mod" !== t && (n = s.div.neg()),
                {
                    div: n,
                    mod: s.mod
                }) : 0 != (this.negative & e.negative) ? (s = this.neg().divmod(e.neg(), t),
                "div" !== t && (a = s.mod.neg(),
                r && 0 !== a.negative && a.isub(e)),
                {
                    div: s.div,
                    mod: a
                }) : e.length > this.length || this.cmp(e) < 0 ? {
                    div: new o(0),
                    mod: this
                } : 1 === e.length ? "div" === t ? {
                    div: this.divn(e.words[0]),
                    mod: null
                } : "mod" === t ? {
                    div: null,
                    mod: new o(this.modrn(e.words[0]))
                } : {
                    div: this.divn(e.words[0]),
                    mod: new o(this.modrn(e.words[0]))
                } : this._wordDiv(e, t);
                var n, a, s
            }
            ,
            o.prototype.div = function(e) {
                return this.divmod(e, "div", !1).div
            }
            ,
            o.prototype.mod = function(e) {
                return this.divmod(e, "mod", !1).mod
            }
            ,
            o.prototype.umod = function(e) {
                return this.divmod(e, "mod", !0).mod
            }
            ,
            o.prototype.divRound = function(e) {
                var t = this.divmod(e);
                if (t.mod.isZero())
                    return t.div;
                var r = 0 !== t.div.negative ? t.mod.isub(e) : t.mod
                  , i = e.ushrn(1)
                  , n = e.andln(1)
                  , o = r.cmp(i);
                return o < 0 || 1 === n && 0 === o ? t.div : 0 !== t.div.negative ? t.div.isubn(1) : t.div.iaddn(1)
            }
            ,
            o.prototype.modrn = function(e) {
                var t = e < 0;
                t && (e = -e),
                i(e <= 67108863);
                for (var r = (1 << 26) % e, n = 0, o = this.length - 1; o >= 0; o--)
                    n = (r * n + (0 | this.words[o])) % e;
                return t ? -n : n
            }
            ,
            o.prototype.modn = function(e) {
                return this.modrn(e)
            }
            ,
            o.prototype.idivn = function(e) {
                var t = e < 0;
                t && (e = -e),
                i(e <= 67108863);
                for (var r = 0, n = this.length - 1; n >= 0; n--) {
                    var o = (0 | this.words[n]) + 67108864 * r;
                    this.words[n] = o / e | 0,
                    r = o % e
                }
                return this._strip(),
                t ? this.ineg() : this
            }
            ,
            o.prototype.divn = function(e) {
                return this.clone().idivn(e)
            }
            ,
            o.prototype.egcd = function(e) {
                i(0 === e.negative),
                i(!e.isZero());
                var t = this
                  , r = e.clone();
                t = 0 !== t.negative ? t.umod(e) : t.clone();
                for (var n = new o(1), a = new o(0), s = new o(0), u = new o(1), f = 0; t.isEven() && r.isEven(); )
                    t.iushrn(1),
                    r.iushrn(1),
                    ++f;
                for (var c = r.clone(), h = t.clone(); !t.isZero(); ) {
                    for (var l = 0, d = 1; 0 == (t.words[0] & d) && l < 26; ++l,
                    d <<= 1)
                        ;
                    if (l > 0)
                        for (t.iushrn(l); l-- > 0; )
                            (n.isOdd() || a.isOdd()) && (n.iadd(c),
                            a.isub(h)),
                            n.iushrn(1),
                            a.iushrn(1);
                    for (var p = 0, b = 1; 0 == (r.words[0] & b) && p < 26; ++p,
                    b <<= 1)
                        ;
                    if (p > 0)
                        for (r.iushrn(p); p-- > 0; )
                            (s.isOdd() || u.isOdd()) && (s.iadd(c),
                            u.isub(h)),
                            s.iushrn(1),
                            u.iushrn(1);
                    t.cmp(r) >= 0 ? (t.isub(r),
                    n.isub(s),
                    a.isub(u)) : (r.isub(t),
                    s.isub(n),
                    u.isub(a))
                }
                return {
                    a: s,
                    b: u,
                    gcd: r.iushln(f)
                }
            }
            ,
            o.prototype._invmp = function(e) {
                i(0 === e.negative),
                i(!e.isZero());
                var t = this
                  , r = e.clone();
                t = 0 !== t.negative ? t.umod(e) : t.clone();
                for (var n, a = new o(1), s = new o(0), u = r.clone(); t.cmpn(1) > 0 && r.cmpn(1) > 0; ) {
                    for (var f = 0, c = 1; 0 == (t.words[0] & c) && f < 26; ++f,
                    c <<= 1)
                        ;
                    if (f > 0)
                        for (t.iushrn(f); f-- > 0; )
                            a.isOdd() && a.iadd(u),
                            a.iushrn(1);
                    for (var h = 0, l = 1; 0 == (r.words[0] & l) && h < 26; ++h,
                    l <<= 1)
                        ;
                    if (h > 0)
                        for (r.iushrn(h); h-- > 0; )
                            s.isOdd() && s.iadd(u),
                            s.iushrn(1);
                    t.cmp(r) >= 0 ? (t.isub(r),
                    a.isub(s)) : (r.isub(t),
                    s.isub(a))
                }
                return (n = 0 === t.cmpn(1) ? a : s).cmpn(0) < 0 && n.iadd(e),
                n
            }
            ,
            o.prototype.gcd = function(e) {
                if (this.isZero())
                    return e.abs();
                if (e.isZero())
                    return this.abs();
                var t = this.clone()
                  , r = e.clone();
                t.negative = 0,
                r.negative = 0;
                for (var i = 0; t.isEven() && r.isEven(); i++)
                    t.iushrn(1),
                    r.iushrn(1);
                for (; ; ) {
                    for (; t.isEven(); )
                        t.iushrn(1);
                    for (; r.isEven(); )
                        r.iushrn(1);
                    var n = t.cmp(r);
                    if (n < 0) {
                        var o = t;
                        t = r,
                        r = o
                    } else if (0 === n || 0 === r.cmpn(1))
                        break;
                    t.isub(r)
                }
                return r.iushln(i)
            }
            ,
            o.prototype.invm = function(e) {
                return this.egcd(e).a.umod(e)
            }
            ,
            o.prototype.isEven = function() {
                return 0 == (1 & this.words[0])
            }
            ,
            o.prototype.isOdd = function() {
                return 1 == (1 & this.words[0])
            }
            ,
            o.prototype.andln = function(e) {
                return this.words[0] & e
            }
            ,
            o.prototype.bincn = function(e) {
                i("number" == typeof e);
                var t = e % 26
                  , r = (e - t) / 26
                  , n = 1 << t;
                if (this.length <= r)
                    return this._expand(r + 1),
                    this.words[r] |= n,
                    this;
                for (var o = n, a = r; 0 !== o && a < this.length; a++) {
                    var s = 0 | this.words[a];
                    o = (s += o) >>> 26,
                    s &= 67108863,
                    this.words[a] = s
                }
                return 0 !== o && (this.words[a] = o,
                this.length++),
                this
            }
            ,
            o.prototype.isZero = function() {
                return 1 === this.length && 0 === this.words[0]
            }
            ,
            o.prototype.cmpn = function(e) {
                var t, r = e < 0;
                if (0 !== this.negative && !r)
                    return -1;
                if (0 === this.negative && r)
                    return 1;
                if (this._strip(),
                this.length > 1)
                    t = 1;
                else {
                    r && (e = -e),
                    i(e <= 67108863, "Number is too big");
                    var n = 0 | this.words[0];
                    t = n === e ? 0 : n < e ? -1 : 1
                }
                return 0 !== this.negative ? 0 | -t : t
            }
            ,
            o.prototype.cmp = function(e) {
                if (0 !== this.negative && 0 === e.negative)
                    return -1;
                if (0 === this.negative && 0 !== e.negative)
                    return 1;
                var t = this.ucmp(e);
                return 0 !== this.negative ? 0 | -t : t
            }
            ,
            o.prototype.ucmp = function(e) {
                if (this.length > e.length)
                    return 1;
                if (this.length < e.length)
                    return -1;
                for (var t = 0, r = this.length - 1; r >= 0; r--) {
                    var i = 0 | this.words[r]
                      , n = 0 | e.words[r];
                    if (i !== n) {
                        i < n ? t = -1 : i > n && (t = 1);
                        break
                    }
                }
                return t
            }
            ,
            o.prototype.gtn = function(e) {
                return 1 === this.cmpn(e)
            }
            ,
            o.prototype.gt = function(e) {
                return 1 === this.cmp(e)
            }
            ,
            o.prototype.gten = function(e) {
                return this.cmpn(e) >= 0
            }
            ,
            o.prototype.gte = function(e) {
                return this.cmp(e) >= 0
            }
            ,
            o.prototype.ltn = function(e) {
                return -1 === this.cmpn(e)
            }
            ,
            o.prototype.lt = function(e) {
                return -1 === this.cmp(e)
            }
            ,
            o.prototype.lten = function(e) {
                return this.cmpn(e) <= 0
            }
            ,
            o.prototype.lte = function(e) {
                return this.cmp(e) <= 0
            }
            ,
            o.prototype.eqn = function(e) {
                return 0 === this.cmpn(e)
            }
            ,
            o.prototype.eq = function(e) {
                return 0 === this.cmp(e)
            }
            ,
            o.red = function(e) {
                return new k(e)
            }
            ,
            o.prototype.toRed = function(e) {
                return i(!this.red, "Already a number in reduction context"),
                i(0 === this.negative, "red works only with positives"),
                e.convertTo(this)._forceRed(e)
            }
            ,
            o.prototype.fromRed = function() {
                return i(this.red, "fromRed works only with numbers in reduction context"),
                this.red.convertFrom(this)
            }
            ,
            o.prototype._forceRed = function(e) {
                return this.red = e,
                this
            }
            ,
            o.prototype.forceRed = function(e) {
                return i(!this.red, "Already a number in reduction context"),
                this._forceRed(e)
            }
            ,
            o.prototype.redAdd = function(e) {
                return i(this.red, "redAdd works only with red numbers"),
                this.red.add(this, e)
            }
            ,
            o.prototype.redIAdd = function(e) {
                return i(this.red, "redIAdd works only with red numbers"),
                this.red.iadd(this, e)
            }
            ,
            o.prototype.redSub = function(e) {
                return i(this.red, "redSub works only with red numbers"),
                this.red.sub(this, e)
            }
            ,
            o.prototype.redISub = function(e) {
                return i(this.red, "redISub works only with red numbers"),
                this.red.isub(this, e)
            }
            ,
            o.prototype.redShl = function(e) {
                return i(this.red, "redShl works only with red numbers"),
                this.red.shl(this, e)
            }
            ,
            o.prototype.redMul = function(e) {
                return i(this.red, "redMul works only with red numbers"),
                this.red._verify2(this, e),
                this.red.mul(this, e)
            }
            ,
            o.prototype.redIMul = function(e) {
                return i(this.red, "redMul works only with red numbers"),
                this.red._verify2(this, e),
                this.red.imul(this, e)
            }
            ,
            o.prototype.redSqr = function() {
                return i(this.red, "redSqr works only with red numbers"),
                this.red._verify1(this),
                this.red.sqr(this)
            }
            ,
            o.prototype.redISqr = function() {
                return i(this.red, "redISqr works only with red numbers"),
                this.red._verify1(this),
                this.red.isqr(this)
            }
            ,
            o.prototype.redSqrt = function() {
                return i(this.red, "redSqrt works only with red numbers"),
                this.red._verify1(this),
                this.red.sqrt(this)
            }
            ,
            o.prototype.redInvm = function() {
                return i(this.red, "redInvm works only with red numbers"),
                this.red._verify1(this),
                this.red.invm(this)
            }
            ,
            o.prototype.redNeg = function() {
                return i(this.red, "redNeg works only with red numbers"),
                this.red._verify1(this),
                this.red.neg(this)
            }
            ,
            o.prototype.redPow = function(e) {
                return i(this.red && !e.red, "redPow(normalNum)"),
                this.red._verify1(this),
                this.red.pow(this, e)
            }
            ;
            var w = {
                k256: null,
                p224: null,
                p192: null,
                p25519: null
            };
            function _(e, t) {
                this.name = e,
                this.p = new o(t,16),
                this.n = this.p.bitLength(),
                this.k = new o(1).iushln(this.n).isub(this.p),
                this.tmp = this._tmp()
            }
            function E() {
                _.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f")
            }
            function M() {
                _.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001")
            }
            function S() {
                _.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff")
            }
            function A() {
                _.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed")
            }
            function k(e) {
                if ("string" == typeof e) {
                    var t = o._prime(e);
                    this.m = t.p,
                    this.prime = t
                } else
                    i(e.gtn(1), "modulus must be greater than 1"),
                    this.m = e,
                    this.prime = null
            }
            function x(e) {
                k.call(this, e),
                this.shift = this.m.bitLength(),
                this.shift % 26 != 0 && (this.shift += 26 - this.shift % 26),
                this.r = new o(1).iushln(this.shift),
                this.r2 = this.imod(this.r.sqr()),
                this.rinv = this.r._invmp(this.m),
                this.minv = this.rinv.mul(this.r).isubn(1).div(this.m),
                this.minv = this.minv.umod(this.r),
                this.minv = this.r.sub(this.minv)
            }
            _.prototype._tmp = function() {
                var e = new o(null);
                return e.words = new Array(Math.ceil(this.n / 13)),
                e
            }
            ,
            _.prototype.ireduce = function(e) {
                var t, r = e;
                do {
                    this.split(r, this.tmp),
                    t = (r = (r = this.imulK(r)).iadd(this.tmp)).bitLength()
                } while (t > this.n);
                var i = t < this.n ? -1 : r.ucmp(this.p);
                return 0 === i ? (r.words[0] = 0,
                r.length = 1) : i > 0 ? r.isub(this.p) : void 0 !== r.strip ? r.strip() : r._strip(),
                r
            }
            ,
            _.prototype.split = function(e, t) {
                e.iushrn(this.n, 0, t)
            }
            ,
            _.prototype.imulK = function(e) {
                return e.imul(this.k)
            }
            ,
            n(E, _),
            E.prototype.split = function(e, t) {
                for (var r = Math.min(e.length, 9), i = 0; i < r; i++)
                    t.words[i] = e.words[i];
                if (t.length = r,
                e.length <= 9)
                    return e.words[0] = 0,
                    void (e.length = 1);
                var n = e.words[9];
                for (t.words[t.length++] = 4194303 & n,
                i = 10; i < e.length; i++) {
                    var o = 0 | e.words[i];
                    e.words[i - 10] = (4194303 & o) << 4 | n >>> 22,
                    n = o
                }
                n >>>= 22,
                e.words[i - 10] = n,
                0 === n && e.length > 10 ? e.length -= 10 : e.length -= 9
            }
            ,
            E.prototype.imulK = function(e) {
                e.words[e.length] = 0,
                e.words[e.length + 1] = 0,
                e.length += 2;
                for (var t = 0, r = 0; r < e.length; r++) {
                    var i = 0 | e.words[r];
                    t += 977 * i,
                    e.words[r] = 67108863 & t,
                    t = 64 * i + (t / 67108864 | 0)
                }
                return 0 === e.words[e.length - 1] && (e.length--,
                0 === e.words[e.length - 1] && e.length--),
                e
            }
            ,
            n(M, _),
            n(S, _),
            n(A, _),
            A.prototype.imulK = function(e) {
                for (var t = 0, r = 0; r < e.length; r++) {
                    var i = 19 * (0 | e.words[r]) + t
                      , n = 67108863 & i;
                    i >>>= 26,
                    e.words[r] = n,
                    t = i
                }
                return 0 !== t && (e.words[e.length++] = t),
                e
            }
            ,
            o._prime = function(e) {
                if (w[e])
                    return w[e];
                var t;
                if ("k256" === e)
                    t = new E;
                else if ("p224" === e)
                    t = new M;
                else if ("p192" === e)
                    t = new S;
                else {
                    if ("p25519" !== e)
                        throw new Error("Unknown prime " + e);
                    t = new A
                }
                return w[e] = t,
                t
            }
            ,
            k.prototype._verify1 = function(e) {
                i(0 === e.negative, "red works only with positives"),
                i(e.red, "red works only with red numbers")
            }
            ,
            k.prototype._verify2 = function(e, t) {
                i(0 == (e.negative | t.negative), "red works only with positives"),
                i(e.red && e.red === t.red, "red works only with red numbers")
            }
            ,
            k.prototype.imod = function(e) {
                return this.prime ? this.prime.ireduce(e)._forceRed(this) : (c(e, e.umod(this.m)._forceRed(this)),
                e)
            }
            ,
            k.prototype.neg = function(e) {
                return e.isZero() ? e.clone() : this.m.sub(e)._forceRed(this)
            }
            ,
            k.prototype.add = function(e, t) {
                this._verify2(e, t);
                var r = e.add(t);
                return r.cmp(this.m) >= 0 && r.isub(this.m),
                r._forceRed(this)
            }
            ,
            k.prototype.iadd = function(e, t) {
                this._verify2(e, t);
                var r = e.iadd(t);
                return r.cmp(this.m) >= 0 && r.isub(this.m),
                r
            }
            ,
            k.prototype.sub = function(e, t) {
                this._verify2(e, t);
                var r = e.sub(t);
                return r.cmpn(0) < 0 && r.iadd(this.m),
                r._forceRed(this)
            }
            ,
            k.prototype.isub = function(e, t) {
                this._verify2(e, t);
                var r = e.isub(t);
                return r.cmpn(0) < 0 && r.iadd(this.m),
                r
            }
            ,
            k.prototype.shl = function(e, t) {
                return this._verify1(e),
                this.imod(e.ushln(t))
            }
            ,
            k.prototype.imul = function(e, t) {
                return this._verify2(e, t),
                this.imod(e.imul(t))
            }
            ,
            k.prototype.mul = function(e, t) {
                return this._verify2(e, t),
                this.imod(e.mul(t))
            }
            ,
            k.prototype.isqr = function(e) {
                return this.imul(e, e.clone())
            }
            ,
            k.prototype.sqr = function(e) {
                return this.mul(e, e)
            }
            ,
            k.prototype.sqrt = function(e) {
                if (e.isZero())
                    return e.clone();
                var t = this.m.andln(3);
                if (i(t % 2 == 1),
                3 === t) {
                    var r = this.m.add(new o(1)).iushrn(2);
                    return this.pow(e, r)
                }
                for (var n = this.m.subn(1), a = 0; !n.isZero() && 0 === n.andln(1); )
                    a++,
                    n.iushrn(1);
                i(!n.isZero());
                var s = new o(1).toRed(this)
                  , u = s.redNeg()
                  , f = this.m.subn(1).iushrn(1)
                  , c = this.m.bitLength();
                for (c = new o(2 * c * c).toRed(this); 0 !== this.pow(c, f).cmp(u); )
                    c.redIAdd(u);
                for (var h = this.pow(c, n), l = this.pow(e, n.addn(1).iushrn(1)), d = this.pow(e, n), p = a; 0 !== d.cmp(s); ) {
                    for (var b = d, m = 0; 0 !== b.cmp(s); m++)
                        b = b.redSqr();
                    i(m < p);
                    var g = this.pow(h, new o(1).iushln(p - m - 1));
                    l = l.redMul(g),
                    h = g.redSqr(),
                    d = d.redMul(h),
                    p = m
                }
                return l
            }
            ,
            k.prototype.invm = function(e) {
                var t = e._invmp(this.m);
                return 0 !== t.negative ? (t.negative = 0,
                this.imod(t).redNeg()) : this.imod(t)
            }
            ,
            k.prototype.pow = function(e, t) {
                if (t.isZero())
                    return new o(1).toRed(this);
                if (0 === t.cmpn(1))
                    return e.clone();
                var r = new Array(16);
                r[0] = new o(1).toRed(this),
                r[1] = e;
                for (var i = 2; i < r.length; i++)
                    r[i] = this.mul(r[i - 1], e);
                var n = r[0]
                  , a = 0
                  , s = 0
                  , u = t.bitLength() % 26;
                for (0 === u && (u = 26),
                i = t.length - 1; i >= 0; i--) {
                    for (var f = t.words[i], c = u - 1; c >= 0; c--) {
                        var h = f >> c & 1;
                        n !== r[0] && (n = this.sqr(n)),
                        0 !== h || 0 !== a ? (a <<= 1,
                        a |= h,
                        (4 === ++s || 0 === i && 0 === c) && (n = this.mul(n, r[a]),
                        s = 0,
                        a = 0)) : s = 0
                    }
                    u = 26
                }
                return n
            }
            ,
            k.prototype.convertTo = function(e) {
                var t = e.umod(this.m);
                return t === e ? t.clone() : t
            }
            ,
            k.prototype.convertFrom = function(e) {
                var t = e.clone();
                return t.red = null,
                t
            }
            ,
            o.mont = function(e) {
                return new x(e)
            }
            ,
            n(x, k),
            x.prototype.convertTo = function(e) {
                return this.imod(e.ushln(this.shift))
            }
            ,
            x.prototype.convertFrom = function(e) {
                var t = this.imod(e.mul(this.rinv));
                return t.red = null,
                t
            }
            ,
            x.prototype.imul = function(e, t) {
                if (e.isZero() || t.isZero())
                    return e.words[0] = 0,
                    e.length = 1,
                    e;
                var r = e.imul(t)
                  , i = r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m)
                  , n = r.isub(i).iushrn(this.shift)
                  , o = n;
                return n.cmp(this.m) >= 0 ? o = n.isub(this.m) : n.cmpn(0) < 0 && (o = n.iadd(this.m)),
                o._forceRed(this)
            }
            ,
            x.prototype.mul = function(e, t) {
                if (e.isZero() || t.isZero())
                    return new o(0)._forceRed(this);
                var r = e.mul(t)
                  , i = r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m)
                  , n = r.isub(i).iushrn(this.shift)
                  , a = n;
                return n.cmp(this.m) >= 0 ? a = n.isub(this.m) : n.cmpn(0) < 0 && (a = n.iadd(this.m)),
                a._forceRed(this)
            }
            ,
            x.prototype.invm = function(e) {
                return this.imod(e._invmp(this.m).mul(this.r2))._forceRed(this)
            }
        }(e, this)
    }
    ).call(this, r(50)(e))
}
, function(e, t, r) {
    "use strict";
    const i = t;
    i.bignum = r(7),
    i.define = r(295).define,
    i.base = r(298),
    i.constants = r(299),
    i.decoders = r(162),
    i.encoders = r(160)
}
, function(e, t, r) {
    "use strict";
    const i = t;
    i.der = r(161),
    i.pem = r(296)
}
, function(e, t, r) {
    "use strict";
    const i = r(4)
      , n = r(91).Buffer
      , o = r(92)
      , a = r(94);
    function s(e) {
        this.enc = "der",
        this.name = e.name,
        this.entity = e,
        this.tree = new u,
        this.tree._init(e.body)
    }
    function u(e) {
        o.call(this, "der", e)
    }
    function f(e) {
        return e < 10 ? "0" + e : e
    }
    e.exports = s,
    s.prototype.encode = function(e, t) {
        return this.tree._encode(e, t).join()
    }
    ,
    i(u, o),
    u.prototype._encodeComposite = function(e, t, r, i) {
        const o = function(e, t, r, i) {
            let n;
            "seqof" === e ? e = "seq" : "setof" === e && (e = "set");
            if (a.tagByName.hasOwnProperty(e))
                n = a.tagByName[e];
            else {
                if ("number" != typeof e || (0 | e) !== e)
                    return i.error("Unknown tag: " + e);
                n = e
            }
            if (n >= 31)
                return i.error("Multi-octet tag encoding unsupported");
            t || (n |= 32);
            return n |= a.tagClassByName[r || "universal"] << 6,
            n
        }(e, t, r, this.reporter);
        if (i.length < 128) {
            const e = n.alloc(2);
            return e[0] = o,
            e[1] = i.length,
            this._createEncoderBuffer([e, i])
        }
        let s = 1;
        for (let e = i.length; e >= 256; e >>= 8)
            s++;
        const u = n.alloc(2 + s);
        u[0] = o,
        u[1] = 128 | s;
        for (let e = 1 + s, t = i.length; t > 0; e--,
        t >>= 8)
            u[e] = 255 & t;
        return this._createEncoderBuffer([u, i])
    }
    ,
    u.prototype._encodeStr = function(e, t) {
        if ("bitstr" === t)
            return this._createEncoderBuffer([0 | e.unused, e.data]);
        if ("bmpstr" === t) {
            const t = n.alloc(2 * e.length);
            for (let r = 0; r < e.length; r++)
                t.writeUInt16BE(e.charCodeAt(r), 2 * r);
            return this._createEncoderBuffer(t)
        }
        return "numstr" === t ? this._isNumstr(e) ? this._createEncoderBuffer(e) : this.reporter.error("Encoding of string type: numstr supports only digits and space") : "printstr" === t ? this._isPrintstr(e) ? this._createEncoderBuffer(e) : this.reporter.error("Encoding of string type: printstr supports only latin upper and lower case letters, digits, space, apostrophe, left and rigth parenthesis, plus sign, comma, hyphen, dot, slash, colon, equal sign, question mark") : /str$/.test(t) || "objDesc" === t ? this._createEncoderBuffer(e) : this.reporter.error("Encoding of string type: " + t + " unsupported")
    }
    ,
    u.prototype._encodeObjid = function(e, t, r) {
        if ("string" == typeof e) {
            if (!t)
                return this.reporter.error("string objid given, but no values map found");
            if (!t.hasOwnProperty(e))
                return this.reporter.error("objid not found in values map");
            e = t[e].split(/[\s.]+/g);
            for (let t = 0; t < e.length; t++)
                e[t] |= 0
        } else if (Array.isArray(e)) {
            e = e.slice();
            for (let t = 0; t < e.length; t++)
                e[t] |= 0
        }
        if (!Array.isArray(e))
            return this.reporter.error("objid() should be either array or string, got: " + JSON.stringify(e));
        if (!r) {
            if (e[1] >= 40)
                return this.reporter.error("Second objid identifier OOB");
            e.splice(0, 2, 40 * e[0] + e[1])
        }
        let i = 0;
        for (let t = 0; t < e.length; t++) {
            let r = e[t];
            for (i++; r >= 128; r >>= 7)
                i++
        }
        const o = n.alloc(i);
        let a = o.length - 1;
        for (let t = e.length - 1; t >= 0; t--) {
            let r = e[t];
            for (o[a--] = 127 & r; (r >>= 7) > 0; )
                o[a--] = 128 | 127 & r
        }
        return this._createEncoderBuffer(o)
    }
    ,
    u.prototype._encodeTime = function(e, t) {
        let r;
        const i = new Date(e);
        return "gentime" === t ? r = [f(i.getUTCFullYear()), f(i.getUTCMonth() + 1), f(i.getUTCDate()), f(i.getUTCHours()), f(i.getUTCMinutes()), f(i.getUTCSeconds()), "Z"].join("") : "utctime" === t ? r = [f(i.getUTCFullYear() % 100), f(i.getUTCMonth() + 1), f(i.getUTCDate()), f(i.getUTCHours()), f(i.getUTCMinutes()), f(i.getUTCSeconds()), "Z"].join("") : this.reporter.error("Encoding " + t + " time is not supported yet"),
        this._encodeStr(r, "octstr")
    }
    ,
    u.prototype._encodeNull = function() {
        return this._createEncoderBuffer("")
    }
    ,
    u.prototype._encodeInt = function(e, t) {
        if ("string" == typeof e) {
            if (!t)
                return this.reporter.error("String int or enum given, but no values map");
            if (!t.hasOwnProperty(e))
                return this.reporter.error("Values map doesn't contain: " + JSON.stringify(e));
            e = t[e]
        }
        if ("number" != typeof e && !n.isBuffer(e)) {
            const t = e.toArray();
            !e.sign && 128 & t[0] && t.unshift(0),
            e = n.from(t)
        }
        if (n.isBuffer(e)) {
            let t = e.length;
            0 === e.length && t++;
            const r = n.alloc(t);
            return e.copy(r),
            0 === e.length && (r[0] = 0),
            this._createEncoderBuffer(r)
        }
        if (e < 128)
            return this._createEncoderBuffer(e);
        if (e < 256)
            return this._createEncoderBuffer([0, e]);
        let r = 1;
        for (let t = e; t >= 256; t >>= 8)
            r++;
        const i = new Array(r);
        for (let t = i.length - 1; t >= 0; t--)
            i[t] = 255 & e,
            e >>= 8;
        return 128 & i[0] && i.unshift(0),
        this._createEncoderBuffer(n.from(i))
    }
    ,
    u.prototype._encodeBool = function(e) {
        return this._createEncoderBuffer(e ? 255 : 0)
    }
    ,
    u.prototype._use = function(e, t) {
        return "function" == typeof e && (e = e(t)),
        e._getEncoder("der").tree
    }
    ,
    u.prototype._skipDefault = function(e, t, r) {
        const i = this._baseState;
        let n;
        if (null === i.default)
            return !1;
        const o = e.join();
        if (void 0 === i.defaultBuffer && (i.defaultBuffer = this._encodeValue(i.default, t, r).join()),
        o.length !== i.defaultBuffer.length)
            return !1;
        for (n = 0; n < o.length; n++)
            if (o[n] !== i.defaultBuffer[n])
                return !1;
        return !0
    }
}
, function(e, t, r) {
    "use strict";
    const i = t;
    i.der = r(163),
    i.pem = r(297)
}
, function(e, t, r) {
    "use strict";
    const i = r(4)
      , n = r(7)
      , o = r(55).DecoderBuffer
      , a = r(92)
      , s = r(94);
    function u(e) {
        this.enc = "der",
        this.name = e.name,
        this.entity = e,
        this.tree = new f,
        this.tree._init(e.body)
    }
    function f(e) {
        a.call(this, "der", e)
    }
    function c(e, t) {
        let r = e.readUInt8(t);
        if (e.isError(r))
            return r;
        const i = s.tagClass[r >> 6]
          , n = 0 == (32 & r);
        if (31 == (31 & r)) {
            let i = r;
            for (r = 0; 128 == (128 & i); ) {
                if (i = e.readUInt8(t),
                e.isError(i))
                    return i;
                r <<= 7,
                r |= 127 & i
            }
        } else
            r &= 31;
        return {
            cls: i,
            primitive: n,
            tag: r,
            tagStr: s.tag[r]
        }
    }
    function h(e, t, r) {
        let i = e.readUInt8(r);
        if (e.isError(i))
            return i;
        if (!t && 128 === i)
            return null;
        if (0 == (128 & i))
            return i;
        const n = 127 & i;
        if (n > 4)
            return e.error("length octect is too long");
        i = 0;
        for (let t = 0; t < n; t++) {
            i <<= 8;
            const t = e.readUInt8(r);
            if (e.isError(t))
                return t;
            i |= t
        }
        return i
    }
    e.exports = u,
    u.prototype.decode = function(e, t) {
        return o.isDecoderBuffer(e) || (e = new o(e,t)),
        this.tree._decode(e, t)
    }
    ,
    i(f, a),
    f.prototype._peekTag = function(e, t, r) {
        if (e.isEmpty())
            return !1;
        const i = e.save()
          , n = c(e, 'Failed to peek tag: "' + t + '"');
        return e.isError(n) ? n : (e.restore(i),
        n.tag === t || n.tagStr === t || n.tagStr + "of" === t || r)
    }
    ,
    f.prototype._decodeTag = function(e, t, r) {
        const i = c(e, 'Failed to decode tag of "' + t + '"');
        if (e.isError(i))
            return i;
        let n = h(e, i.primitive, 'Failed to get length of "' + t + '"');
        if (e.isError(n))
            return n;
        if (!r && i.tag !== t && i.tagStr !== t && i.tagStr + "of" !== t)
            return e.error('Failed to match tag: "' + t + '"');
        if (i.primitive || null !== n)
            return e.skip(n, 'Failed to match body of: "' + t + '"');
        const o = e.save()
          , a = this._skipUntilEnd(e, 'Failed to skip indefinite length body: "' + this.tag + '"');
        return e.isError(a) ? a : (n = e.offset - o.offset,
        e.restore(o),
        e.skip(n, 'Failed to match body of: "' + t + '"'))
    }
    ,
    f.prototype._skipUntilEnd = function(e, t) {
        for (; ; ) {
            const r = c(e, t);
            if (e.isError(r))
                return r;
            const i = h(e, r.primitive, t);
            if (e.isError(i))
                return i;
            let n;
            if (n = r.primitive || null !== i ? e.skip(i) : this._skipUntilEnd(e, t),
            e.isError(n))
                return n;
            if ("end" === r.tagStr)
                break
        }
    }
    ,
    f.prototype._decodeList = function(e, t, r, i) {
        const n = [];
        for (; !e.isEmpty(); ) {
            const t = this._peekTag(e, "end");
            if (e.isError(t))
                return t;
            const o = r.decode(e, "der", i);
            if (e.isError(o) && t)
                break;
            n.push(o)
        }
        return n
    }
    ,
    f.prototype._decodeStr = function(e, t) {
        if ("bitstr" === t) {
            const t = e.readUInt8();
            return e.isError(t) ? t : {
                unused: t,
                data: e.raw()
            }
        }
        if ("bmpstr" === t) {
            const t = e.raw();
            if (t.length % 2 == 1)
                return e.error("Decoding of string type: bmpstr length mismatch");
            let r = "";
            for (let e = 0; e < t.length / 2; e++)
                r += String.fromCharCode(t.readUInt16BE(2 * e));
            return r
        }
        if ("numstr" === t) {
            const t = e.raw().toString("ascii");
            return this._isNumstr(t) ? t : e.error("Decoding of string type: numstr unsupported characters")
        }
        if ("octstr" === t)
            return e.raw();
        if ("objDesc" === t)
            return e.raw();
        if ("printstr" === t) {
            const t = e.raw().toString("ascii");
            return this._isPrintstr(t) ? t : e.error("Decoding of string type: printstr unsupported characters")
        }
        return /str$/.test(t) ? e.raw().toString() : e.error("Decoding of string type: " + t + " unsupported")
    }
    ,
    f.prototype._decodeObjid = function(e, t, r) {
        let i;
        const n = [];
        let o = 0
          , a = 0;
        for (; !e.isEmpty(); )
            a = e.readUInt8(),
            o <<= 7,
            o |= 127 & a,
            0 == (128 & a) && (n.push(o),
            o = 0);
        128 & a && n.push(o);
        const s = n[0] / 40 | 0
          , u = n[0] % 40;
        if (i = r ? n : [s, u].concat(n.slice(1)),
        t) {
            let e = t[i.join(" ")];
            void 0 === e && (e = t[i.join(".")]),
            void 0 !== e && (i = e)
        }
        return i
    }
    ,
    f.prototype._decodeTime = function(e, t) {
        const r = e.raw().toString();
        let i, n, o, a, s, u;
        if ("gentime" === t)
            i = 0 | r.slice(0, 4),
            n = 0 | r.slice(4, 6),
            o = 0 | r.slice(6, 8),
            a = 0 | r.slice(8, 10),
            s = 0 | r.slice(10, 12),
            u = 0 | r.slice(12, 14);
        else {
            if ("utctime" !== t)
                return e.error("Decoding " + t + " time is not supported yet");
            i = 0 | r.slice(0, 2),
            n = 0 | r.slice(2, 4),
            o = 0 | r.slice(4, 6),
            a = 0 | r.slice(6, 8),
            s = 0 | r.slice(8, 10),
            u = 0 | r.slice(10, 12),
            i = i < 70 ? 2e3 + i : 1900 + i
        }
        return Date.UTC(i, n - 1, o, a, s, u, 0)
    }
    ,
    f.prototype._decodeNull = function() {
        return null
    }
    ,
    f.prototype._decodeBool = function(e) {
        const t = e.readUInt8();
        return e.isError(t) ? t : 0 !== t
    }
    ,
    f.prototype._decodeInt = function(e, t) {
        const r = e.raw();
        let i = new n(r);
        return t && (i = t[i.toString(10)] || i),
        i
    }
    ,
    f.prototype._use = function(e, t) {
        return "function" == typeof e && (e = e(t)),
        e._getDecoder("der").tree
    }
}
, function(e) {
    e.exports = JSON.parse('{"1.3.132.0.10":"secp256k1","1.3.132.0.33":"p224","1.2.840.10045.3.1.1":"p192","1.2.840.10045.3.1.7":"p256","1.3.132.0.34":"p384","1.3.132.0.35":"p521"}')
}
, function(e, t, r) {
    var i = r(29)
      , n = r(5).Buffer;
    function o(e) {
        var t = n.allocUnsafe(4);
        return t.writeUInt32BE(e, 0),
        t
    }
    e.exports = function(e, t) {
        for (var r, a = n.alloc(0), s = 0; a.length < t; )
            r = o(s++),
            a = n.concat([a, i("sha1").update(e).update(r).digest()]);
        return a.slice(0, t)
    }
}
, function(e, t) {
    e.exports = function(e, t) {
        for (var r = e.length, i = -1; ++i < r; )
            e[i] ^= t[i];
        return e
    }
}
, function(e, t, r) {
    var i = r(7)
      , n = r(5).Buffer;
    e.exports = function(e, t) {
        return n.from(e.toRed(i.mont(t.modulus)).redPow(new i(t.publicExponent)).fromRed().toArray())
    }
}
, function(e) {
    e.exports = JSON.parse('{"COMPRESSED_TYPE_INVALID":"compressed should be a boolean","EC_PRIVATE_KEY_TYPE_INVALID":"private key should be a Buffer","EC_PRIVATE_KEY_LENGTH_INVALID":"private key length is invalid","EC_PRIVATE_KEY_RANGE_INVALID":"private key range is invalid","EC_PRIVATE_KEY_TWEAK_ADD_FAIL":"tweak out of range or resulting private key is invalid","EC_PRIVATE_KEY_TWEAK_MUL_FAIL":"tweak out of range","EC_PRIVATE_KEY_EXPORT_DER_FAIL":"couldn\'t export to DER format","EC_PRIVATE_KEY_IMPORT_DER_FAIL":"couldn\'t import from DER format","EC_PUBLIC_KEYS_TYPE_INVALID":"public keys should be an Array","EC_PUBLIC_KEYS_LENGTH_INVALID":"public keys Array should have at least 1 element","EC_PUBLIC_KEY_TYPE_INVALID":"public key should be a Buffer","EC_PUBLIC_KEY_LENGTH_INVALID":"public key length is invalid","EC_PUBLIC_KEY_PARSE_FAIL":"the public key could not be parsed or is invalid","EC_PUBLIC_KEY_CREATE_FAIL":"private was invalid, try again","EC_PUBLIC_KEY_TWEAK_ADD_FAIL":"tweak out of range or resulting public key is invalid","EC_PUBLIC_KEY_TWEAK_MUL_FAIL":"tweak out of range","EC_PUBLIC_KEY_COMBINE_FAIL":"the sum of the public keys is not valid","ECDH_FAIL":"scalar was invalid (zero or overflow)","ECDSA_SIGNATURE_TYPE_INVALID":"signature should be a Buffer","ECDSA_SIGNATURE_LENGTH_INVALID":"signature length is invalid","ECDSA_SIGNATURE_PARSE_FAIL":"couldn\'t parse signature","ECDSA_SIGNATURE_PARSE_DER_FAIL":"couldn\'t parse DER signature","ECDSA_SIGNATURE_SERIALIZE_DER_FAIL":"couldn\'t serialize signature to DER format","ECDSA_SIGN_FAIL":"nonce generation function failed or private key is invalid","ECDSA_RECOVER_FAIL":"couldn\'t recover public key from signature","MSG32_TYPE_INVALID":"message should be a Buffer","MSG32_LENGTH_INVALID":"message length is invalid","OPTIONS_TYPE_INVALID":"options should be an Object","OPTIONS_DATA_TYPE_INVALID":"options.data should be a Buffer","OPTIONS_DATA_LENGTH_INVALID":"options.data length is invalid","OPTIONS_NONCEFN_TYPE_INVALID":"options.noncefn should be a Function","RECOVERY_ID_TYPE_INVALID":"recovery should be a Number","RECOVERY_ID_VALUE_INVALID":"recovery should have value between -1 and 4","TWEAK_TYPE_INVALID":"tweak should be a Buffer","TWEAK_LENGTH_INVALID":"tweak length is invalid"}')
}
, function(e, t, r) {
    (function(i, n) {
        var o;
        /**
 * [js-sha3]{@link https://github.com/emn178/js-sha3}
 *
 * @version 0.8.0
 * @author Chen, Yi-Cyuan [emn178@gmail.com]
 * @copyright Chen, Yi-Cyuan 2015-2018
 * @license MIT
 */
        !function() {
            "use strict";
            var a = "input is invalid type"
              , s = "object" == typeof window
              , u = s ? window : {};
            u.JS_SHA3_NO_WINDOW && (s = !1);
            var f = !s && "object" == typeof self;
            !u.JS_SHA3_NO_NODE_JS && "object" == typeof i && i.versions && i.versions.node ? u = n : f && (u = self);
            var c = !u.JS_SHA3_NO_COMMON_JS && "object" == typeof e && e.exports
              , h = r(327)
              , l = !u.JS_SHA3_NO_ARRAY_BUFFER && "undefined" != typeof ArrayBuffer
              , d = "0123456789abcdef".split("")
              , p = [4, 1024, 262144, 67108864]
              , b = [0, 8, 16, 24]
              , m = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648]
              , g = [224, 256, 384, 512]
              , v = [128, 256]
              , y = ["hex", "buffer", "arrayBuffer", "array", "digest"]
              , w = {
                128: 168,
                256: 136
            };
            !u.JS_SHA3_NO_NODE_JS && Array.isArray || (Array.isArray = function(e) {
                return "[object Array]" === Object.prototype.toString.call(e)
            }
            ),
            !l || !u.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW && ArrayBuffer.isView || (ArrayBuffer.isView = function(e) {
                return "object" == typeof e && e.buffer && e.buffer.constructor === ArrayBuffer
            }
            );
            for (var _ = function(e, t, r) {
                return function(i) {
                    return new L(e,t,e).update(i)[r]()
                }
            }, E = function(e, t, r) {
                return function(i, n) {
                    return new L(e,t,n).update(i)[r]()
                }
            }, M = function(e, t, r) {
                return function(t, i, n, o) {
                    return R["cshake" + e].update(t, i, n, o)[r]()
                }
            }, S = function(e, t, r) {
                return function(t, i, n, o) {
                    return R["kmac" + e].update(t, i, n, o)[r]()
                }
            }, A = function(e, t, r, i) {
                for (var n = 0; n < y.length; ++n) {
                    var o = y[n];
                    e[o] = t(r, i, o)
                }
                return e
            }, k = function(e, t) {
                var r = _(e, t, "hex");
                return r.create = function() {
                    return new L(e,t,e)
                }
                ,
                r.update = function(e) {
                    return r.create().update(e)
                }
                ,
                A(r, _, e, t)
            }, x = [{
                name: "keccak",
                padding: [1, 256, 65536, 16777216],
                bits: g,
                createMethod: k
            }, {
                name: "sha3",
                padding: [6, 1536, 393216, 100663296],
                bits: g,
                createMethod: k
            }, {
                name: "shake",
                padding: [31, 7936, 2031616, 520093696],
                bits: v,
                createMethod: function(e, t) {
                    var r = E(e, t, "hex");
                    return r.create = function(r) {
                        return new L(e,t,r)
                    }
                    ,
                    r.update = function(e, t) {
                        return r.create(t).update(e)
                    }
                    ,
                    A(r, E, e, t)
                }
            }, {
                name: "cshake",
                padding: p,
                bits: v,
                createMethod: function(e, t) {
                    var r = w[e]
                      , i = M(e, 0, "hex");
                    return i.create = function(i, n, o) {
                        return n || o ? new L(e,t,i).bytepad([n, o], r) : R["shake" + e].create(i)
                    }
                    ,
                    i.update = function(e, t, r, n) {
                        return i.create(t, r, n).update(e)
                    }
                    ,
                    A(i, M, e, t)
                }
            }, {
                name: "kmac",
                padding: p,
                bits: v,
                createMethod: function(e, t) {
                    var r = w[e]
                      , i = S(e, 0, "hex");
                    return i.create = function(i, n, o) {
                        return new j(e,t,n).bytepad(["KMAC", o], r).bytepad([i], r)
                    }
                    ,
                    i.update = function(e, t, r, n) {
                        return i.create(e, r, n).update(t)
                    }
                    ,
                    A(i, S, e, t)
                }
            }], R = {}, I = [], T = 0; T < x.length; ++T)
                for (var P = x[T], N = P.bits, C = 0; C < N.length; ++C) {
                    var B = P.name + "_" + N[C];
                    if (I.push(B),
                    R[B] = P.createMethod(N[C], P.padding),
                    "sha3" !== P.name) {
                        var O = P.name + N[C];
                        I.push(O),
                        R[O] = R[B]
                    }
                }
            function L(e, t, r) {
                this.blocks = [],
                this.s = [],
                this.padding = t,
                this.outputBits = r,
                this.reset = !0,
                this.finalized = !1,
                this.block = 0,
                this.start = 0,
                this.blockCount = 1600 - (e << 1) >> 5,
                this.byteCount = this.blockCount << 2,
                this.outputBlocks = r >> 5,
                this.extraBytes = (31 & r) >> 3;
                for (var i = 0; i < 50; ++i)
                    this.s[i] = 0
            }
            function j(e, t, r) {
                L.call(this, e, t, r)
            }
            L.prototype.update = function(e) {
                if (this.finalized)
                    throw new Error("finalize already called");
                var t, r = typeof e;
                if ("string" !== r) {
                    if ("object" !== r)
                        throw new Error(a);
                    if (null === e)
                        throw new Error(a);
                    if (l && e.constructor === ArrayBuffer)
                        e = new Uint8Array(e);
                    else if (!(Array.isArray(e) || l && ArrayBuffer.isView(e)))
                        throw new Error(a);
                    t = !0
                }
                for (var i, n, o = this.blocks, s = this.byteCount, u = e.length, f = this.blockCount, c = 0, h = this.s; c < u; ) {
                    if (this.reset)
                        for (this.reset = !1,
                        o[0] = this.block,
                        i = 1; i < f + 1; ++i)
                            o[i] = 0;
                    if (t)
                        for (i = this.start; c < u && i < s; ++c)
                            o[i >> 2] |= e[c] << b[3 & i++];
                    else
                        for (i = this.start; c < u && i < s; ++c)
                            (n = e.charCodeAt(c)) < 128 ? o[i >> 2] |= n << b[3 & i++] : n < 2048 ? (o[i >> 2] |= (192 | n >> 6) << b[3 & i++],
                            o[i >> 2] |= (128 | 63 & n) << b[3 & i++]) : n < 55296 || n >= 57344 ? (o[i >> 2] |= (224 | n >> 12) << b[3 & i++],
                            o[i >> 2] |= (128 | n >> 6 & 63) << b[3 & i++],
                            o[i >> 2] |= (128 | 63 & n) << b[3 & i++]) : (n = 65536 + ((1023 & n) << 10 | 1023 & e.charCodeAt(++c)),
                            o[i >> 2] |= (240 | n >> 18) << b[3 & i++],
                            o[i >> 2] |= (128 | n >> 12 & 63) << b[3 & i++],
                            o[i >> 2] |= (128 | n >> 6 & 63) << b[3 & i++],
                            o[i >> 2] |= (128 | 63 & n) << b[3 & i++]);
                    if (this.lastByteIndex = i,
                    i >= s) {
                        for (this.start = i - s,
                        this.block = o[f],
                        i = 0; i < f; ++i)
                            h[i] ^= o[i];
                        D(h),
                        this.reset = !0
                    } else
                        this.start = i
                }
                return this
            }
            ,
            L.prototype.encode = function(e, t) {
                var r = 255 & e
                  , i = 1
                  , n = [r];
                for (r = 255 & (e >>= 8); r > 0; )
                    n.unshift(r),
                    r = 255 & (e >>= 8),
                    ++i;
                return t ? n.push(i) : n.unshift(i),
                this.update(n),
                n.length
            }
            ,
            L.prototype.encodeString = function(e) {
                var t, r = typeof e;
                if ("string" !== r) {
                    if ("object" !== r)
                        throw new Error(a);
                    if (null === e)
                        throw new Error(a);
                    if (l && e.constructor === ArrayBuffer)
                        e = new Uint8Array(e);
                    else if (!(Array.isArray(e) || l && ArrayBuffer.isView(e)))
                        throw new Error(a);
                    t = !0
                }
                var i = 0
                  , n = e.length;
                if (t)
                    i = n;
                else
                    for (var o = 0; o < e.length; ++o) {
                        var s = e.charCodeAt(o);
                        s < 128 ? i += 1 : s < 2048 ? i += 2 : s < 55296 || s >= 57344 ? i += 3 : (s = 65536 + ((1023 & s) << 10 | 1023 & e.charCodeAt(++o)),
                        i += 4)
                    }
                return i += this.encode(8 * i),
                this.update(e),
                i
            }
            ,
            L.prototype.bytepad = function(e, t) {
                for (var r = this.encode(t), i = 0; i < e.length; ++i)
                    r += this.encodeString(e[i]);
                var n = t - r % t
                  , o = [];
                return o.length = n,
                this.update(o),
                this
            }
            ,
            L.prototype.finalize = function() {
                if (!this.finalized) {
                    this.finalized = !0;
                    var e = this.blocks
                      , t = this.lastByteIndex
                      , r = this.blockCount
                      , i = this.s;
                    if (e[t >> 2] |= this.padding[3 & t],
                    this.lastByteIndex === this.byteCount)
                        for (e[0] = e[r],
                        t = 1; t < r + 1; ++t)
                            e[t] = 0;
                    for (e[r - 1] |= 2147483648,
                    t = 0; t < r; ++t)
                        i[t] ^= e[t];
                    D(i)
                }
            }
            ,
            L.prototype.toString = L.prototype.hex = function() {
                this.finalize();
                for (var e, t = this.blockCount, r = this.s, i = this.outputBlocks, n = this.extraBytes, o = 0, a = 0, s = ""; a < i; ) {
                    for (o = 0; o < t && a < i; ++o,
                    ++a)
                        e = r[o],
                        s += d[e >> 4 & 15] + d[15 & e] + d[e >> 12 & 15] + d[e >> 8 & 15] + d[e >> 20 & 15] + d[e >> 16 & 15] + d[e >> 28 & 15] + d[e >> 24 & 15];
                    a % t == 0 && (D(r),
                    o = 0)
                }
                return n && (e = r[o],
                s += d[e >> 4 & 15] + d[15 & e],
                n > 1 && (s += d[e >> 12 & 15] + d[e >> 8 & 15]),
                n > 2 && (s += d[e >> 20 & 15] + d[e >> 16 & 15])),
                s
            }
            ,
            L.prototype.arrayBuffer = function() {
                this.finalize();
                var e, t = this.blockCount, r = this.s, i = this.outputBlocks, n = this.extraBytes, o = 0, a = 0, s = this.outputBits >> 3;
                e = n ? new ArrayBuffer(i + 1 << 2) : new ArrayBuffer(s);
                for (var u = new Uint32Array(e); a < i; ) {
                    for (o = 0; o < t && a < i; ++o,
                    ++a)
                        u[a] = r[o];
                    a % t == 0 && D(r)
                }
                return n && (u[o] = r[o],
                e = e.slice(0, s)),
                e
            }
            ,
            L.prototype.buffer = L.prototype.arrayBuffer,
            L.prototype.digest = L.prototype.array = function() {
                this.finalize();
                for (var e, t, r = this.blockCount, i = this.s, n = this.outputBlocks, o = this.extraBytes, a = 0, s = 0, u = []; s < n; ) {
                    for (a = 0; a < r && s < n; ++a,
                    ++s)
                        e = s << 2,
                        t = i[a],
                        u[e] = 255 & t,
                        u[e + 1] = t >> 8 & 255,
                        u[e + 2] = t >> 16 & 255,
                        u[e + 3] = t >> 24 & 255;
                    s % r == 0 && D(i)
                }
                return o && (e = s << 2,
                t = i[a],
                u[e] = 255 & t,
                o > 1 && (u[e + 1] = t >> 8 & 255),
                o > 2 && (u[e + 2] = t >> 16 & 255)),
                u
            }
            ,
            j.prototype = new L,
            j.prototype.finalize = function() {
                return this.encode(this.outputBits, !0),
                L.prototype.finalize.call(this)
            }
            ;
            var D = function(e) {
                var t, r, i, n, o, a, s, u, f, c, h, l, d, p, b, g, v, y, w, _, E, M, S, A, k, x, R, I, T, P, N, C, B, O, L, j, D, z, U, q, K, F, H, V, Y, G, W, Z, J, X, Q, $, ee, te, re, ie, ne, oe, ae, se, ue, fe, ce;
                for (i = 0; i < 48; i += 2)
                    n = e[0] ^ e[10] ^ e[20] ^ e[30] ^ e[40],
                    o = e[1] ^ e[11] ^ e[21] ^ e[31] ^ e[41],
                    a = e[2] ^ e[12] ^ e[22] ^ e[32] ^ e[42],
                    s = e[3] ^ e[13] ^ e[23] ^ e[33] ^ e[43],
                    u = e[4] ^ e[14] ^ e[24] ^ e[34] ^ e[44],
                    f = e[5] ^ e[15] ^ e[25] ^ e[35] ^ e[45],
                    c = e[6] ^ e[16] ^ e[26] ^ e[36] ^ e[46],
                    h = e[7] ^ e[17] ^ e[27] ^ e[37] ^ e[47],
                    t = (l = e[8] ^ e[18] ^ e[28] ^ e[38] ^ e[48]) ^ (a << 1 | s >>> 31),
                    r = (d = e[9] ^ e[19] ^ e[29] ^ e[39] ^ e[49]) ^ (s << 1 | a >>> 31),
                    e[0] ^= t,
                    e[1] ^= r,
                    e[10] ^= t,
                    e[11] ^= r,
                    e[20] ^= t,
                    e[21] ^= r,
                    e[30] ^= t,
                    e[31] ^= r,
                    e[40] ^= t,
                    e[41] ^= r,
                    t = n ^ (u << 1 | f >>> 31),
                    r = o ^ (f << 1 | u >>> 31),
                    e[2] ^= t,
                    e[3] ^= r,
                    e[12] ^= t,
                    e[13] ^= r,
                    e[22] ^= t,
                    e[23] ^= r,
                    e[32] ^= t,
                    e[33] ^= r,
                    e[42] ^= t,
                    e[43] ^= r,
                    t = a ^ (c << 1 | h >>> 31),
                    r = s ^ (h << 1 | c >>> 31),
                    e[4] ^= t,
                    e[5] ^= r,
                    e[14] ^= t,
                    e[15] ^= r,
                    e[24] ^= t,
                    e[25] ^= r,
                    e[34] ^= t,
                    e[35] ^= r,
                    e[44] ^= t,
                    e[45] ^= r,
                    t = u ^ (l << 1 | d >>> 31),
                    r = f ^ (d << 1 | l >>> 31),
                    e[6] ^= t,
                    e[7] ^= r,
                    e[16] ^= t,
                    e[17] ^= r,
                    e[26] ^= t,
                    e[27] ^= r,
                    e[36] ^= t,
                    e[37] ^= r,
                    e[46] ^= t,
                    e[47] ^= r,
                    t = c ^ (n << 1 | o >>> 31),
                    r = h ^ (o << 1 | n >>> 31),
                    e[8] ^= t,
                    e[9] ^= r,
                    e[18] ^= t,
                    e[19] ^= r,
                    e[28] ^= t,
                    e[29] ^= r,
                    e[38] ^= t,
                    e[39] ^= r,
                    e[48] ^= t,
                    e[49] ^= r,
                    p = e[0],
                    b = e[1],
                    G = e[11] << 4 | e[10] >>> 28,
                    W = e[10] << 4 | e[11] >>> 28,
                    I = e[20] << 3 | e[21] >>> 29,
                    T = e[21] << 3 | e[20] >>> 29,
                    se = e[31] << 9 | e[30] >>> 23,
                    ue = e[30] << 9 | e[31] >>> 23,
                    F = e[40] << 18 | e[41] >>> 14,
                    H = e[41] << 18 | e[40] >>> 14,
                    O = e[2] << 1 | e[3] >>> 31,
                    L = e[3] << 1 | e[2] >>> 31,
                    g = e[13] << 12 | e[12] >>> 20,
                    v = e[12] << 12 | e[13] >>> 20,
                    Z = e[22] << 10 | e[23] >>> 22,
                    J = e[23] << 10 | e[22] >>> 22,
                    P = e[33] << 13 | e[32] >>> 19,
                    N = e[32] << 13 | e[33] >>> 19,
                    fe = e[42] << 2 | e[43] >>> 30,
                    ce = e[43] << 2 | e[42] >>> 30,
                    te = e[5] << 30 | e[4] >>> 2,
                    re = e[4] << 30 | e[5] >>> 2,
                    j = e[14] << 6 | e[15] >>> 26,
                    D = e[15] << 6 | e[14] >>> 26,
                    y = e[25] << 11 | e[24] >>> 21,
                    w = e[24] << 11 | e[25] >>> 21,
                    X = e[34] << 15 | e[35] >>> 17,
                    Q = e[35] << 15 | e[34] >>> 17,
                    C = e[45] << 29 | e[44] >>> 3,
                    B = e[44] << 29 | e[45] >>> 3,
                    A = e[6] << 28 | e[7] >>> 4,
                    k = e[7] << 28 | e[6] >>> 4,
                    ie = e[17] << 23 | e[16] >>> 9,
                    ne = e[16] << 23 | e[17] >>> 9,
                    z = e[26] << 25 | e[27] >>> 7,
                    U = e[27] << 25 | e[26] >>> 7,
                    _ = e[36] << 21 | e[37] >>> 11,
                    E = e[37] << 21 | e[36] >>> 11,
                    $ = e[47] << 24 | e[46] >>> 8,
                    ee = e[46] << 24 | e[47] >>> 8,
                    V = e[8] << 27 | e[9] >>> 5,
                    Y = e[9] << 27 | e[8] >>> 5,
                    x = e[18] << 20 | e[19] >>> 12,
                    R = e[19] << 20 | e[18] >>> 12,
                    oe = e[29] << 7 | e[28] >>> 25,
                    ae = e[28] << 7 | e[29] >>> 25,
                    q = e[38] << 8 | e[39] >>> 24,
                    K = e[39] << 8 | e[38] >>> 24,
                    M = e[48] << 14 | e[49] >>> 18,
                    S = e[49] << 14 | e[48] >>> 18,
                    e[0] = p ^ ~g & y,
                    e[1] = b ^ ~v & w,
                    e[10] = A ^ ~x & I,
                    e[11] = k ^ ~R & T,
                    e[20] = O ^ ~j & z,
                    e[21] = L ^ ~D & U,
                    e[30] = V ^ ~G & Z,
                    e[31] = Y ^ ~W & J,
                    e[40] = te ^ ~ie & oe,
                    e[41] = re ^ ~ne & ae,
                    e[2] = g ^ ~y & _,
                    e[3] = v ^ ~w & E,
                    e[12] = x ^ ~I & P,
                    e[13] = R ^ ~T & N,
                    e[22] = j ^ ~z & q,
                    e[23] = D ^ ~U & K,
                    e[32] = G ^ ~Z & X,
                    e[33] = W ^ ~J & Q,
                    e[42] = ie ^ ~oe & se,
                    e[43] = ne ^ ~ae & ue,
                    e[4] = y ^ ~_ & M,
                    e[5] = w ^ ~E & S,
                    e[14] = I ^ ~P & C,
                    e[15] = T ^ ~N & B,
                    e[24] = z ^ ~q & F,
                    e[25] = U ^ ~K & H,
                    e[34] = Z ^ ~X & $,
                    e[35] = J ^ ~Q & ee,
                    e[44] = oe ^ ~se & fe,
                    e[45] = ae ^ ~ue & ce,
                    e[6] = _ ^ ~M & p,
                    e[7] = E ^ ~S & b,
                    e[16] = P ^ ~C & A,
                    e[17] = N ^ ~B & k,
                    e[26] = q ^ ~F & O,
                    e[27] = K ^ ~H & L,
                    e[36] = X ^ ~$ & V,
                    e[37] = Q ^ ~ee & Y,
                    e[46] = se ^ ~fe & te,
                    e[47] = ue ^ ~ce & re,
                    e[8] = M ^ ~p & g,
                    e[9] = S ^ ~b & v,
                    e[18] = C ^ ~A & x,
                    e[19] = B ^ ~k & R,
                    e[28] = F ^ ~O & j,
                    e[29] = H ^ ~L & D,
                    e[38] = $ ^ ~V & G,
                    e[39] = ee ^ ~Y & W,
                    e[48] = fe ^ ~te & ie,
                    e[49] = ce ^ ~re & ne,
                    e[0] ^= m[i],
                    e[1] ^= m[i + 1]
            };
            if (c)
                e.exports = R;
            else {
                for (T = 0; T < I.length; ++T)
                    u[I[T]] = R[I[T]];
                h && (void 0 === (o = function() {
                    return R
                }
                .call(t, r, t, e)) || (e.exports = o))
            }
        }()
    }
    ).call(this, r(14), r(13))
}
, function(e, t, r) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    var i = r(56);
    function n(e) {
        for (var t = []; e; )
            t.unshift(255 & e),
            e >>= 8;
        return t
    }
    function o(e, t, r) {
        for (var i = 0, n = 0; n < r; n++)
            i = 256 * i + e[t + n];
        return i
    }
    function a(e, t, r, i) {
        for (var n = []; r < t + 1 + i; ) {
            var o = s(e, r);
            if (n.push(o.result),
            (r += o.consumed) > t + 1 + i)
                throw new Error("invalid rlp")
        }
        return {
            consumed: 1 + i,
            result: n
        }
    }
    function s(e, t) {
        if (0 === e.length)
            throw new Error("invalid rlp data");
        if (e[t] >= 248) {
            if (t + 1 + (s = e[t] - 247) > e.length)
                throw new Error("too short");
            var r = o(e, t + 1, s);
            if (t + 1 + s + r > e.length)
                throw new Error("to short");
            return a(e, t, t + 1 + s, s + r)
        }
        if (e[t] >= 192) {
            var n = e[t] - 192;
            if (t + 1 + n > e.length)
                throw new Error("invalid rlp data");
            return a(e, t, t + 1, n)
        }
        if (e[t] >= 184) {
            var s;
            if (t + 1 + (s = e[t] - 183) > e.length)
                throw new Error("invalid rlp data");
            var u = o(e, t + 1, s);
            if (t + 1 + s + u > e.length)
                throw new Error("invalid rlp data");
            return {
                consumed: 1 + s + u,
                result: i.hexlify(e.slice(t + 1 + s, t + 1 + s + u))
            }
        }
        if (e[t] >= 128) {
            var f = e[t] - 128;
            if (t + 1 + f > e.length)
                throw new Error("invlaid rlp data");
            return {
                consumed: 1 + f,
                result: i.hexlify(e.slice(t + 1, t + 1 + f))
            }
        }
        return {
            consumed: 1,
            result: i.hexlify(e[t])
        }
    }
    t.encode = function(e) {
        return i.hexlify(function e(t) {
            if (Array.isArray(t)) {
                var r = [];
                if (t.forEach((function(t) {
                    r = r.concat(e(t))
                }
                )),
                r.length <= 55)
                    return r.unshift(192 + r.length),
                    r;
                var o = n(r.length);
                return o.unshift(247 + o.length),
                o.concat(r)
            }
            var a = Array.prototype.slice.call(i.arrayify(t));
            if (1 === a.length && a[0] <= 127)
                return a;
            if (a.length <= 55)
                return a.unshift(128 + a.length),
                a;
            var s = n(a.length);
            return s.unshift(183 + s.length),
            s.concat(a)
        }(e))
    }
    ,
    t.decode = function(e) {
        var t = i.arrayify(e) || new Uint8Array
          , r = s(t, 0);
        if (r.consumed !== t.length)
            throw new Error("invalid rlp data");
        return r.result
    }
}
, function(e, t, r) {
    (function(t, i) {
        const n = r(36);
        function o(e, t, r, i, n, o, a) {
            let c;
            for (f(e, t + 64 * (2 * i - 1), n, 0, 64),
            c = 0; c < 2 * i; c++)
                u(e, 64 * c, n, 0, 64),
                s(n, o, a),
                f(n, 0, e, r + 64 * c, 64);
            for (c = 0; c < i; c++)
                f(e, r + 2 * c * 64, e, t + 64 * c, 64);
            for (c = 0; c < i; c++)
                f(e, r + 64 * (2 * c + 1), e, t + 64 * (c + i), 64)
        }
        function a(e, t) {
            return e << t | e >>> 32 - t
        }
        function s(e, t, r) {
            let i;
            for (i = 0; i < 16; i++)
                t[i] = (255 & e[4 * i + 0]) << 0,
                t[i] |= (255 & e[4 * i + 1]) << 8,
                t[i] |= (255 & e[4 * i + 2]) << 16,
                t[i] |= (255 & e[4 * i + 3]) << 24;
            for (f(t, 0, r, 0, 16),
            i = 8; i > 0; i -= 2)
                r[4] ^= a(r[0] + r[12], 7),
                r[8] ^= a(r[4] + r[0], 9),
                r[12] ^= a(r[8] + r[4], 13),
                r[0] ^= a(r[12] + r[8], 18),
                r[9] ^= a(r[5] + r[1], 7),
                r[13] ^= a(r[9] + r[5], 9),
                r[1] ^= a(r[13] + r[9], 13),
                r[5] ^= a(r[1] + r[13], 18),
                r[14] ^= a(r[10] + r[6], 7),
                r[2] ^= a(r[14] + r[10], 9),
                r[6] ^= a(r[2] + r[14], 13),
                r[10] ^= a(r[6] + r[2], 18),
                r[3] ^= a(r[15] + r[11], 7),
                r[7] ^= a(r[3] + r[15], 9),
                r[11] ^= a(r[7] + r[3], 13),
                r[15] ^= a(r[11] + r[7], 18),
                r[1] ^= a(r[0] + r[3], 7),
                r[2] ^= a(r[1] + r[0], 9),
                r[3] ^= a(r[2] + r[1], 13),
                r[0] ^= a(r[3] + r[2], 18),
                r[6] ^= a(r[5] + r[4], 7),
                r[7] ^= a(r[6] + r[5], 9),
                r[4] ^= a(r[7] + r[6], 13),
                r[5] ^= a(r[4] + r[7], 18),
                r[11] ^= a(r[10] + r[9], 7),
                r[8] ^= a(r[11] + r[10], 9),
                r[9] ^= a(r[8] + r[11], 13),
                r[10] ^= a(r[9] + r[8], 18),
                r[12] ^= a(r[15] + r[14], 7),
                r[13] ^= a(r[12] + r[15], 9),
                r[14] ^= a(r[13] + r[12], 13),
                r[15] ^= a(r[14] + r[13], 18);
            for (i = 0; i < 16; ++i)
                t[i] = r[i] + t[i];
            for (i = 0; i < 16; i++) {
                let r = 4 * i;
                e[r + 0] = t[i] >> 0 & 255,
                e[r + 1] = t[i] >> 8 & 255,
                e[r + 2] = t[i] >> 16 & 255,
                e[r + 3] = t[i] >> 24 & 255
            }
        }
        function u(e, t, r, i, n) {
            for (let o = 0; o < n; o++)
                r[i + o] ^= e[t + o]
        }
        function f(e, r, i, n, o) {
            if (t.isBuffer(e) && t.isBuffer(i))
                e.copy(i, n, r, r + o);
            else
                for (; o--; )
                    i[n++] = e[r++]
        }
        e.exports = {
            checkAndInit: function(e, r, i, o, a, s, u) {
                if (0 === i || 0 != (i & i - 1))
                    throw Error("N must be > 0 and a power of 2");
                if (i > 2147483647 / 128 / o)
                    throw Error("Parameter N is too large");
                if (o > 2147483647 / 128 / a)
                    throw Error("Parameter r is too large");
                let f, c = t.alloc(256 * o), h = t.alloc(128 * o * i), l = new Int32Array(16), d = new Int32Array(16), p = t.alloc(64), b = n.pbkdf2Sync(e, r, 1, 128 * a * o, "sha256");
                if (u) {
                    let e = a * i * 2
                      , t = 0;
                    f = function() {
                        ++t,
                        t % 1e3 == 0 && u({
                            current: t,
                            total: e,
                            percent: t / e * 100
                        })
                    }
                }
                return {
                    XY: c,
                    V: h,
                    B32: l,
                    x: d,
                    _X: p,
                    B: b,
                    tickCallback: f
                }
            },
            smix: async function(e, t, r, n, a, s, f, c, h, l, d) {
                d = d || 5e3;
                let p, b = 128 * r;
                for (e.copy(s, 0, t, t + b),
                p = 0; p < n; p++)
                    s.copy(a, p * b, 0, 0 + b),
                    p % d == 0 && await new Promise(e=>i(e)),
                    o(s, 0, b, r, f, c, h),
                    l && l();
                for (p = 0; p < n; p++) {
                    let e = 0 + 64 * (2 * r - 1);
                    u(a, (s.readUInt32LE(e) & n - 1) * b, s, 0, b),
                    p % d == 0 && await new Promise(e=>i(e)),
                    o(s, 0, b, r, f, c, h),
                    l && l()
                }
                s.copy(e, t, 0, 0 + b)
            },
            smixSync: function(e, t, r, i, n, a, s, f, c, h) {
                let l, d = 128 * r;
                for (e.copy(a, 0, t, t + d),
                l = 0; l < i; l++)
                    a.copy(n, l * d, 0, 0 + d),
                    o(a, 0, d, r, s, f, c),
                    h && h();
                for (l = 0; l < i; l++) {
                    let e = 0 + 64 * (2 * r - 1);
                    u(n, (a.readUInt32LE(e) & i - 1) * d, a, 0, d),
                    o(a, 0, d, r, s, f, c),
                    h && h()
                }
                a.copy(e, t, 0, 0 + d)
            }
        }
    }
    ).call(this, r(8).Buffer, r(105).setImmediate)
}
, function(e, t) {
    var r = "undefined" != typeof crypto && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || "undefined" != typeof msCrypto && "function" == typeof window.msCrypto.getRandomValues && msCrypto.getRandomValues.bind(msCrypto);
    if (r) {
        var i = new Uint8Array(16);
        e.exports = function() {
            return r(i),
            i
        }
    } else {
        var n = new Array(16);
        e.exports = function() {
            for (var e, t = 0; t < 16; t++)
                0 == (3 & t) && (e = 4294967296 * Math.random()),
                n[t] = e >>> ((3 & t) << 3) & 255;
            return n
        }
    }
}
, function(e, t) {
    for (var r = [], i = 0; i < 256; ++i)
        r[i] = (i + 256).toString(16).substr(1);
    e.exports = function(e, t) {
        var i = t || 0
          , n = r;
        return [n[e[i++]], n[e[i++]], n[e[i++]], n[e[i++]], "-", n[e[i++]], n[e[i++]], "-", n[e[i++]], n[e[i++]], "-", n[e[i++]], n[e[i++]], "-", n[e[i++]], n[e[i++]], n[e[i++]], n[e[i++]], n[e[i++]], n[e[i++]]].join("")
    }
}
, function(e, t, r) {
    "use strict";
    (function(e) {
        Object.defineProperty(t, "__esModule", {
            value: !0
        });
        var i = r(10)
          , n = r(66)
          , o = "qpzry9x8gf2tvdw0s3jn54khce6mua7l"
          , a = [996825010, 642813549, 513874426, 1027748829, 705979059]
          , s = function(e) {
            for (var t = 1, r = 0; r < e.length; ++r) {
                var i = t >> 25;
                t = (33554431 & t) << 5 ^ e[r];
                for (var n = 0; n < 5; ++n)
                    i >> n & 1 && (t ^= a[n])
            }
            return t
        }
          , u = function(t) {
            var r, i = [];
            for (r = 0; r < t.length; ++r)
                i.push(t.charCodeAt(r) >> 5);
            for (i.push(0),
            r = 0; r < t.length; ++r)
                i.push(31 & t.charCodeAt(r));
            return e.from(i)
        };
        function f(t, r) {
            for (var i = e.concat([e.from(u(t)), r, e.from([0, 0, 0, 0, 0, 0])]), n = 1 ^ s(i), o = [], a = 0; a < 6; ++a)
                o.push(n >> 5 * (5 - a) & 31);
            return e.from(o)
        }
        t.bech32Encode = function(t, r) {
            for (var i = e.concat([r, f(t, r)]), n = t + "1", a = 0; a < i.length; ++a)
                n += o.charAt(i[a]);
            return n
        }
        ,
        t.bech32Decode = function(t) {
            var r, i = !1, n = !1;
            for (r = 0; r < t.length; ++r) {
                if (t.charCodeAt(r) < 33 || t.charCodeAt(r) > 126)
                    return null;
                t.charCodeAt(r) >= 97 && t.charCodeAt(r) <= 122 && (i = !0),
                t.charCodeAt(r) >= 65 && t.charCodeAt(r) <= 90 && (n = !0)
            }
            if (i && n)
                return null;
            var a = (t = t.toLowerCase()).lastIndexOf("1");
            if (a < 1 || a + 7 > t.length || t.length > 90)
                return null;
            var f = t.substring(0, a)
              , c = [];
            for (r = a + 1; r < t.length; ++r) {
                var h = o.indexOf(t.charAt(r));
                if (-1 === h)
                    return null;
                c.push(h)
            }
            return function(t, r) {
                return 1 === s(e.concat([u(t), r]))
            }(f, e.from(c)) ? {
                hrp: f,
                data: e.from(c.slice(0, c.length - 6))
            } : null
        }
        ,
        t.HRP = "one",
        t.tHRP = "tone",
        t.convertBits = function(t, r, i, n) {
            void 0 === n && (n = !0);
            for (var o = 0, a = 0, s = [], u = (1 << i) - 1, f = 0; f < t.length; ++f) {
                var c = t[f];
                if (c < 0 || c >> r != 0)
                    return null;
                for (o = o << r | c,
                a += r; a >= i; )
                    a -= i,
                    s.push(o >> a & u)
            }
            if (n)
                a > 0 && s.push(o << i - a & u);
            else if (a >= r || o << i - a & u)
                return null;
            return e.from(s)
        }
        ,
        t.toBech32 = function(r, n) {
            if (void 0 === n && (n = t.HRP),
            !i.isAddress(r))
                throw new Error("Invalid address format.");
            var o = t.convertBits(e.from(r.replace("0x", ""), "hex"), 8, 5);
            if (null === o)
                throw new Error("Could not convert byte Buffer to 5-bit Buffer");
            return t.bech32Encode(n, o)
        }
        ,
        t.fromBech32 = function(e, r) {
            void 0 === r && (r = t.HRP);
            var i = t.bech32Decode(e);
            if (null === i)
                throw new Error("Invalid bech32 address");
            var o = i.hrp
              , a = i.data;
            if (o !== r)
                throw new Error("Expected hrp to be " + r + " but got " + o);
            var s = t.convertBits(a, 5, 8, !1);
            if (null === s)
                throw new Error("Could not convert buffer to bytes");
            return n.toChecksumAddress("0x" + s.toString("hex"))
        }
    }
    ).call(this, r(8).Buffer)
}
, , , , function(e, t, r) {
    "use strict";
    (function(t) {
        var i = r(179);
        /*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
        function n(e, t) {
            if (e === t)
                return 0;
            for (var r = e.length, i = t.length, n = 0, o = Math.min(r, i); n < o; ++n)
                if (e[n] !== t[n]) {
                    r = e[n],
                    i = t[n];
                    break
                }
            return r < i ? -1 : i < r ? 1 : 0
        }
        function o(e) {
            return t.Buffer && "function" == typeof t.Buffer.isBuffer ? t.Buffer.isBuffer(e) : !(null == e || !e._isBuffer)
        }
        var a = r(200)
          , s = Object.prototype.hasOwnProperty
          , u = Array.prototype.slice
          , f = "foo" === function() {}
        .name;
        function c(e) {
            return Object.prototype.toString.call(e)
        }
        function h(e) {
            return !o(e) && ("function" == typeof t.ArrayBuffer && ("function" == typeof ArrayBuffer.isView ? ArrayBuffer.isView(e) : !!e && (e instanceof DataView || !!(e.buffer && e.buffer instanceof ArrayBuffer))))
        }
        var l = e.exports = v
          , d = /\s*function\s+([^\(\s]*)\s*/;
        function p(e) {
            if (a.isFunction(e)) {
                if (f)
                    return e.name;
                var t = e.toString().match(d);
                return t && t[1]
            }
        }
        function b(e, t) {
            return "string" == typeof e ? e.length < t ? e : e.slice(0, t) : e
        }
        function m(e) {
            if (f || !a.isFunction(e))
                return a.inspect(e);
            var t = p(e);
            return "[Function" + (t ? ": " + t : "") + "]"
        }
        function g(e, t, r, i, n) {
            throw new l.AssertionError({
                message: r,
                actual: e,
                expected: t,
                operator: i,
                stackStartFunction: n
            })
        }
        function v(e, t) {
            e || g(e, !0, t, "==", l.ok)
        }
        function y(e, t, r, i) {
            if (e === t)
                return !0;
            if (o(e) && o(t))
                return 0 === n(e, t);
            if (a.isDate(e) && a.isDate(t))
                return e.getTime() === t.getTime();
            if (a.isRegExp(e) && a.isRegExp(t))
                return e.source === t.source && e.global === t.global && e.multiline === t.multiline && e.lastIndex === t.lastIndex && e.ignoreCase === t.ignoreCase;
            if (null !== e && "object" == typeof e || null !== t && "object" == typeof t) {
                if (h(e) && h(t) && c(e) === c(t) && !(e instanceof Float32Array || e instanceof Float64Array))
                    return 0 === n(new Uint8Array(e.buffer), new Uint8Array(t.buffer));
                if (o(e) !== o(t))
                    return !1;
                var s = (i = i || {
                    actual: [],
                    expected: []
                }).actual.indexOf(e);
                return -1 !== s && s === i.expected.indexOf(t) || (i.actual.push(e),
                i.expected.push(t),
                function(e, t, r, i) {
                    if (null == e || null == t)
                        return !1;
                    if (a.isPrimitive(e) || a.isPrimitive(t))
                        return e === t;
                    if (r && Object.getPrototypeOf(e) !== Object.getPrototypeOf(t))
                        return !1;
                    var n = w(e)
                      , o = w(t);
                    if (n && !o || !n && o)
                        return !1;
                    if (n)
                        return e = u.call(e),
                        t = u.call(t),
                        y(e, t, r);
                    var s, f, c = M(e), h = M(t);
                    if (c.length !== h.length)
                        return !1;
                    for (c.sort(),
                    h.sort(),
                    f = c.length - 1; f >= 0; f--)
                        if (c[f] !== h[f])
                            return !1;
                    for (f = c.length - 1; f >= 0; f--)
                        if (s = c[f],
                        !y(e[s], t[s], r, i))
                            return !1;
                    return !0
                }(e, t, r, i))
            }
            return r ? e === t : e == t
        }
        function w(e) {
            return "[object Arguments]" == Object.prototype.toString.call(e)
        }
        function _(e, t) {
            if (!e || !t)
                return !1;
            if ("[object RegExp]" == Object.prototype.toString.call(t))
                return t.test(e);
            try {
                if (e instanceof t)
                    return !0
            } catch (e) {}
            return !Error.isPrototypeOf(t) && !0 === t.call({}, e)
        }
        function E(e, t, r, i) {
            var n;
            if ("function" != typeof t)
                throw new TypeError('"block" argument must be a function');
            "string" == typeof r && (i = r,
            r = null),
            n = function(e) {
                var t;
                try {
                    e()
                } catch (e) {
                    t = e
                }
                return t
            }(t),
            i = (r && r.name ? " (" + r.name + ")." : ".") + (i ? " " + i : "."),
            e && !n && g(n, r, "Missing expected exception" + i);
            var o = "string" == typeof i
              , s = !e && n && !r;
            if ((!e && a.isError(n) && o && _(n, r) || s) && g(n, r, "Got unwanted exception" + i),
            e && n && r && !_(n, r) || !e && n)
                throw n
        }
        l.AssertionError = function(e) {
            this.name = "AssertionError",
            this.actual = e.actual,
            this.expected = e.expected,
            this.operator = e.operator,
            e.message ? (this.message = e.message,
            this.generatedMessage = !1) : (this.message = function(e) {
                return b(m(e.actual), 128) + " " + e.operator + " " + b(m(e.expected), 128)
            }(this),
            this.generatedMessage = !0);
            var t = e.stackStartFunction || g;
            if (Error.captureStackTrace)
                Error.captureStackTrace(this, t);
            else {
                var r = new Error;
                if (r.stack) {
                    var i = r.stack
                      , n = p(t)
                      , o = i.indexOf("\n" + n);
                    if (o >= 0) {
                        var a = i.indexOf("\n", o + 1);
                        i = i.substring(a + 1)
                    }
                    this.stack = i
                }
            }
        }
        ,
        a.inherits(l.AssertionError, Error),
        l.fail = g,
        l.ok = v,
        l.equal = function(e, t, r) {
            e != t && g(e, t, r, "==", l.equal)
        }
        ,
        l.notEqual = function(e, t, r) {
            e == t && g(e, t, r, "!=", l.notEqual)
        }
        ,
        l.deepEqual = function(e, t, r) {
            y(e, t, !1) || g(e, t, r, "deepEqual", l.deepEqual)
        }
        ,
        l.deepStrictEqual = function(e, t, r) {
            y(e, t, !0) || g(e, t, r, "deepStrictEqual", l.deepStrictEqual)
        }
        ,
        l.notDeepEqual = function(e, t, r) {
            y(e, t, !1) && g(e, t, r, "notDeepEqual", l.notDeepEqual)
        }
        ,
        l.notDeepStrictEqual = function e(t, r, i) {
            y(t, r, !0) && g(t, r, i, "notDeepStrictEqual", e)
        }
        ,
        l.strictEqual = function(e, t, r) {
            e !== t && g(e, t, r, "===", l.strictEqual)
        }
        ,
        l.notStrictEqual = function(e, t, r) {
            e === t && g(e, t, r, "!==", l.notStrictEqual)
        }
        ,
        l.throws = function(e, t, r) {
            E(!0, e, t, r)
        }
        ,
        l.doesNotThrow = function(e, t, r) {
            E(!1, e, t, r)
        }
        ,
        l.ifError = function(e) {
            if (e)
                throw e
        }
        ,
        l.strict = i((function e(t, r) {
            t || g(t, !0, r, "==", e)
        }
        ), l, {
            equal: l.strictEqual,
            deepEqual: l.deepStrictEqual,
            notEqual: l.notStrictEqual,
            notDeepEqual: l.notDeepStrictEqual
        }),
        l.strict.strict = l.strict;
        var M = Object.keys || function(e) {
            var t = [];
            for (var r in e)
                s.call(e, r) && t.push(r);
            return t
        }
    }
    ).call(this, r(13))
}
, function(e, t, r) {
    "use strict";
    /*
object-assign
(c) Sindre Sorhus
@license MIT
*/
    var i = Object.getOwnPropertySymbols
      , n = Object.prototype.hasOwnProperty
      , o = Object.prototype.propertyIsEnumerable;
    function a(e) {
        if (null == e)
            throw new TypeError("Object.assign cannot be called with null or undefined");
        return Object(e)
    }
    e.exports = function() {
        try {
            if (!Object.assign)
                return !1;
            var e = new String("abc");
            if (e[5] = "de",
            "5" === Object.getOwnPropertyNames(e)[0])
                return !1;
            for (var t = {}, r = 0; r < 10; r++)
                t["_" + String.fromCharCode(r)] = r;
            if ("0123456789" !== Object.getOwnPropertyNames(t).map((function(e) {
                return t[e]
            }
            )).join(""))
                return !1;
            var i = {};
            return "abcdefghijklmnopqrst".split("").forEach((function(e) {
                i[e] = e
            }
            )),
            "abcdefghijklmnopqrst" === Object.keys(Object.assign({}, i)).join("")
        } catch (e) {
            return !1
        }
    }() ? Object.assign : function(e, t) {
        for (var r, s, u = a(e), f = 1; f < arguments.length; f++) {
            for (var c in r = Object(arguments[f]))
                n.call(r, c) && (u[c] = r[c]);
            if (i) {
                s = i(r);
                for (var h = 0; h < s.length; h++)
                    o.call(r, s[h]) && (u[s[h]] = r[s[h]])
            }
        }
        return u
    }
}
, function(e, t, r) {
    e.exports = n;
    var i = r(31).EventEmitter;
    function n() {
        i.call(this)
    }
    r(231)(n, i),
    n.Readable = r(70),
    n.Writable = r(237),
    n.Duplex = r(238),
    n.Transform = r(239),
    n.PassThrough = r(240),
    n.Stream = n,
    n.prototype.pipe = function(e, t) {
        var r = this;
        function n(t) {
            e.writable && !1 === e.write(t) && r.pause && r.pause()
        }
        function o() {
            r.readable && r.resume && r.resume()
        }
        r.on("data", n),
        e.on("drain", o),
        e._isStdio || t && !1 === t.end || (r.on("end", s),
        r.on("close", u));
        var a = !1;
        function s() {
            a || (a = !0,
            e.end())
        }
        function u() {
            a || (a = !0,
            "function" == typeof e.destroy && e.destroy())
        }
        function f(e) {
            if (c(),
            0 === i.listenerCount(this, "error"))
                throw e
        }
        function c() {
            r.removeListener("data", n),
            e.removeListener("drain", o),
            r.removeListener("end", s),
            r.removeListener("close", u),
            r.removeListener("error", f),
            e.removeListener("error", f),
            r.removeListener("end", c),
            r.removeListener("close", c),
            e.removeListener("close", c)
        }
        return r.on("error", f),
        e.on("error", f),
        r.on("end", c),
        r.on("close", c),
        e.on("close", c),
        e.emit("pipe", r),
        e
    }
}
, function(e, t, r) {
    "use strict";
    var i = r(5).Buffer;
    e.exports = function(e) {
        if (e.length >= 255)
            throw new TypeError("Alphabet too long");
        for (var t = new Uint8Array(256), r = 0; r < t.length; r++)
            t[r] = 255;
        for (var n = 0; n < e.length; n++) {
            var o = e.charAt(n)
              , a = o.charCodeAt(0);
            if (255 !== t[a])
                throw new TypeError(o + " is ambiguous");
            t[a] = n
        }
        var s = e.length
          , u = e.charAt(0)
          , f = Math.log(s) / Math.log(256)
          , c = Math.log(256) / Math.log(s);
        function h(e) {
            if ("string" != typeof e)
                throw new TypeError("Expected String");
            if (0 === e.length)
                return i.alloc(0);
            var r = 0;
            if (" " !== e[r]) {
                for (var n = 0, o = 0; e[r] === u; )
                    n++,
                    r++;
                for (var a = (e.length - r) * f + 1 >>> 0, c = new Uint8Array(a); e[r]; ) {
                    var h = t[e.charCodeAt(r)];
                    if (255 === h)
                        return;
                    for (var l = 0, d = a - 1; (0 !== h || l < o) && -1 !== d; d--,
                    l++)
                        h += s * c[d] >>> 0,
                        c[d] = h % 256 >>> 0,
                        h = h / 256 >>> 0;
                    if (0 !== h)
                        throw new Error("Non-zero carry");
                    o = l,
                    r++
                }
                if (" " !== e[r]) {
                    for (var p = a - o; p !== a && 0 === c[p]; )
                        p++;
                    var b = i.allocUnsafe(n + (a - p));
                    b.fill(0, 0, n);
                    for (var m = n; p !== a; )
                        b[m++] = c[p++];
                    return b
                }
            }
        }
        return {
            encode: function(t) {
                if ((Array.isArray(t) || t instanceof Uint8Array) && (t = i.from(t)),
                !i.isBuffer(t))
                    throw new TypeError("Expected Buffer");
                if (0 === t.length)
                    return "";
                for (var r = 0, n = 0, o = 0, a = t.length; o !== a && 0 === t[o]; )
                    o++,
                    r++;
                for (var f = (a - o) * c + 1 >>> 0, h = new Uint8Array(f); o !== a; ) {
                    for (var l = t[o], d = 0, p = f - 1; (0 !== l || d < n) && -1 !== p; p--,
                    d++)
                        l += 256 * h[p] >>> 0,
                        h[p] = l % s >>> 0,
                        l = l / s >>> 0;
                    if (0 !== l)
                        throw new Error("Non-zero carry");
                    n = d,
                    o++
                }
                for (var b = f - n; b !== f && 0 === h[b]; )
                    b++;
                for (var m = u.repeat(r); b < f; ++b)
                    m += e.charAt(h[b]);
                return m
            },
            decodeUnsafe: h,
            decode: function(e) {
                var t = h(e);
                if (t)
                    return t;
                throw new Error("Non-base" + s + " character")
            }
        }
    }
}
, , , , , , , , , , , , , , , , , , , function(e, t, r) {
    (function(e) {
        var i = Object.getOwnPropertyDescriptors || function(e) {
            for (var t = Object.keys(e), r = {}, i = 0; i < t.length; i++)
                r[t[i]] = Object.getOwnPropertyDescriptor(e, t[i]);
            return r
        }
          , n = /%[sdj%]/g;
        t.format = function(e) {
            if (!g(e)) {
                for (var t = [], r = 0; r < arguments.length; r++)
                    t.push(s(arguments[r]));
                return t.join(" ")
            }
            r = 1;
            for (var i = arguments, o = i.length, a = String(e).replace(n, (function(e) {
                if ("%%" === e)
                    return "%";
                if (r >= o)
                    return e;
                switch (e) {
                case "%s":
                    return String(i[r++]);
                case "%d":
                    return Number(i[r++]);
                case "%j":
                    try {
                        return JSON.stringify(i[r++])
                    } catch (e) {
                        return "[Circular]"
                    }
                default:
                    return e
                }
            }
            )), u = i[r]; r < o; u = i[++r])
                b(u) || !w(u) ? a += " " + u : a += " " + s(u);
            return a
        }
        ,
        t.deprecate = function(r, i) {
            if (void 0 !== e && !0 === e.noDeprecation)
                return r;
            if (void 0 === e)
                return function() {
                    return t.deprecate(r, i).apply(this, arguments)
                }
                ;
            var n = !1;
            return function() {
                if (!n) {
                    if (e.throwDeprecation)
                        throw new Error(i);
                    e.traceDeprecation ? console.trace(i) : console.error(i),
                    n = !0
                }
                return r.apply(this, arguments)
            }
        }
        ;
        var o, a = {};
        function s(e, r) {
            var i = {
                seen: [],
                stylize: f
            };
            return arguments.length >= 3 && (i.depth = arguments[2]),
            arguments.length >= 4 && (i.colors = arguments[3]),
            p(r) ? i.showHidden = r : r && t._extend(i, r),
            v(i.showHidden) && (i.showHidden = !1),
            v(i.depth) && (i.depth = 2),
            v(i.colors) && (i.colors = !1),
            v(i.customInspect) && (i.customInspect = !0),
            i.colors && (i.stylize = u),
            c(i, e, i.depth)
        }
        function u(e, t) {
            var r = s.styles[t];
            return r ? "[" + s.colors[r][0] + "m" + e + "[" + s.colors[r][1] + "m" : e
        }
        function f(e, t) {
            return e
        }
        function c(e, r, i) {
            if (e.customInspect && r && M(r.inspect) && r.inspect !== t.inspect && (!r.constructor || r.constructor.prototype !== r)) {
                var n = r.inspect(i, e);
                return g(n) || (n = c(e, n, i)),
                n
            }
            var o = function(e, t) {
                if (v(t))
                    return e.stylize("undefined", "undefined");
                if (g(t)) {
                    var r = "'" + JSON.stringify(t).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
                    return e.stylize(r, "string")
                }
                if (m(t))
                    return e.stylize("" + t, "number");
                if (p(t))
                    return e.stylize("" + t, "boolean");
                if (b(t))
                    return e.stylize("null", "null")
            }(e, r);
            if (o)
                return o;
            var a = Object.keys(r)
              , s = function(e) {
                var t = {};
                return e.forEach((function(e, r) {
                    t[e] = !0
                }
                )),
                t
            }(a);
            if (e.showHidden && (a = Object.getOwnPropertyNames(r)),
            E(r) && (a.indexOf("message") >= 0 || a.indexOf("description") >= 0))
                return h(r);
            if (0 === a.length) {
                if (M(r)) {
                    var u = r.name ? ": " + r.name : "";
                    return e.stylize("[Function" + u + "]", "special")
                }
                if (y(r))
                    return e.stylize(RegExp.prototype.toString.call(r), "regexp");
                if (_(r))
                    return e.stylize(Date.prototype.toString.call(r), "date");
                if (E(r))
                    return h(r)
            }
            var f, w = "", S = !1, A = ["{", "}"];
            (d(r) && (S = !0,
            A = ["[", "]"]),
            M(r)) && (w = " [Function" + (r.name ? ": " + r.name : "") + "]");
            return y(r) && (w = " " + RegExp.prototype.toString.call(r)),
            _(r) && (w = " " + Date.prototype.toUTCString.call(r)),
            E(r) && (w = " " + h(r)),
            0 !== a.length || S && 0 != r.length ? i < 0 ? y(r) ? e.stylize(RegExp.prototype.toString.call(r), "regexp") : e.stylize("[Object]", "special") : (e.seen.push(r),
            f = S ? function(e, t, r, i, n) {
                for (var o = [], a = 0, s = t.length; a < s; ++a)
                    R(t, String(a)) ? o.push(l(e, t, r, i, String(a), !0)) : o.push("");
                return n.forEach((function(n) {
                    n.match(/^\d+$/) || o.push(l(e, t, r, i, n, !0))
                }
                )),
                o
            }(e, r, i, s, a) : a.map((function(t) {
                return l(e, r, i, s, t, S)
            }
            )),
            e.seen.pop(),
            function(e, t, r) {
                if (e.reduce((function(e, t) {
                    return t.indexOf("\n") >= 0 && 0,
                    e + t.replace(/\u001b\[\d\d?m/g, "").length + 1
                }
                ), 0) > 60)
                    return r[0] + ("" === t ? "" : t + "\n ") + " " + e.join(",\n  ") + " " + r[1];
                return r[0] + t + " " + e.join(", ") + " " + r[1]
            }(f, w, A)) : A[0] + w + A[1]
        }
        function h(e) {
            return "[" + Error.prototype.toString.call(e) + "]"
        }
        function l(e, t, r, i, n, o) {
            var a, s, u;
            if ((u = Object.getOwnPropertyDescriptor(t, n) || {
                value: t[n]
            }).get ? s = u.set ? e.stylize("[Getter/Setter]", "special") : e.stylize("[Getter]", "special") : u.set && (s = e.stylize("[Setter]", "special")),
            R(i, n) || (a = "[" + n + "]"),
            s || (e.seen.indexOf(u.value) < 0 ? (s = b(r) ? c(e, u.value, null) : c(e, u.value, r - 1)).indexOf("\n") > -1 && (s = o ? s.split("\n").map((function(e) {
                return "  " + e
            }
            )).join("\n").substr(2) : "\n" + s.split("\n").map((function(e) {
                return "   " + e
            }
            )).join("\n")) : s = e.stylize("[Circular]", "special")),
            v(a)) {
                if (o && n.match(/^\d+$/))
                    return s;
                (a = JSON.stringify("" + n)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/) ? (a = a.substr(1, a.length - 2),
                a = e.stylize(a, "name")) : (a = a.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'"),
                a = e.stylize(a, "string"))
            }
            return a + ": " + s
        }
        function d(e) {
            return Array.isArray(e)
        }
        function p(e) {
            return "boolean" == typeof e
        }
        function b(e) {
            return null === e
        }
        function m(e) {
            return "number" == typeof e
        }
        function g(e) {
            return "string" == typeof e
        }
        function v(e) {
            return void 0 === e
        }
        function y(e) {
            return w(e) && "[object RegExp]" === S(e)
        }
        function w(e) {
            return "object" == typeof e && null !== e
        }
        function _(e) {
            return w(e) && "[object Date]" === S(e)
        }
        function E(e) {
            return w(e) && ("[object Error]" === S(e) || e instanceof Error)
        }
        function M(e) {
            return "function" == typeof e
        }
        function S(e) {
            return Object.prototype.toString.call(e)
        }
        function A(e) {
            return e < 10 ? "0" + e.toString(10) : e.toString(10)
        }
        t.debuglog = function(r) {
            if (v(o) && (o = e.env.NODE_DEBUG || ""),
            r = r.toUpperCase(),
            !a[r])
                if (new RegExp("\\b" + r + "\\b","i").test(o)) {
                    var i = e.pid;
                    a[r] = function() {
                        var e = t.format.apply(t, arguments);
                        console.error("%s %d: %s", r, i, e)
                    }
                } else
                    a[r] = function() {}
                    ;
            return a[r]
        }
        ,
        t.inspect = s,
        s.colors = {
            bold: [1, 22],
            italic: [3, 23],
            underline: [4, 24],
            inverse: [7, 27],
            white: [37, 39],
            grey: [90, 39],
            black: [30, 39],
            blue: [34, 39],
            cyan: [36, 39],
            green: [32, 39],
            magenta: [35, 39],
            red: [31, 39],
            yellow: [33, 39]
        },
        s.styles = {
            special: "cyan",
            number: "yellow",
            boolean: "yellow",
            undefined: "grey",
            null: "bold",
            string: "green",
            date: "magenta",
            regexp: "red"
        },
        t.isArray = d,
        t.isBoolean = p,
        t.isNull = b,
        t.isNullOrUndefined = function(e) {
            return null == e
        }
        ,
        t.isNumber = m,
        t.isString = g,
        t.isSymbol = function(e) {
            return "symbol" == typeof e
        }
        ,
        t.isUndefined = v,
        t.isRegExp = y,
        t.isObject = w,
        t.isDate = _,
        t.isError = E,
        t.isFunction = M,
        t.isPrimitive = function(e) {
            return null === e || "boolean" == typeof e || "number" == typeof e || "string" == typeof e || "symbol" == typeof e || void 0 === e
        }
        ,
        t.isBuffer = r(215);
        var k = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
        function x() {
            var e = new Date
              , t = [A(e.getHours()), A(e.getMinutes()), A(e.getSeconds())].join(":");
            return [e.getDate(), k[e.getMonth()], t].join(" ")
        }
        function R(e, t) {
            return Object.prototype.hasOwnProperty.call(e, t)
        }
        t.log = function() {
            console.log("%s - %s", x(), t.format.apply(t, arguments))
        }
        ,
        t.inherits = r(216),
        t._extend = function(e, t) {
            if (!t || !w(t))
                return e;
            for (var r = Object.keys(t), i = r.length; i--; )
                e[r[i]] = t[r[i]];
            return e
        }
        ;
        var I = "undefined" != typeof Symbol ? Symbol("util.promisify.custom") : void 0;
        function T(e, t) {
            if (!e) {
                var r = new Error("Promise was rejected with a falsy value");
                r.reason = e,
                e = r
            }
            return t(e)
        }
        t.promisify = function(e) {
            if ("function" != typeof e)
                throw new TypeError('The "original" argument must be of type Function');
            if (I && e[I]) {
                var t;
                if ("function" != typeof (t = e[I]))
                    throw new TypeError('The "util.promisify.custom" argument must be of type Function');
                return Object.defineProperty(t, I, {
                    value: t,
                    enumerable: !1,
                    writable: !1,
                    configurable: !0
                }),
                t
            }
            function t() {
                for (var t, r, i = new Promise((function(e, i) {
                    t = e,
                    r = i
                }
                )), n = [], o = 0; o < arguments.length; o++)
                    n.push(arguments[o]);
                n.push((function(e, i) {
                    e ? r(e) : t(i)
                }
                ));
                try {
                    e.apply(this, n)
                } catch (e) {
                    r(e)
                }
                return i
            }
            return Object.setPrototypeOf(t, Object.getPrototypeOf(e)),
            I && Object.defineProperty(t, I, {
                value: t,
                enumerable: !1,
                writable: !1,
                configurable: !0
            }),
            Object.defineProperties(t, i(e))
        }
        ,
        t.promisify.custom = I,
        t.callbackify = function(t) {
            if ("function" != typeof t)
                throw new TypeError('The "original" argument must be of type Function');
            function r() {
                for (var r = [], i = 0; i < arguments.length; i++)
                    r.push(arguments[i]);
                var n = r.pop();
                if ("function" != typeof n)
                    throw new TypeError("The last argument must be of type Function");
                var o = this
                  , a = function() {
                    return n.apply(o, arguments)
                };
                t.apply(this, r).then((function(t) {
                    e.nextTick(a, null, t)
                }
                ), (function(t) {
                    e.nextTick(T, t, a)
                }
                ))
            }
            return Object.setPrototypeOf(r, Object.getPrototypeOf(t)),
            Object.defineProperties(r, i(t)),
            r
        }
    }
    ).call(this, r(14))
}
, function(e, t, r) {
    var i = r(181);
    e.exports = i("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz")
}
, , , function(e) {
    e.exports = JSON.parse('{"version":"1.2.2"}')
}
, , , , , function(e, t, r) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    var i = r(11)
      , n = i.__importDefault(r(7))
      , o = r(77);
    !function(e) {
        e.wei = "wei",
        e.Kwei = "Kwei",
        e.Mwei = "Mwei",
        e.Gwei = "Gwei",
        e.szabo = "szabo",
        e.finney = "finney",
        e.ether = "ether",
        e.one = "one",
        e.Kether = "Kether",
        e.Mether = "Mether",
        e.Gether = "Gether",
        e.Tether = "Tether"
    }(t.Units || (t.Units = {})),
    t.unitMap = new Map([["wei", "1"], ["Kwei", "1000"], ["Mwei", "1000000"], ["Gwei", "1000000000"], ["szabo", "1000000000000"], ["finney", "1000000000000000"], ["ether", "1000000000000000000"], ["one", "1000000000000000000"], ["Kether", "1000000000000000000000"], ["Mether", "1000000000000000000000000"], ["Gether", "1000000000000000000000000000"], ["Tether", "1000000000000000000000000000000"]]);
    var a = {
        pad: !1
    };
    t.numberToString = function(e, t) {
        if (void 0 === t && (t = 10),
        n.default.isBN(e))
            return e.toString(t);
        if (o.isNumber(e))
            return new n.default(e).toString(t);
        if (o.isString(e) && o.isNumber(Number(e)))
            return new n.default(e).toString(t);
        throw new Error("cannot parse number:" + e + " to string")
    }
    ,
    t.numToStr = function(e) {
        if ("string" == typeof e) {
            if (!e.match(/^-?[0-9.]+$/))
                throw new Error("while converting number to string, invalid number value '" + e + "', should be a number matching (^-?[0-9.]+).");
            return e
        }
        if ("number" == typeof e)
            return String(e);
        if (n.default.isBN(e))
            return e.toString(10);
        throw new Error("while converting number to string, invalid number value '" + e + "' type " + typeof e + ".")
    }
    ,
    t.add0xToString = function(e) {
        if (o.isString(e) && !e.startsWith("-"))
            return "0x" + e.replace("0x", "");
        if (o.isString(e) && e.startsWith("-"))
            return "-0x" + e.replace("-", "");
        throw new Error(e + " is not String")
    }
    ,
    t.strip0x = function(e) {
        return e.toLowerCase().replace("0x", "")
    }
    ,
    t.numberToHex = function(e) {
        try {
            return t.add0xToString(t.numberToString(e, 16))
        } catch (e) {
            throw e
        }
    }
    ,
    t.hexToNumber = function(e) {
        if (o.isHex(e) && "-" !== e[0])
            return new n.default(t.strip0x(e),"hex").toString();
        if (o.isHex(e) && "-" === e[0])
            return new n.default(e.substring(3),16).mul(new n.default(-1)).toString();
        throw new Error(e + " is not hex number")
    }
    ,
    t.hexToBN = function(e) {
        if (o.isHex(e) && "-" !== e[0])
            return new n.default(t.strip0x(e),"hex");
        if (o.isHex(e) && "-" === e[0])
            return new n.default(e.substring(3),16).mul(new n.default(-1));
        throw new Error(e + " is not hex number")
    }
    ,
    t.toWei = function(e, r) {
        try {
            var o = t.numToStr(e)
              , a = t.unitMap.get(r);
            if (!a)
                throw new Error("No unit of type " + r + " exists.");
            var s = a.length - 1
              , u = new n.default(a,10)
              , f = "-" === o.substring(0, 1);
            if (f && (o = o.substring(1)),
            "." === o)
                throw new Error("Cannot convert " + o + " to wei.");
            var c = o.split(".");
            if (c.length > 2)
                throw new Error("Cannot convert " + o + " to wei.");
            var h = i.__read(c, 2)
              , l = h[0]
              , d = h[1];
            if (l || (l = "0"),
            d || (d = "0"),
            d.length > s)
                throw new Error("Cannot convert " + o + " to wei.");
            for (; d.length < s; )
                d += "0";
            var p = new n.default(l)
              , b = new n.default(d)
              , m = p.mul(u).add(b);
            return f && (m = m.neg()),
            new n.default(m.toString(10),10)
        } catch (e) {
            throw e
        }
    }
    ,
    t.fromWei = function(e, r, i) {
        void 0 === i && (i = a);
        try {
            var o = n.default.isBN(e) ? e : new n.default(e);
            if ("wei" === r)
                return o.toString(10);
            var s = t.unitMap.get(r);
            if (!s)
                throw new Error("No unit of type " + r + " exists.");
            for (var u = new n.default(s,10), f = s.length - 1, c = o.abs().mod(u).toString(10); c.length < f; )
                c = "0" + c;
            if (!i.pad) {
                var h = c.match(/^([0-9]*[1-9]|0)(0*)/);
                c = h ? h[1] : "0"
            }
            var l = o.div(u).toString(10);
            return "0" === c ? "" + l : l + "." + c
        } catch (e) {
            throw e
        }
    }
    ;
    var s = function() {
        function e(e) {
            !n.default.isBN(e) && "number" != typeof e && o.isHex(e) ? this.unit = t.hexToNumber(e) : n.default.isBN(e) || "number" != typeof e ? this.unit = "0x" === e ? t.hexToNumber("0x0") : e : this.unit = e.toString(),
            this.wei = new n.default(this.unit)
        }
        return e.from = function(t) {
            return new e(t)
        }
        ,
        e.Wei = function(t) {
            return new e(t).asWei()
        }
        ,
        e.Kwei = function(t) {
            return new e(t).asKwei()
        }
        ,
        e.Mwei = function(t) {
            return new e(t).asMwei()
        }
        ,
        e.Gwei = function(t) {
            return new e(t).asGwei()
        }
        ,
        e.Szabo = function(t) {
            return new e(t).asSzabo()
        }
        ,
        e.Finney = function(t) {
            return new e(t).asFinney()
        }
        ,
        e.Ether = function(t) {
            return new e(t).asEther()
        }
        ,
        e.One = function(t) {
            return new e(t).asOne()
        }
        ,
        e.Kether = function(t) {
            return new e(t).asKether()
        }
        ,
        e.Mether = function(t) {
            return new e(t).asMether()
        }
        ,
        e.Gether = function(t) {
            return new e(t).asGether()
        }
        ,
        e.Tether = function(t) {
            return new e(t).asTether()
        }
        ,
        e.prototype.asWei = function() {
            return this.wei = new n.default(this.unit),
            this
        }
        ,
        e.prototype.asKwei = function() {
            return this.wei = t.toWei(this.unit, "Kwei"),
            this
        }
        ,
        e.prototype.asMwei = function() {
            return this.wei = t.toWei(this.unit, "Mwei"),
            this
        }
        ,
        e.prototype.asGwei = function() {
            return this.wei = t.toWei(this.unit, "Gwei"),
            this
        }
        ,
        e.prototype.asSzabo = function() {
            return this.wei = t.toWei(this.unit, "szabo"),
            this
        }
        ,
        e.prototype.asFinney = function() {
            return this.wei = t.toWei(this.unit, "finney"),
            this
        }
        ,
        e.prototype.asEther = function() {
            return this.wei = t.toWei(this.unit, "ether"),
            this
        }
        ,
        e.prototype.asOne = function() {
            return this.wei = t.toWei(this.unit, "one"),
            this
        }
        ,
        e.prototype.asKether = function() {
            return this.wei = t.toWei(this.unit, "Kether"),
            this
        }
        ,
        e.prototype.asMether = function() {
            return this.wei = t.toWei(this.unit, "Mether"),
            this
        }
        ,
        e.prototype.asGether = function() {
            return this.wei = t.toWei(this.unit, "Gether"),
            this
        }
        ,
        e.prototype.asTether = function() {
            return this.wei = t.toWei(this.unit, "Tether"),
            this
        }
        ,
        e.prototype.toWei = function() {
            if (this.wei)
                return this.wei;
            throw new Error("error transforming")
        }
        ,
        e.prototype.toKwei = function() {
            if (this.wei)
                return t.fromWei(this.wei, "Kwei");
            throw new Error("error transforming")
        }
        ,
        e.prototype.toGwei = function() {
            if (this.wei)
                return t.fromWei(this.wei, "Gwei");
            throw new Error("error transforming")
        }
        ,
        e.prototype.toMwei = function() {
            if (this.wei)
                return t.fromWei(this.wei, "Mwei");
            throw new Error("error transforming")
        }
        ,
        e.prototype.toSzabo = function() {
            if (this.wei)
                return t.fromWei(this.wei, "szabo");
            throw new Error("error transforming")
        }
        ,
        e.prototype.toFinney = function() {
            if (this.wei)
                return t.fromWei(this.wei, "finney");
            throw new Error("error transforming")
        }
        ,
        e.prototype.toEther = function() {
            if (this.wei)
                return t.fromWei(this.wei, "ether");
            throw new Error("error transforming")
        }
        ,
        e.prototype.toOne = function() {
            if (this.wei)
                return t.fromWei(this.wei, "one");
            throw new Error("error transforming")
        }
        ,
        e.prototype.toKether = function() {
            if (this.wei)
                return t.fromWei(this.wei, "Kether");
            throw new Error("error transforming")
        }
        ,
        e.prototype.toMether = function() {
            if (this.wei)
                return t.fromWei(this.wei, "Mether");
            throw new Error("error transforming")
        }
        ,
        e.prototype.toGether = function() {
            if (this.wei)
                return t.fromWei(this.wei, "Gether");
            throw new Error("error transforming")
        }
        ,
        e.prototype.toTether = function() {
            if (this.wei)
                return t.fromWei(this.wei, "Tether");
            throw new Error("error transforming")
        }
        ,
        e.prototype.toWeiString = function() {
            if (this.wei)
                return this.wei.toString();
            throw new Error("error transforming")
        }
        ,
        e.prototype.toHex = function() {
            if (this.wei)
                return t.numberToHex(this.wei);
            throw new Error("error transforming")
        }
        ,
        e
    }();
    t.Unit = s
}
, function(e, t) {}
, function(e, t, r) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    var i = r(77);
    function n(e, t, r) {
        for (var i in t) {
            if (void 0 === e[i])
                throw new Error("Key not found: " + i);
            for (var n = 0; n < t[i].length; n += 1) {
                if ("function" != typeof t[i][n])
                    throw new Error("Validator is not a function");
                if (!t[i][n](e[i]))
                    throw new Error("Validation failed for " + i + ",should be validated by " + t[i][n].validator)
            }
        }
        for (var i in r)
            if (e[i])
                for (n = 0; n < r[i].length; n += 1) {
                    if ("function" != typeof r[i][n])
                        throw new Error("Validator is not a function");
                    if (!r[i][n](e[i]))
                        throw new Error("Validation failed for " + i + ",should be validated by " + r[i][n].validator)
                }
        return !0
    }
    function o(e) {
        var r = {}
          , i = {};
        for (var n in e)
            if (void 0 !== n) {
                var o = n
                  , a = e[n][0];
                "required" === e[n][1] ? r[o] = t.validatorArray[a] : i[o] = t.validatorArray[a]
            }
        return {
            requiredArgs: r,
            optionalArgs: i
        }
    }
    !function(e) {
        e.required = "required",
        e.optional = "optional"
    }(t.AssertType || (t.AssertType = {})),
    t.validatorArray = {
        isNumber: [i.isNumber],
        isString: [i.isString],
        isBoolean: [i.isBoolean],
        isArray: [i.isArray],
        isJsonString: [i.isJsonString],
        isObject: [i.isObject],
        isFunction: [i.isFunction],
        isHex: [i.isHex],
        isPublicKey: [i.isPublicKey],
        isPrivateKey: [i.isPrivateKey],
        isAddress: [i.isAddress],
        isHash: [i.isHash],
        isBlockNumber: [i.isBlockNumber],
        isBech32Address: [i.isBech32Address],
        isBech32TestNetAddress: [i.isBech32TestNetAddress],
        isValidAddress: [i.isValidAddress]
    },
    t.validateArgs = n,
    t.generateValidateObjects = o;
    t.assertObject = function(e) {
        return function(t, r, i) {
            var a = o(e)
              , s = a.requiredArgs
              , u = a.optionalArgs
              , f = i.value;
            return i.value = function() {
                for (var e = [], t = 0; t < arguments.length; t++)
                    e[t] = arguments[t];
                return n(e[0], s, u),
                f.apply(this, e)
            }
            ,
            i
        }
    }
}
, function(e, t, r) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }),
    function(e) {
        e.Harmony = "hmy",
        e.Ethereum = "eth"
    }(t.ChainType || (t.ChainType = {})),
    function(e) {
        e[e.Default = 0] = "Default",
        e[e.EthMainnet = 1] = "EthMainnet",
        e[e.Morden = 2] = "Morden",
        e[e.Ropsten = 3] = "Ropsten",
        e[e.Rinkeby = 4] = "Rinkeby",
        e[e.RootstockMainnet = 30] = "RootstockMainnet",
        e[e.RootstockTestnet = 31] = "RootstockTestnet",
        e[e.Kovan = 42] = "Kovan",
        e[e.EtcMainnet = 61] = "EtcMainnet",
        e[e.EtcTestnet = 62] = "EtcTestnet",
        e[e.Geth = 1337] = "Geth",
        e[e.Ganache = 0] = "Ganache",
        e[e.HmyMainnet = 1] = "HmyMainnet",
        e[e.HmyTestnet = 2] = "HmyTestnet",
        e[e.HmyLocal = 2] = "HmyLocal",
        e[e.HmyPangaea = 3] = "HmyPangaea"
    }(t.ChainID || (t.ChainID = {})),
    t.defaultConfig = {
        Default: {
            Chain_ID: 2,
            Chain_Type: "hmy",
            Chain_URL: "http://localhost:9500",
            Network_ID: "Local"
        },
        DefaultWS: {
            Chain_ID: 2,
            Chain_Type: "hmy",
            Chain_URL: "ws://localhost:9800",
            Network_ID: "LocalWS"
        }
    };
    var i = function() {
        function e(e, r) {
            void 0 === r && (r = t.defaultConfig.Default.Chain_ID),
            this.chainType = e,
            this.chainId = r
        }
        return Object.defineProperty(e.prototype, "chainPrefix", {
            get: function() {
                switch (this.chainType) {
                case "eth":
                    return "eth";
                case "hmy":
                default:
                    return "hmy"
                }
            },
            enumerable: !0,
            configurable: !0
        }),
        Object.defineProperty(e.prototype, "getChainId", {
            get: function() {
                return this.chainId
            },
            enumerable: !0,
            configurable: !0
        }),
        e.prototype.setChainId = function(e) {
            this.chainId = e
        }
        ,
        e.prototype.setChainType = function(e) {
            this.chainType = e
        }
        ,
        e
    }();
    t.HarmonyCore = i,
    t.HDPath = "m/44'/1023'/0'/0/",
    t.AddressSuffix = "-"
}
, function(e, t, r) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }),
    t.defineReadOnly = function(e, t, r) {
        Object.defineProperty(e, t, {
            enumerable: !0,
            value: r,
            writable: !1
        })
    }
}
, function(e, t, r) {
    var i = r(178)
      , n = r(5).Buffer
      , o = r(36)
      , a = r(309)
      , s = r(311)
      , u = n.from("Bitcoin seed", "utf8")
      , f = {
        private: 76066276,
        public: 76067358
    };
    function c(e) {
        this.versions = e || f,
        this.depth = 0,
        this.index = 0,
        this._privateKey = null,
        this._publicKey = null,
        this.chainCode = null,
        this._fingerprint = 0,
        this.parentFingerprint = 0
    }
    function h(e, t, r) {
        var i = n.allocUnsafe(78);
        i.writeUInt32BE(t, 0),
        i.writeUInt8(e.depth, 4);
        var o = e.depth ? e.parentFingerprint : 0;
        return i.writeUInt32BE(o, 5),
        i.writeUInt32BE(e.index, 9),
        e.chainCode.copy(i, 13),
        r.copy(i, 45),
        i
    }
    function l(e) {
        var t = o.createHash("sha256").update(e).digest();
        return o.createHash("ripemd160").update(t).digest()
    }
    Object.defineProperty(c.prototype, "fingerprint", {
        get: function() {
            return this._fingerprint
        }
    }),
    Object.defineProperty(c.prototype, "identifier", {
        get: function() {
            return this._identifier
        }
    }),
    Object.defineProperty(c.prototype, "pubKeyHash", {
        get: function() {
            return this.identifier
        }
    }),
    Object.defineProperty(c.prototype, "privateKey", {
        get: function() {
            return this._privateKey
        },
        set: function(e) {
            i.equal(e.length, 32, "Private key must be 32 bytes."),
            i(!0 === s.privateKeyVerify(e), "Invalid private key"),
            this._privateKey = e,
            this._publicKey = s.publicKeyCreate(e, !0),
            this._identifier = l(this.publicKey),
            this._fingerprint = this._identifier.slice(0, 4).readUInt32BE(0)
        }
    }),
    Object.defineProperty(c.prototype, "publicKey", {
        get: function() {
            return this._publicKey
        },
        set: function(e) {
            i(33 === e.length || 65 === e.length, "Public key must be 33 or 65 bytes."),
            i(!0 === s.publicKeyVerify(e), "Invalid public key"),
            this._publicKey = s.publicKeyConvert(e, !0),
            this._identifier = l(this.publicKey),
            this._fingerprint = this._identifier.slice(0, 4).readUInt32BE(0),
            this._privateKey = null
        }
    }),
    Object.defineProperty(c.prototype, "privateExtendedKey", {
        get: function() {
            return this._privateKey ? a.encode(h(this, this.versions.private, n.concat([n.alloc(1, 0), this.privateKey]))) : null
        }
    }),
    Object.defineProperty(c.prototype, "publicExtendedKey", {
        get: function() {
            return a.encode(h(this, this.versions.public, this.publicKey))
        }
    }),
    c.prototype.derive = function(e) {
        if ("m" === e || "M" === e || "m'" === e || "M'" === e)
            return this;
        var t = e.split("/")
          , r = this;
        return t.forEach((function(e, t) {
            if (0 !== t) {
                var n = e.length > 1 && "'" === e[e.length - 1]
                  , o = parseInt(e, 10);
                i(o < 2147483648, "Invalid index"),
                n && (o += 2147483648),
                r = r.deriveChild(o)
            } else
                i(/^[mM]{1}/.test(e), 'Path must start with "m" or "M"')
        }
        )),
        r
    }
    ,
    c.prototype.deriveChild = function(e) {
        var t, r = e >= 2147483648, a = n.allocUnsafe(4);
        if (a.writeUInt32BE(e, 0),
        r) {
            i(this.privateKey, "Could not derive hardened child key");
            var u = this.privateKey
              , f = n.alloc(1, 0);
            u = n.concat([f, u]),
            t = n.concat([u, a])
        } else
            t = n.concat([this.publicKey, a]);
        var h = o.createHmac("sha512", this.chainCode).update(t).digest()
          , l = h.slice(0, 32)
          , d = h.slice(32)
          , p = new c(this.versions);
        if (this.privateKey)
            try {
                p.privateKey = s.privateKeyTweakAdd(this.privateKey, l)
            } catch (t) {
                return this.deriveChild(e + 1)
            }
        else
            try {
                p.publicKey = s.publicKeyTweakAdd(this.publicKey, l, !0)
            } catch (t) {
                return this.deriveChild(e + 1)
            }
        return p.chainCode = d,
        p.depth = this.depth + 1,
        p.parentFingerprint = this.fingerprint,
        p.index = e,
        p
    }
    ,
    c.prototype.sign = function(e) {
        return s.sign(e, this.privateKey).signature
    }
    ,
    c.prototype.verify = function(e, t) {
        return s.verify(e, t, this.publicKey)
    }
    ,
    c.prototype.wipePrivateData = function() {
        return this._privateKey && o.randomBytes(this._privateKey.length).copy(this._privateKey),
        this._privateKey = null,
        this
    }
    ,
    c.prototype.toJSON = function() {
        return {
            xpriv: this.privateExtendedKey,
            xpub: this.publicExtendedKey
        }
    }
    ,
    c.fromMasterSeed = function(e, t) {
        var r = o.createHmac("sha512", u).update(e).digest()
          , i = r.slice(0, 32)
          , n = r.slice(32)
          , a = new c(t);
        return a.chainCode = n,
        a.privateKey = i,
        a
    }
    ,
    c.fromExtendedKey = function(e, t) {
        var r = new c(t = t || f)
          , n = a.decode(e)
          , o = n.readUInt32BE(0);
        i(o === t.private || o === t.public, "Version mismatch: does not match private or public"),
        r.depth = n.readUInt8(4),
        r.parentFingerprint = n.readUInt32BE(5),
        r.index = n.readUInt32BE(9),
        r.chainCode = n.slice(13, 45);
        var s = n.slice(45);
        return 0 === s.readUInt8(0) ? (i(o === t.private, "Version mismatch: version does not match private"),
        r.privateKey = s.slice(1)) : (i(o === t.public, "Version mismatch: version does not match public"),
        r.publicKey = s),
        r
    }
    ,
    c.fromJSON = function(e) {
        return c.fromExtendedKey(e.xpriv)
    }
    ,
    c.HARDENED_OFFSET = 2147483648,
    e.exports = c
}
, function(e, t) {
    e.exports = function(e) {
        return e && "object" == typeof e && "function" == typeof e.copy && "function" == typeof e.fill && "function" == typeof e.readUInt8
    }
}
, function(e, t) {
    "function" == typeof Object.create ? e.exports = function(e, t) {
        e.super_ = t,
        e.prototype = Object.create(t.prototype, {
            constructor: {
                value: e,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        })
    }
    : e.exports = function(e, t) {
        e.super_ = t;
        var r = function() {};
        r.prototype = t.prototype,
        e.prototype = new r,
        e.prototype.constructor = e
    }
}
, function(e, t, r) {
    "use strict";
    t.byteLength = function(e) {
        var t = f(e)
          , r = t[0]
          , i = t[1];
        return 3 * (r + i) / 4 - i
    }
    ,
    t.toByteArray = function(e) {
        var t, r, i = f(e), a = i[0], s = i[1], u = new o(function(e, t, r) {
            return 3 * (t + r) / 4 - r
        }(0, a, s)), c = 0, h = s > 0 ? a - 4 : a;
        for (r = 0; r < h; r += 4)
            t = n[e.charCodeAt(r)] << 18 | n[e.charCodeAt(r + 1)] << 12 | n[e.charCodeAt(r + 2)] << 6 | n[e.charCodeAt(r + 3)],
            u[c++] = t >> 16 & 255,
            u[c++] = t >> 8 & 255,
            u[c++] = 255 & t;
        2 === s && (t = n[e.charCodeAt(r)] << 2 | n[e.charCodeAt(r + 1)] >> 4,
        u[c++] = 255 & t);
        1 === s && (t = n[e.charCodeAt(r)] << 10 | n[e.charCodeAt(r + 1)] << 4 | n[e.charCodeAt(r + 2)] >> 2,
        u[c++] = t >> 8 & 255,
        u[c++] = 255 & t);
        return u
    }
    ,
    t.fromByteArray = function(e) {
        for (var t, r = e.length, n = r % 3, o = [], a = 0, s = r - n; a < s; a += 16383)
            o.push(c(e, a, a + 16383 > s ? s : a + 16383));
        1 === n ? (t = e[r - 1],
        o.push(i[t >> 2] + i[t << 4 & 63] + "==")) : 2 === n && (t = (e[r - 2] << 8) + e[r - 1],
        o.push(i[t >> 10] + i[t >> 4 & 63] + i[t << 2 & 63] + "="));
        return o.join("")
    }
    ;
    for (var i = [], n = [], o = "undefined" != typeof Uint8Array ? Uint8Array : Array, a = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", s = 0, u = a.length; s < u; ++s)
        i[s] = a[s],
        n[a.charCodeAt(s)] = s;
    function f(e) {
        var t = e.length;
        if (t % 4 > 0)
            throw new Error("Invalid string. Length must be a multiple of 4");
        var r = e.indexOf("=");
        return -1 === r && (r = t),
        [r, r === t ? 0 : 4 - r % 4]
    }
    function c(e, t, r) {
        for (var n, o, a = [], s = t; s < r; s += 3)
            n = (e[s] << 16 & 16711680) + (e[s + 1] << 8 & 65280) + (255 & e[s + 2]),
            a.push(i[(o = n) >> 18 & 63] + i[o >> 12 & 63] + i[o >> 6 & 63] + i[63 & o]);
        return a.join("")
    }
    n["-".charCodeAt(0)] = 62,
    n["_".charCodeAt(0)] = 63
}
, function(e, t) {
    /*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
    t.read = function(e, t, r, i, n) {
        var o, a, s = 8 * n - i - 1, u = (1 << s) - 1, f = u >> 1, c = -7, h = r ? n - 1 : 0, l = r ? -1 : 1, d = e[t + h];
        for (h += l,
        o = d & (1 << -c) - 1,
        d >>= -c,
        c += s; c > 0; o = 256 * o + e[t + h],
        h += l,
        c -= 8)
            ;
        for (a = o & (1 << -c) - 1,
        o >>= -c,
        c += i; c > 0; a = 256 * a + e[t + h],
        h += l,
        c -= 8)
            ;
        if (0 === o)
            o = 1 - f;
        else {
            if (o === u)
                return a ? NaN : 1 / 0 * (d ? -1 : 1);
            a += Math.pow(2, i),
            o -= f
        }
        return (d ? -1 : 1) * a * Math.pow(2, o - i)
    }
    ,
    t.write = function(e, t, r, i, n, o) {
        var a, s, u, f = 8 * o - n - 1, c = (1 << f) - 1, h = c >> 1, l = 23 === n ? Math.pow(2, -24) - Math.pow(2, -77) : 0, d = i ? 0 : o - 1, p = i ? 1 : -1, b = t < 0 || 0 === t && 1 / t < 0 ? 1 : 0;
        for (t = Math.abs(t),
        isNaN(t) || t === 1 / 0 ? (s = isNaN(t) ? 1 : 0,
        a = c) : (a = Math.floor(Math.log(t) / Math.LN2),
        t * (u = Math.pow(2, -a)) < 1 && (a--,
        u *= 2),
        (t += a + h >= 1 ? l / u : l * Math.pow(2, 1 - h)) * u >= 2 && (a++,
        u /= 2),
        a + h >= c ? (s = 0,
        a = c) : a + h >= 1 ? (s = (t * u - 1) * Math.pow(2, n),
        a += h) : (s = t * Math.pow(2, h - 1) * Math.pow(2, n),
        a = 0)); n >= 8; e[r + d] = 255 & s,
        d += p,
        s /= 256,
        n -= 8)
            ;
        for (a = a << n | s,
        f += n; f > 0; e[r + d] = 255 & a,
        d += p,
        a /= 256,
        f -= 8)
            ;
        e[r + d - p] |= 128 * b
    }
}
, function(e, t, r) {
    (t = e.exports = r(119)).Stream = t,
    t.Readable = t,
    t.Writable = r(123),
    t.Duplex = r(42),
    t.Transform = r(124),
    t.PassThrough = r(225),
    t.finished = r(80),
    t.pipeline = r(226)
}
, function(e, t) {}
, function(e, t, r) {
    "use strict";
    function i(e, t) {
        var r = Object.keys(e);
        if (Object.getOwnPropertySymbols) {
            var i = Object.getOwnPropertySymbols(e);
            t && (i = i.filter((function(t) {
                return Object.getOwnPropertyDescriptor(e, t).enumerable
            }
            ))),
            r.push.apply(r, i)
        }
        return r
    }
    function n(e, t, r) {
        return t in e ? Object.defineProperty(e, t, {
            value: r,
            enumerable: !0,
            configurable: !0,
            writable: !0
        }) : e[t] = r,
        e
    }
    function o(e, t) {
        for (var r = 0; r < t.length; r++) {
            var i = t[r];
            i.enumerable = i.enumerable || !1,
            i.configurable = !0,
            "value"in i && (i.writable = !0),
            Object.defineProperty(e, i.key, i)
        }
    }
    var a = r(8).Buffer
      , s = r(222).inspect
      , u = s && s.custom || "inspect";
    e.exports = function() {
        function e() {
            !function(e, t) {
                if (!(e instanceof t))
                    throw new TypeError("Cannot call a class as a function")
            }(this, e),
            this.head = null,
            this.tail = null,
            this.length = 0
        }
        var t, r, f;
        return t = e,
        (r = [{
            key: "push",
            value: function(e) {
                var t = {
                    data: e,
                    next: null
                };
                this.length > 0 ? this.tail.next = t : this.head = t,
                this.tail = t,
                ++this.length
            }
        }, {
            key: "unshift",
            value: function(e) {
                var t = {
                    data: e,
                    next: this.head
                };
                0 === this.length && (this.tail = t),
                this.head = t,
                ++this.length
            }
        }, {
            key: "shift",
            value: function() {
                if (0 !== this.length) {
                    var e = this.head.data;
                    return 1 === this.length ? this.head = this.tail = null : this.head = this.head.next,
                    --this.length,
                    e
                }
            }
        }, {
            key: "clear",
            value: function() {
                this.head = this.tail = null,
                this.length = 0
            }
        }, {
            key: "join",
            value: function(e) {
                if (0 === this.length)
                    return "";
                for (var t = this.head, r = "" + t.data; t = t.next; )
                    r += e + t.data;
                return r
            }
        }, {
            key: "concat",
            value: function(e) {
                if (0 === this.length)
                    return a.alloc(0);
                for (var t, r, i, n = a.allocUnsafe(e >>> 0), o = this.head, s = 0; o; )
                    t = o.data,
                    r = n,
                    i = s,
                    a.prototype.copy.call(t, r, i),
                    s += o.data.length,
                    o = o.next;
                return n
            }
        }, {
            key: "consume",
            value: function(e, t) {
                var r;
                return e < this.head.data.length ? (r = this.head.data.slice(0, e),
                this.head.data = this.head.data.slice(e)) : r = e === this.head.data.length ? this.shift() : t ? this._getString(e) : this._getBuffer(e),
                r
            }
        }, {
            key: "first",
            value: function() {
                return this.head.data
            }
        }, {
            key: "_getString",
            value: function(e) {
                var t = this.head
                  , r = 1
                  , i = t.data;
                for (e -= i.length; t = t.next; ) {
                    var n = t.data
                      , o = e > n.length ? n.length : e;
                    if (o === n.length ? i += n : i += n.slice(0, e),
                    0 == (e -= o)) {
                        o === n.length ? (++r,
                        t.next ? this.head = t.next : this.head = this.tail = null) : (this.head = t,
                        t.data = n.slice(o));
                        break
                    }
                    ++r
                }
                return this.length -= r,
                i
            }
        }, {
            key: "_getBuffer",
            value: function(e) {
                var t = a.allocUnsafe(e)
                  , r = this.head
                  , i = 1;
                for (r.data.copy(t),
                e -= r.data.length; r = r.next; ) {
                    var n = r.data
                      , o = e > n.length ? n.length : e;
                    if (n.copy(t, t.length - e, 0, o),
                    0 == (e -= o)) {
                        o === n.length ? (++i,
                        r.next ? this.head = r.next : this.head = this.tail = null) : (this.head = r,
                        r.data = n.slice(o));
                        break
                    }
                    ++i
                }
                return this.length -= i,
                t
            }
        }, {
            key: u,
            value: function(e, t) {
                return s(this, function(e) {
                    for (var t = 1; t < arguments.length; t++) {
                        var r = null != arguments[t] ? arguments[t] : {};
                        t % 2 ? i(Object(r), !0).forEach((function(t) {
                            n(e, t, r[t])
                        }
                        )) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r)) : i(Object(r)).forEach((function(t) {
                            Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(r, t))
                        }
                        ))
                    }
                    return e
                }({}, t, {
                    depth: 0,
                    customInspect: !1
                }))
            }
        }]) && o(t.prototype, r),
        f && o(t, f),
        e
    }()
}
, function(e, t) {}
, function(e, t, r) {
    "use strict";
    (function(t) {
        var i;
        function n(e, t, r) {
            return t in e ? Object.defineProperty(e, t, {
                value: r,
                enumerable: !0,
                configurable: !0,
                writable: !0
            }) : e[t] = r,
            e
        }
        var o = r(80)
          , a = Symbol("lastResolve")
          , s = Symbol("lastReject")
          , u = Symbol("error")
          , f = Symbol("ended")
          , c = Symbol("lastPromise")
          , h = Symbol("handlePromise")
          , l = Symbol("stream");
        function d(e, t) {
            return {
                value: e,
                done: t
            }
        }
        function p(e) {
            var t = e[a];
            if (null !== t) {
                var r = e[l].read();
                null !== r && (e[c] = null,
                e[a] = null,
                e[s] = null,
                t(d(r, !1)))
            }
        }
        function b(e) {
            t.nextTick(p, e)
        }
        var m = Object.getPrototypeOf((function() {}
        ))
          , g = Object.setPrototypeOf((n(i = {
            get stream() {
                return this[l]
            },
            next: function() {
                var e = this
                  , r = this[u];
                if (null !== r)
                    return Promise.reject(r);
                if (this[f])
                    return Promise.resolve(d(void 0, !0));
                if (this[l].destroyed)
                    return new Promise((function(r, i) {
                        t.nextTick((function() {
                            e[u] ? i(e[u]) : r(d(void 0, !0))
                        }
                        ))
                    }
                    ));
                var i, n = this[c];
                if (n)
                    i = new Promise(function(e, t) {
                        return function(r, i) {
                            e.then((function() {
                                t[f] ? r(d(void 0, !0)) : t[h](r, i)
                            }
                            ), i)
                        }
                    }(n, this));
                else {
                    var o = this[l].read();
                    if (null !== o)
                        return Promise.resolve(d(o, !1));
                    i = new Promise(this[h])
                }
                return this[c] = i,
                i
            }
        }, Symbol.asyncIterator, (function() {
            return this
        }
        )),
        n(i, "return", (function() {
            var e = this;
            return new Promise((function(t, r) {
                e[l].destroy(null, (function(e) {
                    e ? r(e) : t(d(void 0, !0))
                }
                ))
            }
            ))
        }
        )),
        i), m);
        e.exports = function(e) {
            var t, r = Object.create(g, (n(t = {}, l, {
                value: e,
                writable: !0
            }),
            n(t, a, {
                value: null,
                writable: !0
            }),
            n(t, s, {
                value: null,
                writable: !0
            }),
            n(t, u, {
                value: null,
                writable: !0
            }),
            n(t, f, {
                value: e._readableState.endEmitted,
                writable: !0
            }),
            n(t, h, {
                value: function(e, t) {
                    var i = r[l].read();
                    i ? (r[c] = null,
                    r[a] = null,
                    r[s] = null,
                    e(d(i, !1))) : (r[a] = e,
                    r[s] = t)
                },
                writable: !0
            }),
            t));
            return r[c] = null,
            o(e, (function(e) {
                if (e && "ERR_STREAM_PREMATURE_CLOSE" !== e.code) {
                    var t = r[s];
                    return null !== t && (r[c] = null,
                    r[a] = null,
                    r[s] = null,
                    t(e)),
                    void (r[u] = e)
                }
                var i = r[a];
                null !== i && (r[c] = null,
                r[a] = null,
                r[s] = null,
                i(d(void 0, !0))),
                r[f] = !0
            }
            )),
            e.on("readable", b.bind(null, r)),
            r
        }
    }
    ).call(this, r(14))
}
, function(e, t) {
    e.exports = function() {
        throw new Error("Readable.from is not available in the browser")
    }
}
, function(e, t, r) {
    "use strict";
    e.exports = n;
    var i = r(124);
    function n(e) {
        if (!(this instanceof n))
            return new n(e);
        i.call(this, e)
    }
    r(4)(n, i),
    n.prototype._transform = function(e, t, r) {
        r(null, e)
    }
}
, function(e, t, r) {
    "use strict";
    var i;
    var n = r(41).codes
      , o = n.ERR_MISSING_ARGS
      , a = n.ERR_STREAM_DESTROYED;
    function s(e) {
        if (e)
            throw e
    }
    function u(e, t, n, o) {
        o = function(e) {
            var t = !1;
            return function() {
                t || (t = !0,
                e.apply(void 0, arguments))
            }
        }(o);
        var s = !1;
        e.on("close", (function() {
            s = !0
        }
        )),
        void 0 === i && (i = r(80)),
        i(e, {
            readable: t,
            writable: n
        }, (function(e) {
            if (e)
                return o(e);
            s = !0,
            o()
        }
        ));
        var u = !1;
        return function(t) {
            if (!s && !u)
                return u = !0,
                function(e) {
                    return e.setHeader && "function" == typeof e.abort
                }(e) ? e.abort() : "function" == typeof e.destroy ? e.destroy() : void o(t || new a("pipe"))
        }
    }
    function f(e) {
        e()
    }
    function c(e, t) {
        return e.pipe(t)
    }
    function h(e) {
        return e.length ? "function" != typeof e[e.length - 1] ? s : e.pop() : s
    }
    e.exports = function() {
        for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++)
            t[r] = arguments[r];
        var i, n = h(t);
        if (Array.isArray(t[0]) && (t = t[0]),
        t.length < 2)
            throw new o("streams");
        var a = t.map((function(e, r) {
            var o = r < t.length - 1;
            return u(e, o, r > 0, (function(e) {
                i || (i = e),
                e && a.forEach(f),
                o || (a.forEach(f),
                n(i))
            }
            ))
        }
        ));
        return t.reduce(c)
    }
}
, function(e, t, r) {
    var i = r(4)
      , n = r(43)
      , o = r(5).Buffer
      , a = [1518500249, 1859775393, -1894007588, -899497514]
      , s = new Array(80);
    function u() {
        this.init(),
        this._w = s,
        n.call(this, 64, 56)
    }
    function f(e) {
        return e << 30 | e >>> 2
    }
    function c(e, t, r, i) {
        return 0 === e ? t & r | ~t & i : 2 === e ? t & r | t & i | r & i : t ^ r ^ i
    }
    i(u, n),
    u.prototype.init = function() {
        return this._a = 1732584193,
        this._b = 4023233417,
        this._c = 2562383102,
        this._d = 271733878,
        this._e = 3285377520,
        this
    }
    ,
    u.prototype._update = function(e) {
        for (var t, r = this._w, i = 0 | this._a, n = 0 | this._b, o = 0 | this._c, s = 0 | this._d, u = 0 | this._e, h = 0; h < 16; ++h)
            r[h] = e.readInt32BE(4 * h);
        for (; h < 80; ++h)
            r[h] = r[h - 3] ^ r[h - 8] ^ r[h - 14] ^ r[h - 16];
        for (var l = 0; l < 80; ++l) {
            var d = ~~(l / 20)
              , p = 0 | ((t = i) << 5 | t >>> 27) + c(d, n, o, s) + u + r[l] + a[d];
            u = s,
            s = o,
            o = f(n),
            n = i,
            i = p
        }
        this._a = i + this._a | 0,
        this._b = n + this._b | 0,
        this._c = o + this._c | 0,
        this._d = s + this._d | 0,
        this._e = u + this._e | 0
    }
    ,
    u.prototype._hash = function() {
        var e = o.allocUnsafe(20);
        return e.writeInt32BE(0 | this._a, 0),
        e.writeInt32BE(0 | this._b, 4),
        e.writeInt32BE(0 | this._c, 8),
        e.writeInt32BE(0 | this._d, 12),
        e.writeInt32BE(0 | this._e, 16),
        e
    }
    ,
    e.exports = u
}
, function(e, t, r) {
    var i = r(4)
      , n = r(43)
      , o = r(5).Buffer
      , a = [1518500249, 1859775393, -1894007588, -899497514]
      , s = new Array(80);
    function u() {
        this.init(),
        this._w = s,
        n.call(this, 64, 56)
    }
    function f(e) {
        return e << 5 | e >>> 27
    }
    function c(e) {
        return e << 30 | e >>> 2
    }
    function h(e, t, r, i) {
        return 0 === e ? t & r | ~t & i : 2 === e ? t & r | t & i | r & i : t ^ r ^ i
    }
    i(u, n),
    u.prototype.init = function() {
        return this._a = 1732584193,
        this._b = 4023233417,
        this._c = 2562383102,
        this._d = 271733878,
        this._e = 3285377520,
        this
    }
    ,
    u.prototype._update = function(e) {
        for (var t, r = this._w, i = 0 | this._a, n = 0 | this._b, o = 0 | this._c, s = 0 | this._d, u = 0 | this._e, l = 0; l < 16; ++l)
            r[l] = e.readInt32BE(4 * l);
        for (; l < 80; ++l)
            r[l] = (t = r[l - 3] ^ r[l - 8] ^ r[l - 14] ^ r[l - 16]) << 1 | t >>> 31;
        for (var d = 0; d < 80; ++d) {
            var p = ~~(d / 20)
              , b = f(i) + h(p, n, o, s) + u + r[d] + a[p] | 0;
            u = s,
            s = o,
            o = c(n),
            n = i,
            i = b
        }
        this._a = i + this._a | 0,
        this._b = n + this._b | 0,
        this._c = o + this._c | 0,
        this._d = s + this._d | 0,
        this._e = u + this._e | 0
    }
    ,
    u.prototype._hash = function() {
        var e = o.allocUnsafe(20);
        return e.writeInt32BE(0 | this._a, 0),
        e.writeInt32BE(0 | this._b, 4),
        e.writeInt32BE(0 | this._c, 8),
        e.writeInt32BE(0 | this._d, 12),
        e.writeInt32BE(0 | this._e, 16),
        e
    }
    ,
    e.exports = u
}
, function(e, t, r) {
    var i = r(4)
      , n = r(125)
      , o = r(43)
      , a = r(5).Buffer
      , s = new Array(64);
    function u() {
        this.init(),
        this._w = s,
        o.call(this, 64, 56)
    }
    i(u, n),
    u.prototype.init = function() {
        return this._a = 3238371032,
        this._b = 914150663,
        this._c = 812702999,
        this._d = 4144912697,
        this._e = 4290775857,
        this._f = 1750603025,
        this._g = 1694076839,
        this._h = 3204075428,
        this
    }
    ,
    u.prototype._hash = function() {
        var e = a.allocUnsafe(28);
        return e.writeInt32BE(this._a, 0),
        e.writeInt32BE(this._b, 4),
        e.writeInt32BE(this._c, 8),
        e.writeInt32BE(this._d, 12),
        e.writeInt32BE(this._e, 16),
        e.writeInt32BE(this._f, 20),
        e.writeInt32BE(this._g, 24),
        e
    }
    ,
    e.exports = u
}
, function(e, t, r) {
    var i = r(4)
      , n = r(126)
      , o = r(43)
      , a = r(5).Buffer
      , s = new Array(160);
    function u() {
        this.init(),
        this._w = s,
        o.call(this, 128, 112)
    }
    i(u, n),
    u.prototype.init = function() {
        return this._ah = 3418070365,
        this._bh = 1654270250,
        this._ch = 2438529370,
        this._dh = 355462360,
        this._eh = 1731405415,
        this._fh = 2394180231,
        this._gh = 3675008525,
        this._hh = 1203062813,
        this._al = 3238371032,
        this._bl = 914150663,
        this._cl = 812702999,
        this._dl = 4144912697,
        this._el = 4290775857,
        this._fl = 1750603025,
        this._gl = 1694076839,
        this._hl = 3204075428,
        this
    }
    ,
    u.prototype._hash = function() {
        var e = a.allocUnsafe(48);
        function t(t, r, i) {
            e.writeInt32BE(t, i),
            e.writeInt32BE(r, i + 4)
        }
        return t(this._ah, this._al, 0),
        t(this._bh, this._bl, 8),
        t(this._ch, this._cl, 16),
        t(this._dh, this._dl, 24),
        t(this._eh, this._el, 32),
        t(this._fh, this._fl, 40),
        e
    }
    ,
    e.exports = u
}
, function(e, t) {
    "function" == typeof Object.create ? e.exports = function(e, t) {
        t && (e.super_ = t,
        e.prototype = Object.create(t.prototype, {
            constructor: {
                value: e,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }))
    }
    : e.exports = function(e, t) {
        if (t) {
            e.super_ = t;
            var r = function() {};
            r.prototype = t.prototype,
            e.prototype = new r,
            e.prototype.constructor = e
        }
    }
}
, function(e, t) {}
, function(e, t, r) {
    "use strict";
    var i = r(82).Buffer
      , n = r(234);
    e.exports = function() {
        function e() {
            !function(e, t) {
                if (!(e instanceof t))
                    throw new TypeError("Cannot call a class as a function")
            }(this, e),
            this.head = null,
            this.tail = null,
            this.length = 0
        }
        return e.prototype.push = function(e) {
            var t = {
                data: e,
                next: null
            };
            this.length > 0 ? this.tail.next = t : this.head = t,
            this.tail = t,
            ++this.length
        }
        ,
        e.prototype.unshift = function(e) {
            var t = {
                data: e,
                next: this.head
            };
            0 === this.length && (this.tail = t),
            this.head = t,
            ++this.length
        }
        ,
        e.prototype.shift = function() {
            if (0 !== this.length) {
                var e = this.head.data;
                return 1 === this.length ? this.head = this.tail = null : this.head = this.head.next,
                --this.length,
                e
            }
        }
        ,
        e.prototype.clear = function() {
            this.head = this.tail = null,
            this.length = 0
        }
        ,
        e.prototype.join = function(e) {
            if (0 === this.length)
                return "";
            for (var t = this.head, r = "" + t.data; t = t.next; )
                r += e + t.data;
            return r
        }
        ,
        e.prototype.concat = function(e) {
            if (0 === this.length)
                return i.alloc(0);
            if (1 === this.length)
                return this.head.data;
            for (var t, r, n, o = i.allocUnsafe(e >>> 0), a = this.head, s = 0; a; )
                t = a.data,
                r = o,
                n = s,
                t.copy(r, n),
                s += a.data.length,
                a = a.next;
            return o
        }
        ,
        e
    }(),
    n && n.inspect && n.inspect.custom && (e.exports.prototype[n.inspect.custom] = function() {
        var e = n.inspect({
            length: this.length
        });
        return this.constructor.name + " " + e
    }
    )
}
, function(e, t) {}
, function(e, t, r) {
    (function(e, t) {
        !function(e, r) {
            "use strict";
            if (!e.setImmediate) {
                var i, n, o, a, s, u = 1, f = {}, c = !1, h = e.document, l = Object.getPrototypeOf && Object.getPrototypeOf(e);
                l = l && l.setTimeout ? l : e,
                "[object process]" === {}.toString.call(e.process) ? i = function(e) {
                    t.nextTick((function() {
                        p(e)
                    }
                    ))
                }
                : !function() {
                    if (e.postMessage && !e.importScripts) {
                        var t = !0
                          , r = e.onmessage;
                        return e.onmessage = function() {
                            t = !1
                        }
                        ,
                        e.postMessage("", "*"),
                        e.onmessage = r,
                        t
                    }
                }() ? e.MessageChannel ? ((o = new MessageChannel).port1.onmessage = function(e) {
                    p(e.data)
                }
                ,
                i = function(e) {
                    o.port2.postMessage(e)
                }
                ) : h && "onreadystatechange"in h.createElement("script") ? (n = h.documentElement,
                i = function(e) {
                    var t = h.createElement("script");
                    t.onreadystatechange = function() {
                        p(e),
                        t.onreadystatechange = null,
                        n.removeChild(t),
                        t = null
                    }
                    ,
                    n.appendChild(t)
                }
                ) : i = function(e) {
                    setTimeout(p, 0, e)
                }
                : (a = "setImmediate$" + Math.random() + "$",
                s = function(t) {
                    t.source === e && "string" == typeof t.data && 0 === t.data.indexOf(a) && p(+t.data.slice(a.length))
                }
                ,
                e.addEventListener ? e.addEventListener("message", s, !1) : e.attachEvent("onmessage", s),
                i = function(t) {
                    e.postMessage(a + t, "*")
                }
                ),
                l.setImmediate = function(e) {
                    "function" != typeof e && (e = new Function("" + e));
                    for (var t = new Array(arguments.length - 1), r = 0; r < t.length; r++)
                        t[r] = arguments[r + 1];
                    var n = {
                        callback: e,
                        args: t
                    };
                    return f[u] = n,
                    i(u),
                    u++
                }
                ,
                l.clearImmediate = d
            }
            function d(e) {
                delete f[e]
            }
            function p(e) {
                if (c)
                    setTimeout(p, 0, e);
                else {
                    var t = f[e];
                    if (t) {
                        c = !0;
                        try {
                            !function(e) {
                                var t = e.callback
                                  , r = e.args;
                                switch (r.length) {
                                case 0:
                                    t();
                                    break;
                                case 1:
                                    t(r[0]);
                                    break;
                                case 2:
                                    t(r[0], r[1]);
                                    break;
                                case 3:
                                    t(r[0], r[1], r[2]);
                                    break;
                                default:
                                    t.apply(void 0, r)
                                }
                            }(t)
                        } finally {
                            d(e),
                            c = !1
                        }
                    }
                }
            }
        }("undefined" == typeof self ? void 0 === e ? this : e : self)
    }
    ).call(this, r(13), r(14))
}
, function(e, t, r) {
    "use strict";
    e.exports = o;
    var i = r(130)
      , n = Object.create(r(52));
    function o(e) {
        if (!(this instanceof o))
            return new o(e);
        i.call(this, e)
    }
    n.inherits = r(4),
    n.inherits(o, i),
    o.prototype._transform = function(e, t, r) {
        r(null, e)
    }
}
, function(e, t, r) {
    e.exports = r(83)
}
, function(e, t, r) {
    e.exports = r(35)
}
, function(e, t, r) {
    e.exports = r(70).Transform
}
, function(e, t, r) {
    e.exports = r(70).PassThrough
}
, function(e, t, r) {
    "use strict";
    var i = r(4)
      , n = r(5).Buffer
      , o = r(30)
      , a = n.alloc(128);
    function s(e, t) {
        o.call(this, "digest"),
        "string" == typeof t && (t = n.from(t)),
        this._alg = e,
        this._key = t,
        t.length > 64 ? t = e(t) : t.length < 64 && (t = n.concat([t, a], 64));
        for (var r = this._ipad = n.allocUnsafe(64), i = this._opad = n.allocUnsafe(64), s = 0; s < 64; s++)
            r[s] = 54 ^ t[s],
            i[s] = 92 ^ t[s];
        this._hash = [r]
    }
    i(s, o),
    s.prototype._update = function(e) {
        this._hash.push(e)
    }
    ,
    s.prototype._final = function() {
        var e = this._alg(n.concat(this._hash));
        return this._alg(n.concat([this._opad, e]))
    }
    ,
    e.exports = s
}
, function(e, t, r) {
    e.exports = r(133)
}
, function(e, t, r) {
    (function(t) {
        var i, n, o = r(5).Buffer, a = r(134), s = r(135), u = r(136), f = r(137), c = t.crypto && t.crypto.subtle, h = {
            sha: "SHA-1",
            "sha-1": "SHA-1",
            sha1: "SHA-1",
            sha256: "SHA-256",
            "sha-256": "SHA-256",
            sha384: "SHA-384",
            "sha-384": "SHA-384",
            "sha-512": "SHA-512",
            sha512: "SHA-512"
        }, l = [];
        function d() {
            return n || (n = t.process && t.process.nextTick ? t.process.nextTick : t.queueMicrotask ? t.queueMicrotask : t.setImmediate ? t.setImmediate : t.setTimeout)
        }
        function p(e, t, r, i, n) {
            return c.importKey("raw", e, {
                name: "PBKDF2"
            }, !1, ["deriveBits"]).then((function(e) {
                return c.deriveBits({
                    name: "PBKDF2",
                    salt: t,
                    iterations: r,
                    hash: {
                        name: n
                    }
                }, e, i << 3)
            }
            )).then((function(e) {
                return o.from(e)
            }
            ))
        }
        e.exports = function(e, r, n, b, m, g) {
            "function" == typeof m && (g = m,
            m = void 0);
            var v = h[(m = m || "sha1").toLowerCase()];
            if (v && "function" == typeof t.Promise) {
                if (a(n, b),
                e = f(e, s, "Password"),
                r = f(r, s, "Salt"),
                "function" != typeof g)
                    throw new Error("No callback provided to pbkdf2");
                !function(e, t) {
                    e.then((function(e) {
                        d()((function() {
                            t(null, e)
                        }
                        ))
                    }
                    ), (function(e) {
                        d()((function() {
                            t(e)
                        }
                        ))
                    }
                    ))
                }(function(e) {
                    if (t.process && !t.process.browser)
                        return Promise.resolve(!1);
                    if (!c || !c.importKey || !c.deriveBits)
                        return Promise.resolve(!1);
                    if (void 0 !== l[e])
                        return l[e];
                    var r = p(i = i || o.alloc(8), i, 10, 128, e).then((function() {
                        return !0
                    }
                    )).catch((function() {
                        return !1
                    }
                    ));
                    return l[e] = r,
                    r
                }(v).then((function(t) {
                    return t ? p(e, r, n, b, v) : u(e, r, n, b, m)
                }
                )), g)
            } else
                d()((function() {
                    var t;
                    try {
                        t = u(e, r, n, b, m)
                    } catch (e) {
                        return g(e)
                    }
                    g(null, t)
                }
                ))
        }
    }
    ).call(this, r(13))
}
, function(e, t, r) {
    var i = r(245)
      , n = r(85)
      , o = r(86)
      , a = r(258)
      , s = r(63);
    function u(e, t, r) {
        if (e = e.toLowerCase(),
        o[e])
            return n.createCipheriv(e, t, r);
        if (a[e])
            return new i({
                key: t,
                iv: r,
                mode: e
            });
        throw new TypeError("invalid suite type")
    }
    function f(e, t, r) {
        if (e = e.toLowerCase(),
        o[e])
            return n.createDecipheriv(e, t, r);
        if (a[e])
            return new i({
                key: t,
                iv: r,
                mode: e,
                decrypt: !0
            });
        throw new TypeError("invalid suite type")
    }
    t.createCipher = t.Cipher = function(e, t) {
        var r, i;
        if (e = e.toLowerCase(),
        o[e])
            r = o[e].key,
            i = o[e].iv;
        else {
            if (!a[e])
                throw new TypeError("invalid suite type");
            r = 8 * a[e].key,
            i = a[e].iv
        }
        var n = s(t, !1, r, i);
        return u(e, n.key, n.iv)
    }
    ,
    t.createCipheriv = t.Cipheriv = u,
    t.createDecipher = t.Decipher = function(e, t) {
        var r, i;
        if (e = e.toLowerCase(),
        o[e])
            r = o[e].key,
            i = o[e].iv;
        else {
            if (!a[e])
                throw new TypeError("invalid suite type");
            r = 8 * a[e].key,
            i = a[e].iv
        }
        var n = s(t, !1, r, i);
        return f(e, n.key, n.iv)
    }
    ,
    t.createDecipheriv = t.Decipheriv = f,
    t.listCiphers = t.getCiphers = function() {
        return Object.keys(a).concat(n.getCiphers())
    }
}
, function(e, t, r) {
    var i = r(30)
      , n = r(246)
      , o = r(4)
      , a = r(5).Buffer
      , s = {
        "des-ede3-cbc": n.CBC.instantiate(n.EDE),
        "des-ede3": n.EDE,
        "des-ede-cbc": n.CBC.instantiate(n.EDE),
        "des-ede": n.EDE,
        "des-cbc": n.CBC.instantiate(n.DES),
        "des-ecb": n.DES
    };
    function u(e) {
        i.call(this);
        var t, r = e.mode.toLowerCase(), n = s[r];
        t = e.decrypt ? "decrypt" : "encrypt";
        var o = e.key;
        a.isBuffer(o) || (o = a.from(o)),
        "des-ede" !== r && "des-ede-cbc" !== r || (o = a.concat([o, o.slice(0, 8)]));
        var u = e.iv;
        a.isBuffer(u) || (u = a.from(u)),
        this._des = n.create({
            key: o,
            iv: u,
            type: t
        })
    }
    s.des = s["des-cbc"],
    s.des3 = s["des-ede3-cbc"],
    e.exports = u,
    o(u, i),
    u.prototype._update = function(e) {
        return a.from(this._des.update(e))
    }
    ,
    u.prototype._final = function() {
        return a.from(this._des.final())
    }
}
, function(e, t, r) {
    "use strict";
    t.utils = r(138),
    t.Cipher = r(84),
    t.DES = r(139),
    t.CBC = r(247),
    t.EDE = r(248)
}
, function(e, t, r) {
    "use strict";
    var i = r(18)
      , n = r(4)
      , o = {};
    function a(e) {
        i.equal(e.length, 8, "Invalid IV length"),
        this.iv = new Array(8);
        for (var t = 0; t < this.iv.length; t++)
            this.iv[t] = e[t]
    }
    t.instantiate = function(e) {
        function t(t) {
            e.call(this, t),
            this._cbcInit()
        }
        n(t, e);
        for (var r = Object.keys(o), i = 0; i < r.length; i++) {
            var a = r[i];
            t.prototype[a] = o[a]
        }
        return t.create = function(e) {
            return new t(e)
        }
        ,
        t
    }
    ,
    o._cbcInit = function() {
        var e = new a(this.options.iv);
        this._cbcState = e
    }
    ,
    o._update = function(e, t, r, i) {
        var n = this._cbcState
          , o = this.constructor.super_.prototype
          , a = n.iv;
        if ("encrypt" === this.type) {
            for (var s = 0; s < this.blockSize; s++)
                a[s] ^= e[t + s];
            o._update.call(this, a, 0, r, i);
            for (s = 0; s < this.blockSize; s++)
                a[s] = r[i + s]
        } else {
            o._update.call(this, e, t, r, i);
            for (s = 0; s < this.blockSize; s++)
                r[i + s] ^= a[s];
            for (s = 0; s < this.blockSize; s++)
                a[s] = e[t + s]
        }
    }
}
, function(e, t, r) {
    "use strict";
    var i = r(18)
      , n = r(4)
      , o = r(84)
      , a = r(139);
    function s(e, t) {
        i.equal(t.length, 24, "Invalid key length");
        var r = t.slice(0, 8)
          , n = t.slice(8, 16)
          , o = t.slice(16, 24);
        this.ciphers = "encrypt" === e ? [a.create({
            type: "encrypt",
            key: r
        }), a.create({
            type: "decrypt",
            key: n
        }), a.create({
            type: "encrypt",
            key: o
        })] : [a.create({
            type: "decrypt",
            key: o
        }), a.create({
            type: "encrypt",
            key: n
        }), a.create({
            type: "decrypt",
            key: r
        })]
    }
    function u(e) {
        o.call(this, e);
        var t = new s(this.type,this.options.key);
        this._edeState = t
    }
    n(u, o),
    e.exports = u,
    u.create = function(e) {
        return new u(e)
    }
    ,
    u.prototype._update = function(e, t, r, i) {
        var n = this._edeState;
        n.ciphers[0]._update(e, t, r, i),
        n.ciphers[1]._update(r, i, r, i),
        n.ciphers[2]._update(r, i, r, i)
    }
    ,
    u.prototype._pad = a.prototype._pad,
    u.prototype._unpad = a.prototype._unpad
}
, function(e, t, r) {
    var i = r(86)
      , n = r(143)
      , o = r(5).Buffer
      , a = r(144)
      , s = r(30)
      , u = r(62)
      , f = r(63);
    function c(e, t, r) {
        s.call(this),
        this._cache = new l,
        this._cipher = new u.AES(t),
        this._prev = o.from(r),
        this._mode = e,
        this._autopadding = !0
    }
    r(4)(c, s),
    c.prototype._update = function(e) {
        var t, r;
        this._cache.add(e);
        for (var i = []; t = this._cache.get(); )
            r = this._mode.encrypt(this, t),
            i.push(r);
        return o.concat(i)
    }
    ;
    var h = o.alloc(16, 16);
    function l() {
        this.cache = o.allocUnsafe(0)
    }
    function d(e, t, r) {
        var s = i[e.toLowerCase()];
        if (!s)
            throw new TypeError("invalid suite type");
        if ("string" == typeof t && (t = o.from(t)),
        t.length !== s.key / 8)
            throw new TypeError("invalid key length " + t.length);
        if ("string" == typeof r && (r = o.from(r)),
        "GCM" !== s.mode && r.length !== s.iv)
            throw new TypeError("invalid iv length " + r.length);
        return "stream" === s.type ? new a(s.module,t,r) : "auth" === s.type ? new n(s.module,t,r) : new c(s.module,t,r)
    }
    c.prototype._final = function() {
        var e = this._cache.flush();
        if (this._autopadding)
            return e = this._mode.encrypt(this, e),
            this._cipher.scrub(),
            e;
        if (!e.equals(h))
            throw this._cipher.scrub(),
            new Error("data not multiple of block length")
    }
    ,
    c.prototype.setAutoPadding = function(e) {
        return this._autopadding = !!e,
        this
    }
    ,
    l.prototype.add = function(e) {
        this.cache = o.concat([this.cache, e])
    }
    ,
    l.prototype.get = function() {
        if (this.cache.length > 15) {
            var e = this.cache.slice(0, 16);
            return this.cache = this.cache.slice(16),
            e
        }
        return null
    }
    ,
    l.prototype.flush = function() {
        for (var e = 16 - this.cache.length, t = o.allocUnsafe(e), r = -1; ++r < e; )
            t.writeUInt8(e, r);
        return o.concat([this.cache, t])
    }
    ,
    t.createCipheriv = d,
    t.createCipher = function(e, t) {
        var r = i[e.toLowerCase()];
        if (!r)
            throw new TypeError("invalid suite type");
        var n = f(t, !1, r.key, r.iv);
        return d(e, n.key, n.iv)
    }
}
, function(e, t) {
    t.encrypt = function(e, t) {
        return e._cipher.encryptBlock(t)
    }
    ,
    t.decrypt = function(e, t) {
        return e._cipher.decryptBlock(t)
    }
}
, function(e, t, r) {
    var i = r(53);
    t.encrypt = function(e, t) {
        var r = i(t, e._prev);
        return e._prev = e._cipher.encryptBlock(r),
        e._prev
    }
    ,
    t.decrypt = function(e, t) {
        var r = e._prev;
        e._prev = t;
        var n = e._cipher.decryptBlock(t);
        return i(n, r)
    }
}
, function(e, t, r) {
    var i = r(5).Buffer
      , n = r(53);
    function o(e, t, r) {
        var o = t.length
          , a = n(t, e._cache);
        return e._cache = e._cache.slice(o),
        e._prev = i.concat([e._prev, r ? t : a]),
        a
    }
    t.encrypt = function(e, t, r) {
        for (var n, a = i.allocUnsafe(0); t.length; ) {
            if (0 === e._cache.length && (e._cache = e._cipher.encryptBlock(e._prev),
            e._prev = i.allocUnsafe(0)),
            !(e._cache.length <= t.length)) {
                a = i.concat([a, o(e, t, r)]);
                break
            }
            n = e._cache.length,
            a = i.concat([a, o(e, t.slice(0, n), r)]),
            t = t.slice(n)
        }
        return a
    }
}
, function(e, t, r) {
    var i = r(5).Buffer;
    function n(e, t, r) {
        var n = e._cipher.encryptBlock(e._prev)[0] ^ t;
        return e._prev = i.concat([e._prev.slice(1), i.from([r ? t : n])]),
        n
    }
    t.encrypt = function(e, t, r) {
        for (var o = t.length, a = i.allocUnsafe(o), s = -1; ++s < o; )
            a[s] = n(e, t[s], r);
        return a
    }
}
, function(e, t, r) {
    var i = r(5).Buffer;
    function n(e, t, r) {
        for (var i, n, a = -1, s = 0; ++a < 8; )
            i = t & 1 << 7 - a ? 128 : 0,
            s += (128 & (n = e._cipher.encryptBlock(e._prev)[0] ^ i)) >> a % 8,
            e._prev = o(e._prev, r ? i : n);
        return s
    }
    function o(e, t) {
        var r = e.length
          , n = -1
          , o = i.allocUnsafe(e.length);
        for (e = i.concat([e, i.from([t])]); ++n < r; )
            o[n] = e[n] << 1 | e[n + 1] >> 7;
        return o
    }
    t.encrypt = function(e, t, r) {
        for (var o = t.length, a = i.allocUnsafe(o), s = -1; ++s < o; )
            a[s] = n(e, t[s], r);
        return a
    }
}
, function(e, t, r) {
    (function(e) {
        var i = r(53);
        function n(e) {
            return e._prev = e._cipher.encryptBlock(e._prev),
            e._prev
        }
        t.encrypt = function(t, r) {
            for (; t._cache.length < r.length; )
                t._cache = e.concat([t._cache, n(t)]);
            var o = t._cache.slice(0, r.length);
            return t._cache = t._cache.slice(r.length),
            i(r, o)
        }
    }
    ).call(this, r(8).Buffer)
}
, function(e, t, r) {
    var i = r(5).Buffer
      , n = i.alloc(16, 0);
    function o(e) {
        var t = i.allocUnsafe(16);
        return t.writeUInt32BE(e[0] >>> 0, 0),
        t.writeUInt32BE(e[1] >>> 0, 4),
        t.writeUInt32BE(e[2] >>> 0, 8),
        t.writeUInt32BE(e[3] >>> 0, 12),
        t
    }
    function a(e) {
        this.h = e,
        this.state = i.alloc(16, 0),
        this.cache = i.allocUnsafe(0)
    }
    a.prototype.ghash = function(e) {
        for (var t = -1; ++t < e.length; )
            this.state[t] ^= e[t];
        this._multiply()
    }
    ,
    a.prototype._multiply = function() {
        for (var e, t, r, i = [(e = this.h).readUInt32BE(0), e.readUInt32BE(4), e.readUInt32BE(8), e.readUInt32BE(12)], n = [0, 0, 0, 0], a = -1; ++a < 128; ) {
            for (0 != (this.state[~~(a / 8)] & 1 << 7 - a % 8) && (n[0] ^= i[0],
            n[1] ^= i[1],
            n[2] ^= i[2],
            n[3] ^= i[3]),
            r = 0 != (1 & i[3]),
            t = 3; t > 0; t--)
                i[t] = i[t] >>> 1 | (1 & i[t - 1]) << 31;
            i[0] = i[0] >>> 1,
            r && (i[0] = i[0] ^ 225 << 24)
        }
        this.state = o(n)
    }
    ,
    a.prototype.update = function(e) {
        var t;
        for (this.cache = i.concat([this.cache, e]); this.cache.length >= 16; )
            t = this.cache.slice(0, 16),
            this.cache = this.cache.slice(16),
            this.ghash(t)
    }
    ,
    a.prototype.final = function(e, t) {
        return this.cache.length && this.ghash(i.concat([this.cache, n], 16)),
        this.ghash(o([0, e, 0, t])),
        this.state
    }
    ,
    e.exports = a
}
, function(e, t, r) {
    var i = r(143)
      , n = r(5).Buffer
      , o = r(86)
      , a = r(144)
      , s = r(30)
      , u = r(62)
      , f = r(63);
    function c(e, t, r) {
        s.call(this),
        this._cache = new h,
        this._last = void 0,
        this._cipher = new u.AES(t),
        this._prev = n.from(r),
        this._mode = e,
        this._autopadding = !0
    }
    function h() {
        this.cache = n.allocUnsafe(0)
    }
    function l(e, t, r) {
        var s = o[e.toLowerCase()];
        if (!s)
            throw new TypeError("invalid suite type");
        if ("string" == typeof r && (r = n.from(r)),
        "GCM" !== s.mode && r.length !== s.iv)
            throw new TypeError("invalid iv length " + r.length);
        if ("string" == typeof t && (t = n.from(t)),
        t.length !== s.key / 8)
            throw new TypeError("invalid key length " + t.length);
        return "stream" === s.type ? new a(s.module,t,r,!0) : "auth" === s.type ? new i(s.module,t,r,!0) : new c(s.module,t,r)
    }
    r(4)(c, s),
    c.prototype._update = function(e) {
        var t, r;
        this._cache.add(e);
        for (var i = []; t = this._cache.get(this._autopadding); )
            r = this._mode.decrypt(this, t),
            i.push(r);
        return n.concat(i)
    }
    ,
    c.prototype._final = function() {
        var e = this._cache.flush();
        if (this._autopadding)
            return function(e) {
                var t = e[15];
                if (t < 1 || t > 16)
                    throw new Error("unable to decrypt data");
                var r = -1;
                for (; ++r < t; )
                    if (e[r + (16 - t)] !== t)
                        throw new Error("unable to decrypt data");
                if (16 === t)
                    return;
                return e.slice(0, 16 - t)
            }(this._mode.decrypt(this, e));
        if (e)
            throw new Error("data not multiple of block length")
    }
    ,
    c.prototype.setAutoPadding = function(e) {
        return this._autopadding = !!e,
        this
    }
    ,
    h.prototype.add = function(e) {
        this.cache = n.concat([this.cache, e])
    }
    ,
    h.prototype.get = function(e) {
        var t;
        if (e) {
            if (this.cache.length > 16)
                return t = this.cache.slice(0, 16),
                this.cache = this.cache.slice(16),
                t
        } else if (this.cache.length >= 16)
            return t = this.cache.slice(0, 16),
            this.cache = this.cache.slice(16),
            t;
        return null
    }
    ,
    h.prototype.flush = function() {
        if (this.cache.length)
            return this.cache
    }
    ,
    t.createDecipher = function(e, t) {
        var r = o[e.toLowerCase()];
        if (!r)
            throw new TypeError("invalid suite type");
        var i = f(t, !1, r.key, r.iv);
        return l(e, i.key, i.iv)
    }
    ,
    t.createDecipheriv = l
}
, function(e, t) {
    t["des-ecb"] = {
        key: 8,
        iv: 0
    },
    t["des-cbc"] = t.des = {
        key: 8,
        iv: 8
    },
    t["des-ede3-cbc"] = t.des3 = {
        key: 24,
        iv: 8
    },
    t["des-ede3"] = {
        key: 24,
        iv: 0
    },
    t["des-ede-cbc"] = {
        key: 16,
        iv: 8
    },
    t["des-ede"] = {
        key: 16,
        iv: 0
    }
}
, function(e, t, r) {
    (function(e) {
        var i = r(145)
          , n = r(261)
          , o = r(262);
        var a = {
            binary: !0,
            hex: !0,
            base64: !0
        };
        t.DiffieHellmanGroup = t.createDiffieHellmanGroup = t.getDiffieHellman = function(t) {
            var r = new e(n[t].prime,"hex")
              , i = new e(n[t].gen,"hex");
            return new o(r,i)
        }
        ,
        t.createDiffieHellman = t.DiffieHellman = function t(r, n, s, u) {
            return e.isBuffer(n) || void 0 === a[n] ? t(r, "binary", n, s) : (n = n || "binary",
            u = u || "binary",
            s = s || new e([2]),
            e.isBuffer(s) || (s = new e(s,u)),
            "number" == typeof r ? new o(i(r, s),s,!0) : (e.isBuffer(r) || (r = new e(r,n)),
            new o(r,s,!0)))
        }
    }
    ).call(this, r(8).Buffer)
}
, function(e, t) {}
, function(e) {
    e.exports = JSON.parse('{"modp1":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"},"modp2":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"},"modp5":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"},"modp14":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"},"modp15":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"},"modp16":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"},"modp17":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"},"modp18":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"}}')
}
, function(e, t, r) {
    (function(t) {
        var i = r(7)
          , n = new (r(146))
          , o = new i(24)
          , a = new i(11)
          , s = new i(10)
          , u = new i(3)
          , f = new i(7)
          , c = r(145)
          , h = r(32);
        function l(e, r) {
            return r = r || "utf8",
            t.isBuffer(e) || (e = new t(e,r)),
            this._pub = new i(e),
            this
        }
        function d(e, r) {
            return r = r || "utf8",
            t.isBuffer(e) || (e = new t(e,r)),
            this._priv = new i(e),
            this
        }
        e.exports = b;
        var p = {};
        function b(e, t, r) {
            this.setGenerator(t),
            this.__prime = new i(e),
            this._prime = i.mont(this.__prime),
            this._primeLen = e.length,
            this._pub = void 0,
            this._priv = void 0,
            this._primeCode = void 0,
            r ? (this.setPublicKey = l,
            this.setPrivateKey = d) : this._primeCode = 8
        }
        function m(e, r) {
            var i = new t(e.toArray());
            return r ? i.toString(r) : i
        }
        Object.defineProperty(b.prototype, "verifyError", {
            enumerable: !0,
            get: function() {
                return "number" != typeof this._primeCode && (this._primeCode = function(e, t) {
                    var r = t.toString("hex")
                      , i = [r, e.toString(16)].join("_");
                    if (i in p)
                        return p[i];
                    var h, l = 0;
                    if (e.isEven() || !c.simpleSieve || !c.fermatTest(e) || !n.test(e))
                        return l += 1,
                        l += "02" === r || "05" === r ? 8 : 4,
                        p[i] = l,
                        l;
                    switch (n.test(e.shrn(1)) || (l += 2),
                    r) {
                    case "02":
                        e.mod(o).cmp(a) && (l += 8);
                        break;
                    case "05":
                        (h = e.mod(s)).cmp(u) && h.cmp(f) && (l += 8);
                        break;
                    default:
                        l += 4
                    }
                    return p[i] = l,
                    l
                }(this.__prime, this.__gen)),
                this._primeCode
            }
        }),
        b.prototype.generateKeys = function() {
            return this._priv || (this._priv = new i(h(this._primeLen))),
            this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed(),
            this.getPublicKey()
        }
        ,
        b.prototype.computeSecret = function(e) {
            var r = (e = (e = new i(e)).toRed(this._prime)).redPow(this._priv).fromRed()
              , n = new t(r.toArray())
              , o = this.getPrime();
            if (n.length < o.length) {
                var a = new t(o.length - n.length);
                a.fill(0),
                n = t.concat([a, n])
            }
            return n
        }
        ,
        b.prototype.getPublicKey = function(e) {
            return m(this._pub, e)
        }
        ,
        b.prototype.getPrivateKey = function(e) {
            return m(this._priv, e)
        }
        ,
        b.prototype.getPrime = function(e) {
            return m(this.__prime, e)
        }
        ,
        b.prototype.getGenerator = function(e) {
            return m(this._gen, e)
        }
        ,
        b.prototype.setGenerator = function(e, r) {
            return r = r || "utf8",
            t.isBuffer(e) || (e = new t(e,r)),
            this.__gen = e,
            this._gen = new i(e),
            this
        }
    }
    ).call(this, r(8).Buffer)
}
, function(e, t, r) {
    var i = r(5).Buffer
      , n = r(29)
      , o = r(264)
      , a = r(4)
      , s = r(272)
      , u = r(303)
      , f = r(133);
    function c(e) {
        o.Writable.call(this);
        var t = f[e];
        if (!t)
            throw new Error("Unknown message digest");
        this._hashType = t.hash,
        this._hash = n(t.hash),
        this._tag = t.id,
        this._signType = t.sign
    }
    function h(e) {
        o.Writable.call(this);
        var t = f[e];
        if (!t)
            throw new Error("Unknown message digest");
        this._hash = n(t.hash),
        this._tag = t.id,
        this._signType = t.sign
    }
    function l(e) {
        return new c(e)
    }
    function d(e) {
        return new h(e)
    }
    Object.keys(f).forEach((function(e) {
        f[e].id = i.from(f[e].id, "hex"),
        f[e.toLowerCase()] = f[e]
    }
    )),
    a(c, o.Writable),
    c.prototype._write = function(e, t, r) {
        this._hash.update(e),
        r()
    }
    ,
    c.prototype.update = function(e, t) {
        return "string" == typeof e && (e = i.from(e, t)),
        this._hash.update(e),
        this
    }
    ,
    c.prototype.sign = function(e, t) {
        this.end();
        var r = this._hash.digest()
          , i = s(r, e, this._hashType, this._signType, this._tag);
        return t ? i.toString(t) : i
    }
    ,
    a(h, o.Writable),
    h.prototype._write = function(e, t, r) {
        this._hash.update(e),
        r()
    }
    ,
    h.prototype.update = function(e, t) {
        return "string" == typeof e && (e = i.from(e, t)),
        this._hash.update(e),
        this
    }
    ,
    h.prototype.verify = function(e, t, r) {
        "string" == typeof t && (t = i.from(t, r)),
        this.end();
        var n = this._hash.digest();
        return u(t, n, e, this._signType, this._tag)
    }
    ,
    e.exports = {
        Sign: l,
        Verify: d,
        createSign: l,
        createVerify: d
    }
}
, function(e, t, r) {
    (t = e.exports = r(147)).Stream = t,
    t.Readable = t,
    t.Writable = r(151),
    t.Duplex = r(45),
    t.Transform = r(152),
    t.PassThrough = r(270),
    t.finished = r(88),
    t.pipeline = r(271)
}
, function(e, t) {}
, function(e, t, r) {
    "use strict";
    function i(e, t) {
        var r = Object.keys(e);
        if (Object.getOwnPropertySymbols) {
            var i = Object.getOwnPropertySymbols(e);
            t && (i = i.filter((function(t) {
                return Object.getOwnPropertyDescriptor(e, t).enumerable
            }
            ))),
            r.push.apply(r, i)
        }
        return r
    }
    function n(e, t, r) {
        return t in e ? Object.defineProperty(e, t, {
            value: r,
            enumerable: !0,
            configurable: !0,
            writable: !0
        }) : e[t] = r,
        e
    }
    function o(e, t) {
        for (var r = 0; r < t.length; r++) {
            var i = t[r];
            i.enumerable = i.enumerable || !1,
            i.configurable = !0,
            "value"in i && (i.writable = !0),
            Object.defineProperty(e, i.key, i)
        }
    }
    var a = r(8).Buffer
      , s = r(267).inspect
      , u = s && s.custom || "inspect";
    e.exports = function() {
        function e() {
            !function(e, t) {
                if (!(e instanceof t))
                    throw new TypeError("Cannot call a class as a function")
            }(this, e),
            this.head = null,
            this.tail = null,
            this.length = 0
        }
        var t, r, f;
        return t = e,
        (r = [{
            key: "push",
            value: function(e) {
                var t = {
                    data: e,
                    next: null
                };
                this.length > 0 ? this.tail.next = t : this.head = t,
                this.tail = t,
                ++this.length
            }
        }, {
            key: "unshift",
            value: function(e) {
                var t = {
                    data: e,
                    next: this.head
                };
                0 === this.length && (this.tail = t),
                this.head = t,
                ++this.length
            }
        }, {
            key: "shift",
            value: function() {
                if (0 !== this.length) {
                    var e = this.head.data;
                    return 1 === this.length ? this.head = this.tail = null : this.head = this.head.next,
                    --this.length,
                    e
                }
            }
        }, {
            key: "clear",
            value: function() {
                this.head = this.tail = null,
                this.length = 0
            }
        }, {
            key: "join",
            value: function(e) {
                if (0 === this.length)
                    return "";
                for (var t = this.head, r = "" + t.data; t = t.next; )
                    r += e + t.data;
                return r
            }
        }, {
            key: "concat",
            value: function(e) {
                if (0 === this.length)
                    return a.alloc(0);
                for (var t, r, i, n = a.allocUnsafe(e >>> 0), o = this.head, s = 0; o; )
                    t = o.data,
                    r = n,
                    i = s,
                    a.prototype.copy.call(t, r, i),
                    s += o.data.length,
                    o = o.next;
                return n
            }
        }, {
            key: "consume",
            value: function(e, t) {
                var r;
                return e < this.head.data.length ? (r = this.head.data.slice(0, e),
                this.head.data = this.head.data.slice(e)) : r = e === this.head.data.length ? this.shift() : t ? this._getString(e) : this._getBuffer(e),
                r
            }
        }, {
            key: "first",
            value: function() {
                return this.head.data
            }
        }, {
            key: "_getString",
            value: function(e) {
                var t = this.head
                  , r = 1
                  , i = t.data;
                for (e -= i.length; t = t.next; ) {
                    var n = t.data
                      , o = e > n.length ? n.length : e;
                    if (o === n.length ? i += n : i += n.slice(0, e),
                    0 == (e -= o)) {
                        o === n.length ? (++r,
                        t.next ? this.head = t.next : this.head = this.tail = null) : (this.head = t,
                        t.data = n.slice(o));
                        break
                    }
                    ++r
                }
                return this.length -= r,
                i
            }
        }, {
            key: "_getBuffer",
            value: function(e) {
                var t = a.allocUnsafe(e)
                  , r = this.head
                  , i = 1;
                for (r.data.copy(t),
                e -= r.data.length; r = r.next; ) {
                    var n = r.data
                      , o = e > n.length ? n.length : e;
                    if (n.copy(t, t.length - e, 0, o),
                    0 == (e -= o)) {
                        o === n.length ? (++i,
                        r.next ? this.head = r.next : this.head = this.tail = null) : (this.head = r,
                        r.data = n.slice(o));
                        break
                    }
                    ++i
                }
                return this.length -= i,
                t
            }
        }, {
            key: u,
            value: function(e, t) {
                return s(this, function(e) {
                    for (var t = 1; t < arguments.length; t++) {
                        var r = null != arguments[t] ? arguments[t] : {};
                        t % 2 ? i(Object(r), !0).forEach((function(t) {
                            n(e, t, r[t])
                        }
                        )) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r)) : i(Object(r)).forEach((function(t) {
                            Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(r, t))
                        }
                        ))
                    }
                    return e
                }({}, t, {
                    depth: 0,
                    customInspect: !1
                }))
            }
        }]) && o(t.prototype, r),
        f && o(t, f),
        e
    }()
}
, function(e, t) {}
, function(e, t, r) {
    "use strict";
    (function(t) {
        var i;
        function n(e, t, r) {
            return t in e ? Object.defineProperty(e, t, {
                value: r,
                enumerable: !0,
                configurable: !0,
                writable: !0
            }) : e[t] = r,
            e
        }
        var o = r(88)
          , a = Symbol("lastResolve")
          , s = Symbol("lastReject")
          , u = Symbol("error")
          , f = Symbol("ended")
          , c = Symbol("lastPromise")
          , h = Symbol("handlePromise")
          , l = Symbol("stream");
        function d(e, t) {
            return {
                value: e,
                done: t
            }
        }
        function p(e) {
            var t = e[a];
            if (null !== t) {
                var r = e[l].read();
                null !== r && (e[c] = null,
                e[a] = null,
                e[s] = null,
                t(d(r, !1)))
            }
        }
        function b(e) {
            t.nextTick(p, e)
        }
        var m = Object.getPrototypeOf((function() {}
        ))
          , g = Object.setPrototypeOf((n(i = {
            get stream() {
                return this[l]
            },
            next: function() {
                var e = this
                  , r = this[u];
                if (null !== r)
                    return Promise.reject(r);
                if (this[f])
                    return Promise.resolve(d(void 0, !0));
                if (this[l].destroyed)
                    return new Promise((function(r, i) {
                        t.nextTick((function() {
                            e[u] ? i(e[u]) : r(d(void 0, !0))
                        }
                        ))
                    }
                    ));
                var i, n = this[c];
                if (n)
                    i = new Promise(function(e, t) {
                        return function(r, i) {
                            e.then((function() {
                                t[f] ? r(d(void 0, !0)) : t[h](r, i)
                            }
                            ), i)
                        }
                    }(n, this));
                else {
                    var o = this[l].read();
                    if (null !== o)
                        return Promise.resolve(d(o, !1));
                    i = new Promise(this[h])
                }
                return this[c] = i,
                i
            }
        }, Symbol.asyncIterator, (function() {
            return this
        }
        )),
        n(i, "return", (function() {
            var e = this;
            return new Promise((function(t, r) {
                e[l].destroy(null, (function(e) {
                    e ? r(e) : t(d(void 0, !0))
                }
                ))
            }
            ))
        }
        )),
        i), m);
        e.exports = function(e) {
            var t, r = Object.create(g, (n(t = {}, l, {
                value: e,
                writable: !0
            }),
            n(t, a, {
                value: null,
                writable: !0
            }),
            n(t, s, {
                value: null,
                writable: !0
            }),
            n(t, u, {
                value: null,
                writable: !0
            }),
            n(t, f, {
                value: e._readableState.endEmitted,
                writable: !0
            }),
            n(t, h, {
                value: function(e, t) {
                    var i = r[l].read();
                    i ? (r[c] = null,
                    r[a] = null,
                    r[s] = null,
                    e(d(i, !1))) : (r[a] = e,
                    r[s] = t)
                },
                writable: !0
            }),
            t));
            return r[c] = null,
            o(e, (function(e) {
                if (e && "ERR_STREAM_PREMATURE_CLOSE" !== e.code) {
                    var t = r[s];
                    return null !== t && (r[c] = null,
                    r[a] = null,
                    r[s] = null,
                    t(e)),
                    void (r[u] = e)
                }
                var i = r[a];
                null !== i && (r[c] = null,
                r[a] = null,
                r[s] = null,
                i(d(void 0, !0))),
                r[f] = !0
            }
            )),
            e.on("readable", b.bind(null, r)),
            r
        }
    }
    ).call(this, r(14))
}
, function(e, t) {
    e.exports = function() {
        throw new Error("Readable.from is not available in the browser")
    }
}
, function(e, t, r) {
    "use strict";
    e.exports = n;
    var i = r(152);
    function n(e) {
        if (!(this instanceof n))
            return new n(e);
        i.call(this, e)
    }
    r(4)(n, i),
    n.prototype._transform = function(e, t, r) {
        r(null, e)
    }
}
, function(e, t, r) {
    "use strict";
    var i;
    var n = r(44).codes
      , o = n.ERR_MISSING_ARGS
      , a = n.ERR_STREAM_DESTROYED;
    function s(e) {
        if (e)
            throw e
    }
    function u(e, t, n, o) {
        o = function(e) {
            var t = !1;
            return function() {
                t || (t = !0,
                e.apply(void 0, arguments))
            }
        }(o);
        var s = !1;
        e.on("close", (function() {
            s = !0
        }
        )),
        void 0 === i && (i = r(88)),
        i(e, {
            readable: t,
            writable: n
        }, (function(e) {
            if (e)
                return o(e);
            s = !0,
            o()
        }
        ));
        var u = !1;
        return function(t) {
            if (!s && !u)
                return u = !0,
                function(e) {
                    return e.setHeader && "function" == typeof e.abort
                }(e) ? e.abort() : "function" == typeof e.destroy ? e.destroy() : void o(t || new a("pipe"))
        }
    }
    function f(e) {
        e()
    }
    function c(e, t) {
        return e.pipe(t)
    }
    function h(e) {
        return e.length ? "function" != typeof e[e.length - 1] ? s : e.pop() : s
    }
    e.exports = function() {
        for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++)
            t[r] = arguments[r];
        var i, n = h(t);
        if (Array.isArray(t[0]) && (t = t[0]),
        t.length < 2)
            throw new o("streams");
        var a = t.map((function(e, r) {
            var o = r < t.length - 1;
            return u(e, o, r > 0, (function(e) {
                i || (i = e),
                e && a.forEach(f),
                o || (a.forEach(f),
                n(i))
            }
            ))
        }
        ));
        return t.reduce(c)
    }
}
, function(e, t, r) {
    var i = r(5).Buffer
      , n = r(131)
      , o = r(89)
      , a = r(37).ec
      , s = r(158)
      , u = r(65)
      , f = r(164);
    function c(e, t, r, o) {
        if ((e = i.from(e.toArray())).length < t.byteLength()) {
            var a = i.alloc(t.byteLength() - e.length);
            e = i.concat([a, e])
        }
        var s = r.length
          , u = function(e, t) {
            e = (e = h(e, t)).mod(t);
            var r = i.from(e.toArray());
            if (r.length < t.byteLength()) {
                var n = i.alloc(t.byteLength() - r.length);
                r = i.concat([n, r])
            }
            return r
        }(r, t)
          , f = i.alloc(s);
        f.fill(1);
        var c = i.alloc(s);
        return c = n(o, c).update(f).update(i.from([0])).update(e).update(u).digest(),
        f = n(o, c).update(f).digest(),
        {
            k: c = n(o, c).update(f).update(i.from([1])).update(e).update(u).digest(),
            v: f = n(o, c).update(f).digest()
        }
    }
    function h(e, t) {
        var r = new s(e)
          , i = (e.length << 3) - t.bitLength();
        return i > 0 && r.ishrn(i),
        r
    }
    function l(e, t, r) {
        var o, a;
        do {
            for (o = i.alloc(0); 8 * o.length < e.bitLength(); )
                t.v = n(r, t.k).update(t.v).digest(),
                o = i.concat([o, t.v]);
            a = h(o, e),
            t.k = n(r, t.k).update(t.v).update(i.from([0])).digest(),
            t.v = n(r, t.k).update(t.v).digest()
        } while (-1 !== a.cmp(e));
        return a
    }
    function d(e, t, r, i) {
        return e.toRed(s.mont(r)).redPow(t).fromRed().mod(i)
    }
    e.exports = function(e, t, r, n, p) {
        var b = u(t);
        if (b.curve) {
            if ("ecdsa" !== n && "ecdsa/rsa" !== n)
                throw new Error("wrong private key type");
            return function(e, t) {
                var r = f[t.curve.join(".")];
                if (!r)
                    throw new Error("unknown curve " + t.curve.join("."));
                var n = new a(r).keyFromPrivate(t.privateKey).sign(e);
                return i.from(n.toDER())
            }(e, b)
        }
        if ("dsa" === b.type) {
            if ("dsa" !== n)
                throw new Error("wrong private key type");
            return function(e, t, r) {
                var n, o = t.params.priv_key, a = t.params.p, u = t.params.q, f = t.params.g, p = new s(0), b = h(e, u).mod(u), m = !1, g = c(o, u, e, r);
                for (; !1 === m; )
                    n = l(u, g, r),
                    p = d(f, n, a, u),
                    0 === (m = n.invm(u).imul(b.add(o.mul(p))).mod(u)).cmpn(0) && (m = !1,
                    p = new s(0));
                return function(e, t) {
                    e = e.toArray(),
                    t = t.toArray(),
                    128 & e[0] && (e = [0].concat(e));
                    128 & t[0] && (t = [0].concat(t));
                    var r = [48, e.length + t.length + 4, 2, e.length];
                    return r = r.concat(e, [2, t.length], t),
                    i.from(r)
                }(p, m)
            }(e, b, r)
        }
        if ("rsa" !== n && "ecdsa/rsa" !== n)
            throw new Error("wrong private key type");
        e = i.concat([p, e]);
        for (var m = b.modulus.byteLength(), g = [0, 1]; e.length + g.length + 1 < m; )
            g.push(255);
        g.push(0);
        for (var v = -1; ++v < e.length; )
            g.push(e[v]);
        return o(g, b)
    }
    ,
    e.exports.getKey = c,
    e.exports.makeKey = l
}
, function(e, t, r) {
    (function(e) {
        !function(e, t) {
            "use strict";
            function i(e, t) {
                if (!e)
                    throw new Error(t || "Assertion failed")
            }
            function n(e, t) {
                e.super_ = t;
                var r = function() {};
                r.prototype = t.prototype,
                e.prototype = new r,
                e.prototype.constructor = e
            }
            function o(e, t, r) {
                if (o.isBN(e))
                    return e;
                this.negative = 0,
                this.words = null,
                this.length = 0,
                this.red = null,
                null !== e && ("le" !== t && "be" !== t || (r = t,
                t = 10),
                this._init(e || 0, t || 10, r || "be"))
            }
            var a;
            "object" == typeof e ? e.exports = o : t.BN = o,
            o.BN = o,
            o.wordSize = 26;
            try {
                a = "undefined" != typeof window && void 0 !== window.Buffer ? window.Buffer : r(274).Buffer
            } catch (e) {}
            function s(e, t) {
                var r = e.charCodeAt(t);
                return r >= 48 && r <= 57 ? r - 48 : r >= 65 && r <= 70 ? r - 55 : r >= 97 && r <= 102 ? r - 87 : void i(!1, "Invalid character in " + e)
            }
            function u(e, t, r) {
                var i = s(e, r);
                return r - 1 >= t && (i |= s(e, r - 1) << 4),
                i
            }
            function f(e, t, r, n) {
                for (var o = 0, a = 0, s = Math.min(e.length, r), u = t; u < s; u++) {
                    var f = e.charCodeAt(u) - 48;
                    o *= n,
                    a = f >= 49 ? f - 49 + 10 : f >= 17 ? f - 17 + 10 : f,
                    i(f >= 0 && a < n, "Invalid character"),
                    o += a
                }
                return o
            }
            function c(e, t) {
                e.words = t.words,
                e.length = t.length,
                e.negative = t.negative,
                e.red = t.red
            }
            if (o.isBN = function(e) {
                return e instanceof o || null !== e && "object" == typeof e && e.constructor.wordSize === o.wordSize && Array.isArray(e.words)
            }
            ,
            o.max = function(e, t) {
                return e.cmp(t) > 0 ? e : t
            }
            ,
            o.min = function(e, t) {
                return e.cmp(t) < 0 ? e : t
            }
            ,
            o.prototype._init = function(e, t, r) {
                if ("number" == typeof e)
                    return this._initNumber(e, t, r);
                if ("object" == typeof e)
                    return this._initArray(e, t, r);
                "hex" === t && (t = 16),
                i(t === (0 | t) && t >= 2 && t <= 36);
                var n = 0;
                "-" === (e = e.toString().replace(/\s+/g, ""))[0] && (n++,
                this.negative = 1),
                n < e.length && (16 === t ? this._parseHex(e, n, r) : (this._parseBase(e, t, n),
                "le" === r && this._initArray(this.toArray(), t, r)))
            }
            ,
            o.prototype._initNumber = function(e, t, r) {
                e < 0 && (this.negative = 1,
                e = -e),
                e < 67108864 ? (this.words = [67108863 & e],
                this.length = 1) : e < 4503599627370496 ? (this.words = [67108863 & e, e / 67108864 & 67108863],
                this.length = 2) : (i(e < 9007199254740992),
                this.words = [67108863 & e, e / 67108864 & 67108863, 1],
                this.length = 3),
                "le" === r && this._initArray(this.toArray(), t, r)
            }
            ,
            o.prototype._initArray = function(e, t, r) {
                if (i("number" == typeof e.length),
                e.length <= 0)
                    return this.words = [0],
                    this.length = 1,
                    this;
                this.length = Math.ceil(e.length / 3),
                this.words = new Array(this.length);
                for (var n = 0; n < this.length; n++)
                    this.words[n] = 0;
                var o, a, s = 0;
                if ("be" === r)
                    for (n = e.length - 1,
                    o = 0; n >= 0; n -= 3)
                        a = e[n] | e[n - 1] << 8 | e[n - 2] << 16,
                        this.words[o] |= a << s & 67108863,
                        this.words[o + 1] = a >>> 26 - s & 67108863,
                        (s += 24) >= 26 && (s -= 26,
                        o++);
                else if ("le" === r)
                    for (n = 0,
                    o = 0; n < e.length; n += 3)
                        a = e[n] | e[n + 1] << 8 | e[n + 2] << 16,
                        this.words[o] |= a << s & 67108863,
                        this.words[o + 1] = a >>> 26 - s & 67108863,
                        (s += 24) >= 26 && (s -= 26,
                        o++);
                return this._strip()
            }
            ,
            o.prototype._parseHex = function(e, t, r) {
                this.length = Math.ceil((e.length - t) / 6),
                this.words = new Array(this.length);
                for (var i = 0; i < this.length; i++)
                    this.words[i] = 0;
                var n, o = 0, a = 0;
                if ("be" === r)
                    for (i = e.length - 1; i >= t; i -= 2)
                        n = u(e, t, i) << o,
                        this.words[a] |= 67108863 & n,
                        o >= 18 ? (o -= 18,
                        a += 1,
                        this.words[a] |= n >>> 26) : o += 8;
                else
                    for (i = (e.length - t) % 2 == 0 ? t + 1 : t; i < e.length; i += 2)
                        n = u(e, t, i) << o,
                        this.words[a] |= 67108863 & n,
                        o >= 18 ? (o -= 18,
                        a += 1,
                        this.words[a] |= n >>> 26) : o += 8;
                this._strip()
            }
            ,
            o.prototype._parseBase = function(e, t, r) {
                this.words = [0],
                this.length = 1;
                for (var i = 0, n = 1; n <= 67108863; n *= t)
                    i++;
                i--,
                n = n / t | 0;
                for (var o = e.length - r, a = o % i, s = Math.min(o, o - a) + r, u = 0, c = r; c < s; c += i)
                    u = f(e, c, c + i, t),
                    this.imuln(n),
                    this.words[0] + u < 67108864 ? this.words[0] += u : this._iaddn(u);
                if (0 !== a) {
                    var h = 1;
                    for (u = f(e, c, e.length, t),
                    c = 0; c < a; c++)
                        h *= t;
                    this.imuln(h),
                    this.words[0] + u < 67108864 ? this.words[0] += u : this._iaddn(u)
                }
                this._strip()
            }
            ,
            o.prototype.copy = function(e) {
                e.words = new Array(this.length);
                for (var t = 0; t < this.length; t++)
                    e.words[t] = this.words[t];
                e.length = this.length,
                e.negative = this.negative,
                e.red = this.red
            }
            ,
            o.prototype._move = function(e) {
                c(e, this)
            }
            ,
            o.prototype.clone = function() {
                var e = new o(null);
                return this.copy(e),
                e
            }
            ,
            o.prototype._expand = function(e) {
                for (; this.length < e; )
                    this.words[this.length++] = 0;
                return this
            }
            ,
            o.prototype._strip = function() {
                for (; this.length > 1 && 0 === this.words[this.length - 1]; )
                    this.length--;
                return this._normSign()
            }
            ,
            o.prototype._normSign = function() {
                return 1 === this.length && 0 === this.words[0] && (this.negative = 0),
                this
            }
            ,
            "undefined" != typeof Symbol && "function" == typeof Symbol.for)
                try {
                    o.prototype[Symbol.for("nodejs.util.inspect.custom")] = h
                } catch (e) {
                    o.prototype.inspect = h
                }
            else
                o.prototype.inspect = h;
            function h() {
                return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">"
            }
            var l = ["", "0", "00", "000", "0000", "00000", "000000", "0000000", "00000000", "000000000", "0000000000", "00000000000", "000000000000", "0000000000000", "00000000000000", "000000000000000", "0000000000000000", "00000000000000000", "000000000000000000", "0000000000000000000", "00000000000000000000", "000000000000000000000", "0000000000000000000000", "00000000000000000000000", "000000000000000000000000", "0000000000000000000000000"]
              , d = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
              , p = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 1e7, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64e6, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 243e5, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];
            o.prototype.toString = function(e, t) {
                var r;
                if (t = 0 | t || 1,
                16 === (e = e || 10) || "hex" === e) {
                    r = "";
                    for (var n = 0, o = 0, a = 0; a < this.length; a++) {
                        var s = this.words[a]
                          , u = (16777215 & (s << n | o)).toString(16);
                        r = 0 !== (o = s >>> 24 - n & 16777215) || a !== this.length - 1 ? l[6 - u.length] + u + r : u + r,
                        (n += 2) >= 26 && (n -= 26,
                        a--)
                    }
                    for (0 !== o && (r = o.toString(16) + r); r.length % t != 0; )
                        r = "0" + r;
                    return 0 !== this.negative && (r = "-" + r),
                    r
                }
                if (e === (0 | e) && e >= 2 && e <= 36) {
                    var f = d[e]
                      , c = p[e];
                    r = "";
                    var h = this.clone();
                    for (h.negative = 0; !h.isZero(); ) {
                        var b = h.modrn(c).toString(e);
                        r = (h = h.idivn(c)).isZero() ? b + r : l[f - b.length] + b + r
                    }
                    for (this.isZero() && (r = "0" + r); r.length % t != 0; )
                        r = "0" + r;
                    return 0 !== this.negative && (r = "-" + r),
                    r
                }
                i(!1, "Base should be between 2 and 36")
            }
            ,
            o.prototype.toNumber = function() {
                var e = this.words[0];
                return 2 === this.length ? e += 67108864 * this.words[1] : 3 === this.length && 1 === this.words[2] ? e += 4503599627370496 + 67108864 * this.words[1] : this.length > 2 && i(!1, "Number can only safely store up to 53 bits"),
                0 !== this.negative ? -e : e
            }
            ,
            o.prototype.toJSON = function() {
                return this.toString(16, 2)
            }
            ,
            a && (o.prototype.toBuffer = function(e, t) {
                return this.toArrayLike(a, e, t)
            }
            ),
            o.prototype.toArray = function(e, t) {
                return this.toArrayLike(Array, e, t)
            }
            ;
            function b(e, t, r) {
                r.negative = t.negative ^ e.negative;
                var i = e.length + t.length | 0;
                r.length = i,
                i = i - 1 | 0;
                var n = 0 | e.words[0]
                  , o = 0 | t.words[0]
                  , a = n * o
                  , s = 67108863 & a
                  , u = a / 67108864 | 0;
                r.words[0] = s;
                for (var f = 1; f < i; f++) {
                    for (var c = u >>> 26, h = 67108863 & u, l = Math.min(f, t.length - 1), d = Math.max(0, f - e.length + 1); d <= l; d++) {
                        var p = f - d | 0;
                        c += (a = (n = 0 | e.words[p]) * (o = 0 | t.words[d]) + h) / 67108864 | 0,
                        h = 67108863 & a
                    }
                    r.words[f] = 0 | h,
                    u = 0 | c
                }
                return 0 !== u ? r.words[f] = 0 | u : r.length--,
                r._strip()
            }
            o.prototype.toArrayLike = function(e, t, r) {
                this._strip();
                var n = this.byteLength()
                  , o = r || Math.max(1, n);
                i(n <= o, "byte array longer than desired length"),
                i(o > 0, "Requested array length <= 0");
                var a = function(e, t) {
                    return e.allocUnsafe ? e.allocUnsafe(t) : new e(t)
                }(e, o);
                return this["_toArrayLike" + ("le" === t ? "LE" : "BE")](a, n),
                a
            }
            ,
            o.prototype._toArrayLikeLE = function(e, t) {
                for (var r = 0, i = 0, n = 0, o = 0; n < this.length; n++) {
                    var a = this.words[n] << o | i;
                    e[r++] = 255 & a,
                    r < e.length && (e[r++] = a >> 8 & 255),
                    r < e.length && (e[r++] = a >> 16 & 255),
                    6 === o ? (r < e.length && (e[r++] = a >> 24 & 255),
                    i = 0,
                    o = 0) : (i = a >>> 24,
                    o += 2)
                }
                if (r < e.length)
                    for (e[r++] = i; r < e.length; )
                        e[r++] = 0
            }
            ,
            o.prototype._toArrayLikeBE = function(e, t) {
                for (var r = e.length - 1, i = 0, n = 0, o = 0; n < this.length; n++) {
                    var a = this.words[n] << o | i;
                    e[r--] = 255 & a,
                    r >= 0 && (e[r--] = a >> 8 & 255),
                    r >= 0 && (e[r--] = a >> 16 & 255),
                    6 === o ? (r >= 0 && (e[r--] = a >> 24 & 255),
                    i = 0,
                    o = 0) : (i = a >>> 24,
                    o += 2)
                }
                if (r >= 0)
                    for (e[r--] = i; r >= 0; )
                        e[r--] = 0
            }
            ,
            Math.clz32 ? o.prototype._countBits = function(e) {
                return 32 - Math.clz32(e)
            }
            : o.prototype._countBits = function(e) {
                var t = e
                  , r = 0;
                return t >= 4096 && (r += 13,
                t >>>= 13),
                t >= 64 && (r += 7,
                t >>>= 7),
                t >= 8 && (r += 4,
                t >>>= 4),
                t >= 2 && (r += 2,
                t >>>= 2),
                r + t
            }
            ,
            o.prototype._zeroBits = function(e) {
                if (0 === e)
                    return 26;
                var t = e
                  , r = 0;
                return 0 == (8191 & t) && (r += 13,
                t >>>= 13),
                0 == (127 & t) && (r += 7,
                t >>>= 7),
                0 == (15 & t) && (r += 4,
                t >>>= 4),
                0 == (3 & t) && (r += 2,
                t >>>= 2),
                0 == (1 & t) && r++,
                r
            }
            ,
            o.prototype.bitLength = function() {
                var e = this.words[this.length - 1]
                  , t = this._countBits(e);
                return 26 * (this.length - 1) + t
            }
            ,
            o.prototype.zeroBits = function() {
                if (this.isZero())
                    return 0;
                for (var e = 0, t = 0; t < this.length; t++) {
                    var r = this._zeroBits(this.words[t]);
                    if (e += r,
                    26 !== r)
                        break
                }
                return e
            }
            ,
            o.prototype.byteLength = function() {
                return Math.ceil(this.bitLength() / 8)
            }
            ,
            o.prototype.toTwos = function(e) {
                return 0 !== this.negative ? this.abs().inotn(e).iaddn(1) : this.clone()
            }
            ,
            o.prototype.fromTwos = function(e) {
                return this.testn(e - 1) ? this.notn(e).iaddn(1).ineg() : this.clone()
            }
            ,
            o.prototype.isNeg = function() {
                return 0 !== this.negative
            }
            ,
            o.prototype.neg = function() {
                return this.clone().ineg()
            }
            ,
            o.prototype.ineg = function() {
                return this.isZero() || (this.negative ^= 1),
                this
            }
            ,
            o.prototype.iuor = function(e) {
                for (; this.length < e.length; )
                    this.words[this.length++] = 0;
                for (var t = 0; t < e.length; t++)
                    this.words[t] = this.words[t] | e.words[t];
                return this._strip()
            }
            ,
            o.prototype.ior = function(e) {
                return i(0 == (this.negative | e.negative)),
                this.iuor(e)
            }
            ,
            o.prototype.or = function(e) {
                return this.length > e.length ? this.clone().ior(e) : e.clone().ior(this)
            }
            ,
            o.prototype.uor = function(e) {
                return this.length > e.length ? this.clone().iuor(e) : e.clone().iuor(this)
            }
            ,
            o.prototype.iuand = function(e) {
                var t;
                t = this.length > e.length ? e : this;
                for (var r = 0; r < t.length; r++)
                    this.words[r] = this.words[r] & e.words[r];
                return this.length = t.length,
                this._strip()
            }
            ,
            o.prototype.iand = function(e) {
                return i(0 == (this.negative | e.negative)),
                this.iuand(e)
            }
            ,
            o.prototype.and = function(e) {
                return this.length > e.length ? this.clone().iand(e) : e.clone().iand(this)
            }
            ,
            o.prototype.uand = function(e) {
                return this.length > e.length ? this.clone().iuand(e) : e.clone().iuand(this)
            }
            ,
            o.prototype.iuxor = function(e) {
                var t, r;
                this.length > e.length ? (t = this,
                r = e) : (t = e,
                r = this);
                for (var i = 0; i < r.length; i++)
                    this.words[i] = t.words[i] ^ r.words[i];
                if (this !== t)
                    for (; i < t.length; i++)
                        this.words[i] = t.words[i];
                return this.length = t.length,
                this._strip()
            }
            ,
            o.prototype.ixor = function(e) {
                return i(0 == (this.negative | e.negative)),
                this.iuxor(e)
            }
            ,
            o.prototype.xor = function(e) {
                return this.length > e.length ? this.clone().ixor(e) : e.clone().ixor(this)
            }
            ,
            o.prototype.uxor = function(e) {
                return this.length > e.length ? this.clone().iuxor(e) : e.clone().iuxor(this)
            }
            ,
            o.prototype.inotn = function(e) {
                i("number" == typeof e && e >= 0);
                var t = 0 | Math.ceil(e / 26)
                  , r = e % 26;
                this._expand(t),
                r > 0 && t--;
                for (var n = 0; n < t; n++)
                    this.words[n] = 67108863 & ~this.words[n];
                return r > 0 && (this.words[n] = ~this.words[n] & 67108863 >> 26 - r),
                this._strip()
            }
            ,
            o.prototype.notn = function(e) {
                return this.clone().inotn(e)
            }
            ,
            o.prototype.setn = function(e, t) {
                i("number" == typeof e && e >= 0);
                var r = e / 26 | 0
                  , n = e % 26;
                return this._expand(r + 1),
                this.words[r] = t ? this.words[r] | 1 << n : this.words[r] & ~(1 << n),
                this._strip()
            }
            ,
            o.prototype.iadd = function(e) {
                var t, r, i;
                if (0 !== this.negative && 0 === e.negative)
                    return this.negative = 0,
                    t = this.isub(e),
                    this.negative ^= 1,
                    this._normSign();
                if (0 === this.negative && 0 !== e.negative)
                    return e.negative = 0,
                    t = this.isub(e),
                    e.negative = 1,
                    t._normSign();
                this.length > e.length ? (r = this,
                i = e) : (r = e,
                i = this);
                for (var n = 0, o = 0; o < i.length; o++)
                    t = (0 | r.words[o]) + (0 | i.words[o]) + n,
                    this.words[o] = 67108863 & t,
                    n = t >>> 26;
                for (; 0 !== n && o < r.length; o++)
                    t = (0 | r.words[o]) + n,
                    this.words[o] = 67108863 & t,
                    n = t >>> 26;
                if (this.length = r.length,
                0 !== n)
                    this.words[this.length] = n,
                    this.length++;
                else if (r !== this)
                    for (; o < r.length; o++)
                        this.words[o] = r.words[o];
                return this
            }
            ,
            o.prototype.add = function(e) {
                var t;
                return 0 !== e.negative && 0 === this.negative ? (e.negative = 0,
                t = this.sub(e),
                e.negative ^= 1,
                t) : 0 === e.negative && 0 !== this.negative ? (this.negative = 0,
                t = e.sub(this),
                this.negative = 1,
                t) : this.length > e.length ? this.clone().iadd(e) : e.clone().iadd(this)
            }
            ,
            o.prototype.isub = function(e) {
                if (0 !== e.negative) {
                    e.negative = 0;
                    var t = this.iadd(e);
                    return e.negative = 1,
                    t._normSign()
                }
                if (0 !== this.negative)
                    return this.negative = 0,
                    this.iadd(e),
                    this.negative = 1,
                    this._normSign();
                var r, i, n = this.cmp(e);
                if (0 === n)
                    return this.negative = 0,
                    this.length = 1,
                    this.words[0] = 0,
                    this;
                n > 0 ? (r = this,
                i = e) : (r = e,
                i = this);
                for (var o = 0, a = 0; a < i.length; a++)
                    o = (t = (0 | r.words[a]) - (0 | i.words[a]) + o) >> 26,
                    this.words[a] = 67108863 & t;
                for (; 0 !== o && a < r.length; a++)
                    o = (t = (0 | r.words[a]) + o) >> 26,
                    this.words[a] = 67108863 & t;
                if (0 === o && a < r.length && r !== this)
                    for (; a < r.length; a++)
                        this.words[a] = r.words[a];
                return this.length = Math.max(this.length, a),
                r !== this && (this.negative = 1),
                this._strip()
            }
            ,
            o.prototype.sub = function(e) {
                return this.clone().isub(e)
            }
            ;
            var m = function(e, t, r) {
                var i, n, o, a = e.words, s = t.words, u = r.words, f = 0, c = 0 | a[0], h = 8191 & c, l = c >>> 13, d = 0 | a[1], p = 8191 & d, b = d >>> 13, m = 0 | a[2], g = 8191 & m, v = m >>> 13, y = 0 | a[3], w = 8191 & y, _ = y >>> 13, E = 0 | a[4], M = 8191 & E, S = E >>> 13, A = 0 | a[5], k = 8191 & A, x = A >>> 13, R = 0 | a[6], I = 8191 & R, T = R >>> 13, P = 0 | a[7], N = 8191 & P, C = P >>> 13, B = 0 | a[8], O = 8191 & B, L = B >>> 13, j = 0 | a[9], D = 8191 & j, z = j >>> 13, U = 0 | s[0], q = 8191 & U, K = U >>> 13, F = 0 | s[1], H = 8191 & F, V = F >>> 13, Y = 0 | s[2], G = 8191 & Y, W = Y >>> 13, Z = 0 | s[3], J = 8191 & Z, X = Z >>> 13, Q = 0 | s[4], $ = 8191 & Q, ee = Q >>> 13, te = 0 | s[5], re = 8191 & te, ie = te >>> 13, ne = 0 | s[6], oe = 8191 & ne, ae = ne >>> 13, se = 0 | s[7], ue = 8191 & se, fe = se >>> 13, ce = 0 | s[8], he = 8191 & ce, le = ce >>> 13, de = 0 | s[9], pe = 8191 & de, be = de >>> 13;
                r.negative = e.negative ^ t.negative,
                r.length = 19;
                var me = (f + (i = Math.imul(h, q)) | 0) + ((8191 & (n = (n = Math.imul(h, K)) + Math.imul(l, q) | 0)) << 13) | 0;
                f = ((o = Math.imul(l, K)) + (n >>> 13) | 0) + (me >>> 26) | 0,
                me &= 67108863,
                i = Math.imul(p, q),
                n = (n = Math.imul(p, K)) + Math.imul(b, q) | 0,
                o = Math.imul(b, K);
                var ge = (f + (i = i + Math.imul(h, H) | 0) | 0) + ((8191 & (n = (n = n + Math.imul(h, V) | 0) + Math.imul(l, H) | 0)) << 13) | 0;
                f = ((o = o + Math.imul(l, V) | 0) + (n >>> 13) | 0) + (ge >>> 26) | 0,
                ge &= 67108863,
                i = Math.imul(g, q),
                n = (n = Math.imul(g, K)) + Math.imul(v, q) | 0,
                o = Math.imul(v, K),
                i = i + Math.imul(p, H) | 0,
                n = (n = n + Math.imul(p, V) | 0) + Math.imul(b, H) | 0,
                o = o + Math.imul(b, V) | 0;
                var ve = (f + (i = i + Math.imul(h, G) | 0) | 0) + ((8191 & (n = (n = n + Math.imul(h, W) | 0) + Math.imul(l, G) | 0)) << 13) | 0;
                f = ((o = o + Math.imul(l, W) | 0) + (n >>> 13) | 0) + (ve >>> 26) | 0,
                ve &= 67108863,
                i = Math.imul(w, q),
                n = (n = Math.imul(w, K)) + Math.imul(_, q) | 0,
                o = Math.imul(_, K),
                i = i + Math.imul(g, H) | 0,
                n = (n = n + Math.imul(g, V) | 0) + Math.imul(v, H) | 0,
                o = o + Math.imul(v, V) | 0,
                i = i + Math.imul(p, G) | 0,
                n = (n = n + Math.imul(p, W) | 0) + Math.imul(b, G) | 0,
                o = o + Math.imul(b, W) | 0;
                var ye = (f + (i = i + Math.imul(h, J) | 0) | 0) + ((8191 & (n = (n = n + Math.imul(h, X) | 0) + Math.imul(l, J) | 0)) << 13) | 0;
                f = ((o = o + Math.imul(l, X) | 0) + (n >>> 13) | 0) + (ye >>> 26) | 0,
                ye &= 67108863,
                i = Math.imul(M, q),
                n = (n = Math.imul(M, K)) + Math.imul(S, q) | 0,
                o = Math.imul(S, K),
                i = i + Math.imul(w, H) | 0,
                n = (n = n + Math.imul(w, V) | 0) + Math.imul(_, H) | 0,
                o = o + Math.imul(_, V) | 0,
                i = i + Math.imul(g, G) | 0,
                n = (n = n + Math.imul(g, W) | 0) + Math.imul(v, G) | 0,
                o = o + Math.imul(v, W) | 0,
                i = i + Math.imul(p, J) | 0,
                n = (n = n + Math.imul(p, X) | 0) + Math.imul(b, J) | 0,
                o = o + Math.imul(b, X) | 0;
                var we = (f + (i = i + Math.imul(h, $) | 0) | 0) + ((8191 & (n = (n = n + Math.imul(h, ee) | 0) + Math.imul(l, $) | 0)) << 13) | 0;
                f = ((o = o + Math.imul(l, ee) | 0) + (n >>> 13) | 0) + (we >>> 26) | 0,
                we &= 67108863,
                i = Math.imul(k, q),
                n = (n = Math.imul(k, K)) + Math.imul(x, q) | 0,
                o = Math.imul(x, K),
                i = i + Math.imul(M, H) | 0,
                n = (n = n + Math.imul(M, V) | 0) + Math.imul(S, H) | 0,
                o = o + Math.imul(S, V) | 0,
                i = i + Math.imul(w, G) | 0,
                n = (n = n + Math.imul(w, W) | 0) + Math.imul(_, G) | 0,
                o = o + Math.imul(_, W) | 0,
                i = i + Math.imul(g, J) | 0,
                n = (n = n + Math.imul(g, X) | 0) + Math.imul(v, J) | 0,
                o = o + Math.imul(v, X) | 0,
                i = i + Math.imul(p, $) | 0,
                n = (n = n + Math.imul(p, ee) | 0) + Math.imul(b, $) | 0,
                o = o + Math.imul(b, ee) | 0;
                var _e = (f + (i = i + Math.imul(h, re) | 0) | 0) + ((8191 & (n = (n = n + Math.imul(h, ie) | 0) + Math.imul(l, re) | 0)) << 13) | 0;
                f = ((o = o + Math.imul(l, ie) | 0) + (n >>> 13) | 0) + (_e >>> 26) | 0,
                _e &= 67108863,
                i = Math.imul(I, q),
                n = (n = Math.imul(I, K)) + Math.imul(T, q) | 0,
                o = Math.imul(T, K),
                i = i + Math.imul(k, H) | 0,
                n = (n = n + Math.imul(k, V) | 0) + Math.imul(x, H) | 0,
                o = o + Math.imul(x, V) | 0,
                i = i + Math.imul(M, G) | 0,
                n = (n = n + Math.imul(M, W) | 0) + Math.imul(S, G) | 0,
                o = o + Math.imul(S, W) | 0,
                i = i + Math.imul(w, J) | 0,
                n = (n = n + Math.imul(w, X) | 0) + Math.imul(_, J) | 0,
                o = o + Math.imul(_, X) | 0,
                i = i + Math.imul(g, $) | 0,
                n = (n = n + Math.imul(g, ee) | 0) + Math.imul(v, $) | 0,
                o = o + Math.imul(v, ee) | 0,
                i = i + Math.imul(p, re) | 0,
                n = (n = n + Math.imul(p, ie) | 0) + Math.imul(b, re) | 0,
                o = o + Math.imul(b, ie) | 0;
                var Ee = (f + (i = i + Math.imul(h, oe) | 0) | 0) + ((8191 & (n = (n = n + Math.imul(h, ae) | 0) + Math.imul(l, oe) | 0)) << 13) | 0;
                f = ((o = o + Math.imul(l, ae) | 0) + (n >>> 13) | 0) + (Ee >>> 26) | 0,
                Ee &= 67108863,
                i = Math.imul(N, q),
                n = (n = Math.imul(N, K)) + Math.imul(C, q) | 0,
                o = Math.imul(C, K),
                i = i + Math.imul(I, H) | 0,
                n = (n = n + Math.imul(I, V) | 0) + Math.imul(T, H) | 0,
                o = o + Math.imul(T, V) | 0,
                i = i + Math.imul(k, G) | 0,
                n = (n = n + Math.imul(k, W) | 0) + Math.imul(x, G) | 0,
                o = o + Math.imul(x, W) | 0,
                i = i + Math.imul(M, J) | 0,
                n = (n = n + Math.imul(M, X) | 0) + Math.imul(S, J) | 0,
                o = o + Math.imul(S, X) | 0,
                i = i + Math.imul(w, $) | 0,
                n = (n = n + Math.imul(w, ee) | 0) + Math.imul(_, $) | 0,
                o = o + Math.imul(_, ee) | 0,
                i = i + Math.imul(g, re) | 0,
                n = (n = n + Math.imul(g, ie) | 0) + Math.imul(v, re) | 0,
                o = o + Math.imul(v, ie) | 0,
                i = i + Math.imul(p, oe) | 0,
                n = (n = n + Math.imul(p, ae) | 0) + Math.imul(b, oe) | 0,
                o = o + Math.imul(b, ae) | 0;
                var Me = (f + (i = i + Math.imul(h, ue) | 0) | 0) + ((8191 & (n = (n = n + Math.imul(h, fe) | 0) + Math.imul(l, ue) | 0)) << 13) | 0;
                f = ((o = o + Math.imul(l, fe) | 0) + (n >>> 13) | 0) + (Me >>> 26) | 0,
                Me &= 67108863,
                i = Math.imul(O, q),
                n = (n = Math.imul(O, K)) + Math.imul(L, q) | 0,
                o = Math.imul(L, K),
                i = i + Math.imul(N, H) | 0,
                n = (n = n + Math.imul(N, V) | 0) + Math.imul(C, H) | 0,
                o = o + Math.imul(C, V) | 0,
                i = i + Math.imul(I, G) | 0,
                n = (n = n + Math.imul(I, W) | 0) + Math.imul(T, G) | 0,
                o = o + Math.imul(T, W) | 0,
                i = i + Math.imul(k, J) | 0,
                n = (n = n + Math.imul(k, X) | 0) + Math.imul(x, J) | 0,
                o = o + Math.imul(x, X) | 0,
                i = i + Math.imul(M, $) | 0,
                n = (n = n + Math.imul(M, ee) | 0) + Math.imul(S, $) | 0,
                o = o + Math.imul(S, ee) | 0,
                i = i + Math.imul(w, re) | 0,
                n = (n = n + Math.imul(w, ie) | 0) + Math.imul(_, re) | 0,
                o = o + Math.imul(_, ie) | 0,
                i = i + Math.imul(g, oe) | 0,
                n = (n = n + Math.imul(g, ae) | 0) + Math.imul(v, oe) | 0,
                o = o + Math.imul(v, ae) | 0,
                i = i + Math.imul(p, ue) | 0,
                n = (n = n + Math.imul(p, fe) | 0) + Math.imul(b, ue) | 0,
                o = o + Math.imul(b, fe) | 0;
                var Se = (f + (i = i + Math.imul(h, he) | 0) | 0) + ((8191 & (n = (n = n + Math.imul(h, le) | 0) + Math.imul(l, he) | 0)) << 13) | 0;
                f = ((o = o + Math.imul(l, le) | 0) + (n >>> 13) | 0) + (Se >>> 26) | 0,
                Se &= 67108863,
                i = Math.imul(D, q),
                n = (n = Math.imul(D, K)) + Math.imul(z, q) | 0,
                o = Math.imul(z, K),
                i = i + Math.imul(O, H) | 0,
                n = (n = n + Math.imul(O, V) | 0) + Math.imul(L, H) | 0,
                o = o + Math.imul(L, V) | 0,
                i = i + Math.imul(N, G) | 0,
                n = (n = n + Math.imul(N, W) | 0) + Math.imul(C, G) | 0,
                o = o + Math.imul(C, W) | 0,
                i = i + Math.imul(I, J) | 0,
                n = (n = n + Math.imul(I, X) | 0) + Math.imul(T, J) | 0,
                o = o + Math.imul(T, X) | 0,
                i = i + Math.imul(k, $) | 0,
                n = (n = n + Math.imul(k, ee) | 0) + Math.imul(x, $) | 0,
                o = o + Math.imul(x, ee) | 0,
                i = i + Math.imul(M, re) | 0,
                n = (n = n + Math.imul(M, ie) | 0) + Math.imul(S, re) | 0,
                o = o + Math.imul(S, ie) | 0,
                i = i + Math.imul(w, oe) | 0,
                n = (n = n + Math.imul(w, ae) | 0) + Math.imul(_, oe) | 0,
                o = o + Math.imul(_, ae) | 0,
                i = i + Math.imul(g, ue) | 0,
                n = (n = n + Math.imul(g, fe) | 0) + Math.imul(v, ue) | 0,
                o = o + Math.imul(v, fe) | 0,
                i = i + Math.imul(p, he) | 0,
                n = (n = n + Math.imul(p, le) | 0) + Math.imul(b, he) | 0,
                o = o + Math.imul(b, le) | 0;
                var Ae = (f + (i = i + Math.imul(h, pe) | 0) | 0) + ((8191 & (n = (n = n + Math.imul(h, be) | 0) + Math.imul(l, pe) | 0)) << 13) | 0;
                f = ((o = o + Math.imul(l, be) | 0) + (n >>> 13) | 0) + (Ae >>> 26) | 0,
                Ae &= 67108863,
                i = Math.imul(D, H),
                n = (n = Math.imul(D, V)) + Math.imul(z, H) | 0,
                o = Math.imul(z, V),
                i = i + Math.imul(O, G) | 0,
                n = (n = n + Math.imul(O, W) | 0) + Math.imul(L, G) | 0,
                o = o + Math.imul(L, W) | 0,
                i = i + Math.imul(N, J) | 0,
                n = (n = n + Math.imul(N, X) | 0) + Math.imul(C, J) | 0,
                o = o + Math.imul(C, X) | 0,
                i = i + Math.imul(I, $) | 0,
                n = (n = n + Math.imul(I, ee) | 0) + Math.imul(T, $) | 0,
                o = o + Math.imul(T, ee) | 0,
                i = i + Math.imul(k, re) | 0,
                n = (n = n + Math.imul(k, ie) | 0) + Math.imul(x, re) | 0,
                o = o + Math.imul(x, ie) | 0,
                i = i + Math.imul(M, oe) | 0,
                n = (n = n + Math.imul(M, ae) | 0) + Math.imul(S, oe) | 0,
                o = o + Math.imul(S, ae) | 0,
                i = i + Math.imul(w, ue) | 0,
                n = (n = n + Math.imul(w, fe) | 0) + Math.imul(_, ue) | 0,
                o = o + Math.imul(_, fe) | 0,
                i = i + Math.imul(g, he) | 0,
                n = (n = n + Math.imul(g, le) | 0) + Math.imul(v, he) | 0,
                o = o + Math.imul(v, le) | 0;
                var ke = (f + (i = i + Math.imul(p, pe) | 0) | 0) + ((8191 & (n = (n = n + Math.imul(p, be) | 0) + Math.imul(b, pe) | 0)) << 13) | 0;
                f = ((o = o + Math.imul(b, be) | 0) + (n >>> 13) | 0) + (ke >>> 26) | 0,
                ke &= 67108863,
                i = Math.imul(D, G),
                n = (n = Math.imul(D, W)) + Math.imul(z, G) | 0,
                o = Math.imul(z, W),
                i = i + Math.imul(O, J) | 0,
                n = (n = n + Math.imul(O, X) | 0) + Math.imul(L, J) | 0,
                o = o + Math.imul(L, X) | 0,
                i = i + Math.imul(N, $) | 0,
                n = (n = n + Math.imul(N, ee) | 0) + Math.imul(C, $) | 0,
                o = o + Math.imul(C, ee) | 0,
                i = i + Math.imul(I, re) | 0,
                n = (n = n + Math.imul(I, ie) | 0) + Math.imul(T, re) | 0,
                o = o + Math.imul(T, ie) | 0,
                i = i + Math.imul(k, oe) | 0,
                n = (n = n + Math.imul(k, ae) | 0) + Math.imul(x, oe) | 0,
                o = o + Math.imul(x, ae) | 0,
                i = i + Math.imul(M, ue) | 0,
                n = (n = n + Math.imul(M, fe) | 0) + Math.imul(S, ue) | 0,
                o = o + Math.imul(S, fe) | 0,
                i = i + Math.imul(w, he) | 0,
                n = (n = n + Math.imul(w, le) | 0) + Math.imul(_, he) | 0,
                o = o + Math.imul(_, le) | 0;
                var xe = (f + (i = i + Math.imul(g, pe) | 0) | 0) + ((8191 & (n = (n = n + Math.imul(g, be) | 0) + Math.imul(v, pe) | 0)) << 13) | 0;
                f = ((o = o + Math.imul(v, be) | 0) + (n >>> 13) | 0) + (xe >>> 26) | 0,
                xe &= 67108863,
                i = Math.imul(D, J),
                n = (n = Math.imul(D, X)) + Math.imul(z, J) | 0,
                o = Math.imul(z, X),
                i = i + Math.imul(O, $) | 0,
                n = (n = n + Math.imul(O, ee) | 0) + Math.imul(L, $) | 0,
                o = o + Math.imul(L, ee) | 0,
                i = i + Math.imul(N, re) | 0,
                n = (n = n + Math.imul(N, ie) | 0) + Math.imul(C, re) | 0,
                o = o + Math.imul(C, ie) | 0,
                i = i + Math.imul(I, oe) | 0,
                n = (n = n + Math.imul(I, ae) | 0) + Math.imul(T, oe) | 0,
                o = o + Math.imul(T, ae) | 0,
                i = i + Math.imul(k, ue) | 0,
                n = (n = n + Math.imul(k, fe) | 0) + Math.imul(x, ue) | 0,
                o = o + Math.imul(x, fe) | 0,
                i = i + Math.imul(M, he) | 0,
                n = (n = n + Math.imul(M, le) | 0) + Math.imul(S, he) | 0,
                o = o + Math.imul(S, le) | 0;
                var Re = (f + (i = i + Math.imul(w, pe) | 0) | 0) + ((8191 & (n = (n = n + Math.imul(w, be) | 0) + Math.imul(_, pe) | 0)) << 13) | 0;
                f = ((o = o + Math.imul(_, be) | 0) + (n >>> 13) | 0) + (Re >>> 26) | 0,
                Re &= 67108863,
                i = Math.imul(D, $),
                n = (n = Math.imul(D, ee)) + Math.imul(z, $) | 0,
                o = Math.imul(z, ee),
                i = i + Math.imul(O, re) | 0,
                n = (n = n + Math.imul(O, ie) | 0) + Math.imul(L, re) | 0,
                o = o + Math.imul(L, ie) | 0,
                i = i + Math.imul(N, oe) | 0,
                n = (n = n + Math.imul(N, ae) | 0) + Math.imul(C, oe) | 0,
                o = o + Math.imul(C, ae) | 0,
                i = i + Math.imul(I, ue) | 0,
                n = (n = n + Math.imul(I, fe) | 0) + Math.imul(T, ue) | 0,
                o = o + Math.imul(T, fe) | 0,
                i = i + Math.imul(k, he) | 0,
                n = (n = n + Math.imul(k, le) | 0) + Math.imul(x, he) | 0,
                o = o + Math.imul(x, le) | 0;
                var Ie = (f + (i = i + Math.imul(M, pe) | 0) | 0) + ((8191 & (n = (n = n + Math.imul(M, be) | 0) + Math.imul(S, pe) | 0)) << 13) | 0;
                f = ((o = o + Math.imul(S, be) | 0) + (n >>> 13) | 0) + (Ie >>> 26) | 0,
                Ie &= 67108863,
                i = Math.imul(D, re),
                n = (n = Math.imul(D, ie)) + Math.imul(z, re) | 0,
                o = Math.imul(z, ie),
                i = i + Math.imul(O, oe) | 0,
                n = (n = n + Math.imul(O, ae) | 0) + Math.imul(L, oe) | 0,
                o = o + Math.imul(L, ae) | 0,
                i = i + Math.imul(N, ue) | 0,
                n = (n = n + Math.imul(N, fe) | 0) + Math.imul(C, ue) | 0,
                o = o + Math.imul(C, fe) | 0,
                i = i + Math.imul(I, he) | 0,
                n = (n = n + Math.imul(I, le) | 0) + Math.imul(T, he) | 0,
                o = o + Math.imul(T, le) | 0;
                var Te = (f + (i = i + Math.imul(k, pe) | 0) | 0) + ((8191 & (n = (n = n + Math.imul(k, be) | 0) + Math.imul(x, pe) | 0)) << 13) | 0;
                f = ((o = o + Math.imul(x, be) | 0) + (n >>> 13) | 0) + (Te >>> 26) | 0,
                Te &= 67108863,
                i = Math.imul(D, oe),
                n = (n = Math.imul(D, ae)) + Math.imul(z, oe) | 0,
                o = Math.imul(z, ae),
                i = i + Math.imul(O, ue) | 0,
                n = (n = n + Math.imul(O, fe) | 0) + Math.imul(L, ue) | 0,
                o = o + Math.imul(L, fe) | 0,
                i = i + Math.imul(N, he) | 0,
                n = (n = n + Math.imul(N, le) | 0) + Math.imul(C, he) | 0,
                o = o + Math.imul(C, le) | 0;
                var Pe = (f + (i = i + Math.imul(I, pe) | 0) | 0) + ((8191 & (n = (n = n + Math.imul(I, be) | 0) + Math.imul(T, pe) | 0)) << 13) | 0;
                f = ((o = o + Math.imul(T, be) | 0) + (n >>> 13) | 0) + (Pe >>> 26) | 0,
                Pe &= 67108863,
                i = Math.imul(D, ue),
                n = (n = Math.imul(D, fe)) + Math.imul(z, ue) | 0,
                o = Math.imul(z, fe),
                i = i + Math.imul(O, he) | 0,
                n = (n = n + Math.imul(O, le) | 0) + Math.imul(L, he) | 0,
                o = o + Math.imul(L, le) | 0;
                var Ne = (f + (i = i + Math.imul(N, pe) | 0) | 0) + ((8191 & (n = (n = n + Math.imul(N, be) | 0) + Math.imul(C, pe) | 0)) << 13) | 0;
                f = ((o = o + Math.imul(C, be) | 0) + (n >>> 13) | 0) + (Ne >>> 26) | 0,
                Ne &= 67108863,
                i = Math.imul(D, he),
                n = (n = Math.imul(D, le)) + Math.imul(z, he) | 0,
                o = Math.imul(z, le);
                var Ce = (f + (i = i + Math.imul(O, pe) | 0) | 0) + ((8191 & (n = (n = n + Math.imul(O, be) | 0) + Math.imul(L, pe) | 0)) << 13) | 0;
                f = ((o = o + Math.imul(L, be) | 0) + (n >>> 13) | 0) + (Ce >>> 26) | 0,
                Ce &= 67108863;
                var Be = (f + (i = Math.imul(D, pe)) | 0) + ((8191 & (n = (n = Math.imul(D, be)) + Math.imul(z, pe) | 0)) << 13) | 0;
                return f = ((o = Math.imul(z, be)) + (n >>> 13) | 0) + (Be >>> 26) | 0,
                Be &= 67108863,
                u[0] = me,
                u[1] = ge,
                u[2] = ve,
                u[3] = ye,
                u[4] = we,
                u[5] = _e,
                u[6] = Ee,
                u[7] = Me,
                u[8] = Se,
                u[9] = Ae,
                u[10] = ke,
                u[11] = xe,
                u[12] = Re,
                u[13] = Ie,
                u[14] = Te,
                u[15] = Pe,
                u[16] = Ne,
                u[17] = Ce,
                u[18] = Be,
                0 !== f && (u[19] = f,
                r.length++),
                r
            };
            function g(e, t, r) {
                r.negative = t.negative ^ e.negative,
                r.length = e.length + t.length;
                for (var i = 0, n = 0, o = 0; o < r.length - 1; o++) {
                    var a = n;
                    n = 0;
                    for (var s = 67108863 & i, u = Math.min(o, t.length - 1), f = Math.max(0, o - e.length + 1); f <= u; f++) {
                        var c = o - f
                          , h = (0 | e.words[c]) * (0 | t.words[f])
                          , l = 67108863 & h;
                        s = 67108863 & (l = l + s | 0),
                        n += (a = (a = a + (h / 67108864 | 0) | 0) + (l >>> 26) | 0) >>> 26,
                        a &= 67108863
                    }
                    r.words[o] = s,
                    i = a,
                    a = n
                }
                return 0 !== i ? r.words[o] = i : r.length--,
                r._strip()
            }
            function v(e, t, r) {
                return g(e, t, r)
            }
            function y(e, t) {
                this.x = e,
                this.y = t
            }
            Math.imul || (m = b),
            o.prototype.mulTo = function(e, t) {
                var r = this.length + e.length;
                return 10 === this.length && 10 === e.length ? m(this, e, t) : r < 63 ? b(this, e, t) : r < 1024 ? g(this, e, t) : v(this, e, t)
            }
            ,
            y.prototype.makeRBT = function(e) {
                for (var t = new Array(e), r = o.prototype._countBits(e) - 1, i = 0; i < e; i++)
                    t[i] = this.revBin(i, r, e);
                return t
            }
            ,
            y.prototype.revBin = function(e, t, r) {
                if (0 === e || e === r - 1)
                    return e;
                for (var i = 0, n = 0; n < t; n++)
                    i |= (1 & e) << t - n - 1,
                    e >>= 1;
                return i
            }
            ,
            y.prototype.permute = function(e, t, r, i, n, o) {
                for (var a = 0; a < o; a++)
                    i[a] = t[e[a]],
                    n[a] = r[e[a]]
            }
            ,
            y.prototype.transform = function(e, t, r, i, n, o) {
                this.permute(o, e, t, r, i, n);
                for (var a = 1; a < n; a <<= 1)
                    for (var s = a << 1, u = Math.cos(2 * Math.PI / s), f = Math.sin(2 * Math.PI / s), c = 0; c < n; c += s)
                        for (var h = u, l = f, d = 0; d < a; d++) {
                            var p = r[c + d]
                              , b = i[c + d]
                              , m = r[c + d + a]
                              , g = i[c + d + a]
                              , v = h * m - l * g;
                            g = h * g + l * m,
                            m = v,
                            r[c + d] = p + m,
                            i[c + d] = b + g,
                            r[c + d + a] = p - m,
                            i[c + d + a] = b - g,
                            d !== s && (v = u * h - f * l,
                            l = u * l + f * h,
                            h = v)
                        }
            }
            ,
            y.prototype.guessLen13b = function(e, t) {
                var r = 1 | Math.max(t, e)
                  , i = 1 & r
                  , n = 0;
                for (r = r / 2 | 0; r; r >>>= 1)
                    n++;
                return 1 << n + 1 + i
            }
            ,
            y.prototype.conjugate = function(e, t, r) {
                if (!(r <= 1))
                    for (var i = 0; i < r / 2; i++) {
                        var n = e[i];
                        e[i] = e[r - i - 1],
                        e[r - i - 1] = n,
                        n = t[i],
                        t[i] = -t[r - i - 1],
                        t[r - i - 1] = -n
                    }
            }
            ,
            y.prototype.normalize13b = function(e, t) {
                for (var r = 0, i = 0; i < t / 2; i++) {
                    var n = 8192 * Math.round(e[2 * i + 1] / t) + Math.round(e[2 * i] / t) + r;
                    e[i] = 67108863 & n,
                    r = n < 67108864 ? 0 : n / 67108864 | 0
                }
                return e
            }
            ,
            y.prototype.convert13b = function(e, t, r, n) {
                for (var o = 0, a = 0; a < t; a++)
                    o += 0 | e[a],
                    r[2 * a] = 8191 & o,
                    o >>>= 13,
                    r[2 * a + 1] = 8191 & o,
                    o >>>= 13;
                for (a = 2 * t; a < n; ++a)
                    r[a] = 0;
                i(0 === o),
                i(0 == (-8192 & o))
            }
            ,
            y.prototype.stub = function(e) {
                for (var t = new Array(e), r = 0; r < e; r++)
                    t[r] = 0;
                return t
            }
            ,
            y.prototype.mulp = function(e, t, r) {
                var i = 2 * this.guessLen13b(e.length, t.length)
                  , n = this.makeRBT(i)
                  , o = this.stub(i)
                  , a = new Array(i)
                  , s = new Array(i)
                  , u = new Array(i)
                  , f = new Array(i)
                  , c = new Array(i)
                  , h = new Array(i)
                  , l = r.words;
                l.length = i,
                this.convert13b(e.words, e.length, a, i),
                this.convert13b(t.words, t.length, f, i),
                this.transform(a, o, s, u, i, n),
                this.transform(f, o, c, h, i, n);
                for (var d = 0; d < i; d++) {
                    var p = s[d] * c[d] - u[d] * h[d];
                    u[d] = s[d] * h[d] + u[d] * c[d],
                    s[d] = p
                }
                return this.conjugate(s, u, i),
                this.transform(s, u, l, o, i, n),
                this.conjugate(l, o, i),
                this.normalize13b(l, i),
                r.negative = e.negative ^ t.negative,
                r.length = e.length + t.length,
                r._strip()
            }
            ,
            o.prototype.mul = function(e) {
                var t = new o(null);
                return t.words = new Array(this.length + e.length),
                this.mulTo(e, t)
            }
            ,
            o.prototype.mulf = function(e) {
                var t = new o(null);
                return t.words = new Array(this.length + e.length),
                v(this, e, t)
            }
            ,
            o.prototype.imul = function(e) {
                return this.clone().mulTo(e, this)
            }
            ,
            o.prototype.imuln = function(e) {
                var t = e < 0;
                t && (e = -e),
                i("number" == typeof e),
                i(e < 67108864);
                for (var r = 0, n = 0; n < this.length; n++) {
                    var o = (0 | this.words[n]) * e
                      , a = (67108863 & o) + (67108863 & r);
                    r >>= 26,
                    r += o / 67108864 | 0,
                    r += a >>> 26,
                    this.words[n] = 67108863 & a
                }
                return 0 !== r && (this.words[n] = r,
                this.length++),
                t ? this.ineg() : this
            }
            ,
            o.prototype.muln = function(e) {
                return this.clone().imuln(e)
            }
            ,
            o.prototype.sqr = function() {
                return this.mul(this)
            }
            ,
            o.prototype.isqr = function() {
                return this.imul(this.clone())
            }
            ,
            o.prototype.pow = function(e) {
                var t = function(e) {
                    for (var t = new Array(e.bitLength()), r = 0; r < t.length; r++) {
                        var i = r / 26 | 0
                          , n = r % 26;
                        t[r] = e.words[i] >>> n & 1
                    }
                    return t
                }(e);
                if (0 === t.length)
                    return new o(1);
                for (var r = this, i = 0; i < t.length && 0 === t[i]; i++,
                r = r.sqr())
                    ;
                if (++i < t.length)
                    for (var n = r.sqr(); i < t.length; i++,
                    n = n.sqr())
                        0 !== t[i] && (r = r.mul(n));
                return r
            }
            ,
            o.prototype.iushln = function(e) {
                i("number" == typeof e && e >= 0);
                var t, r = e % 26, n = (e - r) / 26, o = 67108863 >>> 26 - r << 26 - r;
                if (0 !== r) {
                    var a = 0;
                    for (t = 0; t < this.length; t++) {
                        var s = this.words[t] & o
                          , u = (0 | this.words[t]) - s << r;
                        this.words[t] = u | a,
                        a = s >>> 26 - r
                    }
                    a && (this.words[t] = a,
                    this.length++)
                }
                if (0 !== n) {
                    for (t = this.length - 1; t >= 0; t--)
                        this.words[t + n] = this.words[t];
                    for (t = 0; t < n; t++)
                        this.words[t] = 0;
                    this.length += n
                }
                return this._strip()
            }
            ,
            o.prototype.ishln = function(e) {
                return i(0 === this.negative),
                this.iushln(e)
            }
            ,
            o.prototype.iushrn = function(e, t, r) {
                var n;
                i("number" == typeof e && e >= 0),
                n = t ? (t - t % 26) / 26 : 0;
                var o = e % 26
                  , a = Math.min((e - o) / 26, this.length)
                  , s = 67108863 ^ 67108863 >>> o << o
                  , u = r;
                if (n -= a,
                n = Math.max(0, n),
                u) {
                    for (var f = 0; f < a; f++)
                        u.words[f] = this.words[f];
                    u.length = a
                }
                if (0 === a)
                    ;
                else if (this.length > a)
                    for (this.length -= a,
                    f = 0; f < this.length; f++)
                        this.words[f] = this.words[f + a];
                else
                    this.words[0] = 0,
                    this.length = 1;
                var c = 0;
                for (f = this.length - 1; f >= 0 && (0 !== c || f >= n); f--) {
                    var h = 0 | this.words[f];
                    this.words[f] = c << 26 - o | h >>> o,
                    c = h & s
                }
                return u && 0 !== c && (u.words[u.length++] = c),
                0 === this.length && (this.words[0] = 0,
                this.length = 1),
                this._strip()
            }
            ,
            o.prototype.ishrn = function(e, t, r) {
                return i(0 === this.negative),
                this.iushrn(e, t, r)
            }
            ,
            o.prototype.shln = function(e) {
                return this.clone().ishln(e)
            }
            ,
            o.prototype.ushln = function(e) {
                return this.clone().iushln(e)
            }
            ,
            o.prototype.shrn = function(e) {
                return this.clone().ishrn(e)
            }
            ,
            o.prototype.ushrn = function(e) {
                return this.clone().iushrn(e)
            }
            ,
            o.prototype.testn = function(e) {
                i("number" == typeof e && e >= 0);
                var t = e % 26
                  , r = (e - t) / 26
                  , n = 1 << t;
                return !(this.length <= r) && !!(this.words[r] & n)
            }
            ,
            o.prototype.imaskn = function(e) {
                i("number" == typeof e && e >= 0);
                var t = e % 26
                  , r = (e - t) / 26;
                if (i(0 === this.negative, "imaskn works only with positive numbers"),
                this.length <= r)
                    return this;
                if (0 !== t && r++,
                this.length = Math.min(r, this.length),
                0 !== t) {
                    var n = 67108863 ^ 67108863 >>> t << t;
                    this.words[this.length - 1] &= n
                }
                return this._strip()
            }
            ,
            o.prototype.maskn = function(e) {
                return this.clone().imaskn(e)
            }
            ,
            o.prototype.iaddn = function(e) {
                return i("number" == typeof e),
                i(e < 67108864),
                e < 0 ? this.isubn(-e) : 0 !== this.negative ? 1 === this.length && (0 | this.words[0]) <= e ? (this.words[0] = e - (0 | this.words[0]),
                this.negative = 0,
                this) : (this.negative = 0,
                this.isubn(e),
                this.negative = 1,
                this) : this._iaddn(e)
            }
            ,
            o.prototype._iaddn = function(e) {
                this.words[0] += e;
                for (var t = 0; t < this.length && this.words[t] >= 67108864; t++)
                    this.words[t] -= 67108864,
                    t === this.length - 1 ? this.words[t + 1] = 1 : this.words[t + 1]++;
                return this.length = Math.max(this.length, t + 1),
                this
            }
            ,
            o.prototype.isubn = function(e) {
                if (i("number" == typeof e),
                i(e < 67108864),
                e < 0)
                    return this.iaddn(-e);
                if (0 !== this.negative)
                    return this.negative = 0,
                    this.iaddn(e),
                    this.negative = 1,
                    this;
                if (this.words[0] -= e,
                1 === this.length && this.words[0] < 0)
                    this.words[0] = -this.words[0],
                    this.negative = 1;
                else
                    for (var t = 0; t < this.length && this.words[t] < 0; t++)
                        this.words[t] += 67108864,
                        this.words[t + 1] -= 1;
                return this._strip()
            }
            ,
            o.prototype.addn = function(e) {
                return this.clone().iaddn(e)
            }
            ,
            o.prototype.subn = function(e) {
                return this.clone().isubn(e)
            }
            ,
            o.prototype.iabs = function() {
                return this.negative = 0,
                this
            }
            ,
            o.prototype.abs = function() {
                return this.clone().iabs()
            }
            ,
            o.prototype._ishlnsubmul = function(e, t, r) {
                var n, o, a = e.length + r;
                this._expand(a);
                var s = 0;
                for (n = 0; n < e.length; n++) {
                    o = (0 | this.words[n + r]) + s;
                    var u = (0 | e.words[n]) * t;
                    s = ((o -= 67108863 & u) >> 26) - (u / 67108864 | 0),
                    this.words[n + r] = 67108863 & o
                }
                for (; n < this.length - r; n++)
                    s = (o = (0 | this.words[n + r]) + s) >> 26,
                    this.words[n + r] = 67108863 & o;
                if (0 === s)
                    return this._strip();
                for (i(-1 === s),
                s = 0,
                n = 0; n < this.length; n++)
                    s = (o = -(0 | this.words[n]) + s) >> 26,
                    this.words[n] = 67108863 & o;
                return this.negative = 1,
                this._strip()
            }
            ,
            o.prototype._wordDiv = function(e, t) {
                var r = (this.length,
                e.length)
                  , i = this.clone()
                  , n = e
                  , a = 0 | n.words[n.length - 1];
                0 !== (r = 26 - this._countBits(a)) && (n = n.ushln(r),
                i.iushln(r),
                a = 0 | n.words[n.length - 1]);
                var s, u = i.length - n.length;
                if ("mod" !== t) {
                    (s = new o(null)).length = u + 1,
                    s.words = new Array(s.length);
                    for (var f = 0; f < s.length; f++)
                        s.words[f] = 0
                }
                var c = i.clone()._ishlnsubmul(n, 1, u);
                0 === c.negative && (i = c,
                s && (s.words[u] = 1));
                for (var h = u - 1; h >= 0; h--) {
                    var l = 67108864 * (0 | i.words[n.length + h]) + (0 | i.words[n.length + h - 1]);
                    for (l = Math.min(l / a | 0, 67108863),
                    i._ishlnsubmul(n, l, h); 0 !== i.negative; )
                        l--,
                        i.negative = 0,
                        i._ishlnsubmul(n, 1, h),
                        i.isZero() || (i.negative ^= 1);
                    s && (s.words[h] = l)
                }
                return s && s._strip(),
                i._strip(),
                "div" !== t && 0 !== r && i.iushrn(r),
                {
                    div: s || null,
                    mod: i
                }
            }
            ,
            o.prototype.divmod = function(e, t, r) {
                return i(!e.isZero()),
                this.isZero() ? {
                    div: new o(0),
                    mod: new o(0)
                } : 0 !== this.negative && 0 === e.negative ? (s = this.neg().divmod(e, t),
                "mod" !== t && (n = s.div.neg()),
                "div" !== t && (a = s.mod.neg(),
                r && 0 !== a.negative && a.iadd(e)),
                {
                    div: n,
                    mod: a
                }) : 0 === this.negative && 0 !== e.negative ? (s = this.divmod(e.neg(), t),
                "mod" !== t && (n = s.div.neg()),
                {
                    div: n,
                    mod: s.mod
                }) : 0 != (this.negative & e.negative) ? (s = this.neg().divmod(e.neg(), t),
                "div" !== t && (a = s.mod.neg(),
                r && 0 !== a.negative && a.isub(e)),
                {
                    div: s.div,
                    mod: a
                }) : e.length > this.length || this.cmp(e) < 0 ? {
                    div: new o(0),
                    mod: this
                } : 1 === e.length ? "div" === t ? {
                    div: this.divn(e.words[0]),
                    mod: null
                } : "mod" === t ? {
                    div: null,
                    mod: new o(this.modrn(e.words[0]))
                } : {
                    div: this.divn(e.words[0]),
                    mod: new o(this.modrn(e.words[0]))
                } : this._wordDiv(e, t);
                var n, a, s
            }
            ,
            o.prototype.div = function(e) {
                return this.divmod(e, "div", !1).div
            }
            ,
            o.prototype.mod = function(e) {
                return this.divmod(e, "mod", !1).mod
            }
            ,
            o.prototype.umod = function(e) {
                return this.divmod(e, "mod", !0).mod
            }
            ,
            o.prototype.divRound = function(e) {
                var t = this.divmod(e);
                if (t.mod.isZero())
                    return t.div;
                var r = 0 !== t.div.negative ? t.mod.isub(e) : t.mod
                  , i = e.ushrn(1)
                  , n = e.andln(1)
                  , o = r.cmp(i);
                return o < 0 || 1 === n && 0 === o ? t.div : 0 !== t.div.negative ? t.div.isubn(1) : t.div.iaddn(1)
            }
            ,
            o.prototype.modrn = function(e) {
                var t = e < 0;
                t && (e = -e),
                i(e <= 67108863);
                for (var r = (1 << 26) % e, n = 0, o = this.length - 1; o >= 0; o--)
                    n = (r * n + (0 | this.words[o])) % e;
                return t ? -n : n
            }
            ,
            o.prototype.modn = function(e) {
                return this.modrn(e)
            }
            ,
            o.prototype.idivn = function(e) {
                var t = e < 0;
                t && (e = -e),
                i(e <= 67108863);
                for (var r = 0, n = this.length - 1; n >= 0; n--) {
                    var o = (0 | this.words[n]) + 67108864 * r;
                    this.words[n] = o / e | 0,
                    r = o % e
                }
                return this._strip(),
                t ? this.ineg() : this
            }
            ,
            o.prototype.divn = function(e) {
                return this.clone().idivn(e)
            }
            ,
            o.prototype.egcd = function(e) {
                i(0 === e.negative),
                i(!e.isZero());
                var t = this
                  , r = e.clone();
                t = 0 !== t.negative ? t.umod(e) : t.clone();
                for (var n = new o(1), a = new o(0), s = new o(0), u = new o(1), f = 0; t.isEven() && r.isEven(); )
                    t.iushrn(1),
                    r.iushrn(1),
                    ++f;
                for (var c = r.clone(), h = t.clone(); !t.isZero(); ) {
                    for (var l = 0, d = 1; 0 == (t.words[0] & d) && l < 26; ++l,
                    d <<= 1)
                        ;
                    if (l > 0)
                        for (t.iushrn(l); l-- > 0; )
                            (n.isOdd() || a.isOdd()) && (n.iadd(c),
                            a.isub(h)),
                            n.iushrn(1),
                            a.iushrn(1);
                    for (var p = 0, b = 1; 0 == (r.words[0] & b) && p < 26; ++p,
                    b <<= 1)
                        ;
                    if (p > 0)
                        for (r.iushrn(p); p-- > 0; )
                            (s.isOdd() || u.isOdd()) && (s.iadd(c),
                            u.isub(h)),
                            s.iushrn(1),
                            u.iushrn(1);
                    t.cmp(r) >= 0 ? (t.isub(r),
                    n.isub(s),
                    a.isub(u)) : (r.isub(t),
                    s.isub(n),
                    u.isub(a))
                }
                return {
                    a: s,
                    b: u,
                    gcd: r.iushln(f)
                }
            }
            ,
            o.prototype._invmp = function(e) {
                i(0 === e.negative),
                i(!e.isZero());
                var t = this
                  , r = e.clone();
                t = 0 !== t.negative ? t.umod(e) : t.clone();
                for (var n, a = new o(1), s = new o(0), u = r.clone(); t.cmpn(1) > 0 && r.cmpn(1) > 0; ) {
                    for (var f = 0, c = 1; 0 == (t.words[0] & c) && f < 26; ++f,
                    c <<= 1)
                        ;
                    if (f > 0)
                        for (t.iushrn(f); f-- > 0; )
                            a.isOdd() && a.iadd(u),
                            a.iushrn(1);
                    for (var h = 0, l = 1; 0 == (r.words[0] & l) && h < 26; ++h,
                    l <<= 1)
                        ;
                    if (h > 0)
                        for (r.iushrn(h); h-- > 0; )
                            s.isOdd() && s.iadd(u),
                            s.iushrn(1);
                    t.cmp(r) >= 0 ? (t.isub(r),
                    a.isub(s)) : (r.isub(t),
                    s.isub(a))
                }
                return (n = 0 === t.cmpn(1) ? a : s).cmpn(0) < 0 && n.iadd(e),
                n
            }
            ,
            o.prototype.gcd = function(e) {
                if (this.isZero())
                    return e.abs();
                if (e.isZero())
                    return this.abs();
                var t = this.clone()
                  , r = e.clone();
                t.negative = 0,
                r.negative = 0;
                for (var i = 0; t.isEven() && r.isEven(); i++)
                    t.iushrn(1),
                    r.iushrn(1);
                for (; ; ) {
                    for (; t.isEven(); )
                        t.iushrn(1);
                    for (; r.isEven(); )
                        r.iushrn(1);
                    var n = t.cmp(r);
                    if (n < 0) {
                        var o = t;
                        t = r,
                        r = o
                    } else if (0 === n || 0 === r.cmpn(1))
                        break;
                    t.isub(r)
                }
                return r.iushln(i)
            }
            ,
            o.prototype.invm = function(e) {
                return this.egcd(e).a.umod(e)
            }
            ,
            o.prototype.isEven = function() {
                return 0 == (1 & this.words[0])
            }
            ,
            o.prototype.isOdd = function() {
                return 1 == (1 & this.words[0])
            }
            ,
            o.prototype.andln = function(e) {
                return this.words[0] & e
            }
            ,
            o.prototype.bincn = function(e) {
                i("number" == typeof e);
                var t = e % 26
                  , r = (e - t) / 26
                  , n = 1 << t;
                if (this.length <= r)
                    return this._expand(r + 1),
                    this.words[r] |= n,
                    this;
                for (var o = n, a = r; 0 !== o && a < this.length; a++) {
                    var s = 0 | this.words[a];
                    o = (s += o) >>> 26,
                    s &= 67108863,
                    this.words[a] = s
                }
                return 0 !== o && (this.words[a] = o,
                this.length++),
                this
            }
            ,
            o.prototype.isZero = function() {
                return 1 === this.length && 0 === this.words[0]
            }
            ,
            o.prototype.cmpn = function(e) {
                var t, r = e < 0;
                if (0 !== this.negative && !r)
                    return -1;
                if (0 === this.negative && r)
                    return 1;
                if (this._strip(),
                this.length > 1)
                    t = 1;
                else {
                    r && (e = -e),
                    i(e <= 67108863, "Number is too big");
                    var n = 0 | this.words[0];
                    t = n === e ? 0 : n < e ? -1 : 1
                }
                return 0 !== this.negative ? 0 | -t : t
            }
            ,
            o.prototype.cmp = function(e) {
                if (0 !== this.negative && 0 === e.negative)
                    return -1;
                if (0 === this.negative && 0 !== e.negative)
                    return 1;
                var t = this.ucmp(e);
                return 0 !== this.negative ? 0 | -t : t
            }
            ,
            o.prototype.ucmp = function(e) {
                if (this.length > e.length)
                    return 1;
                if (this.length < e.length)
                    return -1;
                for (var t = 0, r = this.length - 1; r >= 0; r--) {
                    var i = 0 | this.words[r]
                      , n = 0 | e.words[r];
                    if (i !== n) {
                        i < n ? t = -1 : i > n && (t = 1);
                        break
                    }
                }
                return t
            }
            ,
            o.prototype.gtn = function(e) {
                return 1 === this.cmpn(e)
            }
            ,
            o.prototype.gt = function(e) {
                return 1 === this.cmp(e)
            }
            ,
            o.prototype.gten = function(e) {
                return this.cmpn(e) >= 0
            }
            ,
            o.prototype.gte = function(e) {
                return this.cmp(e) >= 0
            }
            ,
            o.prototype.ltn = function(e) {
                return -1 === this.cmpn(e)
            }
            ,
            o.prototype.lt = function(e) {
                return -1 === this.cmp(e)
            }
            ,
            o.prototype.lten = function(e) {
                return this.cmpn(e) <= 0
            }
            ,
            o.prototype.lte = function(e) {
                return this.cmp(e) <= 0
            }
            ,
            o.prototype.eqn = function(e) {
                return 0 === this.cmpn(e)
            }
            ,
            o.prototype.eq = function(e) {
                return 0 === this.cmp(e)
            }
            ,
            o.red = function(e) {
                return new k(e)
            }
            ,
            o.prototype.toRed = function(e) {
                return i(!this.red, "Already a number in reduction context"),
                i(0 === this.negative, "red works only with positives"),
                e.convertTo(this)._forceRed(e)
            }
            ,
            o.prototype.fromRed = function() {
                return i(this.red, "fromRed works only with numbers in reduction context"),
                this.red.convertFrom(this)
            }
            ,
            o.prototype._forceRed = function(e) {
                return this.red = e,
                this
            }
            ,
            o.prototype.forceRed = function(e) {
                return i(!this.red, "Already a number in reduction context"),
                this._forceRed(e)
            }
            ,
            o.prototype.redAdd = function(e) {
                return i(this.red, "redAdd works only with red numbers"),
                this.red.add(this, e)
            }
            ,
            o.prototype.redIAdd = function(e) {
                return i(this.red, "redIAdd works only with red numbers"),
                this.red.iadd(this, e)
            }
            ,
            o.prototype.redSub = function(e) {
                return i(this.red, "redSub works only with red numbers"),
                this.red.sub(this, e)
            }
            ,
            o.prototype.redISub = function(e) {
                return i(this.red, "redISub works only with red numbers"),
                this.red.isub(this, e)
            }
            ,
            o.prototype.redShl = function(e) {
                return i(this.red, "redShl works only with red numbers"),
                this.red.shl(this, e)
            }
            ,
            o.prototype.redMul = function(e) {
                return i(this.red, "redMul works only with red numbers"),
                this.red._verify2(this, e),
                this.red.mul(this, e)
            }
            ,
            o.prototype.redIMul = function(e) {
                return i(this.red, "redMul works only with red numbers"),
                this.red._verify2(this, e),
                this.red.imul(this, e)
            }
            ,
            o.prototype.redSqr = function() {
                return i(this.red, "redSqr works only with red numbers"),
                this.red._verify1(this),
                this.red.sqr(this)
            }
            ,
            o.prototype.redISqr = function() {
                return i(this.red, "redISqr works only with red numbers"),
                this.red._verify1(this),
                this.red.isqr(this)
            }
            ,
            o.prototype.redSqrt = function() {
                return i(this.red, "redSqrt works only with red numbers"),
                this.red._verify1(this),
                this.red.sqrt(this)
            }
            ,
            o.prototype.redInvm = function() {
                return i(this.red, "redInvm works only with red numbers"),
                this.red._verify1(this),
                this.red.invm(this)
            }
            ,
            o.prototype.redNeg = function() {
                return i(this.red, "redNeg works only with red numbers"),
                this.red._verify1(this),
                this.red.neg(this)
            }
            ,
            o.prototype.redPow = function(e) {
                return i(this.red && !e.red, "redPow(normalNum)"),
                this.red._verify1(this),
                this.red.pow(this, e)
            }
            ;
            var w = {
                k256: null,
                p224: null,
                p192: null,
                p25519: null
            };
            function _(e, t) {
                this.name = e,
                this.p = new o(t,16),
                this.n = this.p.bitLength(),
                this.k = new o(1).iushln(this.n).isub(this.p),
                this.tmp = this._tmp()
            }
            function E() {
                _.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f")
            }
            function M() {
                _.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001")
            }
            function S() {
                _.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff")
            }
            function A() {
                _.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed")
            }
            function k(e) {
                if ("string" == typeof e) {
                    var t = o._prime(e);
                    this.m = t.p,
                    this.prime = t
                } else
                    i(e.gtn(1), "modulus must be greater than 1"),
                    this.m = e,
                    this.prime = null
            }
            function x(e) {
                k.call(this, e),
                this.shift = this.m.bitLength(),
                this.shift % 26 != 0 && (this.shift += 26 - this.shift % 26),
                this.r = new o(1).iushln(this.shift),
                this.r2 = this.imod(this.r.sqr()),
                this.rinv = this.r._invmp(this.m),
                this.minv = this.rinv.mul(this.r).isubn(1).div(this.m),
                this.minv = this.minv.umod(this.r),
                this.minv = this.r.sub(this.minv)
            }
            _.prototype._tmp = function() {
                var e = new o(null);
                return e.words = new Array(Math.ceil(this.n / 13)),
                e
            }
            ,
            _.prototype.ireduce = function(e) {
                var t, r = e;
                do {
                    this.split(r, this.tmp),
                    t = (r = (r = this.imulK(r)).iadd(this.tmp)).bitLength()
                } while (t > this.n);
                var i = t < this.n ? -1 : r.ucmp(this.p);
                return 0 === i ? (r.words[0] = 0,
                r.length = 1) : i > 0 ? r.isub(this.p) : void 0 !== r.strip ? r.strip() : r._strip(),
                r
            }
            ,
            _.prototype.split = function(e, t) {
                e.iushrn(this.n, 0, t)
            }
            ,
            _.prototype.imulK = function(e) {
                return e.imul(this.k)
            }
            ,
            n(E, _),
            E.prototype.split = function(e, t) {
                for (var r = Math.min(e.length, 9), i = 0; i < r; i++)
                    t.words[i] = e.words[i];
                if (t.length = r,
                e.length <= 9)
                    return e.words[0] = 0,
                    void (e.length = 1);
                var n = e.words[9];
                for (t.words[t.length++] = 4194303 & n,
                i = 10; i < e.length; i++) {
                    var o = 0 | e.words[i];
                    e.words[i - 10] = (4194303 & o) << 4 | n >>> 22,
                    n = o
                }
                n >>>= 22,
                e.words[i - 10] = n,
                0 === n && e.length > 10 ? e.length -= 10 : e.length -= 9
            }
            ,
            E.prototype.imulK = function(e) {
                e.words[e.length] = 0,
                e.words[e.length + 1] = 0,
                e.length += 2;
                for (var t = 0, r = 0; r < e.length; r++) {
                    var i = 0 | e.words[r];
                    t += 977 * i,
                    e.words[r] = 67108863 & t,
                    t = 64 * i + (t / 67108864 | 0)
                }
                return 0 === e.words[e.length - 1] && (e.length--,
                0 === e.words[e.length - 1] && e.length--),
                e
            }
            ,
            n(M, _),
            n(S, _),
            n(A, _),
            A.prototype.imulK = function(e) {
                for (var t = 0, r = 0; r < e.length; r++) {
                    var i = 19 * (0 | e.words[r]) + t
                      , n = 67108863 & i;
                    i >>>= 26,
                    e.words[r] = n,
                    t = i
                }
                return 0 !== t && (e.words[e.length++] = t),
                e
            }
            ,
            o._prime = function(e) {
                if (w[e])
                    return w[e];
                var t;
                if ("k256" === e)
                    t = new E;
                else if ("p224" === e)
                    t = new M;
                else if ("p192" === e)
                    t = new S;
                else {
                    if ("p25519" !== e)
                        throw new Error("Unknown prime " + e);
                    t = new A
                }
                return w[e] = t,
                t
            }
            ,
            k.prototype._verify1 = function(e) {
                i(0 === e.negative, "red works only with positives"),
                i(e.red, "red works only with red numbers")
            }
            ,
            k.prototype._verify2 = function(e, t) {
                i(0 == (e.negative | t.negative), "red works only with positives"),
                i(e.red && e.red === t.red, "red works only with red numbers")
            }
            ,
            k.prototype.imod = function(e) {
                return this.prime ? this.prime.ireduce(e)._forceRed(this) : (c(e, e.umod(this.m)._forceRed(this)),
                e)
            }
            ,
            k.prototype.neg = function(e) {
                return e.isZero() ? e.clone() : this.m.sub(e)._forceRed(this)
            }
            ,
            k.prototype.add = function(e, t) {
                this._verify2(e, t);
                var r = e.add(t);
                return r.cmp(this.m) >= 0 && r.isub(this.m),
                r._forceRed(this)
            }
            ,
            k.prototype.iadd = function(e, t) {
                this._verify2(e, t);
                var r = e.iadd(t);
                return r.cmp(this.m) >= 0 && r.isub(this.m),
                r
            }
            ,
            k.prototype.sub = function(e, t) {
                this._verify2(e, t);
                var r = e.sub(t);
                return r.cmpn(0) < 0 && r.iadd(this.m),
                r._forceRed(this)
            }
            ,
            k.prototype.isub = function(e, t) {
                this._verify2(e, t);
                var r = e.isub(t);
                return r.cmpn(0) < 0 && r.iadd(this.m),
                r
            }
            ,
            k.prototype.shl = function(e, t) {
                return this._verify1(e),
                this.imod(e.ushln(t))
            }
            ,
            k.prototype.imul = function(e, t) {
                return this._verify2(e, t),
                this.imod(e.imul(t))
            }
            ,
            k.prototype.mul = function(e, t) {
                return this._verify2(e, t),
                this.imod(e.mul(t))
            }
            ,
            k.prototype.isqr = function(e) {
                return this.imul(e, e.clone())
            }
            ,
            k.prototype.sqr = function(e) {
                return this.mul(e, e)
            }
            ,
            k.prototype.sqrt = function(e) {
                if (e.isZero())
                    return e.clone();
                var t = this.m.andln(3);
                if (i(t % 2 == 1),
                3 === t) {
                    var r = this.m.add(new o(1)).iushrn(2);
                    return this.pow(e, r)
                }
                for (var n = this.m.subn(1), a = 0; !n.isZero() && 0 === n.andln(1); )
                    a++,
                    n.iushrn(1);
                i(!n.isZero());
                var s = new o(1).toRed(this)
                  , u = s.redNeg()
                  , f = this.m.subn(1).iushrn(1)
                  , c = this.m.bitLength();
                for (c = new o(2 * c * c).toRed(this); 0 !== this.pow(c, f).cmp(u); )
                    c.redIAdd(u);
                for (var h = this.pow(c, n), l = this.pow(e, n.addn(1).iushrn(1)), d = this.pow(e, n), p = a; 0 !== d.cmp(s); ) {
                    for (var b = d, m = 0; 0 !== b.cmp(s); m++)
                        b = b.redSqr();
                    i(m < p);
                    var g = this.pow(h, new o(1).iushln(p - m - 1));
                    l = l.redMul(g),
                    h = g.redSqr(),
                    d = d.redMul(h),
                    p = m
                }
                return l
            }
            ,
            k.prototype.invm = function(e) {
                var t = e._invmp(this.m);
                return 0 !== t.negative ? (t.negative = 0,
                this.imod(t).redNeg()) : this.imod(t)
            }
            ,
            k.prototype.pow = function(e, t) {
                if (t.isZero())
                    return new o(1).toRed(this);
                if (0 === t.cmpn(1))
                    return e.clone();
                var r = new Array(16);
                r[0] = new o(1).toRed(this),
                r[1] = e;
                for (var i = 2; i < r.length; i++)
                    r[i] = this.mul(r[i - 1], e);
                var n = r[0]
                  , a = 0
                  , s = 0
                  , u = t.bitLength() % 26;
                for (0 === u && (u = 26),
                i = t.length - 1; i >= 0; i--) {
                    for (var f = t.words[i], c = u - 1; c >= 0; c--) {
                        var h = f >> c & 1;
                        n !== r[0] && (n = this.sqr(n)),
                        0 !== h || 0 !== a ? (a <<= 1,
                        a |= h,
                        (4 === ++s || 0 === i && 0 === c) && (n = this.mul(n, r[a]),
                        s = 0,
                        a = 0)) : s = 0
                    }
                    u = 26
                }
                return n
            }
            ,
            k.prototype.convertTo = function(e) {
                var t = e.umod(this.m);
                return t === e ? t.clone() : t
            }
            ,
            k.prototype.convertFrom = function(e) {
                var t = e.clone();
                return t.red = null,
                t
            }
            ,
            o.mont = function(e) {
                return new x(e)
            }
            ,
            n(x, k),
            x.prototype.convertTo = function(e) {
                return this.imod(e.ushln(this.shift))
            }
            ,
            x.prototype.convertFrom = function(e) {
                var t = this.imod(e.mul(this.rinv));
                return t.red = null,
                t
            }
            ,
            x.prototype.imul = function(e, t) {
                if (e.isZero() || t.isZero())
                    return e.words[0] = 0,
                    e.length = 1,
                    e;
                var r = e.imul(t)
                  , i = r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m)
                  , n = r.isub(i).iushrn(this.shift)
                  , o = n;
                return n.cmp(this.m) >= 0 ? o = n.isub(this.m) : n.cmpn(0) < 0 && (o = n.iadd(this.m)),
                o._forceRed(this)
            }
            ,
            x.prototype.mul = function(e, t) {
                if (e.isZero() || t.isZero())
                    return new o(0)._forceRed(this);
                var r = e.mul(t)
                  , i = r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m)
                  , n = r.isub(i).iushrn(this.shift)
                  , a = n;
                return n.cmp(this.m) >= 0 ? a = n.isub(this.m) : n.cmpn(0) < 0 && (a = n.iadd(this.m)),
                a._forceRed(this)
            }
            ,
            x.prototype.invm = function(e) {
                return this.imod(e._invmp(this.m).mul(this.r2))._forceRed(this)
            }
        }(e, this)
    }
    ).call(this, r(50)(e))
}
, function(e, t) {}
, function(e) {
    e.exports = JSON.parse('{"name":"elliptic","version":"6.5.4","description":"EC cryptography","main":"lib/elliptic.js","files":["lib"],"scripts":{"lint":"eslint lib test","lint:fix":"npm run lint -- --fix","unit":"istanbul test _mocha --reporter=spec test/index.js","test":"npm run lint && npm run unit","version":"grunt dist && git add dist/"},"repository":{"type":"git","url":"git@github.com:indutny/elliptic"},"keywords":["EC","Elliptic","curve","Cryptography"],"author":"Fedor Indutny <fedor@indutny.com>","license":"MIT","bugs":{"url":"https://github.com/indutny/elliptic/issues"},"homepage":"https://github.com/indutny/elliptic","devDependencies":{"brfs":"^2.0.2","coveralls":"^3.1.0","eslint":"^7.6.0","grunt":"^1.2.1","grunt-browserify":"^5.3.0","grunt-cli":"^1.3.2","grunt-contrib-connect":"^3.0.0","grunt-contrib-copy":"^1.0.0","grunt-contrib-uglify":"^5.0.0","grunt-mocha-istanbul":"^5.0.2","grunt-saucelabs":"^9.0.1","istanbul":"^0.4.5","mocha":"^8.0.1"},"dependencies":{"bn.js":"^4.11.9","brorand":"^1.1.0","hash.js":"^1.0.0","hmac-drbg":"^1.0.1","inherits":"^2.0.4","minimalistic-assert":"^1.0.1","minimalistic-crypto-utils":"^1.0.1"}}')
}
, function(e, t, r) {
    "use strict";
    var i = r(22)
      , n = r(7)
      , o = r(4)
      , a = r(64)
      , s = i.assert;
    function u(e) {
        a.call(this, "short", e),
        this.a = new n(e.a,16).toRed(this.red),
        this.b = new n(e.b,16).toRed(this.red),
        this.tinv = this.two.redInvm(),
        this.zeroA = 0 === this.a.fromRed().cmpn(0),
        this.threeA = 0 === this.a.fromRed().sub(this.p).cmpn(-3),
        this.endo = this._getEndomorphism(e),
        this._endoWnafT1 = new Array(4),
        this._endoWnafT2 = new Array(4)
    }
    function f(e, t, r, i) {
        a.BasePoint.call(this, e, "affine"),
        null === t && null === r ? (this.x = null,
        this.y = null,
        this.inf = !0) : (this.x = new n(t,16),
        this.y = new n(r,16),
        i && (this.x.forceRed(this.curve.red),
        this.y.forceRed(this.curve.red)),
        this.x.red || (this.x = this.x.toRed(this.curve.red)),
        this.y.red || (this.y = this.y.toRed(this.curve.red)),
        this.inf = !1)
    }
    function c(e, t, r, i) {
        a.BasePoint.call(this, e, "jacobian"),
        null === t && null === r && null === i ? (this.x = this.curve.one,
        this.y = this.curve.one,
        this.z = new n(0)) : (this.x = new n(t,16),
        this.y = new n(r,16),
        this.z = new n(i,16)),
        this.x.red || (this.x = this.x.toRed(this.curve.red)),
        this.y.red || (this.y = this.y.toRed(this.curve.red)),
        this.z.red || (this.z = this.z.toRed(this.curve.red)),
        this.zOne = this.z === this.curve.one
    }
    o(u, a),
    e.exports = u,
    u.prototype._getEndomorphism = function(e) {
        if (this.zeroA && this.g && this.n && 1 === this.p.modn(3)) {
            var t, r;
            if (e.beta)
                t = new n(e.beta,16).toRed(this.red);
            else {
                var i = this._getEndoRoots(this.p);
                t = (t = i[0].cmp(i[1]) < 0 ? i[0] : i[1]).toRed(this.red)
            }
            if (e.lambda)
                r = new n(e.lambda,16);
            else {
                var o = this._getEndoRoots(this.n);
                0 === this.g.mul(o[0]).x.cmp(this.g.x.redMul(t)) ? r = o[0] : (r = o[1],
                s(0 === this.g.mul(r).x.cmp(this.g.x.redMul(t))))
            }
            return {
                beta: t,
                lambda: r,
                basis: e.basis ? e.basis.map((function(e) {
                    return {
                        a: new n(e.a,16),
                        b: new n(e.b,16)
                    }
                }
                )) : this._getEndoBasis(r)
            }
        }
    }
    ,
    u.prototype._getEndoRoots = function(e) {
        var t = e === this.p ? this.red : n.mont(e)
          , r = new n(2).toRed(t).redInvm()
          , i = r.redNeg()
          , o = new n(3).toRed(t).redNeg().redSqrt().redMul(r);
        return [i.redAdd(o).fromRed(), i.redSub(o).fromRed()]
    }
    ,
    u.prototype._getEndoBasis = function(e) {
        for (var t, r, i, o, a, s, u, f, c, h = this.n.ushrn(Math.floor(this.n.bitLength() / 2)), l = e, d = this.n.clone(), p = new n(1), b = new n(0), m = new n(0), g = new n(1), v = 0; 0 !== l.cmpn(0); ) {
            var y = d.div(l);
            f = d.sub(y.mul(l)),
            c = m.sub(y.mul(p));
            var w = g.sub(y.mul(b));
            if (!i && f.cmp(h) < 0)
                t = u.neg(),
                r = p,
                i = f.neg(),
                o = c;
            else if (i && 2 == ++v)
                break;
            u = f,
            d = l,
            l = f,
            m = p,
            p = c,
            g = b,
            b = w
        }
        a = f.neg(),
        s = c;
        var _ = i.sqr().add(o.sqr());
        return a.sqr().add(s.sqr()).cmp(_) >= 0 && (a = t,
        s = r),
        i.negative && (i = i.neg(),
        o = o.neg()),
        a.negative && (a = a.neg(),
        s = s.neg()),
        [{
            a: i,
            b: o
        }, {
            a: a,
            b: s
        }]
    }
    ,
    u.prototype._endoSplit = function(e) {
        var t = this.endo.basis
          , r = t[0]
          , i = t[1]
          , n = i.b.mul(e).divRound(this.n)
          , o = r.b.neg().mul(e).divRound(this.n)
          , a = n.mul(r.a)
          , s = o.mul(i.a)
          , u = n.mul(r.b)
          , f = o.mul(i.b);
        return {
            k1: e.sub(a).sub(s),
            k2: u.add(f).neg()
        }
    }
    ,
    u.prototype.pointFromX = function(e, t) {
        (e = new n(e,16)).red || (e = e.toRed(this.red));
        var r = e.redSqr().redMul(e).redIAdd(e.redMul(this.a)).redIAdd(this.b)
          , i = r.redSqrt();
        if (0 !== i.redSqr().redSub(r).cmp(this.zero))
            throw new Error("invalid point");
        var o = i.fromRed().isOdd();
        return (t && !o || !t && o) && (i = i.redNeg()),
        this.point(e, i)
    }
    ,
    u.prototype.validate = function(e) {
        if (e.inf)
            return !0;
        var t = e.x
          , r = e.y
          , i = this.a.redMul(t)
          , n = t.redSqr().redMul(t).redIAdd(i).redIAdd(this.b);
        return 0 === r.redSqr().redISub(n).cmpn(0)
    }
    ,
    u.prototype._endoWnafMulAdd = function(e, t, r) {
        for (var i = this._endoWnafT1, n = this._endoWnafT2, o = 0; o < e.length; o++) {
            var a = this._endoSplit(t[o])
              , s = e[o]
              , u = s._getBeta();
            a.k1.negative && (a.k1.ineg(),
            s = s.neg(!0)),
            a.k2.negative && (a.k2.ineg(),
            u = u.neg(!0)),
            i[2 * o] = s,
            i[2 * o + 1] = u,
            n[2 * o] = a.k1,
            n[2 * o + 1] = a.k2
        }
        for (var f = this._wnafMulAdd(1, i, n, 2 * o, r), c = 0; c < 2 * o; c++)
            i[c] = null,
            n[c] = null;
        return f
    }
    ,
    o(f, a.BasePoint),
    u.prototype.point = function(e, t, r) {
        return new f(this,e,t,r)
    }
    ,
    u.prototype.pointFromJSON = function(e, t) {
        return f.fromJSON(this, e, t)
    }
    ,
    f.prototype._getBeta = function() {
        if (this.curve.endo) {
            var e = this.precomputed;
            if (e && e.beta)
                return e.beta;
            var t = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
            if (e) {
                var r = this.curve
                  , i = function(e) {
                    return r.point(e.x.redMul(r.endo.beta), e.y)
                };
                e.beta = t,
                t.precomputed = {
                    beta: null,
                    naf: e.naf && {
                        wnd: e.naf.wnd,
                        points: e.naf.points.map(i)
                    },
                    doubles: e.doubles && {
                        step: e.doubles.step,
                        points: e.doubles.points.map(i)
                    }
                }
            }
            return t
        }
    }
    ,
    f.prototype.toJSON = function() {
        return this.precomputed ? [this.x, this.y, this.precomputed && {
            doubles: this.precomputed.doubles && {
                step: this.precomputed.doubles.step,
                points: this.precomputed.doubles.points.slice(1)
            },
            naf: this.precomputed.naf && {
                wnd: this.precomputed.naf.wnd,
                points: this.precomputed.naf.points.slice(1)
            }
        }] : [this.x, this.y]
    }
    ,
    f.fromJSON = function(e, t, r) {
        "string" == typeof t && (t = JSON.parse(t));
        var i = e.point(t[0], t[1], r);
        if (!t[2])
            return i;
        function n(t) {
            return e.point(t[0], t[1], r)
        }
        var o = t[2];
        return i.precomputed = {
            beta: null,
            doubles: o.doubles && {
                step: o.doubles.step,
                points: [i].concat(o.doubles.points.map(n))
            },
            naf: o.naf && {
                wnd: o.naf.wnd,
                points: [i].concat(o.naf.points.map(n))
            }
        },
        i
    }
    ,
    f.prototype.inspect = function() {
        return this.isInfinity() ? "<EC Point Infinity>" : "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + ">"
    }
    ,
    f.prototype.isInfinity = function() {
        return this.inf
    }
    ,
    f.prototype.add = function(e) {
        if (this.inf)
            return e;
        if (e.inf)
            return this;
        if (this.eq(e))
            return this.dbl();
        if (this.neg().eq(e))
            return this.curve.point(null, null);
        if (0 === this.x.cmp(e.x))
            return this.curve.point(null, null);
        var t = this.y.redSub(e.y);
        0 !== t.cmpn(0) && (t = t.redMul(this.x.redSub(e.x).redInvm()));
        var r = t.redSqr().redISub(this.x).redISub(e.x)
          , i = t.redMul(this.x.redSub(r)).redISub(this.y);
        return this.curve.point(r, i)
    }
    ,
    f.prototype.dbl = function() {
        if (this.inf)
            return this;
        var e = this.y.redAdd(this.y);
        if (0 === e.cmpn(0))
            return this.curve.point(null, null);
        var t = this.curve.a
          , r = this.x.redSqr()
          , i = e.redInvm()
          , n = r.redAdd(r).redIAdd(r).redIAdd(t).redMul(i)
          , o = n.redSqr().redISub(this.x.redAdd(this.x))
          , a = n.redMul(this.x.redSub(o)).redISub(this.y);
        return this.curve.point(o, a)
    }
    ,
    f.prototype.getX = function() {
        return this.x.fromRed()
    }
    ,
    f.prototype.getY = function() {
        return this.y.fromRed()
    }
    ,
    f.prototype.mul = function(e) {
        return e = new n(e,16),
        this.isInfinity() ? this : this._hasDoubles(e) ? this.curve._fixedNafMul(this, e) : this.curve.endo ? this.curve._endoWnafMulAdd([this], [e]) : this.curve._wnafMul(this, e)
    }
    ,
    f.prototype.mulAdd = function(e, t, r) {
        var i = [this, t]
          , n = [e, r];
        return this.curve.endo ? this.curve._endoWnafMulAdd(i, n) : this.curve._wnafMulAdd(1, i, n, 2)
    }
    ,
    f.prototype.jmulAdd = function(e, t, r) {
        var i = [this, t]
          , n = [e, r];
        return this.curve.endo ? this.curve._endoWnafMulAdd(i, n, !0) : this.curve._wnafMulAdd(1, i, n, 2, !0)
    }
    ,
    f.prototype.eq = function(e) {
        return this === e || this.inf === e.inf && (this.inf || 0 === this.x.cmp(e.x) && 0 === this.y.cmp(e.y))
    }
    ,
    f.prototype.neg = function(e) {
        if (this.inf)
            return this;
        var t = this.curve.point(this.x, this.y.redNeg());
        if (e && this.precomputed) {
            var r = this.precomputed
              , i = function(e) {
                return e.neg()
            };
            t.precomputed = {
                naf: r.naf && {
                    wnd: r.naf.wnd,
                    points: r.naf.points.map(i)
                },
                doubles: r.doubles && {
                    step: r.doubles.step,
                    points: r.doubles.points.map(i)
                }
            }
        }
        return t
    }
    ,
    f.prototype.toJ = function() {
        return this.inf ? this.curve.jpoint(null, null, null) : this.curve.jpoint(this.x, this.y, this.curve.one)
    }
    ,
    o(c, a.BasePoint),
    u.prototype.jpoint = function(e, t, r) {
        return new c(this,e,t,r)
    }
    ,
    c.prototype.toP = function() {
        if (this.isInfinity())
            return this.curve.point(null, null);
        var e = this.z.redInvm()
          , t = e.redSqr()
          , r = this.x.redMul(t)
          , i = this.y.redMul(t).redMul(e);
        return this.curve.point(r, i)
    }
    ,
    c.prototype.neg = function() {
        return this.curve.jpoint(this.x, this.y.redNeg(), this.z)
    }
    ,
    c.prototype.add = function(e) {
        if (this.isInfinity())
            return e;
        if (e.isInfinity())
            return this;
        var t = e.z.redSqr()
          , r = this.z.redSqr()
          , i = this.x.redMul(t)
          , n = e.x.redMul(r)
          , o = this.y.redMul(t.redMul(e.z))
          , a = e.y.redMul(r.redMul(this.z))
          , s = i.redSub(n)
          , u = o.redSub(a);
        if (0 === s.cmpn(0))
            return 0 !== u.cmpn(0) ? this.curve.jpoint(null, null, null) : this.dbl();
        var f = s.redSqr()
          , c = f.redMul(s)
          , h = i.redMul(f)
          , l = u.redSqr().redIAdd(c).redISub(h).redISub(h)
          , d = u.redMul(h.redISub(l)).redISub(o.redMul(c))
          , p = this.z.redMul(e.z).redMul(s);
        return this.curve.jpoint(l, d, p)
    }
    ,
    c.prototype.mixedAdd = function(e) {
        if (this.isInfinity())
            return e.toJ();
        if (e.isInfinity())
            return this;
        var t = this.z.redSqr()
          , r = this.x
          , i = e.x.redMul(t)
          , n = this.y
          , o = e.y.redMul(t).redMul(this.z)
          , a = r.redSub(i)
          , s = n.redSub(o);
        if (0 === a.cmpn(0))
            return 0 !== s.cmpn(0) ? this.curve.jpoint(null, null, null) : this.dbl();
        var u = a.redSqr()
          , f = u.redMul(a)
          , c = r.redMul(u)
          , h = s.redSqr().redIAdd(f).redISub(c).redISub(c)
          , l = s.redMul(c.redISub(h)).redISub(n.redMul(f))
          , d = this.z.redMul(a);
        return this.curve.jpoint(h, l, d)
    }
    ,
    c.prototype.dblp = function(e) {
        if (0 === e)
            return this;
        if (this.isInfinity())
            return this;
        if (!e)
            return this.dbl();
        var t;
        if (this.curve.zeroA || this.curve.threeA) {
            var r = this;
            for (t = 0; t < e; t++)
                r = r.dbl();
            return r
        }
        var i = this.curve.a
          , n = this.curve.tinv
          , o = this.x
          , a = this.y
          , s = this.z
          , u = s.redSqr().redSqr()
          , f = a.redAdd(a);
        for (t = 0; t < e; t++) {
            var c = o.redSqr()
              , h = f.redSqr()
              , l = h.redSqr()
              , d = c.redAdd(c).redIAdd(c).redIAdd(i.redMul(u))
              , p = o.redMul(h)
              , b = d.redSqr().redISub(p.redAdd(p))
              , m = p.redISub(b)
              , g = d.redMul(m);
            g = g.redIAdd(g).redISub(l);
            var v = f.redMul(s);
            t + 1 < e && (u = u.redMul(l)),
            o = b,
            s = v,
            f = g
        }
        return this.curve.jpoint(o, f.redMul(n), s)
    }
    ,
    c.prototype.dbl = function() {
        return this.isInfinity() ? this : this.curve.zeroA ? this._zeroDbl() : this.curve.threeA ? this._threeDbl() : this._dbl()
    }
    ,
    c.prototype._zeroDbl = function() {
        var e, t, r;
        if (this.zOne) {
            var i = this.x.redSqr()
              , n = this.y.redSqr()
              , o = n.redSqr()
              , a = this.x.redAdd(n).redSqr().redISub(i).redISub(o);
            a = a.redIAdd(a);
            var s = i.redAdd(i).redIAdd(i)
              , u = s.redSqr().redISub(a).redISub(a)
              , f = o.redIAdd(o);
            f = (f = f.redIAdd(f)).redIAdd(f),
            e = u,
            t = s.redMul(a.redISub(u)).redISub(f),
            r = this.y.redAdd(this.y)
        } else {
            var c = this.x.redSqr()
              , h = this.y.redSqr()
              , l = h.redSqr()
              , d = this.x.redAdd(h).redSqr().redISub(c).redISub(l);
            d = d.redIAdd(d);
            var p = c.redAdd(c).redIAdd(c)
              , b = p.redSqr()
              , m = l.redIAdd(l);
            m = (m = m.redIAdd(m)).redIAdd(m),
            e = b.redISub(d).redISub(d),
            t = p.redMul(d.redISub(e)).redISub(m),
            r = (r = this.y.redMul(this.z)).redIAdd(r)
        }
        return this.curve.jpoint(e, t, r)
    }
    ,
    c.prototype._threeDbl = function() {
        var e, t, r;
        if (this.zOne) {
            var i = this.x.redSqr()
              , n = this.y.redSqr()
              , o = n.redSqr()
              , a = this.x.redAdd(n).redSqr().redISub(i).redISub(o);
            a = a.redIAdd(a);
            var s = i.redAdd(i).redIAdd(i).redIAdd(this.curve.a)
              , u = s.redSqr().redISub(a).redISub(a);
            e = u;
            var f = o.redIAdd(o);
            f = (f = f.redIAdd(f)).redIAdd(f),
            t = s.redMul(a.redISub(u)).redISub(f),
            r = this.y.redAdd(this.y)
        } else {
            var c = this.z.redSqr()
              , h = this.y.redSqr()
              , l = this.x.redMul(h)
              , d = this.x.redSub(c).redMul(this.x.redAdd(c));
            d = d.redAdd(d).redIAdd(d);
            var p = l.redIAdd(l)
              , b = (p = p.redIAdd(p)).redAdd(p);
            e = d.redSqr().redISub(b),
            r = this.y.redAdd(this.z).redSqr().redISub(h).redISub(c);
            var m = h.redSqr();
            m = (m = (m = m.redIAdd(m)).redIAdd(m)).redIAdd(m),
            t = d.redMul(p.redISub(e)).redISub(m)
        }
        return this.curve.jpoint(e, t, r)
    }
    ,
    c.prototype._dbl = function() {
        var e = this.curve.a
          , t = this.x
          , r = this.y
          , i = this.z
          , n = i.redSqr().redSqr()
          , o = t.redSqr()
          , a = r.redSqr()
          , s = o.redAdd(o).redIAdd(o).redIAdd(e.redMul(n))
          , u = t.redAdd(t)
          , f = (u = u.redIAdd(u)).redMul(a)
          , c = s.redSqr().redISub(f.redAdd(f))
          , h = f.redISub(c)
          , l = a.redSqr();
        l = (l = (l = l.redIAdd(l)).redIAdd(l)).redIAdd(l);
        var d = s.redMul(h).redISub(l)
          , p = r.redAdd(r).redMul(i);
        return this.curve.jpoint(c, d, p)
    }
    ,
    c.prototype.trpl = function() {
        if (!this.curve.zeroA)
            return this.dbl().add(this);
        var e = this.x.redSqr()
          , t = this.y.redSqr()
          , r = this.z.redSqr()
          , i = t.redSqr()
          , n = e.redAdd(e).redIAdd(e)
          , o = n.redSqr()
          , a = this.x.redAdd(t).redSqr().redISub(e).redISub(i)
          , s = (a = (a = (a = a.redIAdd(a)).redAdd(a).redIAdd(a)).redISub(o)).redSqr()
          , u = i.redIAdd(i);
        u = (u = (u = u.redIAdd(u)).redIAdd(u)).redIAdd(u);
        var f = n.redIAdd(a).redSqr().redISub(o).redISub(s).redISub(u)
          , c = t.redMul(f);
        c = (c = c.redIAdd(c)).redIAdd(c);
        var h = this.x.redMul(s).redISub(c);
        h = (h = h.redIAdd(h)).redIAdd(h);
        var l = this.y.redMul(f.redMul(u.redISub(f)).redISub(a.redMul(s)));
        l = (l = (l = l.redIAdd(l)).redIAdd(l)).redIAdd(l);
        var d = this.z.redAdd(a).redSqr().redISub(r).redISub(s);
        return this.curve.jpoint(h, l, d)
    }
    ,
    c.prototype.mul = function(e, t) {
        return e = new n(e,t),
        this.curve._wnafMul(this, e)
    }
    ,
    c.prototype.eq = function(e) {
        if ("affine" === e.type)
            return this.eq(e.toJ());
        if (this === e)
            return !0;
        var t = this.z.redSqr()
          , r = e.z.redSqr();
        if (0 !== this.x.redMul(r).redISub(e.x.redMul(t)).cmpn(0))
            return !1;
        var i = t.redMul(this.z)
          , n = r.redMul(e.z);
        return 0 === this.y.redMul(n).redISub(e.y.redMul(i)).cmpn(0)
    }
    ,
    c.prototype.eqXToP = function(e) {
        var t = this.z.redSqr()
          , r = e.toRed(this.curve.red).redMul(t);
        if (0 === this.x.cmp(r))
            return !0;
        for (var i = e.clone(), n = this.curve.redN.redMul(t); ; ) {
            if (i.iadd(this.curve.n),
            i.cmp(this.curve.p) >= 0)
                return !1;
            if (r.redIAdd(n),
            0 === this.x.cmp(r))
                return !0
        }
    }
    ,
    c.prototype.inspect = function() {
        return this.isInfinity() ? "<EC JPoint Infinity>" : "<EC JPoint x: " + this.x.toString(16, 2) + " y: " + this.y.toString(16, 2) + " z: " + this.z.toString(16, 2) + ">"
    }
    ,
    c.prototype.isInfinity = function() {
        return 0 === this.z.cmpn(0)
    }
}
, function(e, t, r) {
    "use strict";
    var i = r(7)
      , n = r(4)
      , o = r(64)
      , a = r(22);
    function s(e) {
        o.call(this, "mont", e),
        this.a = new i(e.a,16).toRed(this.red),
        this.b = new i(e.b,16).toRed(this.red),
        this.i4 = new i(4).toRed(this.red).redInvm(),
        this.two = new i(2).toRed(this.red),
        this.a24 = this.i4.redMul(this.a.redAdd(this.two))
    }
    function u(e, t, r) {
        o.BasePoint.call(this, e, "projective"),
        null === t && null === r ? (this.x = this.curve.one,
        this.z = this.curve.zero) : (this.x = new i(t,16),
        this.z = new i(r,16),
        this.x.red || (this.x = this.x.toRed(this.curve.red)),
        this.z.red || (this.z = this.z.toRed(this.curve.red)))
    }
    n(s, o),
    e.exports = s,
    s.prototype.validate = function(e) {
        var t = e.normalize().x
          , r = t.redSqr()
          , i = r.redMul(t).redAdd(r.redMul(this.a)).redAdd(t);
        return 0 === i.redSqrt().redSqr().cmp(i)
    }
    ,
    n(u, o.BasePoint),
    s.prototype.decodePoint = function(e, t) {
        return this.point(a.toArray(e, t), 1)
    }
    ,
    s.prototype.point = function(e, t) {
        return new u(this,e,t)
    }
    ,
    s.prototype.pointFromJSON = function(e) {
        return u.fromJSON(this, e)
    }
    ,
    u.prototype.precompute = function() {}
    ,
    u.prototype._encode = function() {
        return this.getX().toArray("be", this.curve.p.byteLength())
    }
    ,
    u.fromJSON = function(e, t) {
        return new u(e,t[0],t[1] || e.one)
    }
    ,
    u.prototype.inspect = function() {
        return this.isInfinity() ? "<EC Point Infinity>" : "<EC Point x: " + this.x.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">"
    }
    ,
    u.prototype.isInfinity = function() {
        return 0 === this.z.cmpn(0)
    }
    ,
    u.prototype.dbl = function() {
        var e = this.x.redAdd(this.z).redSqr()
          , t = this.x.redSub(this.z).redSqr()
          , r = e.redSub(t)
          , i = e.redMul(t)
          , n = r.redMul(t.redAdd(this.curve.a24.redMul(r)));
        return this.curve.point(i, n)
    }
    ,
    u.prototype.add = function() {
        throw new Error("Not supported on Montgomery curve")
    }
    ,
    u.prototype.diffAdd = function(e, t) {
        var r = this.x.redAdd(this.z)
          , i = this.x.redSub(this.z)
          , n = e.x.redAdd(e.z)
          , o = e.x.redSub(e.z).redMul(r)
          , a = n.redMul(i)
          , s = t.z.redMul(o.redAdd(a).redSqr())
          , u = t.x.redMul(o.redISub(a).redSqr());
        return this.curve.point(s, u)
    }
    ,
    u.prototype.mul = function(e) {
        for (var t = e.clone(), r = this, i = this.curve.point(null, null), n = []; 0 !== t.cmpn(0); t.iushrn(1))
            n.push(t.andln(1));
        for (var o = n.length - 1; o >= 0; o--)
            0 === n[o] ? (r = r.diffAdd(i, this),
            i = i.dbl()) : (i = r.diffAdd(i, this),
            r = r.dbl());
        return i
    }
    ,
    u.prototype.mulAdd = function() {
        throw new Error("Not supported on Montgomery curve")
    }
    ,
    u.prototype.jumlAdd = function() {
        throw new Error("Not supported on Montgomery curve")
    }
    ,
    u.prototype.eq = function(e) {
        return 0 === this.getX().cmp(e.getX())
    }
    ,
    u.prototype.normalize = function() {
        return this.x = this.x.redMul(this.z.redInvm()),
        this.z = this.curve.one,
        this
    }
    ,
    u.prototype.getX = function() {
        return this.normalize(),
        this.x.fromRed()
    }
}
, function(e, t, r) {
    "use strict";
    var i = r(22)
      , n = r(7)
      , o = r(4)
      , a = r(64)
      , s = i.assert;
    function u(e) {
        this.twisted = 1 != (0 | e.a),
        this.mOneA = this.twisted && -1 == (0 | e.a),
        this.extended = this.mOneA,
        a.call(this, "edwards", e),
        this.a = new n(e.a,16).umod(this.red.m),
        this.a = this.a.toRed(this.red),
        this.c = new n(e.c,16).toRed(this.red),
        this.c2 = this.c.redSqr(),
        this.d = new n(e.d,16).toRed(this.red),
        this.dd = this.d.redAdd(this.d),
        s(!this.twisted || 0 === this.c.fromRed().cmpn(1)),
        this.oneC = 1 == (0 | e.c)
    }
    function f(e, t, r, i, o) {
        a.BasePoint.call(this, e, "projective"),
        null === t && null === r && null === i ? (this.x = this.curve.zero,
        this.y = this.curve.one,
        this.z = this.curve.one,
        this.t = this.curve.zero,
        this.zOne = !0) : (this.x = new n(t,16),
        this.y = new n(r,16),
        this.z = i ? new n(i,16) : this.curve.one,
        this.t = o && new n(o,16),
        this.x.red || (this.x = this.x.toRed(this.curve.red)),
        this.y.red || (this.y = this.y.toRed(this.curve.red)),
        this.z.red || (this.z = this.z.toRed(this.curve.red)),
        this.t && !this.t.red && (this.t = this.t.toRed(this.curve.red)),
        this.zOne = this.z === this.curve.one,
        this.curve.extended && !this.t && (this.t = this.x.redMul(this.y),
        this.zOne || (this.t = this.t.redMul(this.z.redInvm()))))
    }
    o(u, a),
    e.exports = u,
    u.prototype._mulA = function(e) {
        return this.mOneA ? e.redNeg() : this.a.redMul(e)
    }
    ,
    u.prototype._mulC = function(e) {
        return this.oneC ? e : this.c.redMul(e)
    }
    ,
    u.prototype.jpoint = function(e, t, r, i) {
        return this.point(e, t, r, i)
    }
    ,
    u.prototype.pointFromX = function(e, t) {
        (e = new n(e,16)).red || (e = e.toRed(this.red));
        var r = e.redSqr()
          , i = this.c2.redSub(this.a.redMul(r))
          , o = this.one.redSub(this.c2.redMul(this.d).redMul(r))
          , a = i.redMul(o.redInvm())
          , s = a.redSqrt();
        if (0 !== s.redSqr().redSub(a).cmp(this.zero))
            throw new Error("invalid point");
        var u = s.fromRed().isOdd();
        return (t && !u || !t && u) && (s = s.redNeg()),
        this.point(e, s)
    }
    ,
    u.prototype.pointFromY = function(e, t) {
        (e = new n(e,16)).red || (e = e.toRed(this.red));
        var r = e.redSqr()
          , i = r.redSub(this.c2)
          , o = r.redMul(this.d).redMul(this.c2).redSub(this.a)
          , a = i.redMul(o.redInvm());
        if (0 === a.cmp(this.zero)) {
            if (t)
                throw new Error("invalid point");
            return this.point(this.zero, e)
        }
        var s = a.redSqrt();
        if (0 !== s.redSqr().redSub(a).cmp(this.zero))
            throw new Error("invalid point");
        return s.fromRed().isOdd() !== t && (s = s.redNeg()),
        this.point(s, e)
    }
    ,
    u.prototype.validate = function(e) {
        if (e.isInfinity())
            return !0;
        e.normalize();
        var t = e.x.redSqr()
          , r = e.y.redSqr()
          , i = t.redMul(this.a).redAdd(r)
          , n = this.c2.redMul(this.one.redAdd(this.d.redMul(t).redMul(r)));
        return 0 === i.cmp(n)
    }
    ,
    o(f, a.BasePoint),
    u.prototype.pointFromJSON = function(e) {
        return f.fromJSON(this, e)
    }
    ,
    u.prototype.point = function(e, t, r, i) {
        return new f(this,e,t,r,i)
    }
    ,
    f.fromJSON = function(e, t) {
        return new f(e,t[0],t[1],t[2])
    }
    ,
    f.prototype.inspect = function() {
        return this.isInfinity() ? "<EC Point Infinity>" : "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">"
    }
    ,
    f.prototype.isInfinity = function() {
        return 0 === this.x.cmpn(0) && (0 === this.y.cmp(this.z) || this.zOne && 0 === this.y.cmp(this.curve.c))
    }
    ,
    f.prototype._extDbl = function() {
        var e = this.x.redSqr()
          , t = this.y.redSqr()
          , r = this.z.redSqr();
        r = r.redIAdd(r);
        var i = this.curve._mulA(e)
          , n = this.x.redAdd(this.y).redSqr().redISub(e).redISub(t)
          , o = i.redAdd(t)
          , a = o.redSub(r)
          , s = i.redSub(t)
          , u = n.redMul(a)
          , f = o.redMul(s)
          , c = n.redMul(s)
          , h = a.redMul(o);
        return this.curve.point(u, f, h, c)
    }
    ,
    f.prototype._projDbl = function() {
        var e, t, r, i, n, o, a = this.x.redAdd(this.y).redSqr(), s = this.x.redSqr(), u = this.y.redSqr();
        if (this.curve.twisted) {
            var f = (i = this.curve._mulA(s)).redAdd(u);
            this.zOne ? (e = a.redSub(s).redSub(u).redMul(f.redSub(this.curve.two)),
            t = f.redMul(i.redSub(u)),
            r = f.redSqr().redSub(f).redSub(f)) : (n = this.z.redSqr(),
            o = f.redSub(n).redISub(n),
            e = a.redSub(s).redISub(u).redMul(o),
            t = f.redMul(i.redSub(u)),
            r = f.redMul(o))
        } else
            i = s.redAdd(u),
            n = this.curve._mulC(this.z).redSqr(),
            o = i.redSub(n).redSub(n),
            e = this.curve._mulC(a.redISub(i)).redMul(o),
            t = this.curve._mulC(i).redMul(s.redISub(u)),
            r = i.redMul(o);
        return this.curve.point(e, t, r)
    }
    ,
    f.prototype.dbl = function() {
        return this.isInfinity() ? this : this.curve.extended ? this._extDbl() : this._projDbl()
    }
    ,
    f.prototype._extAdd = function(e) {
        var t = this.y.redSub(this.x).redMul(e.y.redSub(e.x))
          , r = this.y.redAdd(this.x).redMul(e.y.redAdd(e.x))
          , i = this.t.redMul(this.curve.dd).redMul(e.t)
          , n = this.z.redMul(e.z.redAdd(e.z))
          , o = r.redSub(t)
          , a = n.redSub(i)
          , s = n.redAdd(i)
          , u = r.redAdd(t)
          , f = o.redMul(a)
          , c = s.redMul(u)
          , h = o.redMul(u)
          , l = a.redMul(s);
        return this.curve.point(f, c, l, h)
    }
    ,
    f.prototype._projAdd = function(e) {
        var t, r, i = this.z.redMul(e.z), n = i.redSqr(), o = this.x.redMul(e.x), a = this.y.redMul(e.y), s = this.curve.d.redMul(o).redMul(a), u = n.redSub(s), f = n.redAdd(s), c = this.x.redAdd(this.y).redMul(e.x.redAdd(e.y)).redISub(o).redISub(a), h = i.redMul(u).redMul(c);
        return this.curve.twisted ? (t = i.redMul(f).redMul(a.redSub(this.curve._mulA(o))),
        r = u.redMul(f)) : (t = i.redMul(f).redMul(a.redSub(o)),
        r = this.curve._mulC(u).redMul(f)),
        this.curve.point(h, t, r)
    }
    ,
    f.prototype.add = function(e) {
        return this.isInfinity() ? e : e.isInfinity() ? this : this.curve.extended ? this._extAdd(e) : this._projAdd(e)
    }
    ,
    f.prototype.mul = function(e) {
        return this._hasDoubles(e) ? this.curve._fixedNafMul(this, e) : this.curve._wnafMul(this, e)
    }
    ,
    f.prototype.mulAdd = function(e, t, r) {
        return this.curve._wnafMulAdd(1, [this, t], [e, r], 2, !1)
    }
    ,
    f.prototype.jmulAdd = function(e, t, r) {
        return this.curve._wnafMulAdd(1, [this, t], [e, r], 2, !0)
    }
    ,
    f.prototype.normalize = function() {
        if (this.zOne)
            return this;
        var e = this.z.redInvm();
        return this.x = this.x.redMul(e),
        this.y = this.y.redMul(e),
        this.t && (this.t = this.t.redMul(e)),
        this.z = this.curve.one,
        this.zOne = !0,
        this
    }
    ,
    f.prototype.neg = function() {
        return this.curve.point(this.x.redNeg(), this.y, this.z, this.t && this.t.redNeg())
    }
    ,
    f.prototype.getX = function() {
        return this.normalize(),
        this.x.fromRed()
    }
    ,
    f.prototype.getY = function() {
        return this.normalize(),
        this.y.fromRed()
    }
    ,
    f.prototype.eq = function(e) {
        return this === e || 0 === this.getX().cmp(e.getX()) && 0 === this.getY().cmp(e.getY())
    }
    ,
    f.prototype.eqXToP = function(e) {
        var t = e.toRed(this.curve.red).redMul(this.z);
        if (0 === this.x.cmp(t))
            return !0;
        for (var r = e.clone(), i = this.curve.redN.redMul(this.z); ; ) {
            if (r.iadd(this.curve.n),
            r.cmp(this.curve.p) >= 0)
                return !1;
            if (t.redIAdd(i),
            0 === this.x.cmp(t))
                return !0
        }
    }
    ,
    f.prototype.toP = f.prototype.normalize,
    f.prototype.mixedAdd = f.prototype.add
}
, function(e, t, r) {
    "use strict";
    t.sha1 = r(280),
    t.sha224 = r(281),
    t.sha256 = r(156),
    t.sha384 = r(282),
    t.sha512 = r(157)
}
, function(e, t, r) {
    "use strict";
    var i = r(26)
      , n = r(54)
      , o = r(155)
      , a = i.rotl32
      , s = i.sum32
      , u = i.sum32_5
      , f = o.ft_1
      , c = n.BlockHash
      , h = [1518500249, 1859775393, 2400959708, 3395469782];
    function l() {
        if (!(this instanceof l))
            return new l;
        c.call(this),
        this.h = [1732584193, 4023233417, 2562383102, 271733878, 3285377520],
        this.W = new Array(80)
    }
    i.inherits(l, c),
    e.exports = l,
    l.blockSize = 512,
    l.outSize = 160,
    l.hmacStrength = 80,
    l.padLength = 64,
    l.prototype._update = function(e, t) {
        for (var r = this.W, i = 0; i < 16; i++)
            r[i] = e[t + i];
        for (; i < r.length; i++)
            r[i] = a(r[i - 3] ^ r[i - 8] ^ r[i - 14] ^ r[i - 16], 1);
        var n = this.h[0]
          , o = this.h[1]
          , c = this.h[2]
          , l = this.h[3]
          , d = this.h[4];
        for (i = 0; i < r.length; i++) {
            var p = ~~(i / 20)
              , b = u(a(n, 5), f(p, o, c, l), d, r[i], h[p]);
            d = l,
            l = c,
            c = a(o, 30),
            o = n,
            n = b
        }
        this.h[0] = s(this.h[0], n),
        this.h[1] = s(this.h[1], o),
        this.h[2] = s(this.h[2], c),
        this.h[3] = s(this.h[3], l),
        this.h[4] = s(this.h[4], d)
    }
    ,
    l.prototype._digest = function(e) {
        return "hex" === e ? i.toHex32(this.h, "big") : i.split32(this.h, "big")
    }
}
, function(e, t, r) {
    "use strict";
    var i = r(26)
      , n = r(156);
    function o() {
        if (!(this instanceof o))
            return new o;
        n.call(this),
        this.h = [3238371032, 914150663, 812702999, 4144912697, 4290775857, 1750603025, 1694076839, 3204075428]
    }
    i.inherits(o, n),
    e.exports = o,
    o.blockSize = 512,
    o.outSize = 224,
    o.hmacStrength = 192,
    o.padLength = 64,
    o.prototype._digest = function(e) {
        return "hex" === e ? i.toHex32(this.h.slice(0, 7), "big") : i.split32(this.h.slice(0, 7), "big")
    }
}
, function(e, t, r) {
    "use strict";
    var i = r(26)
      , n = r(157);
    function o() {
        if (!(this instanceof o))
            return new o;
        n.call(this),
        this.h = [3418070365, 3238371032, 1654270250, 914150663, 2438529370, 812702999, 355462360, 4144912697, 1731405415, 4290775857, 2394180231, 1750603025, 3675008525, 1694076839, 1203062813, 3204075428]
    }
    i.inherits(o, n),
    e.exports = o,
    o.blockSize = 1024,
    o.outSize = 384,
    o.hmacStrength = 192,
    o.padLength = 128,
    o.prototype._digest = function(e) {
        return "hex" === e ? i.toHex32(this.h.slice(0, 12), "big") : i.split32(this.h.slice(0, 12), "big")
    }
}
, function(e, t, r) {
    "use strict";
    var i = r(26)
      , n = r(54)
      , o = i.rotl32
      , a = i.sum32
      , s = i.sum32_3
      , u = i.sum32_4
      , f = n.BlockHash;
    function c() {
        if (!(this instanceof c))
            return new c;
        f.call(this),
        this.h = [1732584193, 4023233417, 2562383102, 271733878, 3285377520],
        this.endian = "little"
    }
    function h(e, t, r, i) {
        return e <= 15 ? t ^ r ^ i : e <= 31 ? t & r | ~t & i : e <= 47 ? (t | ~r) ^ i : e <= 63 ? t & i | r & ~i : t ^ (r | ~i)
    }
    function l(e) {
        return e <= 15 ? 0 : e <= 31 ? 1518500249 : e <= 47 ? 1859775393 : e <= 63 ? 2400959708 : 2840853838
    }
    function d(e) {
        return e <= 15 ? 1352829926 : e <= 31 ? 1548603684 : e <= 47 ? 1836072691 : e <= 63 ? 2053994217 : 0
    }
    i.inherits(c, f),
    t.ripemd160 = c,
    c.blockSize = 512,
    c.outSize = 160,
    c.hmacStrength = 192,
    c.padLength = 64,
    c.prototype._update = function(e, t) {
        for (var r = this.h[0], i = this.h[1], n = this.h[2], f = this.h[3], c = this.h[4], v = r, y = i, w = n, _ = f, E = c, M = 0; M < 80; M++) {
            var S = a(o(u(r, h(M, i, n, f), e[p[M] + t], l(M)), m[M]), c);
            r = c,
            c = f,
            f = o(n, 10),
            n = i,
            i = S,
            S = a(o(u(v, h(79 - M, y, w, _), e[b[M] + t], d(M)), g[M]), E),
            v = E,
            E = _,
            _ = o(w, 10),
            w = y,
            y = S
        }
        S = s(this.h[1], n, _),
        this.h[1] = s(this.h[2], f, E),
        this.h[2] = s(this.h[3], c, v),
        this.h[3] = s(this.h[4], r, y),
        this.h[4] = s(this.h[0], i, w),
        this.h[0] = S
    }
    ,
    c.prototype._digest = function(e) {
        return "hex" === e ? i.toHex32(this.h, "little") : i.split32(this.h, "little")
    }
    ;
    var p = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13]
      , b = [5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11]
      , m = [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6]
      , g = [8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11]
}
, function(e, t, r) {
    "use strict";
    var i = r(26)
      , n = r(18);
    function o(e, t, r) {
        if (!(this instanceof o))
            return new o(e,t,r);
        this.Hash = e,
        this.blockSize = e.blockSize / 8,
        this.outSize = e.outSize / 8,
        this.inner = null,
        this.outer = null,
        this._init(i.toArray(t, r))
    }
    e.exports = o,
    o.prototype._init = function(e) {
        e.length > this.blockSize && (e = (new this.Hash).update(e).digest()),
        n(e.length <= this.blockSize);
        for (var t = e.length; t < this.blockSize; t++)
            e.push(0);
        for (t = 0; t < e.length; t++)
            e[t] ^= 54;
        for (this.inner = (new this.Hash).update(e),
        t = 0; t < e.length; t++)
            e[t] ^= 106;
        this.outer = (new this.Hash).update(e)
    }
    ,
    o.prototype.update = function(e, t) {
        return this.inner.update(e, t),
        this
    }
    ,
    o.prototype.digest = function(e) {
        return this.outer.update(this.inner.digest()),
        this.outer.digest(e)
    }
}
, function(e, t) {
    e.exports = {
        doubles: {
            step: 4,
            points: [["e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a", "f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821"], ["8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508", "11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf"], ["175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739", "d3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695"], ["363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640", "4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9"], ["8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c", "4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36"], ["723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda", "96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f"], ["eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa", "5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999"], ["100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0", "cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09"], ["e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d", "9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d"], ["feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d", "e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088"], ["da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1", "9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d"], ["53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0", "5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8"], ["8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047", "10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a"], ["385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862", "283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453"], ["6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7", "7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160"], ["3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd", "56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0"], ["85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83", "7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6"], ["948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a", "53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589"], ["6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8", "bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17"], ["e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d", "4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda"], ["e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725", "7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd"], ["213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754", "4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2"], ["4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c", "17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6"], ["fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6", "6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f"], ["76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39", "c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01"], ["c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891", "893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3"], ["d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b", "febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f"], ["b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03", "2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7"], ["e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d", "eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78"], ["a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070", "7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1"], ["90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4", "e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150"], ["8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da", "662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82"], ["e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11", "1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc"], ["8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e", "efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b"], ["e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41", "2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51"], ["b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef", "67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45"], ["d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8", "db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120"], ["324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d", "648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84"], ["4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96", "35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d"], ["9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd", "ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d"], ["6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5", "9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8"], ["a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266", "40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8"], ["7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71", "34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac"], ["928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac", "c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f"], ["85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751", "1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962"], ["ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e", "493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907"], ["827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241", "c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec"], ["eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3", "be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d"], ["e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f", "4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414"], ["1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19", "aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd"], ["146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be", "b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0"], ["fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9", "6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811"], ["da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2", "8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1"], ["a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13", "7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c"], ["174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c", "ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73"], ["959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba", "2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd"], ["d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151", "e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405"], ["64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073", "d99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589"], ["8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458", "38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e"], ["13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b", "69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27"], ["bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366", "d3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1"], ["8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa", "40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482"], ["8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0", "620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945"], ["dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787", "7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573"], ["f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e", "ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82"]]
        },
        naf: {
            wnd: 7,
            points: [["f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9", "388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672"], ["2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4", "d8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6"], ["5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc", "6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da"], ["acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe", "cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37"], ["774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb", "d984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b"], ["f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8", "ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81"], ["d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e", "581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58"], ["defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34", "4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77"], ["2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c", "85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a"], ["352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5", "321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c"], ["2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f", "2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67"], ["9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714", "73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402"], ["daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729", "a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55"], ["c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db", "2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482"], ["6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4", "e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82"], ["1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5", "b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396"], ["605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479", "2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49"], ["62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d", "80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf"], ["80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f", "1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a"], ["7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb", "d0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7"], ["d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9", "eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933"], ["49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963", "758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a"], ["77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74", "958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6"], ["f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530", "e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37"], ["463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b", "5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e"], ["f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247", "cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6"], ["caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1", "cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476"], ["2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120", "4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40"], ["7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435", "91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61"], ["754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18", "673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683"], ["e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8", "59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5"], ["186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb", "3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b"], ["df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f", "55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417"], ["5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143", "efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868"], ["290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba", "e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a"], ["af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45", "f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6"], ["766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a", "744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996"], ["59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e", "c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e"], ["f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8", "e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d"], ["7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c", "30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2"], ["948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519", "e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e"], ["7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab", "100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437"], ["3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca", "ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311"], ["d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf", "8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4"], ["1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610", "68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575"], ["733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4", "f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d"], ["15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c", "d56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d"], ["a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940", "edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629"], ["e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980", "a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06"], ["311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3", "66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374"], ["34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf", "9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee"], ["f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63", "4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1"], ["d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448", "fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b"], ["32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf", "5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661"], ["7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5", "8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6"], ["ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6", "8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e"], ["16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5", "5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d"], ["eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99", "f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc"], ["78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51", "f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4"], ["494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5", "42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c"], ["a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5", "204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b"], ["c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997", "4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913"], ["841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881", "73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154"], ["5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5", "39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865"], ["36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66", "d2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc"], ["336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726", "ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224"], ["8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede", "6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e"], ["1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94", "60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6"], ["85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31", "3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511"], ["29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51", "b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b"], ["a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252", "ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2"], ["4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5", "cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c"], ["d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b", "6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3"], ["ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4", "322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d"], ["af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f", "6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700"], ["e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889", "2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4"], ["591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246", "b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196"], ["11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984", "998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4"], ["3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a", "b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257"], ["cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030", "bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13"], ["c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197", "6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096"], ["c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593", "c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38"], ["a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef", "21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f"], ["347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38", "60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448"], ["da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a", "49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a"], ["c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111", "5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4"], ["4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502", "7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437"], ["3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea", "be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7"], ["cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26", "8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d"], ["b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986", "39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a"], ["d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e", "62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54"], ["48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4", "25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77"], ["dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda", "ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517"], ["6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859", "cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10"], ["e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f", "f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125"], ["eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c", "6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e"], ["13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942", "fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1"], ["ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a", "1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2"], ["b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80", "5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423"], ["ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d", "438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8"], ["8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1", "cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758"], ["52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63", "c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375"], ["e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352", "6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d"], ["7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193", "ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec"], ["5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00", "9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0"], ["32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58", "ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c"], ["e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7", "d3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4"], ["8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8", "c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f"], ["4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e", "67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649"], ["3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d", "cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826"], ["674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b", "299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5"], ["d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f", "f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87"], ["30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6", "462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b"], ["be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297", "62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc"], ["93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a", "7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c"], ["b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c", "ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f"], ["d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52", "4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a"], ["d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb", "bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46"], ["463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065", "bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f"], ["7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917", "603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03"], ["74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9", "cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08"], ["30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3", "553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8"], ["9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57", "712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373"], ["176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66", "ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3"], ["75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8", "9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8"], ["809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721", "9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1"], ["1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180", "4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9"]]
        }
    }
}
, function(e, t, r) {
    "use strict";
    var i = r(7)
      , n = r(287)
      , o = r(22)
      , a = r(90)
      , s = r(87)
      , u = o.assert
      , f = r(288)
      , c = r(289);
    function h(e) {
        if (!(this instanceof h))
            return new h(e);
        "string" == typeof e && (u(Object.prototype.hasOwnProperty.call(a, e), "Unknown curve " + e),
        e = a[e]),
        e instanceof a.PresetCurve && (e = {
            curve: e
        }),
        this.curve = e.curve.curve,
        this.n = this.curve.n,
        this.nh = this.n.ushrn(1),
        this.g = this.curve.g,
        this.g = e.curve.g,
        this.g.precompute(e.curve.n.bitLength() + 1),
        this.hash = e.hash || e.curve.hash
    }
    e.exports = h,
    h.prototype.keyPair = function(e) {
        return new f(this,e)
    }
    ,
    h.prototype.keyFromPrivate = function(e, t) {
        return f.fromPrivate(this, e, t)
    }
    ,
    h.prototype.keyFromPublic = function(e, t) {
        return f.fromPublic(this, e, t)
    }
    ,
    h.prototype.genKeyPair = function(e) {
        e || (e = {});
        for (var t = new n({
            hash: this.hash,
            pers: e.pers,
            persEnc: e.persEnc || "utf8",
            entropy: e.entropy || s(this.hash.hmacStrength),
            entropyEnc: e.entropy && e.entropyEnc || "utf8",
            nonce: this.n.toArray()
        }), r = this.n.byteLength(), o = this.n.sub(new i(2)); ; ) {
            var a = new i(t.generate(r));
            if (!(a.cmp(o) > 0))
                return a.iaddn(1),
                this.keyFromPrivate(a)
        }
    }
    ,
    h.prototype._truncateToN = function(e, t) {
        var r = 8 * e.byteLength() - this.n.bitLength();
        return r > 0 && (e = e.ushrn(r)),
        !t && e.cmp(this.n) >= 0 ? e.sub(this.n) : e
    }
    ,
    h.prototype.sign = function(e, t, r, o) {
        "object" == typeof r && (o = r,
        r = null),
        o || (o = {}),
        t = this.keyFromPrivate(t, r),
        e = this._truncateToN(new i(e,16));
        for (var a = this.n.byteLength(), s = t.getPrivate().toArray("be", a), u = e.toArray("be", a), f = new n({
            hash: this.hash,
            entropy: s,
            nonce: u,
            pers: o.pers,
            persEnc: o.persEnc || "utf8"
        }), h = this.n.sub(new i(1)), l = 0; ; l++) {
            var d = o.k ? o.k(l) : new i(f.generate(this.n.byteLength()));
            if (!((d = this._truncateToN(d, !0)).cmpn(1) <= 0 || d.cmp(h) >= 0)) {
                var p = this.g.mul(d);
                if (!p.isInfinity()) {
                    var b = p.getX()
                      , m = b.umod(this.n);
                    if (0 !== m.cmpn(0)) {
                        var g = d.invm(this.n).mul(m.mul(t.getPrivate()).iadd(e));
                        if (0 !== (g = g.umod(this.n)).cmpn(0)) {
                            var v = (p.getY().isOdd() ? 1 : 0) | (0 !== b.cmp(m) ? 2 : 0);
                            return o.canonical && g.cmp(this.nh) > 0 && (g = this.n.sub(g),
                            v ^= 1),
                            new c({
                                r: m,
                                s: g,
                                recoveryParam: v
                            })
                        }
                    }
                }
            }
        }
    }
    ,
    h.prototype.verify = function(e, t, r, n) {
        e = this._truncateToN(new i(e,16)),
        r = this.keyFromPublic(r, n);
        var o = (t = new c(t,"hex")).r
          , a = t.s;
        if (o.cmpn(1) < 0 || o.cmp(this.n) >= 0)
            return !1;
        if (a.cmpn(1) < 0 || a.cmp(this.n) >= 0)
            return !1;
        var s, u = a.invm(this.n), f = u.mul(e).umod(this.n), h = u.mul(o).umod(this.n);
        return this.curve._maxwellTrick ? !(s = this.g.jmulAdd(f, r.getPublic(), h)).isInfinity() && s.eqXToP(o) : !(s = this.g.mulAdd(f, r.getPublic(), h)).isInfinity() && 0 === s.getX().umod(this.n).cmp(o)
    }
    ,
    h.prototype.recoverPubKey = function(e, t, r, n) {
        u((3 & r) === r, "The recovery param is more than two bits"),
        t = new c(t,n);
        var o = this.n
          , a = new i(e)
          , s = t.r
          , f = t.s
          , h = 1 & r
          , l = r >> 1;
        if (s.cmp(this.curve.p.umod(this.curve.n)) >= 0 && l)
            throw new Error("Unable to find sencond key candinate");
        s = l ? this.curve.pointFromX(s.add(this.curve.n), h) : this.curve.pointFromX(s, h);
        var d = t.r.invm(o)
          , p = o.sub(a).mul(d).umod(o)
          , b = f.mul(d).umod(o);
        return this.g.mulAdd(p, s, b)
    }
    ,
    h.prototype.getKeyRecoveryParam = function(e, t, r, i) {
        if (null !== (t = new c(t,i)).recoveryParam)
            return t.recoveryParam;
        for (var n = 0; n < 4; n++) {
            var o;
            try {
                o = this.recoverPubKey(e, t, n)
            } catch (e) {
                continue
            }
            if (o.eq(r))
                return n
        }
        throw new Error("Unable to find valid recovery factor")
    }
}
, function(e, t, r) {
    "use strict";
    var i = r(40)
      , n = r(153)
      , o = r(18);
    function a(e) {
        if (!(this instanceof a))
            return new a(e);
        this.hash = e.hash,
        this.predResist = !!e.predResist,
        this.outLen = this.hash.outSize,
        this.minEntropy = e.minEntropy || this.hash.hmacStrength,
        this._reseed = null,
        this.reseedInterval = null,
        this.K = null,
        this.V = null;
        var t = n.toArray(e.entropy, e.entropyEnc || "hex")
          , r = n.toArray(e.nonce, e.nonceEnc || "hex")
          , i = n.toArray(e.pers, e.persEnc || "hex");
        o(t.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits"),
        this._init(t, r, i)
    }
    e.exports = a,
    a.prototype._init = function(e, t, r) {
        var i = e.concat(t).concat(r);
        this.K = new Array(this.outLen / 8),
        this.V = new Array(this.outLen / 8);
        for (var n = 0; n < this.V.length; n++)
            this.K[n] = 0,
            this.V[n] = 1;
        this._update(i),
        this._reseed = 1,
        this.reseedInterval = 281474976710656
    }
    ,
    a.prototype._hmac = function() {
        return new i.hmac(this.hash,this.K)
    }
    ,
    a.prototype._update = function(e) {
        var t = this._hmac().update(this.V).update([0]);
        e && (t = t.update(e)),
        this.K = t.digest(),
        this.V = this._hmac().update(this.V).digest(),
        e && (this.K = this._hmac().update(this.V).update([1]).update(e).digest(),
        this.V = this._hmac().update(this.V).digest())
    }
    ,
    a.prototype.reseed = function(e, t, r, i) {
        "string" != typeof t && (i = r,
        r = t,
        t = null),
        e = n.toArray(e, t),
        r = n.toArray(r, i),
        o(e.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits"),
        this._update(e.concat(r || [])),
        this._reseed = 1
    }
    ,
    a.prototype.generate = function(e, t, r, i) {
        if (this._reseed > this.reseedInterval)
            throw new Error("Reseed is required");
        "string" != typeof t && (i = r,
        r = t,
        t = null),
        r && (r = n.toArray(r, i || "hex"),
        this._update(r));
        for (var o = []; o.length < e; )
            this.V = this._hmac().update(this.V).digest(),
            o = o.concat(this.V);
        var a = o.slice(0, e);
        return this._update(r),
        this._reseed++,
        n.encode(a, t)
    }
}
, function(e, t, r) {
    "use strict";
    var i = r(7)
      , n = r(22).assert;
    function o(e, t) {
        this.ec = e,
        this.priv = null,
        this.pub = null,
        t.priv && this._importPrivate(t.priv, t.privEnc),
        t.pub && this._importPublic(t.pub, t.pubEnc)
    }
    e.exports = o,
    o.fromPublic = function(e, t, r) {
        return t instanceof o ? t : new o(e,{
            pub: t,
            pubEnc: r
        })
    }
    ,
    o.fromPrivate = function(e, t, r) {
        return t instanceof o ? t : new o(e,{
            priv: t,
            privEnc: r
        })
    }
    ,
    o.prototype.validate = function() {
        var e = this.getPublic();
        return e.isInfinity() ? {
            result: !1,
            reason: "Invalid public key"
        } : e.validate() ? e.mul(this.ec.curve.n).isInfinity() ? {
            result: !0,
            reason: null
        } : {
            result: !1,
            reason: "Public key * N != O"
        } : {
            result: !1,
            reason: "Public key is not a point"
        }
    }
    ,
    o.prototype.getPublic = function(e, t) {
        return "string" == typeof e && (t = e,
        e = null),
        this.pub || (this.pub = this.ec.g.mul(this.priv)),
        t ? this.pub.encode(t, e) : this.pub
    }
    ,
    o.prototype.getPrivate = function(e) {
        return "hex" === e ? this.priv.toString(16, 2) : this.priv
    }
    ,
    o.prototype._importPrivate = function(e, t) {
        this.priv = new i(e,t || 16),
        this.priv = this.priv.umod(this.ec.curve.n)
    }
    ,
    o.prototype._importPublic = function(e, t) {
        if (e.x || e.y)
            return "mont" === this.ec.curve.type ? n(e.x, "Need x coordinate") : "short" !== this.ec.curve.type && "edwards" !== this.ec.curve.type || n(e.x && e.y, "Need both x and y coordinate"),
            void (this.pub = this.ec.curve.point(e.x, e.y));
        this.pub = this.ec.curve.decodePoint(e, t)
    }
    ,
    o.prototype.derive = function(e) {
        return e.validate() || n(e.validate(), "public point not validated"),
        e.mul(this.priv).getX()
    }
    ,
    o.prototype.sign = function(e, t, r) {
        return this.ec.sign(e, this, t, r)
    }
    ,
    o.prototype.verify = function(e, t) {
        return this.ec.verify(e, t, this)
    }
    ,
    o.prototype.inspect = function() {
        return "<Key priv: " + (this.priv && this.priv.toString(16, 2)) + " pub: " + (this.pub && this.pub.inspect()) + " >"
    }
}
, function(e, t, r) {
    "use strict";
    var i = r(7)
      , n = r(22)
      , o = n.assert;
    function a(e, t) {
        if (e instanceof a)
            return e;
        this._importDER(e, t) || (o(e.r && e.s, "Signature without r or s"),
        this.r = new i(e.r,16),
        this.s = new i(e.s,16),
        void 0 === e.recoveryParam ? this.recoveryParam = null : this.recoveryParam = e.recoveryParam)
    }
    function s() {
        this.place = 0
    }
    function u(e, t) {
        var r = e[t.place++];
        if (!(128 & r))
            return r;
        var i = 15 & r;
        if (0 === i || i > 4)
            return !1;
        for (var n = 0, o = 0, a = t.place; o < i; o++,
        a++)
            n <<= 8,
            n |= e[a],
            n >>>= 0;
        return !(n <= 127) && (t.place = a,
        n)
    }
    function f(e) {
        for (var t = 0, r = e.length - 1; !e[t] && !(128 & e[t + 1]) && t < r; )
            t++;
        return 0 === t ? e : e.slice(t)
    }
    function c(e, t) {
        if (t < 128)
            e.push(t);
        else {
            var r = 1 + (Math.log(t) / Math.LN2 >>> 3);
            for (e.push(128 | r); --r; )
                e.push(t >>> (r << 3) & 255);
            e.push(t)
        }
    }
    e.exports = a,
    a.prototype._importDER = function(e, t) {
        e = n.toArray(e, t);
        var r = new s;
        if (48 !== e[r.place++])
            return !1;
        var o = u(e, r);
        if (!1 === o)
            return !1;
        if (o + r.place !== e.length)
            return !1;
        if (2 !== e[r.place++])
            return !1;
        var a = u(e, r);
        if (!1 === a)
            return !1;
        var f = e.slice(r.place, a + r.place);
        if (r.place += a,
        2 !== e[r.place++])
            return !1;
        var c = u(e, r);
        if (!1 === c)
            return !1;
        if (e.length !== c + r.place)
            return !1;
        var h = e.slice(r.place, c + r.place);
        if (0 === f[0]) {
            if (!(128 & f[1]))
                return !1;
            f = f.slice(1)
        }
        if (0 === h[0]) {
            if (!(128 & h[1]))
                return !1;
            h = h.slice(1)
        }
        return this.r = new i(f),
        this.s = new i(h),
        this.recoveryParam = null,
        !0
    }
    ,
    a.prototype.toDER = function(e) {
        var t = this.r.toArray()
          , r = this.s.toArray();
        for (128 & t[0] && (t = [0].concat(t)),
        128 & r[0] && (r = [0].concat(r)),
        t = f(t),
        r = f(r); !(r[0] || 128 & r[1]); )
            r = r.slice(1);
        var i = [2];
        c(i, t.length),
        (i = i.concat(t)).push(2),
        c(i, r.length);
        var o = i.concat(r)
          , a = [48];
        return c(a, o.length),
        a = a.concat(o),
        n.encode(a, e)
    }
}
, function(e, t, r) {
    "use strict";
    var i = r(40)
      , n = r(90)
      , o = r(22)
      , a = o.assert
      , s = o.parseBytes
      , u = r(291)
      , f = r(292);
    function c(e) {
        if (a("ed25519" === e, "only tested with ed25519 so far"),
        !(this instanceof c))
            return new c(e);
        e = n[e].curve,
        this.curve = e,
        this.g = e.g,
        this.g.precompute(e.n.bitLength() + 1),
        this.pointClass = e.point().constructor,
        this.encodingLength = Math.ceil(e.n.bitLength() / 8),
        this.hash = i.sha512
    }
    e.exports = c,
    c.prototype.sign = function(e, t) {
        e = s(e);
        var r = this.keyFromSecret(t)
          , i = this.hashInt(r.messagePrefix(), e)
          , n = this.g.mul(i)
          , o = this.encodePoint(n)
          , a = this.hashInt(o, r.pubBytes(), e).mul(r.priv())
          , u = i.add(a).umod(this.curve.n);
        return this.makeSignature({
            R: n,
            S: u,
            Rencoded: o
        })
    }
    ,
    c.prototype.verify = function(e, t, r) {
        e = s(e),
        t = this.makeSignature(t);
        var i = this.keyFromPublic(r)
          , n = this.hashInt(t.Rencoded(), i.pubBytes(), e)
          , o = this.g.mul(t.S());
        return t.R().add(i.pub().mul(n)).eq(o)
    }
    ,
    c.prototype.hashInt = function() {
        for (var e = this.hash(), t = 0; t < arguments.length; t++)
            e.update(arguments[t]);
        return o.intFromLE(e.digest()).umod(this.curve.n)
    }
    ,
    c.prototype.keyFromPublic = function(e) {
        return u.fromPublic(this, e)
    }
    ,
    c.prototype.keyFromSecret = function(e) {
        return u.fromSecret(this, e)
    }
    ,
    c.prototype.makeSignature = function(e) {
        return e instanceof f ? e : new f(this,e)
    }
    ,
    c.prototype.encodePoint = function(e) {
        var t = e.getY().toArray("le", this.encodingLength);
        return t[this.encodingLength - 1] |= e.getX().isOdd() ? 128 : 0,
        t
    }
    ,
    c.prototype.decodePoint = function(e) {
        var t = (e = o.parseBytes(e)).length - 1
          , r = e.slice(0, t).concat(-129 & e[t])
          , i = 0 != (128 & e[t])
          , n = o.intFromLE(r);
        return this.curve.pointFromY(n, i)
    }
    ,
    c.prototype.encodeInt = function(e) {
        return e.toArray("le", this.encodingLength)
    }
    ,
    c.prototype.decodeInt = function(e) {
        return o.intFromLE(e)
    }
    ,
    c.prototype.isPoint = function(e) {
        return e instanceof this.pointClass
    }
}
, function(e, t, r) {
    "use strict";
    var i = r(22)
      , n = i.assert
      , o = i.parseBytes
      , a = i.cachedProperty;
    function s(e, t) {
        this.eddsa = e,
        this._secret = o(t.secret),
        e.isPoint(t.pub) ? this._pub = t.pub : this._pubBytes = o(t.pub)
    }
    s.fromPublic = function(e, t) {
        return t instanceof s ? t : new s(e,{
            pub: t
        })
    }
    ,
    s.fromSecret = function(e, t) {
        return t instanceof s ? t : new s(e,{
            secret: t
        })
    }
    ,
    s.prototype.secret = function() {
        return this._secret
    }
    ,
    a(s, "pubBytes", (function() {
        return this.eddsa.encodePoint(this.pub())
    }
    )),
    a(s, "pub", (function() {
        return this._pubBytes ? this.eddsa.decodePoint(this._pubBytes) : this.eddsa.g.mul(this.priv())
    }
    )),
    a(s, "privBytes", (function() {
        var e = this.eddsa
          , t = this.hash()
          , r = e.encodingLength - 1
          , i = t.slice(0, e.encodingLength);
        return i[0] &= 248,
        i[r] &= 127,
        i[r] |= 64,
        i
    }
    )),
    a(s, "priv", (function() {
        return this.eddsa.decodeInt(this.privBytes())
    }
    )),
    a(s, "hash", (function() {
        return this.eddsa.hash().update(this.secret()).digest()
    }
    )),
    a(s, "messagePrefix", (function() {
        return this.hash().slice(this.eddsa.encodingLength)
    }
    )),
    s.prototype.sign = function(e) {
        return n(this._secret, "KeyPair can only verify"),
        this.eddsa.sign(e, this)
    }
    ,
    s.prototype.verify = function(e, t) {
        return this.eddsa.verify(e, t, this)
    }
    ,
    s.prototype.getSecret = function(e) {
        return n(this._secret, "KeyPair is public only"),
        i.encode(this.secret(), e)
    }
    ,
    s.prototype.getPublic = function(e) {
        return i.encode(this.pubBytes(), e)
    }
    ,
    e.exports = s
}
, function(e, t, r) {
    "use strict";
    var i = r(7)
      , n = r(22)
      , o = n.assert
      , a = n.cachedProperty
      , s = n.parseBytes;
    function u(e, t) {
        this.eddsa = e,
        "object" != typeof t && (t = s(t)),
        Array.isArray(t) && (t = {
            R: t.slice(0, e.encodingLength),
            S: t.slice(e.encodingLength)
        }),
        o(t.R && t.S, "Signature without R or S"),
        e.isPoint(t.R) && (this._R = t.R),
        t.S instanceof i && (this._S = t.S),
        this._Rencoded = Array.isArray(t.R) ? t.R : t.Rencoded,
        this._Sencoded = Array.isArray(t.S) ? t.S : t.Sencoded
    }
    a(u, "S", (function() {
        return this.eddsa.decodeInt(this.Sencoded())
    }
    )),
    a(u, "R", (function() {
        return this.eddsa.decodePoint(this.Rencoded())
    }
    )),
    a(u, "Rencoded", (function() {
        return this.eddsa.encodePoint(this.R())
    }
    )),
    a(u, "Sencoded", (function() {
        return this.eddsa.encodeInt(this.S())
    }
    )),
    u.prototype.toBytes = function() {
        return this.Rencoded().concat(this.Sencoded())
    }
    ,
    u.prototype.toHex = function() {
        return n.encode(this.toBytes(), "hex").toUpperCase()
    }
    ,
    e.exports = u
}
, function(e, t) {}
, function(e, t, r) {
    "use strict";
    var i = r(159);
    t.certificate = r(300);
    var n = i.define("RSAPrivateKey", (function() {
        this.seq().obj(this.key("version").int(), this.key("modulus").int(), this.key("publicExponent").int(), this.key("privateExponent").int(), this.key("prime1").int(), this.key("prime2").int(), this.key("exponent1").int(), this.key("exponent2").int(), this.key("coefficient").int())
    }
    ));
    t.RSAPrivateKey = n;
    var o = i.define("RSAPublicKey", (function() {
        this.seq().obj(this.key("modulus").int(), this.key("publicExponent").int())
    }
    ));
    t.RSAPublicKey = o;
    var a = i.define("SubjectPublicKeyInfo", (function() {
        this.seq().obj(this.key("algorithm").use(s), this.key("subjectPublicKey").bitstr())
    }
    ));
    t.PublicKey = a;
    var s = i.define("AlgorithmIdentifier", (function() {
        this.seq().obj(this.key("algorithm").objid(), this.key("none").null_().optional(), this.key("curve").objid().optional(), this.key("params").seq().obj(this.key("p").int(), this.key("q").int(), this.key("g").int()).optional())
    }
    ))
      , u = i.define("PrivateKeyInfo", (function() {
        this.seq().obj(this.key("version").int(), this.key("algorithm").use(s), this.key("subjectPrivateKey").octstr())
    }
    ));
    t.PrivateKey = u;
    var f = i.define("EncryptedPrivateKeyInfo", (function() {
        this.seq().obj(this.key("algorithm").seq().obj(this.key("id").objid(), this.key("decrypt").seq().obj(this.key("kde").seq().obj(this.key("id").objid(), this.key("kdeparams").seq().obj(this.key("salt").octstr(), this.key("iters").int())), this.key("cipher").seq().obj(this.key("algo").objid(), this.key("iv").octstr()))), this.key("subjectPrivateKey").octstr())
    }
    ));
    t.EncryptedPrivateKey = f;
    var c = i.define("DSAPrivateKey", (function() {
        this.seq().obj(this.key("version").int(), this.key("p").int(), this.key("q").int(), this.key("g").int(), this.key("pub_key").int(), this.key("priv_key").int())
    }
    ));
    t.DSAPrivateKey = c,
    t.DSAparam = i.define("DSAparam", (function() {
        this.int()
    }
    ));
    var h = i.define("ECPrivateKey", (function() {
        this.seq().obj(this.key("version").int(), this.key("privateKey").octstr(), this.key("parameters").optional().explicit(0).use(l), this.key("publicKey").optional().explicit(1).bitstr())
    }
    ));
    t.ECPrivateKey = h;
    var l = i.define("ECParameters", (function() {
        this.choice({
            namedCurve: this.objid()
        })
    }
    ));
    t.signature = i.define("signature", (function() {
        this.seq().obj(this.key("r").int(), this.key("s").int())
    }
    ))
}
, function(e, t, r) {
    "use strict";
    const i = r(160)
      , n = r(162)
      , o = r(4);
    function a(e, t) {
        this.name = e,
        this.body = t,
        this.decoders = {},
        this.encoders = {}
    }
    t.define = function(e, t) {
        return new a(e,t)
    }
    ,
    a.prototype._createNamed = function(e) {
        const t = this.name;
        function r(e) {
            this._initNamed(e, t)
        }
        return o(r, e),
        r.prototype._initNamed = function(t, r) {
            e.call(this, t, r)
        }
        ,
        new r(this)
    }
    ,
    a.prototype._getDecoder = function(e) {
        return e = e || "der",
        this.decoders.hasOwnProperty(e) || (this.decoders[e] = this._createNamed(n[e])),
        this.decoders[e]
    }
    ,
    a.prototype.decode = function(e, t, r) {
        return this._getDecoder(t).decode(e, r)
    }
    ,
    a.prototype._getEncoder = function(e) {
        return e = e || "der",
        this.encoders.hasOwnProperty(e) || (this.encoders[e] = this._createNamed(i[e])),
        this.encoders[e]
    }
    ,
    a.prototype.encode = function(e, t, r) {
        return this._getEncoder(t).encode(e, r)
    }
}
, function(e, t, r) {
    "use strict";
    const i = r(4)
      , n = r(161);
    function o(e) {
        n.call(this, e),
        this.enc = "pem"
    }
    i(o, n),
    e.exports = o,
    o.prototype.encode = function(e, t) {
        const r = n.prototype.encode.call(this, e).toString("base64")
          , i = ["-----BEGIN " + t.label + "-----"];
        for (let e = 0; e < r.length; e += 64)
            i.push(r.slice(e, e + 64));
        return i.push("-----END " + t.label + "-----"),
        i.join("\n")
    }
}
, function(e, t, r) {
    "use strict";
    const i = r(4)
      , n = r(91).Buffer
      , o = r(163);
    function a(e) {
        o.call(this, e),
        this.enc = "pem"
    }
    i(a, o),
    e.exports = a,
    a.prototype.decode = function(e, t) {
        const r = e.toString().split(/[\r\n]+/g)
          , i = t.label.toUpperCase()
          , a = /^-----(BEGIN|END) ([^-]+)-----$/;
        let s = -1
          , u = -1;
        for (let e = 0; e < r.length; e++) {
            const t = r[e].match(a);
            if (null !== t && t[2] === i) {
                if (-1 !== s) {
                    if ("END" !== t[1])
                        break;
                    u = e;
                    break
                }
                if ("BEGIN" !== t[1])
                    break;
                s = e
            }
        }
        if (-1 === s || -1 === u)
            throw new Error("PEM section not found for: " + i);
        const f = r.slice(s + 1, u).join("");
        f.replace(/[^a-z0-9+/=]+/gi, "");
        const c = n.from(f, "base64");
        return o.prototype.decode.call(this, c, t)
    }
}
, function(e, t, r) {
    "use strict";
    const i = t;
    i.Reporter = r(93).Reporter,
    i.DecoderBuffer = r(55).DecoderBuffer,
    i.EncoderBuffer = r(55).EncoderBuffer,
    i.Node = r(92)
}
, function(e, t, r) {
    "use strict";
    const i = t;
    i._reverse = function(e) {
        const t = {};
        return Object.keys(e).forEach((function(r) {
            (0 | r) == r && (r |= 0);
            const i = e[r];
            t[i] = r
        }
        )),
        t
    }
    ,
    i.der = r(94)
}
, function(e, t, r) {
    "use strict";
    var i = r(159)
      , n = i.define("Time", (function() {
        this.choice({
            utcTime: this.utctime(),
            generalTime: this.gentime()
        })
    }
    ))
      , o = i.define("AttributeTypeValue", (function() {
        this.seq().obj(this.key("type").objid(), this.key("value").any())
    }
    ))
      , a = i.define("AlgorithmIdentifier", (function() {
        this.seq().obj(this.key("algorithm").objid(), this.key("parameters").optional(), this.key("curve").objid().optional())
    }
    ))
      , s = i.define("SubjectPublicKeyInfo", (function() {
        this.seq().obj(this.key("algorithm").use(a), this.key("subjectPublicKey").bitstr())
    }
    ))
      , u = i.define("RelativeDistinguishedName", (function() {
        this.setof(o)
    }
    ))
      , f = i.define("RDNSequence", (function() {
        this.seqof(u)
    }
    ))
      , c = i.define("Name", (function() {
        this.choice({
            rdnSequence: this.use(f)
        })
    }
    ))
      , h = i.define("Validity", (function() {
        this.seq().obj(this.key("notBefore").use(n), this.key("notAfter").use(n))
    }
    ))
      , l = i.define("Extension", (function() {
        this.seq().obj(this.key("extnID").objid(), this.key("critical").bool().def(!1), this.key("extnValue").octstr())
    }
    ))
      , d = i.define("TBSCertificate", (function() {
        this.seq().obj(this.key("version").explicit(0).int().optional(), this.key("serialNumber").int(), this.key("signature").use(a), this.key("issuer").use(c), this.key("validity").use(h), this.key("subject").use(c), this.key("subjectPublicKeyInfo").use(s), this.key("issuerUniqueID").implicit(1).bitstr().optional(), this.key("subjectUniqueID").implicit(2).bitstr().optional(), this.key("extensions").explicit(3).seqof(l).optional())
    }
    ))
      , p = i.define("X509Certificate", (function() {
        this.seq().obj(this.key("tbsCertificate").use(d), this.key("signatureAlgorithm").use(a), this.key("signatureValue").bitstr())
    }
    ));
    e.exports = p
}
, function(e) {
    e.exports = JSON.parse('{"2.16.840.1.101.3.4.1.1":"aes-128-ecb","2.16.840.1.101.3.4.1.2":"aes-128-cbc","2.16.840.1.101.3.4.1.3":"aes-128-ofb","2.16.840.1.101.3.4.1.4":"aes-128-cfb","2.16.840.1.101.3.4.1.21":"aes-192-ecb","2.16.840.1.101.3.4.1.22":"aes-192-cbc","2.16.840.1.101.3.4.1.23":"aes-192-ofb","2.16.840.1.101.3.4.1.24":"aes-192-cfb","2.16.840.1.101.3.4.1.41":"aes-256-ecb","2.16.840.1.101.3.4.1.42":"aes-256-cbc","2.16.840.1.101.3.4.1.43":"aes-256-ofb","2.16.840.1.101.3.4.1.44":"aes-256-cfb"}')
}
, function(e, t, r) {
    var i = /Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r+/=]+)[\n\r]+/m
      , n = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m
      , o = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\n\r+/=]+)-----END \1-----$/m
      , a = r(63)
      , s = r(85)
      , u = r(5).Buffer;
    e.exports = function(e, t) {
        var r, f = e.toString(), c = f.match(i);
        if (c) {
            var h = "aes" + c[1]
              , l = u.from(c[2], "hex")
              , d = u.from(c[3].replace(/[\r\n]/g, ""), "base64")
              , p = a(t, l.slice(0, 8), parseInt(c[1], 10)).key
              , b = []
              , m = s.createDecipheriv(h, p, l);
            b.push(m.update(d)),
            b.push(m.final()),
            r = u.concat(b)
        } else {
            var g = f.match(o);
            r = u.from(g[2].replace(/[\r\n]/g, ""), "base64")
        }
        return {
            tag: f.match(n)[1],
            data: r
        }
    }
}
, function(e, t, r) {
    var i = r(5).Buffer
      , n = r(158)
      , o = r(37).ec
      , a = r(65)
      , s = r(164);
    function u(e, t) {
        if (e.cmpn(0) <= 0)
            throw new Error("invalid sig");
        if (e.cmp(t) >= t)
            throw new Error("invalid sig")
    }
    e.exports = function(e, t, r, f, c) {
        var h = a(r);
        if ("ec" === h.type) {
            if ("ecdsa" !== f && "ecdsa/rsa" !== f)
                throw new Error("wrong public key type");
            return function(e, t, r) {
                var i = s[r.data.algorithm.curve.join(".")];
                if (!i)
                    throw new Error("unknown curve " + r.data.algorithm.curve.join("."));
                var n = new o(i)
                  , a = r.data.subjectPrivateKey.data;
                return n.verify(t, e, a)
            }(e, t, h)
        }
        if ("dsa" === h.type) {
            if ("dsa" !== f)
                throw new Error("wrong public key type");
            return function(e, t, r) {
                var i = r.data.p
                  , o = r.data.q
                  , s = r.data.g
                  , f = r.data.pub_key
                  , c = a.signature.decode(e, "der")
                  , h = c.s
                  , l = c.r;
                u(h, o),
                u(l, o);
                var d = n.mont(i)
                  , p = h.invm(o);
                return 0 === s.toRed(d).redPow(new n(t).mul(p).mod(o)).fromRed().mul(f.toRed(d).redPow(l.mul(p).mod(o)).fromRed()).mod(i).mod(o).cmp(l)
            }(e, t, h)
        }
        if ("rsa" !== f && "ecdsa/rsa" !== f)
            throw new Error("wrong public key type");
        t = i.concat([c, t]);
        for (var l = h.modulus.byteLength(), d = [1], p = 0; t.length + d.length + 2 < l; )
            d.push(255),
            p++;
        d.push(0);
        for (var b = -1; ++b < t.length; )
            d.push(t[b]);
        d = i.from(d);
        var m = n.mont(h.modulus);
        e = (e = new n(e).toRed(m)).redPow(new n(h.publicExponent)),
        e = i.from(e.fromRed().toArray());
        var g = p < 8 ? 1 : 0;
        for (l = Math.min(e.length, d.length),
        e.length !== d.length && (g = 1),
        b = -1; ++b < l; )
            g |= e[b] ^ d[b];
        return 0 === g
    }
}
, function(e, t, r) {
    (function(t) {
        var i = r(37)
          , n = r(7);
        e.exports = function(e) {
            return new a(e)
        }
        ;
        var o = {
            secp256k1: {
                name: "secp256k1",
                byteLength: 32
            },
            secp224r1: {
                name: "p224",
                byteLength: 28
            },
            prime256v1: {
                name: "p256",
                byteLength: 32
            },
            prime192v1: {
                name: "p192",
                byteLength: 24
            },
            ed25519: {
                name: "ed25519",
                byteLength: 32
            },
            secp384r1: {
                name: "p384",
                byteLength: 48
            },
            secp521r1: {
                name: "p521",
                byteLength: 66
            }
        };
        function a(e) {
            this.curveType = o[e],
            this.curveType || (this.curveType = {
                name: e
            }),
            this.curve = new i.ec(this.curveType.name),
            this.keys = void 0
        }
        function s(e, r, i) {
            Array.isArray(e) || (e = e.toArray());
            var n = new t(e);
            if (i && n.length < i) {
                var o = new t(i - n.length);
                o.fill(0),
                n = t.concat([o, n])
            }
            return r ? n.toString(r) : n
        }
        o.p224 = o.secp224r1,
        o.p256 = o.secp256r1 = o.prime256v1,
        o.p192 = o.secp192r1 = o.prime192v1,
        o.p384 = o.secp384r1,
        o.p521 = o.secp521r1,
        a.prototype.generateKeys = function(e, t) {
            return this.keys = this.curve.genKeyPair(),
            this.getPublicKey(e, t)
        }
        ,
        a.prototype.computeSecret = function(e, r, i) {
            return r = r || "utf8",
            t.isBuffer(e) || (e = new t(e,r)),
            s(this.curve.keyFromPublic(e).getPublic().mul(this.keys.getPrivate()).getX(), i, this.curveType.byteLength)
        }
        ,
        a.prototype.getPublicKey = function(e, t) {
            var r = this.keys.getPublic("compressed" === t, !0);
            return "hybrid" === t && (r[r.length - 1] % 2 ? r[0] = 7 : r[0] = 6),
            s(r, e)
        }
        ,
        a.prototype.getPrivateKey = function(e) {
            return s(this.keys.getPrivate(), e)
        }
        ,
        a.prototype.setPublicKey = function(e, r) {
            return r = r || "utf8",
            t.isBuffer(e) || (e = new t(e,r)),
            this.keys._importPublic(e),
            this
        }
        ,
        a.prototype.setPrivateKey = function(e, r) {
            r = r || "utf8",
            t.isBuffer(e) || (e = new t(e,r));
            var i = new n(e);
            return i = i.toString(16),
            this.keys = this.curve.genKeyPair(),
            this.keys._importPrivate(i),
            this
        }
    }
    ).call(this, r(8).Buffer)
}
, function(e, t, r) {
    t.publicEncrypt = r(306),
    t.privateDecrypt = r(307),
    t.privateEncrypt = function(e, r) {
        return t.publicEncrypt(e, r, !0)
    }
    ,
    t.publicDecrypt = function(e, r) {
        return t.privateDecrypt(e, r, !0)
    }
}
, function(e, t, r) {
    var i = r(65)
      , n = r(32)
      , o = r(29)
      , a = r(165)
      , s = r(166)
      , u = r(7)
      , f = r(167)
      , c = r(89)
      , h = r(5).Buffer;
    e.exports = function(e, t, r) {
        var l;
        l = e.padding ? e.padding : r ? 1 : 4;
        var d, p = i(e);
        if (4 === l)
            d = function(e, t) {
                var r = e.modulus.byteLength()
                  , i = t.length
                  , f = o("sha1").update(h.alloc(0)).digest()
                  , c = f.length
                  , l = 2 * c;
                if (i > r - l - 2)
                    throw new Error("message too long");
                var d = h.alloc(r - i - l - 2)
                  , p = r - c - 1
                  , b = n(c)
                  , m = s(h.concat([f, d, h.alloc(1, 1), t], p), a(b, p))
                  , g = s(b, a(m, c));
                return new u(h.concat([h.alloc(1), g, m], r))
            }(p, t);
        else if (1 === l)
            d = function(e, t, r) {
                var i, o = t.length, a = e.modulus.byteLength();
                if (o > a - 11)
                    throw new Error("message too long");
                i = r ? h.alloc(a - o - 3, 255) : function(e) {
                    var t, r = h.allocUnsafe(e), i = 0, o = n(2 * e), a = 0;
                    for (; i < e; )
                        a === o.length && (o = n(2 * e),
                        a = 0),
                        (t = o[a++]) && (r[i++] = t);
                    return r
                }(a - o - 3);
                return new u(h.concat([h.from([0, r ? 1 : 2]), i, h.alloc(1), t], a))
            }(p, t, r);
        else {
            if (3 !== l)
                throw new Error("unknown padding");
            if ((d = new u(t)).cmp(p.modulus) >= 0)
                throw new Error("data too long for modulus")
        }
        return r ? c(d, p) : f(d, p)
    }
}
, function(e, t, r) {
    var i = r(65)
      , n = r(165)
      , o = r(166)
      , a = r(7)
      , s = r(89)
      , u = r(29)
      , f = r(167)
      , c = r(5).Buffer;
    e.exports = function(e, t, r) {
        var h;
        h = e.padding ? e.padding : r ? 1 : 4;
        var l, d = i(e), p = d.modulus.byteLength();
        if (t.length > p || new a(t).cmp(d.modulus) >= 0)
            throw new Error("decryption error");
        l = r ? f(new a(t), d) : s(t, d);
        var b = c.alloc(p - l.length);
        if (l = c.concat([b, l], p),
        4 === h)
            return function(e, t) {
                var r = e.modulus.byteLength()
                  , i = u("sha1").update(c.alloc(0)).digest()
                  , a = i.length;
                if (0 !== t[0])
                    throw new Error("decryption error");
                var s = t.slice(1, a + 1)
                  , f = t.slice(a + 1)
                  , h = o(s, n(f, a))
                  , l = o(f, n(h, r - a - 1));
                if (function(e, t) {
                    e = c.from(e),
                    t = c.from(t);
                    var r = 0
                      , i = e.length;
                    e.length !== t.length && (r++,
                    i = Math.min(e.length, t.length));
                    var n = -1;
                    for (; ++n < i; )
                        r += e[n] ^ t[n];
                    return r
                }(i, l.slice(0, a)))
                    throw new Error("decryption error");
                var d = a;
                for (; 0 === l[d]; )
                    d++;
                if (1 !== l[d++])
                    throw new Error("decryption error");
                return l.slice(d)
            }(d, l);
        if (1 === h)
            return function(e, t, r) {
                var i = t.slice(0, 2)
                  , n = 2
                  , o = 0;
                for (; 0 !== t[n++]; )
                    if (n >= t.length) {
                        o++;
                        break
                    }
                var a = t.slice(2, n - 1);
                ("0002" !== i.toString("hex") && !r || "0001" !== i.toString("hex") && r) && o++;
                a.length < 8 && o++;
                if (o)
                    throw new Error("decryption error");
                return t.slice(n)
            }(0, l, r);
        if (3 === h)
            return l;
        throw new Error("unknown padding")
    }
}
, function(e, t, r) {
    "use strict";
    (function(e, i) {
        function n() {
            throw new Error("secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11")
        }
        var o = r(5)
          , a = r(32)
          , s = o.Buffer
          , u = o.kMaxLength
          , f = e.crypto || e.msCrypto
          , c = Math.pow(2, 32) - 1;
        function h(e, t) {
            if ("number" != typeof e || e != e)
                throw new TypeError("offset must be a number");
            if (e > c || e < 0)
                throw new TypeError("offset must be a uint32");
            if (e > u || e > t)
                throw new RangeError("offset out of range")
        }
        function l(e, t, r) {
            if ("number" != typeof e || e != e)
                throw new TypeError("size must be a number");
            if (e > c || e < 0)
                throw new TypeError("size must be a uint32");
            if (e + t > r || e > u)
                throw new RangeError("buffer too small")
        }
        function d(e, t, r, n) {
            if (i.browser) {
                var o = e.buffer
                  , s = new Uint8Array(o,t,r);
                return f.getRandomValues(s),
                n ? void i.nextTick((function() {
                    n(null, e)
                }
                )) : e
            }
            if (!n)
                return a(r).copy(e, t),
                e;
            a(r, (function(r, i) {
                if (r)
                    return n(r);
                i.copy(e, t),
                n(null, e)
            }
            ))
        }
        f && f.getRandomValues || !i.browser ? (t.randomFill = function(t, r, i, n) {
            if (!(s.isBuffer(t) || t instanceof e.Uint8Array))
                throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
            if ("function" == typeof r)
                n = r,
                r = 0,
                i = t.length;
            else if ("function" == typeof i)
                n = i,
                i = t.length - r;
            else if ("function" != typeof n)
                throw new TypeError('"cb" argument must be a function');
            return h(r, t.length),
            l(i, r, t.length),
            d(t, r, i, n)
        }
        ,
        t.randomFillSync = function(t, r, i) {
            void 0 === r && (r = 0);
            if (!(s.isBuffer(t) || t instanceof e.Uint8Array))
                throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
            h(r, t.length),
            void 0 === i && (i = t.length - r);
            return l(i, r, t.length),
            d(t, r, i)
        }
        ) : (t.randomFill = n,
        t.randomFillSync = n)
    }
    ).call(this, r(13), r(14))
}
, function(e, t, r) {
    "use strict";
    var i = r(29)
      , n = r(310);
    e.exports = n((function(e) {
        var t = i("sha256").update(e).digest();
        return i("sha256").update(t).digest()
    }
    ))
}
, function(e, t, r) {
    "use strict";
    var i = r(201)
      , n = r(5).Buffer;
    e.exports = function(e) {
        function t(t) {
            var r = t.slice(0, -4)
              , i = t.slice(-4)
              , n = e(r);
            if (!(i[0] ^ n[0] | i[1] ^ n[1] | i[2] ^ n[2] | i[3] ^ n[3]))
                return r
        }
        return {
            encode: function(t) {
                var r = e(t);
                return i.encode(n.concat([t, r], t.length + 4))
            },
            decode: function(e) {
                var r = t(i.decode(e));
                if (!r)
                    throw new Error("Invalid checksum");
                return r
            },
            decodeUnsafe: function(e) {
                var r = i.decodeUnsafe(e);
                if (r)
                    return t(r)
            }
        }
    }
}
, function(e, t, r) {
    "use strict";
    e.exports = r(312)(r(316))
}
, function(e, t, r) {
    "use strict";
    var i = r(313)
      , n = r(314)
      , o = r(168);
    function a(e, t) {
        return void 0 === e ? t : (i.isBoolean(e, o.COMPRESSED_TYPE_INVALID),
        e)
    }
    e.exports = function(e) {
        return {
            privateKeyVerify: function(t) {
                return i.isBuffer(t, o.EC_PRIVATE_KEY_TYPE_INVALID),
                32 === t.length && e.privateKeyVerify(t)
            },
            privateKeyExport: function(t, r) {
                i.isBuffer(t, o.EC_PRIVATE_KEY_TYPE_INVALID),
                i.isBufferLength(t, 32, o.EC_PRIVATE_KEY_LENGTH_INVALID),
                r = a(r, !0);
                var s = e.privateKeyExport(t, r);
                return n.privateKeyExport(t, s, r)
            },
            privateKeyImport: function(t) {
                if (i.isBuffer(t, o.EC_PRIVATE_KEY_TYPE_INVALID),
                (t = n.privateKeyImport(t)) && 32 === t.length && e.privateKeyVerify(t))
                    return t;
                throw new Error(o.EC_PRIVATE_KEY_IMPORT_DER_FAIL)
            },
            privateKeyNegate: function(t) {
                return i.isBuffer(t, o.EC_PRIVATE_KEY_TYPE_INVALID),
                i.isBufferLength(t, 32, o.EC_PRIVATE_KEY_LENGTH_INVALID),
                e.privateKeyNegate(t)
            },
            privateKeyModInverse: function(t) {
                return i.isBuffer(t, o.EC_PRIVATE_KEY_TYPE_INVALID),
                i.isBufferLength(t, 32, o.EC_PRIVATE_KEY_LENGTH_INVALID),
                e.privateKeyModInverse(t)
            },
            privateKeyTweakAdd: function(t, r) {
                return i.isBuffer(t, o.EC_PRIVATE_KEY_TYPE_INVALID),
                i.isBufferLength(t, 32, o.EC_PRIVATE_KEY_LENGTH_INVALID),
                i.isBuffer(r, o.TWEAK_TYPE_INVALID),
                i.isBufferLength(r, 32, o.TWEAK_LENGTH_INVALID),
                e.privateKeyTweakAdd(t, r)
            },
            privateKeyTweakMul: function(t, r) {
                return i.isBuffer(t, o.EC_PRIVATE_KEY_TYPE_INVALID),
                i.isBufferLength(t, 32, o.EC_PRIVATE_KEY_LENGTH_INVALID),
                i.isBuffer(r, o.TWEAK_TYPE_INVALID),
                i.isBufferLength(r, 32, o.TWEAK_LENGTH_INVALID),
                e.privateKeyTweakMul(t, r)
            },
            publicKeyCreate: function(t, r) {
                return i.isBuffer(t, o.EC_PRIVATE_KEY_TYPE_INVALID),
                i.isBufferLength(t, 32, o.EC_PRIVATE_KEY_LENGTH_INVALID),
                r = a(r, !0),
                e.publicKeyCreate(t, r)
            },
            publicKeyConvert: function(t, r) {
                return i.isBuffer(t, o.EC_PUBLIC_KEY_TYPE_INVALID),
                i.isBufferLength2(t, 33, 65, o.EC_PUBLIC_KEY_LENGTH_INVALID),
                r = a(r, !0),
                e.publicKeyConvert(t, r)
            },
            publicKeyVerify: function(t) {
                return i.isBuffer(t, o.EC_PUBLIC_KEY_TYPE_INVALID),
                e.publicKeyVerify(t)
            },
            publicKeyTweakAdd: function(t, r, n) {
                return i.isBuffer(t, o.EC_PUBLIC_KEY_TYPE_INVALID),
                i.isBufferLength2(t, 33, 65, o.EC_PUBLIC_KEY_LENGTH_INVALID),
                i.isBuffer(r, o.TWEAK_TYPE_INVALID),
                i.isBufferLength(r, 32, o.TWEAK_LENGTH_INVALID),
                n = a(n, !0),
                e.publicKeyTweakAdd(t, r, n)
            },
            publicKeyTweakMul: function(t, r, n) {
                return i.isBuffer(t, o.EC_PUBLIC_KEY_TYPE_INVALID),
                i.isBufferLength2(t, 33, 65, o.EC_PUBLIC_KEY_LENGTH_INVALID),
                i.isBuffer(r, o.TWEAK_TYPE_INVALID),
                i.isBufferLength(r, 32, o.TWEAK_LENGTH_INVALID),
                n = a(n, !0),
                e.publicKeyTweakMul(t, r, n)
            },
            publicKeyCombine: function(t, r) {
                i.isArray(t, o.EC_PUBLIC_KEYS_TYPE_INVALID),
                i.isLengthGTZero(t, o.EC_PUBLIC_KEYS_LENGTH_INVALID);
                for (var n = 0; n < t.length; ++n)
                    i.isBuffer(t[n], o.EC_PUBLIC_KEY_TYPE_INVALID),
                    i.isBufferLength2(t[n], 33, 65, o.EC_PUBLIC_KEY_LENGTH_INVALID);
                return r = a(r, !0),
                e.publicKeyCombine(t, r)
            },
            signatureNormalize: function(t) {
                return i.isBuffer(t, o.ECDSA_SIGNATURE_TYPE_INVALID),
                i.isBufferLength(t, 64, o.ECDSA_SIGNATURE_LENGTH_INVALID),
                e.signatureNormalize(t)
            },
            signatureExport: function(t) {
                i.isBuffer(t, o.ECDSA_SIGNATURE_TYPE_INVALID),
                i.isBufferLength(t, 64, o.ECDSA_SIGNATURE_LENGTH_INVALID);
                var r = e.signatureExport(t);
                return n.signatureExport(r)
            },
            signatureImport: function(t) {
                i.isBuffer(t, o.ECDSA_SIGNATURE_TYPE_INVALID),
                i.isLengthGTZero(t, o.ECDSA_SIGNATURE_LENGTH_INVALID);
                var r = n.signatureImport(t);
                if (r)
                    return e.signatureImport(r);
                throw new Error(o.ECDSA_SIGNATURE_PARSE_DER_FAIL)
            },
            signatureImportLax: function(t) {
                i.isBuffer(t, o.ECDSA_SIGNATURE_TYPE_INVALID),
                i.isLengthGTZero(t, o.ECDSA_SIGNATURE_LENGTH_INVALID);
                var r = n.signatureImportLax(t);
                if (r)
                    return e.signatureImport(r);
                throw new Error(o.ECDSA_SIGNATURE_PARSE_DER_FAIL)
            },
            sign: function(t, r, n) {
                i.isBuffer(t, o.MSG32_TYPE_INVALID),
                i.isBufferLength(t, 32, o.MSG32_LENGTH_INVALID),
                i.isBuffer(r, o.EC_PRIVATE_KEY_TYPE_INVALID),
                i.isBufferLength(r, 32, o.EC_PRIVATE_KEY_LENGTH_INVALID);
                var a = null
                  , s = null;
                return void 0 !== n && (i.isObject(n, o.OPTIONS_TYPE_INVALID),
                void 0 !== n.data && (i.isBuffer(n.data, o.OPTIONS_DATA_TYPE_INVALID),
                i.isBufferLength(n.data, 32, o.OPTIONS_DATA_LENGTH_INVALID),
                a = n.data),
                void 0 !== n.noncefn && (i.isFunction(n.noncefn, o.OPTIONS_NONCEFN_TYPE_INVALID),
                s = n.noncefn)),
                e.sign(t, r, s, a)
            },
            verify: function(t, r, n) {
                return i.isBuffer(t, o.MSG32_TYPE_INVALID),
                i.isBufferLength(t, 32, o.MSG32_LENGTH_INVALID),
                i.isBuffer(r, o.ECDSA_SIGNATURE_TYPE_INVALID),
                i.isBufferLength(r, 64, o.ECDSA_SIGNATURE_LENGTH_INVALID),
                i.isBuffer(n, o.EC_PUBLIC_KEY_TYPE_INVALID),
                i.isBufferLength2(n, 33, 65, o.EC_PUBLIC_KEY_LENGTH_INVALID),
                e.verify(t, r, n)
            },
            recover: function(t, r, n, s) {
                return i.isBuffer(t, o.MSG32_TYPE_INVALID),
                i.isBufferLength(t, 32, o.MSG32_LENGTH_INVALID),
                i.isBuffer(r, o.ECDSA_SIGNATURE_TYPE_INVALID),
                i.isBufferLength(r, 64, o.ECDSA_SIGNATURE_LENGTH_INVALID),
                i.isNumber(n, o.RECOVERY_ID_TYPE_INVALID),
                i.isNumberInInterval(n, -1, 4, o.RECOVERY_ID_VALUE_INVALID),
                s = a(s, !0),
                e.recover(t, r, n, s)
            },
            ecdh: function(t, r) {
                return i.isBuffer(t, o.EC_PUBLIC_KEY_TYPE_INVALID),
                i.isBufferLength2(t, 33, 65, o.EC_PUBLIC_KEY_LENGTH_INVALID),
                i.isBuffer(r, o.EC_PRIVATE_KEY_TYPE_INVALID),
                i.isBufferLength(r, 32, o.EC_PRIVATE_KEY_LENGTH_INVALID),
                e.ecdh(t, r)
            },
            ecdhUnsafe: function(t, r, n) {
                return i.isBuffer(t, o.EC_PUBLIC_KEY_TYPE_INVALID),
                i.isBufferLength2(t, 33, 65, o.EC_PUBLIC_KEY_LENGTH_INVALID),
                i.isBuffer(r, o.EC_PRIVATE_KEY_TYPE_INVALID),
                i.isBufferLength(r, 32, o.EC_PRIVATE_KEY_LENGTH_INVALID),
                n = a(n, !0),
                e.ecdhUnsafe(t, r, n)
            }
        }
    }
}
, function(e, t, r) {
    "use strict";
    (function(e) {
        var r = Object.prototype.toString;
        t.isArray = function(e, t) {
            if (!Array.isArray(e))
                throw TypeError(t)
        }
        ,
        t.isBoolean = function(e, t) {
            if ("[object Boolean]" !== r.call(e))
                throw TypeError(t)
        }
        ,
        t.isBuffer = function(t, r) {
            if (!e.isBuffer(t))
                throw TypeError(r)
        }
        ,
        t.isFunction = function(e, t) {
            if ("[object Function]" !== r.call(e))
                throw TypeError(t)
        }
        ,
        t.isNumber = function(e, t) {
            if ("[object Number]" !== r.call(e))
                throw TypeError(t)
        }
        ,
        t.isObject = function(e, t) {
            if ("[object Object]" !== r.call(e))
                throw TypeError(t)
        }
        ,
        t.isBufferLength = function(e, t, r) {
            if (e.length !== t)
                throw RangeError(r)
        }
        ,
        t.isBufferLength2 = function(e, t, r, i) {
            if (e.length !== t && e.length !== r)
                throw RangeError(i)
        }
        ,
        t.isLengthGTZero = function(e, t) {
            if (0 === e.length)
                throw RangeError(t)
        }
        ,
        t.isNumberInInterval = function(e, t, r, i) {
            if (e <= t || e >= r)
                throw RangeError(i)
        }
    }
    ).call(this, r(8).Buffer)
}
, function(e, t, r) {
    "use strict";
    var i = r(5).Buffer
      , n = r(315)
      , o = i.from([48, 129, 211, 2, 1, 1, 4, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 129, 133, 48, 129, 130, 2, 1, 1, 48, 44, 6, 7, 42, 134, 72, 206, 61, 1, 1, 2, 33, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 254, 255, 255, 252, 47, 48, 6, 4, 1, 0, 4, 1, 7, 4, 33, 2, 121, 190, 102, 126, 249, 220, 187, 172, 85, 160, 98, 149, 206, 135, 11, 7, 2, 155, 252, 219, 45, 206, 40, 217, 89, 242, 129, 91, 22, 248, 23, 152, 2, 33, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 254, 186, 174, 220, 230, 175, 72, 160, 59, 191, 210, 94, 140, 208, 54, 65, 65, 2, 1, 1, 161, 36, 3, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
      , a = i.from([48, 130, 1, 19, 2, 1, 1, 4, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 129, 165, 48, 129, 162, 2, 1, 1, 48, 44, 6, 7, 42, 134, 72, 206, 61, 1, 1, 2, 33, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 254, 255, 255, 252, 47, 48, 6, 4, 1, 0, 4, 1, 7, 4, 65, 4, 121, 190, 102, 126, 249, 220, 187, 172, 85, 160, 98, 149, 206, 135, 11, 7, 2, 155, 252, 219, 45, 206, 40, 217, 89, 242, 129, 91, 22, 248, 23, 152, 72, 58, 218, 119, 38, 163, 196, 101, 93, 164, 251, 252, 14, 17, 8, 168, 253, 23, 180, 72, 166, 133, 84, 25, 156, 71, 208, 143, 251, 16, 212, 184, 2, 33, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 254, 186, 174, 220, 230, 175, 72, 160, 59, 191, 210, 94, 140, 208, 54, 65, 65, 2, 1, 1, 161, 68, 3, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    t.privateKeyExport = function(e, t, r) {
        var n = i.from(r ? o : a);
        return e.copy(n, r ? 8 : 9),
        t.copy(n, r ? 181 : 214),
        n
    }
    ,
    t.privateKeyImport = function(e) {
        var t = e.length
          , r = 0;
        if (!(t < r + 1 || 48 !== e[r]) && !(t < (r += 1) + 1) && 128 & e[r]) {
            var i = 127 & e[r];
            if (r += 1,
            !(i < 1 || i > 2 || t < r + i)) {
                var n = e[r + i - 1] | (i > 1 ? e[r + i - 2] << 8 : 0);
                if (!(t < (r += i) + n || t < r + 3 || 2 !== e[r] || 1 !== e[r + 1] || 1 !== e[r + 2] || t < (r += 3) + 2 || 4 !== e[r] || e[r + 1] > 32 || t < r + 2 + e[r + 1]))
                    return e.slice(r + 2, r + 2 + e[r + 1])
            }
        }
    }
    ,
    t.signatureExport = function(e) {
        for (var t = i.concat([i.from([0]), e.r]), r = 33, o = 0; r > 1 && 0 === t[o] && !(128 & t[o + 1]); --r,
        ++o)
            ;
        for (var a = i.concat([i.from([0]), e.s]), s = 33, u = 0; s > 1 && 0 === a[u] && !(128 & a[u + 1]); --s,
        ++u)
            ;
        return n.encode(t.slice(o), a.slice(u))
    }
    ,
    t.signatureImport = function(e) {
        var t = i.alloc(32, 0)
          , r = i.alloc(32, 0);
        try {
            var o = n.decode(e);
            if (33 === o.r.length && 0 === o.r[0] && (o.r = o.r.slice(1)),
            o.r.length > 32)
                throw new Error("R length is too long");
            if (33 === o.s.length && 0 === o.s[0] && (o.s = o.s.slice(1)),
            o.s.length > 32)
                throw new Error("S length is too long")
        } catch (e) {
            return
        }
        return o.r.copy(t, 32 - o.r.length),
        o.s.copy(r, 32 - o.s.length),
        {
            r: t,
            s: r
        }
    }
    ,
    t.signatureImportLax = function(e) {
        var t = i.alloc(32, 0)
          , r = i.alloc(32, 0)
          , n = e.length
          , o = 0;
        if (48 === e[o++]) {
            var a = e[o++];
            if (!(128 & a && (o += a - 128) > n) && 2 === e[o++]) {
                var s = e[o++];
                if (128 & s) {
                    if (o + (a = s - 128) > n)
                        return;
                    for (; a > 0 && 0 === e[o]; o += 1,
                    a -= 1)
                        ;
                    for (s = 0; a > 0; o += 1,
                    a -= 1)
                        s = (s << 8) + e[o]
                }
                if (!(s > n - o)) {
                    var u = o;
                    if (o += s,
                    2 === e[o++]) {
                        var f = e[o++];
                        if (128 & f) {
                            if (o + (a = f - 128) > n)
                                return;
                            for (; a > 0 && 0 === e[o]; o += 1,
                            a -= 1)
                                ;
                            for (f = 0; a > 0; o += 1,
                            a -= 1)
                                f = (f << 8) + e[o]
                        }
                        if (!(f > n - o)) {
                            var c = o;
                            for (o += f; s > 0 && 0 === e[u]; s -= 1,
                            u += 1)
                                ;
                            if (!(s > 32)) {
                                var h = e.slice(u, u + s);
                                for (h.copy(t, 32 - h.length); f > 0 && 0 === e[c]; f -= 1,
                                c += 1)
                                    ;
                                if (!(f > 32)) {
                                    var l = e.slice(c, c + f);
                                    return l.copy(r, 32 - l.length),
                                    {
                                        r: t,
                                        s: r
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
, function(e, t, r) {
    var i = r(5).Buffer;
    e.exports = {
        check: function(e) {
            if (e.length < 8)
                return !1;
            if (e.length > 72)
                return !1;
            if (48 !== e[0])
                return !1;
            if (e[1] !== e.length - 2)
                return !1;
            if (2 !== e[2])
                return !1;
            var t = e[3];
            if (0 === t)
                return !1;
            if (5 + t >= e.length)
                return !1;
            if (2 !== e[4 + t])
                return !1;
            var r = e[5 + t];
            return 0 !== r && (6 + t + r === e.length && (!(128 & e[4]) && (!(t > 1 && 0 === e[4] && !(128 & e[5])) && (!(128 & e[t + 6]) && !(r > 1 && 0 === e[t + 6] && !(128 & e[t + 7]))))))
        },
        decode: function(e) {
            if (e.length < 8)
                throw new Error("DER sequence length is too short");
            if (e.length > 72)
                throw new Error("DER sequence length is too long");
            if (48 !== e[0])
                throw new Error("Expected DER sequence");
            if (e[1] !== e.length - 2)
                throw new Error("DER sequence length is invalid");
            if (2 !== e[2])
                throw new Error("Expected DER integer");
            var t = e[3];
            if (0 === t)
                throw new Error("R length is zero");
            if (5 + t >= e.length)
                throw new Error("R length is too long");
            if (2 !== e[4 + t])
                throw new Error("Expected DER integer (2)");
            var r = e[5 + t];
            if (0 === r)
                throw new Error("S length is zero");
            if (6 + t + r !== e.length)
                throw new Error("S length is invalid");
            if (128 & e[4])
                throw new Error("R value is negative");
            if (t > 1 && 0 === e[4] && !(128 & e[5]))
                throw new Error("R value excessively padded");
            if (128 & e[t + 6])
                throw new Error("S value is negative");
            if (r > 1 && 0 === e[t + 6] && !(128 & e[t + 7]))
                throw new Error("S value excessively padded");
            return {
                r: e.slice(4, 4 + t),
                s: e.slice(6 + t)
            }
        },
        encode: function(e, t) {
            var r = e.length
              , n = t.length;
            if (0 === r)
                throw new Error("R length is zero");
            if (0 === n)
                throw new Error("S length is zero");
            if (r > 33)
                throw new Error("R length is too long");
            if (n > 33)
                throw new Error("S length is too long");
            if (128 & e[0])
                throw new Error("R value is negative");
            if (128 & t[0])
                throw new Error("S value is negative");
            if (r > 1 && 0 === e[0] && !(128 & e[1]))
                throw new Error("R value excessively padded");
            if (n > 1 && 0 === t[0] && !(128 & t[1]))
                throw new Error("S value excessively padded");
            var o = i.allocUnsafe(6 + r + n);
            return o[0] = 48,
            o[1] = o.length - 2,
            o[2] = 2,
            o[3] = e.length,
            e.copy(o, 4),
            o[4 + r] = 2,
            o[5 + r] = t.length,
            t.copy(o, 6 + r),
            o
        }
    }
}
, function(e, t, r) {
    "use strict";
    var i = r(5).Buffer
      , n = r(29)
      , o = r(7)
      , a = r(37).ec
      , s = r(168)
      , u = new a("secp256k1")
      , f = u.curve;
    function c(e) {
        var t = e[0];
        switch (t) {
        case 2:
        case 3:
            return 33 !== e.length ? null : function(e, t) {
                var r = new o(t);
                if (r.cmp(f.p) >= 0)
                    return null;
                var i = (r = r.toRed(f.red)).redSqr().redIMul(r).redIAdd(f.b).redSqrt();
                return 3 === e !== i.isOdd() && (i = i.redNeg()),
                u.keyPair({
                    pub: {
                        x: r,
                        y: i
                    }
                })
            }(t, e.slice(1, 33));
        case 4:
        case 6:
        case 7:
            return 65 !== e.length ? null : function(e, t, r) {
                var i = new o(t)
                  , n = new o(r);
                if (i.cmp(f.p) >= 0 || n.cmp(f.p) >= 0)
                    return null;
                if (i = i.toRed(f.red),
                n = n.toRed(f.red),
                (6 === e || 7 === e) && n.isOdd() !== (7 === e))
                    return null;
                var a = i.redSqr().redIMul(i);
                return n.redSqr().redISub(a.redIAdd(f.b)).isZero() ? u.keyPair({
                    pub: {
                        x: i,
                        y: n
                    }
                }) : null
            }(t, e.slice(1, 33), e.slice(33, 65));
        default:
            return null
        }
    }
    t.privateKeyVerify = function(e) {
        var t = new o(e);
        return t.cmp(f.n) < 0 && !t.isZero()
    }
    ,
    t.privateKeyExport = function(e, t) {
        var r = new o(e);
        if (r.cmp(f.n) >= 0 || r.isZero())
            throw new Error(s.EC_PRIVATE_KEY_EXPORT_DER_FAIL);
        return i.from(u.keyFromPrivate(e).getPublic(t, !0))
    }
    ,
    t.privateKeyNegate = function(e) {
        var t = new o(e);
        return t.isZero() ? i.alloc(32) : f.n.sub(t).umod(f.n).toArrayLike(i, "be", 32)
    }
    ,
    t.privateKeyModInverse = function(e) {
        var t = new o(e);
        if (t.cmp(f.n) >= 0 || t.isZero())
            throw new Error(s.EC_PRIVATE_KEY_RANGE_INVALID);
        return t.invm(f.n).toArrayLike(i, "be", 32)
    }
    ,
    t.privateKeyTweakAdd = function(e, t) {
        var r = new o(t);
        if (r.cmp(f.n) >= 0)
            throw new Error(s.EC_PRIVATE_KEY_TWEAK_ADD_FAIL);
        if (r.iadd(new o(e)),
        r.cmp(f.n) >= 0 && r.isub(f.n),
        r.isZero())
            throw new Error(s.EC_PRIVATE_KEY_TWEAK_ADD_FAIL);
        return r.toArrayLike(i, "be", 32)
    }
    ,
    t.privateKeyTweakMul = function(e, t) {
        var r = new o(t);
        if (r.cmp(f.n) >= 0 || r.isZero())
            throw new Error(s.EC_PRIVATE_KEY_TWEAK_MUL_FAIL);
        return r.imul(new o(e)),
        r.cmp(f.n) && (r = r.umod(f.n)),
        r.toArrayLike(i, "be", 32)
    }
    ,
    t.publicKeyCreate = function(e, t) {
        var r = new o(e);
        if (r.cmp(f.n) >= 0 || r.isZero())
            throw new Error(s.EC_PUBLIC_KEY_CREATE_FAIL);
        return i.from(u.keyFromPrivate(e).getPublic(t, !0))
    }
    ,
    t.publicKeyConvert = function(e, t) {
        var r = c(e);
        if (null === r)
            throw new Error(s.EC_PUBLIC_KEY_PARSE_FAIL);
        return i.from(r.getPublic(t, !0))
    }
    ,
    t.publicKeyVerify = function(e) {
        return null !== c(e)
    }
    ,
    t.publicKeyTweakAdd = function(e, t, r) {
        var n = c(e);
        if (null === n)
            throw new Error(s.EC_PUBLIC_KEY_PARSE_FAIL);
        if ((t = new o(t)).cmp(f.n) >= 0)
            throw new Error(s.EC_PUBLIC_KEY_TWEAK_ADD_FAIL);
        var a = f.g.mul(t).add(n.pub);
        if (a.isInfinity())
            throw new Error(s.EC_PUBLIC_KEY_TWEAK_ADD_FAIL);
        return i.from(a.encode(!0, r))
    }
    ,
    t.publicKeyTweakMul = function(e, t, r) {
        var n = c(e);
        if (null === n)
            throw new Error(s.EC_PUBLIC_KEY_PARSE_FAIL);
        if ((t = new o(t)).cmp(f.n) >= 0 || t.isZero())
            throw new Error(s.EC_PUBLIC_KEY_TWEAK_MUL_FAIL);
        return i.from(n.pub.mul(t).encode(!0, r))
    }
    ,
    t.publicKeyCombine = function(e, t) {
        for (var r = new Array(e.length), n = 0; n < e.length; ++n)
            if (r[n] = c(e[n]),
            null === r[n])
                throw new Error(s.EC_PUBLIC_KEY_PARSE_FAIL);
        for (var o = r[0].pub, a = 1; a < r.length; ++a)
            o = o.add(r[a].pub);
        if (o.isInfinity())
            throw new Error(s.EC_PUBLIC_KEY_COMBINE_FAIL);
        return i.from(o.encode(!0, t))
    }
    ,
    t.signatureNormalize = function(e) {
        var t = new o(e.slice(0, 32))
          , r = new o(e.slice(32, 64));
        if (t.cmp(f.n) >= 0 || r.cmp(f.n) >= 0)
            throw new Error(s.ECDSA_SIGNATURE_PARSE_FAIL);
        var n = i.from(e);
        return 1 === r.cmp(u.nh) && f.n.sub(r).toArrayLike(i, "be", 32).copy(n, 32),
        n
    }
    ,
    t.signatureExport = function(e) {
        var t = e.slice(0, 32)
          , r = e.slice(32, 64);
        if (new o(t).cmp(f.n) >= 0 || new o(r).cmp(f.n) >= 0)
            throw new Error(s.ECDSA_SIGNATURE_PARSE_FAIL);
        return {
            r: t,
            s: r
        }
    }
    ,
    t.signatureImport = function(e) {
        var t = new o(e.r);
        t.cmp(f.n) >= 0 && (t = new o(0));
        var r = new o(e.s);
        return r.cmp(f.n) >= 0 && (r = new o(0)),
        i.concat([t.toArrayLike(i, "be", 32), r.toArrayLike(i, "be", 32)])
    }
    ,
    t.sign = function(e, t, r, n) {
        if ("function" == typeof r) {
            var a = r;
            r = function(r) {
                var u = a(e, t, null, n, r);
                if (!i.isBuffer(u) || 32 !== u.length)
                    throw new Error(s.ECDSA_SIGN_FAIL);
                return new o(u)
            }
        }
        var c = new o(t);
        if (c.cmp(f.n) >= 0 || c.isZero())
            throw new Error(s.ECDSA_SIGN_FAIL);
        var h = u.sign(e, t, {
            canonical: !0,
            k: r,
            pers: n
        });
        return {
            signature: i.concat([h.r.toArrayLike(i, "be", 32), h.s.toArrayLike(i, "be", 32)]),
            recovery: h.recoveryParam
        }
    }
    ,
    t.verify = function(e, t, r) {
        var i = {
            r: t.slice(0, 32),
            s: t.slice(32, 64)
        }
          , n = new o(i.r)
          , a = new o(i.s);
        if (n.cmp(f.n) >= 0 || a.cmp(f.n) >= 0)
            throw new Error(s.ECDSA_SIGNATURE_PARSE_FAIL);
        if (1 === a.cmp(u.nh) || n.isZero() || a.isZero())
            return !1;
        var h = c(r);
        if (null === h)
            throw new Error(s.EC_PUBLIC_KEY_PARSE_FAIL);
        return u.verify(e, i, {
            x: h.pub.x,
            y: h.pub.y
        })
    }
    ,
    t.recover = function(e, t, r, n) {
        var a = {
            r: t.slice(0, 32),
            s: t.slice(32, 64)
        }
          , c = new o(a.r)
          , h = new o(a.s);
        if (c.cmp(f.n) >= 0 || h.cmp(f.n) >= 0)
            throw new Error(s.ECDSA_SIGNATURE_PARSE_FAIL);
        try {
            if (c.isZero() || h.isZero())
                throw new Error;
            var l = u.recoverPubKey(e, a, r);
            return i.from(l.encode(!0, n))
        } catch (e) {
            throw new Error(s.ECDSA_RECOVER_FAIL)
        }
    }
    ,
    t.ecdh = function(e, r) {
        var i = t.ecdhUnsafe(e, r, !0);
        return n("sha256").update(i).digest()
    }
    ,
    t.ecdhUnsafe = function(e, t, r) {
        var n = c(e);
        if (null === n)
            throw new Error(s.EC_PUBLIC_KEY_PARSE_FAIL);
        var a = new o(t);
        if (a.cmp(f.n) >= 0 || a.isZero())
            throw new Error(s.ECDH_FAIL);
        return i.from(n.pub.mul(a).encode(!0, r))
    }
}
, function(e, t, r) {
    var i = r(5).Buffer
      , n = r(29)
      , o = r(61)
      , a = o.pbkdf2Sync
      , s = o.pbkdf2
      , u = r(32)
      , f = r(318)
      , c = r(319)
      , h = r(320)
      , l = r(321)
      , d = r(322)
      , p = r(323)
      , b = r(324)
      , m = r(325)
      , g = r(326)
      , v = l;
    function y(e, t, r) {
        for (; e.length < r; )
            e = t + e;
        return e
    }
    function w(e) {
        return parseInt(e, 2)
    }
    function _(e) {
        return e.map((function(e) {
            return y(e.toString(2), "0", 8)
        }
        )).join("")
    }
    function E(e) {
        var t = 8 * e.length / 32
          , r = n("sha256").update(e).digest();
        return _([].slice.call(r)).slice(0, t)
    }
    function M(e) {
        return "mnemonic" + (e || "")
    }
    function S(e, t) {
        var r = i.from(f.nfkd(e), "utf8")
          , n = i.from(M(f.nfkd(t)), "utf8");
        return a(r, n, 2048, 64, "sha512")
    }
    function A(e, t) {
        return new Promise((function(r, n) {
            try {
                var o = i.from(f.nfkd(e), "utf8")
                  , a = i.from(M(f.nfkd(t)), "utf8")
            } catch (e) {
                return n(e)
            }
            s(o, a, 2048, 64, "sha512", (function(e, t) {
                return e ? n(e) : r(t)
            }
            ))
        }
        ))
    }
    function k(e, t) {
        t = t || v;
        var r = f.nfkd(e).split(" ");
        if (r.length % 3 != 0)
            throw new Error("Invalid mnemonic");
        var n = r.map((function(e) {
            var r = t.indexOf(e);
            if (-1 === r)
                throw new Error("Invalid mnemonic");
            return y(r.toString(2), "0", 11)
        }
        )).join("")
          , o = 32 * Math.floor(n.length / 33)
          , a = n.slice(0, o)
          , s = n.slice(o)
          , u = a.match(/(.{1,8})/g).map(w);
        if (u.length < 16)
            throw new Error("Invalid entropy");
        if (u.length > 32)
            throw new Error("Invalid entropy");
        if (u.length % 4 != 0)
            throw new Error("Invalid entropy");
        var c = i.from(u);
        if (E(c) !== s)
            throw new Error("Invalid mnemonic checksum");
        return c.toString("hex")
    }
    function x(e, t) {
        if (i.isBuffer(e) || (e = i.from(e, "hex")),
        t = t || v,
        e.length < 16)
            throw new TypeError("Invalid entropy");
        if (e.length > 32)
            throw new TypeError("Invalid entropy");
        if (e.length % 4 != 0)
            throw new TypeError("Invalid entropy");
        var r = (_([].slice.call(e)) + E(e)).match(/(.{1,11})/g).map((function(e) {
            var r = w(e);
            return t[r]
        }
        ));
        return t === b ? r.join("　") : r.join(" ")
    }
    e.exports = {
        mnemonicToSeed: S,
        mnemonicToSeedAsync: A,
        mnemonicToSeedHex: function(e, t) {
            return S(e, t).toString("hex")
        },
        mnemonicToSeedHexAsync: function(e, t) {
            return A(e, t).then((function(e) {
                return e.toString("hex")
            }
            ))
        },
        mnemonicToEntropy: k,
        entropyToMnemonic: x,
        generateMnemonic: function(e, t, r) {
            if ((e = e || 128) % 32 != 0)
                throw new TypeError("Invalid entropy");
            return x((t = t || u)(e / 8), r)
        },
        validateMnemonic: function(e, t) {
            try {
                k(e, t)
            } catch (e) {
                return !1
            }
            return !0
        },
        wordlists: {
            EN: l,
            JA: b,
            chinese_simplified: c,
            chinese_traditional: h,
            english: l,
            french: d,
            italian: p,
            japanese: b,
            korean: m,
            spanish: g
        }
    }
}
, function(e, t, r) {
    !function(t) {
        "use strict";
        for (var r = [null, 0, {}], i = function(e, t) {
            this.codepoint = e,
            this.feature = t
        }, n = {}, o = [], a = 0; a <= 255; ++a)
            o[a] = 0;
        var s = [function(e, t, n) {
            return t < 60 || 13311 < t && t < 42607 ? new i(t,r) : e(t, n)
        }
        , function(e, t, r) {
            var i = n[t];
            return i || (i = e(t, r)).feature && ++o[t >> 8 & 255] > 10 && (n[t] = i),
            i
        }
        , function(e, t, r) {
            return r ? e(t, r) : new i(t,null)
        }
        , function(e, t, r) {
            var n;
            if (t < 4352 || 4371 <= t && t < 44032 || 55204 < t)
                return e(t, r);
            if (4352 <= t && t < 4371) {
                var o = {}
                  , a = 21 * (t - 4352);
                for (n = 0; n < 21; ++n)
                    o[4449 + n] = 44032 + 28 * (n + a);
                return new i(t,[, , o])
            }
            var s = t - 44032
              , u = s % 28
              , f = [];
            if (0 !== u)
                f[0] = [44032 + s - u, 4519 + u];
            else
                for (f[0] = [4352 + Math.floor(s / 588), 4449 + Math.floor(s % 588 / 28)],
                f[2] = {},
                n = 1; n < 28; ++n)
                    f[2][4519 + n] = t + n;
            return new i(t,f)
        }
        , function(e, t, n) {
            var o = (i.udata[65280 & t] || {})[t];
            return new i(t,o || r)
        }
        ];
        i.fromCharCode = s.reduceRight((function(e, t) {
            return function(r, i) {
                return t(e, r, i)
            }
        }
        ), null),
        i.isHighSurrogate = function(e) {
            return e >= 55296 && e <= 56319
        }
        ,
        i.isLowSurrogate = function(e) {
            return e >= 56320 && e <= 57343
        }
        ,
        i.prototype.prepFeature = function() {
            this.feature || (this.feature = i.fromCharCode(this.codepoint, !0).feature)
        }
        ,
        i.prototype.toString = function() {
            if (this.codepoint < 65536)
                return String.fromCharCode(this.codepoint);
            var e = this.codepoint - 65536;
            return String.fromCharCode(Math.floor(e / 1024) + 55296, e % 1024 + 56320)
        }
        ,
        i.prototype.getDecomp = function() {
            return this.prepFeature(),
            this.feature[0] || null
        }
        ,
        i.prototype.isCompatibility = function() {
            return this.prepFeature(),
            !!this.feature[1] && 256 & this.feature[1]
        }
        ,
        i.prototype.isExclude = function() {
            return this.prepFeature(),
            !!this.feature[1] && 512 & this.feature[1]
        }
        ,
        i.prototype.getCanonicalClass = function() {
            return this.prepFeature(),
            this.feature[1] ? 255 & this.feature[1] : 0
        }
        ,
        i.prototype.getComposite = function(e) {
            if (this.prepFeature(),
            !this.feature[2])
                return null;
            var t = this.feature[2][e.codepoint];
            return t ? i.fromCharCode(t) : null
        }
        ;
        var u = function(e) {
            this.str = e,
            this.cursor = 0
        };
        u.prototype.next = function() {
            if (this.str && this.cursor < this.str.length) {
                var e, t = this.str.charCodeAt(this.cursor++);
                return i.isHighSurrogate(t) && this.cursor < this.str.length && i.isLowSurrogate(e = this.str.charCodeAt(this.cursor)) && (t = 1024 * (t - 55296) + (e - 56320) + 65536,
                ++this.cursor),
                i.fromCharCode(t)
            }
            return this.str = null,
            null
        }
        ;
        var f = function(e, t) {
            this.it = e,
            this.canonical = t,
            this.resBuf = []
        };
        f.prototype.next = function() {
            if (0 === this.resBuf.length) {
                var e = this.it.next();
                if (!e)
                    return null;
                this.resBuf = function e(t, r) {
                    var n = r.getDecomp();
                    if (!n || t && r.isCompatibility())
                        return [r];
                    for (var o = [], a = 0; a < n.length; ++a) {
                        var s = e(t, i.fromCharCode(n[a]));
                        o = o.concat(s)
                    }
                    return o
                }(this.canonical, e)
            }
            return this.resBuf.shift()
        }
        ;
        var c = function(e) {
            this.it = e,
            this.resBuf = []
        };
        c.prototype.next = function() {
            var e;
            if (0 === this.resBuf.length)
                do {
                    var t = this.it.next();
                    if (!t)
                        break;
                    e = t.getCanonicalClass();
                    var r = this.resBuf.length;
                    if (0 !== e)
                        for (; r > 0; --r) {
                            if (this.resBuf[r - 1].getCanonicalClass() <= e)
                                break
                        }
                    this.resBuf.splice(r, 0, t)
                } while (0 !== e);
            return this.resBuf.shift()
        }
        ;
        var h = function(e) {
            this.it = e,
            this.procBuf = [],
            this.resBuf = [],
            this.lastClass = null
        };
        h.prototype.next = function() {
            for (; 0 === this.resBuf.length; ) {
                var e = this.it.next();
                if (!e) {
                    this.resBuf = this.procBuf,
                    this.procBuf = [];
                    break
                }
                if (0 === this.procBuf.length)
                    this.lastClass = e.getCanonicalClass(),
                    this.procBuf.push(e);
                else {
                    var t = this.procBuf[0].getComposite(e)
                      , r = e.getCanonicalClass();
                    t && (this.lastClass < r || 0 === this.lastClass) ? this.procBuf[0] = t : (0 === r && (this.resBuf = this.procBuf,
                    this.procBuf = []),
                    this.lastClass = r,
                    this.procBuf.push(e))
                }
            }
            return this.resBuf.shift()
        }
        ;
        var l = function(e, t) {
            for (var r, i = function(e, t) {
                switch (e) {
                case "NFD":
                    return new c(new f(new u(t),!0));
                case "NFKD":
                    return new c(new f(new u(t),!1));
                case "NFC":
                    return new h(new c(new f(new u(t),!0)));
                case "NFKC":
                    return new h(new c(new f(new u(t),!1)))
                }
                throw e + " is invalid"
            }(e, t), n = ""; r = i.next(); )
                n += r.toString();
            return n
        };
        i.udata = {
            0: {
                60: [, , {
                    824: 8814
                }],
                61: [, , {
                    824: 8800
                }],
                62: [, , {
                    824: 8815
                }],
                65: [, , {
                    768: 192,
                    769: 193,
                    770: 194,
                    771: 195,
                    772: 256,
                    774: 258,
                    775: 550,
                    776: 196,
                    777: 7842,
                    778: 197,
                    780: 461,
                    783: 512,
                    785: 514,
                    803: 7840,
                    805: 7680,
                    808: 260
                }],
                66: [, , {
                    775: 7682,
                    803: 7684,
                    817: 7686
                }],
                67: [, , {
                    769: 262,
                    770: 264,
                    775: 266,
                    780: 268,
                    807: 199
                }],
                68: [, , {
                    775: 7690,
                    780: 270,
                    803: 7692,
                    807: 7696,
                    813: 7698,
                    817: 7694
                }],
                69: [, , {
                    768: 200,
                    769: 201,
                    770: 202,
                    771: 7868,
                    772: 274,
                    774: 276,
                    775: 278,
                    776: 203,
                    777: 7866,
                    780: 282,
                    783: 516,
                    785: 518,
                    803: 7864,
                    807: 552,
                    808: 280,
                    813: 7704,
                    816: 7706
                }],
                70: [, , {
                    775: 7710
                }],
                71: [, , {
                    769: 500,
                    770: 284,
                    772: 7712,
                    774: 286,
                    775: 288,
                    780: 486,
                    807: 290
                }],
                72: [, , {
                    770: 292,
                    775: 7714,
                    776: 7718,
                    780: 542,
                    803: 7716,
                    807: 7720,
                    814: 7722
                }],
                73: [, , {
                    768: 204,
                    769: 205,
                    770: 206,
                    771: 296,
                    772: 298,
                    774: 300,
                    775: 304,
                    776: 207,
                    777: 7880,
                    780: 463,
                    783: 520,
                    785: 522,
                    803: 7882,
                    808: 302,
                    816: 7724
                }],
                74: [, , {
                    770: 308
                }],
                75: [, , {
                    769: 7728,
                    780: 488,
                    803: 7730,
                    807: 310,
                    817: 7732
                }],
                76: [, , {
                    769: 313,
                    780: 317,
                    803: 7734,
                    807: 315,
                    813: 7740,
                    817: 7738
                }],
                77: [, , {
                    769: 7742,
                    775: 7744,
                    803: 7746
                }],
                78: [, , {
                    768: 504,
                    769: 323,
                    771: 209,
                    775: 7748,
                    780: 327,
                    803: 7750,
                    807: 325,
                    813: 7754,
                    817: 7752
                }],
                79: [, , {
                    768: 210,
                    769: 211,
                    770: 212,
                    771: 213,
                    772: 332,
                    774: 334,
                    775: 558,
                    776: 214,
                    777: 7886,
                    779: 336,
                    780: 465,
                    783: 524,
                    785: 526,
                    795: 416,
                    803: 7884,
                    808: 490
                }],
                80: [, , {
                    769: 7764,
                    775: 7766
                }],
                82: [, , {
                    769: 340,
                    775: 7768,
                    780: 344,
                    783: 528,
                    785: 530,
                    803: 7770,
                    807: 342,
                    817: 7774
                }],
                83: [, , {
                    769: 346,
                    770: 348,
                    775: 7776,
                    780: 352,
                    803: 7778,
                    806: 536,
                    807: 350
                }],
                84: [, , {
                    775: 7786,
                    780: 356,
                    803: 7788,
                    806: 538,
                    807: 354,
                    813: 7792,
                    817: 7790
                }],
                85: [, , {
                    768: 217,
                    769: 218,
                    770: 219,
                    771: 360,
                    772: 362,
                    774: 364,
                    776: 220,
                    777: 7910,
                    778: 366,
                    779: 368,
                    780: 467,
                    783: 532,
                    785: 534,
                    795: 431,
                    803: 7908,
                    804: 7794,
                    808: 370,
                    813: 7798,
                    816: 7796
                }],
                86: [, , {
                    771: 7804,
                    803: 7806
                }],
                87: [, , {
                    768: 7808,
                    769: 7810,
                    770: 372,
                    775: 7814,
                    776: 7812,
                    803: 7816
                }],
                88: [, , {
                    775: 7818,
                    776: 7820
                }],
                89: [, , {
                    768: 7922,
                    769: 221,
                    770: 374,
                    771: 7928,
                    772: 562,
                    775: 7822,
                    776: 376,
                    777: 7926,
                    803: 7924
                }],
                90: [, , {
                    769: 377,
                    770: 7824,
                    775: 379,
                    780: 381,
                    803: 7826,
                    817: 7828
                }],
                97: [, , {
                    768: 224,
                    769: 225,
                    770: 226,
                    771: 227,
                    772: 257,
                    774: 259,
                    775: 551,
                    776: 228,
                    777: 7843,
                    778: 229,
                    780: 462,
                    783: 513,
                    785: 515,
                    803: 7841,
                    805: 7681,
                    808: 261
                }],
                98: [, , {
                    775: 7683,
                    803: 7685,
                    817: 7687
                }],
                99: [, , {
                    769: 263,
                    770: 265,
                    775: 267,
                    780: 269,
                    807: 231
                }],
                100: [, , {
                    775: 7691,
                    780: 271,
                    803: 7693,
                    807: 7697,
                    813: 7699,
                    817: 7695
                }],
                101: [, , {
                    768: 232,
                    769: 233,
                    770: 234,
                    771: 7869,
                    772: 275,
                    774: 277,
                    775: 279,
                    776: 235,
                    777: 7867,
                    780: 283,
                    783: 517,
                    785: 519,
                    803: 7865,
                    807: 553,
                    808: 281,
                    813: 7705,
                    816: 7707
                }],
                102: [, , {
                    775: 7711
                }],
                103: [, , {
                    769: 501,
                    770: 285,
                    772: 7713,
                    774: 287,
                    775: 289,
                    780: 487,
                    807: 291
                }],
                104: [, , {
                    770: 293,
                    775: 7715,
                    776: 7719,
                    780: 543,
                    803: 7717,
                    807: 7721,
                    814: 7723,
                    817: 7830
                }],
                105: [, , {
                    768: 236,
                    769: 237,
                    770: 238,
                    771: 297,
                    772: 299,
                    774: 301,
                    776: 239,
                    777: 7881,
                    780: 464,
                    783: 521,
                    785: 523,
                    803: 7883,
                    808: 303,
                    816: 7725
                }],
                106: [, , {
                    770: 309,
                    780: 496
                }],
                107: [, , {
                    769: 7729,
                    780: 489,
                    803: 7731,
                    807: 311,
                    817: 7733
                }],
                108: [, , {
                    769: 314,
                    780: 318,
                    803: 7735,
                    807: 316,
                    813: 7741,
                    817: 7739
                }],
                109: [, , {
                    769: 7743,
                    775: 7745,
                    803: 7747
                }],
                110: [, , {
                    768: 505,
                    769: 324,
                    771: 241,
                    775: 7749,
                    780: 328,
                    803: 7751,
                    807: 326,
                    813: 7755,
                    817: 7753
                }],
                111: [, , {
                    768: 242,
                    769: 243,
                    770: 244,
                    771: 245,
                    772: 333,
                    774: 335,
                    775: 559,
                    776: 246,
                    777: 7887,
                    779: 337,
                    780: 466,
                    783: 525,
                    785: 527,
                    795: 417,
                    803: 7885,
                    808: 491
                }],
                112: [, , {
                    769: 7765,
                    775: 7767
                }],
                114: [, , {
                    769: 341,
                    775: 7769,
                    780: 345,
                    783: 529,
                    785: 531,
                    803: 7771,
                    807: 343,
                    817: 7775
                }],
                115: [, , {
                    769: 347,
                    770: 349,
                    775: 7777,
                    780: 353,
                    803: 7779,
                    806: 537,
                    807: 351
                }],
                116: [, , {
                    775: 7787,
                    776: 7831,
                    780: 357,
                    803: 7789,
                    806: 539,
                    807: 355,
                    813: 7793,
                    817: 7791
                }],
                117: [, , {
                    768: 249,
                    769: 250,
                    770: 251,
                    771: 361,
                    772: 363,
                    774: 365,
                    776: 252,
                    777: 7911,
                    778: 367,
                    779: 369,
                    780: 468,
                    783: 533,
                    785: 535,
                    795: 432,
                    803: 7909,
                    804: 7795,
                    808: 371,
                    813: 7799,
                    816: 7797
                }],
                118: [, , {
                    771: 7805,
                    803: 7807
                }],
                119: [, , {
                    768: 7809,
                    769: 7811,
                    770: 373,
                    775: 7815,
                    776: 7813,
                    778: 7832,
                    803: 7817
                }],
                120: [, , {
                    775: 7819,
                    776: 7821
                }],
                121: [, , {
                    768: 7923,
                    769: 253,
                    770: 375,
                    771: 7929,
                    772: 563,
                    775: 7823,
                    776: 255,
                    777: 7927,
                    778: 7833,
                    803: 7925
                }],
                122: [, , {
                    769: 378,
                    770: 7825,
                    775: 380,
                    780: 382,
                    803: 7827,
                    817: 7829
                }],
                160: [[32], 256],
                168: [[32, 776], 256, {
                    768: 8173,
                    769: 901,
                    834: 8129
                }],
                170: [[97], 256],
                175: [[32, 772], 256],
                178: [[50], 256],
                179: [[51], 256],
                180: [[32, 769], 256],
                181: [[956], 256],
                184: [[32, 807], 256],
                185: [[49], 256],
                186: [[111], 256],
                188: [[49, 8260, 52], 256],
                189: [[49, 8260, 50], 256],
                190: [[51, 8260, 52], 256],
                192: [[65, 768]],
                193: [[65, 769]],
                194: [[65, 770], , {
                    768: 7846,
                    769: 7844,
                    771: 7850,
                    777: 7848
                }],
                195: [[65, 771]],
                196: [[65, 776], , {
                    772: 478
                }],
                197: [[65, 778], , {
                    769: 506
                }],
                198: [, , {
                    769: 508,
                    772: 482
                }],
                199: [[67, 807], , {
                    769: 7688
                }],
                200: [[69, 768]],
                201: [[69, 769]],
                202: [[69, 770], , {
                    768: 7872,
                    769: 7870,
                    771: 7876,
                    777: 7874
                }],
                203: [[69, 776]],
                204: [[73, 768]],
                205: [[73, 769]],
                206: [[73, 770]],
                207: [[73, 776], , {
                    769: 7726
                }],
                209: [[78, 771]],
                210: [[79, 768]],
                211: [[79, 769]],
                212: [[79, 770], , {
                    768: 7890,
                    769: 7888,
                    771: 7894,
                    777: 7892
                }],
                213: [[79, 771], , {
                    769: 7756,
                    772: 556,
                    776: 7758
                }],
                214: [[79, 776], , {
                    772: 554
                }],
                216: [, , {
                    769: 510
                }],
                217: [[85, 768]],
                218: [[85, 769]],
                219: [[85, 770]],
                220: [[85, 776], , {
                    768: 475,
                    769: 471,
                    772: 469,
                    780: 473
                }],
                221: [[89, 769]],
                224: [[97, 768]],
                225: [[97, 769]],
                226: [[97, 770], , {
                    768: 7847,
                    769: 7845,
                    771: 7851,
                    777: 7849
                }],
                227: [[97, 771]],
                228: [[97, 776], , {
                    772: 479
                }],
                229: [[97, 778], , {
                    769: 507
                }],
                230: [, , {
                    769: 509,
                    772: 483
                }],
                231: [[99, 807], , {
                    769: 7689
                }],
                232: [[101, 768]],
                233: [[101, 769]],
                234: [[101, 770], , {
                    768: 7873,
                    769: 7871,
                    771: 7877,
                    777: 7875
                }],
                235: [[101, 776]],
                236: [[105, 768]],
                237: [[105, 769]],
                238: [[105, 770]],
                239: [[105, 776], , {
                    769: 7727
                }],
                241: [[110, 771]],
                242: [[111, 768]],
                243: [[111, 769]],
                244: [[111, 770], , {
                    768: 7891,
                    769: 7889,
                    771: 7895,
                    777: 7893
                }],
                245: [[111, 771], , {
                    769: 7757,
                    772: 557,
                    776: 7759
                }],
                246: [[111, 776], , {
                    772: 555
                }],
                248: [, , {
                    769: 511
                }],
                249: [[117, 768]],
                250: [[117, 769]],
                251: [[117, 770]],
                252: [[117, 776], , {
                    768: 476,
                    769: 472,
                    772: 470,
                    780: 474
                }],
                253: [[121, 769]],
                255: [[121, 776]]
            },
            256: {
                256: [[65, 772]],
                257: [[97, 772]],
                258: [[65, 774], , {
                    768: 7856,
                    769: 7854,
                    771: 7860,
                    777: 7858
                }],
                259: [[97, 774], , {
                    768: 7857,
                    769: 7855,
                    771: 7861,
                    777: 7859
                }],
                260: [[65, 808]],
                261: [[97, 808]],
                262: [[67, 769]],
                263: [[99, 769]],
                264: [[67, 770]],
                265: [[99, 770]],
                266: [[67, 775]],
                267: [[99, 775]],
                268: [[67, 780]],
                269: [[99, 780]],
                270: [[68, 780]],
                271: [[100, 780]],
                274: [[69, 772], , {
                    768: 7700,
                    769: 7702
                }],
                275: [[101, 772], , {
                    768: 7701,
                    769: 7703
                }],
                276: [[69, 774]],
                277: [[101, 774]],
                278: [[69, 775]],
                279: [[101, 775]],
                280: [[69, 808]],
                281: [[101, 808]],
                282: [[69, 780]],
                283: [[101, 780]],
                284: [[71, 770]],
                285: [[103, 770]],
                286: [[71, 774]],
                287: [[103, 774]],
                288: [[71, 775]],
                289: [[103, 775]],
                290: [[71, 807]],
                291: [[103, 807]],
                292: [[72, 770]],
                293: [[104, 770]],
                296: [[73, 771]],
                297: [[105, 771]],
                298: [[73, 772]],
                299: [[105, 772]],
                300: [[73, 774]],
                301: [[105, 774]],
                302: [[73, 808]],
                303: [[105, 808]],
                304: [[73, 775]],
                306: [[73, 74], 256],
                307: [[105, 106], 256],
                308: [[74, 770]],
                309: [[106, 770]],
                310: [[75, 807]],
                311: [[107, 807]],
                313: [[76, 769]],
                314: [[108, 769]],
                315: [[76, 807]],
                316: [[108, 807]],
                317: [[76, 780]],
                318: [[108, 780]],
                319: [[76, 183], 256],
                320: [[108, 183], 256],
                323: [[78, 769]],
                324: [[110, 769]],
                325: [[78, 807]],
                326: [[110, 807]],
                327: [[78, 780]],
                328: [[110, 780]],
                329: [[700, 110], 256],
                332: [[79, 772], , {
                    768: 7760,
                    769: 7762
                }],
                333: [[111, 772], , {
                    768: 7761,
                    769: 7763
                }],
                334: [[79, 774]],
                335: [[111, 774]],
                336: [[79, 779]],
                337: [[111, 779]],
                340: [[82, 769]],
                341: [[114, 769]],
                342: [[82, 807]],
                343: [[114, 807]],
                344: [[82, 780]],
                345: [[114, 780]],
                346: [[83, 769], , {
                    775: 7780
                }],
                347: [[115, 769], , {
                    775: 7781
                }],
                348: [[83, 770]],
                349: [[115, 770]],
                350: [[83, 807]],
                351: [[115, 807]],
                352: [[83, 780], , {
                    775: 7782
                }],
                353: [[115, 780], , {
                    775: 7783
                }],
                354: [[84, 807]],
                355: [[116, 807]],
                356: [[84, 780]],
                357: [[116, 780]],
                360: [[85, 771], , {
                    769: 7800
                }],
                361: [[117, 771], , {
                    769: 7801
                }],
                362: [[85, 772], , {
                    776: 7802
                }],
                363: [[117, 772], , {
                    776: 7803
                }],
                364: [[85, 774]],
                365: [[117, 774]],
                366: [[85, 778]],
                367: [[117, 778]],
                368: [[85, 779]],
                369: [[117, 779]],
                370: [[85, 808]],
                371: [[117, 808]],
                372: [[87, 770]],
                373: [[119, 770]],
                374: [[89, 770]],
                375: [[121, 770]],
                376: [[89, 776]],
                377: [[90, 769]],
                378: [[122, 769]],
                379: [[90, 775]],
                380: [[122, 775]],
                381: [[90, 780]],
                382: [[122, 780]],
                383: [[115], 256, {
                    775: 7835
                }],
                416: [[79, 795], , {
                    768: 7900,
                    769: 7898,
                    771: 7904,
                    777: 7902,
                    803: 7906
                }],
                417: [[111, 795], , {
                    768: 7901,
                    769: 7899,
                    771: 7905,
                    777: 7903,
                    803: 7907
                }],
                431: [[85, 795], , {
                    768: 7914,
                    769: 7912,
                    771: 7918,
                    777: 7916,
                    803: 7920
                }],
                432: [[117, 795], , {
                    768: 7915,
                    769: 7913,
                    771: 7919,
                    777: 7917,
                    803: 7921
                }],
                439: [, , {
                    780: 494
                }],
                452: [[68, 381], 256],
                453: [[68, 382], 256],
                454: [[100, 382], 256],
                455: [[76, 74], 256],
                456: [[76, 106], 256],
                457: [[108, 106], 256],
                458: [[78, 74], 256],
                459: [[78, 106], 256],
                460: [[110, 106], 256],
                461: [[65, 780]],
                462: [[97, 780]],
                463: [[73, 780]],
                464: [[105, 780]],
                465: [[79, 780]],
                466: [[111, 780]],
                467: [[85, 780]],
                468: [[117, 780]],
                469: [[220, 772]],
                470: [[252, 772]],
                471: [[220, 769]],
                472: [[252, 769]],
                473: [[220, 780]],
                474: [[252, 780]],
                475: [[220, 768]],
                476: [[252, 768]],
                478: [[196, 772]],
                479: [[228, 772]],
                480: [[550, 772]],
                481: [[551, 772]],
                482: [[198, 772]],
                483: [[230, 772]],
                486: [[71, 780]],
                487: [[103, 780]],
                488: [[75, 780]],
                489: [[107, 780]],
                490: [[79, 808], , {
                    772: 492
                }],
                491: [[111, 808], , {
                    772: 493
                }],
                492: [[490, 772]],
                493: [[491, 772]],
                494: [[439, 780]],
                495: [[658, 780]],
                496: [[106, 780]],
                497: [[68, 90], 256],
                498: [[68, 122], 256],
                499: [[100, 122], 256],
                500: [[71, 769]],
                501: [[103, 769]],
                504: [[78, 768]],
                505: [[110, 768]],
                506: [[197, 769]],
                507: [[229, 769]],
                508: [[198, 769]],
                509: [[230, 769]],
                510: [[216, 769]],
                511: [[248, 769]],
                66045: [, 220]
            },
            512: {
                512: [[65, 783]],
                513: [[97, 783]],
                514: [[65, 785]],
                515: [[97, 785]],
                516: [[69, 783]],
                517: [[101, 783]],
                518: [[69, 785]],
                519: [[101, 785]],
                520: [[73, 783]],
                521: [[105, 783]],
                522: [[73, 785]],
                523: [[105, 785]],
                524: [[79, 783]],
                525: [[111, 783]],
                526: [[79, 785]],
                527: [[111, 785]],
                528: [[82, 783]],
                529: [[114, 783]],
                530: [[82, 785]],
                531: [[114, 785]],
                532: [[85, 783]],
                533: [[117, 783]],
                534: [[85, 785]],
                535: [[117, 785]],
                536: [[83, 806]],
                537: [[115, 806]],
                538: [[84, 806]],
                539: [[116, 806]],
                542: [[72, 780]],
                543: [[104, 780]],
                550: [[65, 775], , {
                    772: 480
                }],
                551: [[97, 775], , {
                    772: 481
                }],
                552: [[69, 807], , {
                    774: 7708
                }],
                553: [[101, 807], , {
                    774: 7709
                }],
                554: [[214, 772]],
                555: [[246, 772]],
                556: [[213, 772]],
                557: [[245, 772]],
                558: [[79, 775], , {
                    772: 560
                }],
                559: [[111, 775], , {
                    772: 561
                }],
                560: [[558, 772]],
                561: [[559, 772]],
                562: [[89, 772]],
                563: [[121, 772]],
                658: [, , {
                    780: 495
                }],
                688: [[104], 256],
                689: [[614], 256],
                690: [[106], 256],
                691: [[114], 256],
                692: [[633], 256],
                693: [[635], 256],
                694: [[641], 256],
                695: [[119], 256],
                696: [[121], 256],
                728: [[32, 774], 256],
                729: [[32, 775], 256],
                730: [[32, 778], 256],
                731: [[32, 808], 256],
                732: [[32, 771], 256],
                733: [[32, 779], 256],
                736: [[611], 256],
                737: [[108], 256],
                738: [[115], 256],
                739: [[120], 256],
                740: [[661], 256],
                66272: [, 220]
            },
            768: {
                768: [, 230],
                769: [, 230],
                770: [, 230],
                771: [, 230],
                772: [, 230],
                773: [, 230],
                774: [, 230],
                775: [, 230],
                776: [, 230, {
                    769: 836
                }],
                777: [, 230],
                778: [, 230],
                779: [, 230],
                780: [, 230],
                781: [, 230],
                782: [, 230],
                783: [, 230],
                784: [, 230],
                785: [, 230],
                786: [, 230],
                787: [, 230],
                788: [, 230],
                789: [, 232],
                790: [, 220],
                791: [, 220],
                792: [, 220],
                793: [, 220],
                794: [, 232],
                795: [, 216],
                796: [, 220],
                797: [, 220],
                798: [, 220],
                799: [, 220],
                800: [, 220],
                801: [, 202],
                802: [, 202],
                803: [, 220],
                804: [, 220],
                805: [, 220],
                806: [, 220],
                807: [, 202],
                808: [, 202],
                809: [, 220],
                810: [, 220],
                811: [, 220],
                812: [, 220],
                813: [, 220],
                814: [, 220],
                815: [, 220],
                816: [, 220],
                817: [, 220],
                818: [, 220],
                819: [, 220],
                820: [, 1],
                821: [, 1],
                822: [, 1],
                823: [, 1],
                824: [, 1],
                825: [, 220],
                826: [, 220],
                827: [, 220],
                828: [, 220],
                829: [, 230],
                830: [, 230],
                831: [, 230],
                832: [[768], 230],
                833: [[769], 230],
                834: [, 230],
                835: [[787], 230],
                836: [[776, 769], 230],
                837: [, 240],
                838: [, 230],
                839: [, 220],
                840: [, 220],
                841: [, 220],
                842: [, 230],
                843: [, 230],
                844: [, 230],
                845: [, 220],
                846: [, 220],
                848: [, 230],
                849: [, 230],
                850: [, 230],
                851: [, 220],
                852: [, 220],
                853: [, 220],
                854: [, 220],
                855: [, 230],
                856: [, 232],
                857: [, 220],
                858: [, 220],
                859: [, 230],
                860: [, 233],
                861: [, 234],
                862: [, 234],
                863: [, 233],
                864: [, 234],
                865: [, 234],
                866: [, 233],
                867: [, 230],
                868: [, 230],
                869: [, 230],
                870: [, 230],
                871: [, 230],
                872: [, 230],
                873: [, 230],
                874: [, 230],
                875: [, 230],
                876: [, 230],
                877: [, 230],
                878: [, 230],
                879: [, 230],
                884: [[697]],
                890: [[32, 837], 256],
                894: [[59]],
                900: [[32, 769], 256],
                901: [[168, 769]],
                902: [[913, 769]],
                903: [[183]],
                904: [[917, 769]],
                905: [[919, 769]],
                906: [[921, 769]],
                908: [[927, 769]],
                910: [[933, 769]],
                911: [[937, 769]],
                912: [[970, 769]],
                913: [, , {
                    768: 8122,
                    769: 902,
                    772: 8121,
                    774: 8120,
                    787: 7944,
                    788: 7945,
                    837: 8124
                }],
                917: [, , {
                    768: 8136,
                    769: 904,
                    787: 7960,
                    788: 7961
                }],
                919: [, , {
                    768: 8138,
                    769: 905,
                    787: 7976,
                    788: 7977,
                    837: 8140
                }],
                921: [, , {
                    768: 8154,
                    769: 906,
                    772: 8153,
                    774: 8152,
                    776: 938,
                    787: 7992,
                    788: 7993
                }],
                927: [, , {
                    768: 8184,
                    769: 908,
                    787: 8008,
                    788: 8009
                }],
                929: [, , {
                    788: 8172
                }],
                933: [, , {
                    768: 8170,
                    769: 910,
                    772: 8169,
                    774: 8168,
                    776: 939,
                    788: 8025
                }],
                937: [, , {
                    768: 8186,
                    769: 911,
                    787: 8040,
                    788: 8041,
                    837: 8188
                }],
                938: [[921, 776]],
                939: [[933, 776]],
                940: [[945, 769], , {
                    837: 8116
                }],
                941: [[949, 769]],
                942: [[951, 769], , {
                    837: 8132
                }],
                943: [[953, 769]],
                944: [[971, 769]],
                945: [, , {
                    768: 8048,
                    769: 940,
                    772: 8113,
                    774: 8112,
                    787: 7936,
                    788: 7937,
                    834: 8118,
                    837: 8115
                }],
                949: [, , {
                    768: 8050,
                    769: 941,
                    787: 7952,
                    788: 7953
                }],
                951: [, , {
                    768: 8052,
                    769: 942,
                    787: 7968,
                    788: 7969,
                    834: 8134,
                    837: 8131
                }],
                953: [, , {
                    768: 8054,
                    769: 943,
                    772: 8145,
                    774: 8144,
                    776: 970,
                    787: 7984,
                    788: 7985,
                    834: 8150
                }],
                959: [, , {
                    768: 8056,
                    769: 972,
                    787: 8e3,
                    788: 8001
                }],
                961: [, , {
                    787: 8164,
                    788: 8165
                }],
                965: [, , {
                    768: 8058,
                    769: 973,
                    772: 8161,
                    774: 8160,
                    776: 971,
                    787: 8016,
                    788: 8017,
                    834: 8166
                }],
                969: [, , {
                    768: 8060,
                    769: 974,
                    787: 8032,
                    788: 8033,
                    834: 8182,
                    837: 8179
                }],
                970: [[953, 776], , {
                    768: 8146,
                    769: 912,
                    834: 8151
                }],
                971: [[965, 776], , {
                    768: 8162,
                    769: 944,
                    834: 8167
                }],
                972: [[959, 769]],
                973: [[965, 769]],
                974: [[969, 769], , {
                    837: 8180
                }],
                976: [[946], 256],
                977: [[952], 256],
                978: [[933], 256, {
                    769: 979,
                    776: 980
                }],
                979: [[978, 769]],
                980: [[978, 776]],
                981: [[966], 256],
                982: [[960], 256],
                1008: [[954], 256],
                1009: [[961], 256],
                1010: [[962], 256],
                1012: [[920], 256],
                1013: [[949], 256],
                1017: [[931], 256],
                66422: [, 230],
                66423: [, 230],
                66424: [, 230],
                66425: [, 230],
                66426: [, 230]
            },
            1024: {
                1024: [[1045, 768]],
                1025: [[1045, 776]],
                1027: [[1043, 769]],
                1030: [, , {
                    776: 1031
                }],
                1031: [[1030, 776]],
                1036: [[1050, 769]],
                1037: [[1048, 768]],
                1038: [[1059, 774]],
                1040: [, , {
                    774: 1232,
                    776: 1234
                }],
                1043: [, , {
                    769: 1027
                }],
                1045: [, , {
                    768: 1024,
                    774: 1238,
                    776: 1025
                }],
                1046: [, , {
                    774: 1217,
                    776: 1244
                }],
                1047: [, , {
                    776: 1246
                }],
                1048: [, , {
                    768: 1037,
                    772: 1250,
                    774: 1049,
                    776: 1252
                }],
                1049: [[1048, 774]],
                1050: [, , {
                    769: 1036
                }],
                1054: [, , {
                    776: 1254
                }],
                1059: [, , {
                    772: 1262,
                    774: 1038,
                    776: 1264,
                    779: 1266
                }],
                1063: [, , {
                    776: 1268
                }],
                1067: [, , {
                    776: 1272
                }],
                1069: [, , {
                    776: 1260
                }],
                1072: [, , {
                    774: 1233,
                    776: 1235
                }],
                1075: [, , {
                    769: 1107
                }],
                1077: [, , {
                    768: 1104,
                    774: 1239,
                    776: 1105
                }],
                1078: [, , {
                    774: 1218,
                    776: 1245
                }],
                1079: [, , {
                    776: 1247
                }],
                1080: [, , {
                    768: 1117,
                    772: 1251,
                    774: 1081,
                    776: 1253
                }],
                1081: [[1080, 774]],
                1082: [, , {
                    769: 1116
                }],
                1086: [, , {
                    776: 1255
                }],
                1091: [, , {
                    772: 1263,
                    774: 1118,
                    776: 1265,
                    779: 1267
                }],
                1095: [, , {
                    776: 1269
                }],
                1099: [, , {
                    776: 1273
                }],
                1101: [, , {
                    776: 1261
                }],
                1104: [[1077, 768]],
                1105: [[1077, 776]],
                1107: [[1075, 769]],
                1110: [, , {
                    776: 1111
                }],
                1111: [[1110, 776]],
                1116: [[1082, 769]],
                1117: [[1080, 768]],
                1118: [[1091, 774]],
                1140: [, , {
                    783: 1142
                }],
                1141: [, , {
                    783: 1143
                }],
                1142: [[1140, 783]],
                1143: [[1141, 783]],
                1155: [, 230],
                1156: [, 230],
                1157: [, 230],
                1158: [, 230],
                1159: [, 230],
                1217: [[1046, 774]],
                1218: [[1078, 774]],
                1232: [[1040, 774]],
                1233: [[1072, 774]],
                1234: [[1040, 776]],
                1235: [[1072, 776]],
                1238: [[1045, 774]],
                1239: [[1077, 774]],
                1240: [, , {
                    776: 1242
                }],
                1241: [, , {
                    776: 1243
                }],
                1242: [[1240, 776]],
                1243: [[1241, 776]],
                1244: [[1046, 776]],
                1245: [[1078, 776]],
                1246: [[1047, 776]],
                1247: [[1079, 776]],
                1250: [[1048, 772]],
                1251: [[1080, 772]],
                1252: [[1048, 776]],
                1253: [[1080, 776]],
                1254: [[1054, 776]],
                1255: [[1086, 776]],
                1256: [, , {
                    776: 1258
                }],
                1257: [, , {
                    776: 1259
                }],
                1258: [[1256, 776]],
                1259: [[1257, 776]],
                1260: [[1069, 776]],
                1261: [[1101, 776]],
                1262: [[1059, 772]],
                1263: [[1091, 772]],
                1264: [[1059, 776]],
                1265: [[1091, 776]],
                1266: [[1059, 779]],
                1267: [[1091, 779]],
                1268: [[1063, 776]],
                1269: [[1095, 776]],
                1272: [[1067, 776]],
                1273: [[1099, 776]]
            },
            1280: {
                1415: [[1381, 1410], 256],
                1425: [, 220],
                1426: [, 230],
                1427: [, 230],
                1428: [, 230],
                1429: [, 230],
                1430: [, 220],
                1431: [, 230],
                1432: [, 230],
                1433: [, 230],
                1434: [, 222],
                1435: [, 220],
                1436: [, 230],
                1437: [, 230],
                1438: [, 230],
                1439: [, 230],
                1440: [, 230],
                1441: [, 230],
                1442: [, 220],
                1443: [, 220],
                1444: [, 220],
                1445: [, 220],
                1446: [, 220],
                1447: [, 220],
                1448: [, 230],
                1449: [, 230],
                1450: [, 220],
                1451: [, 230],
                1452: [, 230],
                1453: [, 222],
                1454: [, 228],
                1455: [, 230],
                1456: [, 10],
                1457: [, 11],
                1458: [, 12],
                1459: [, 13],
                1460: [, 14],
                1461: [, 15],
                1462: [, 16],
                1463: [, 17],
                1464: [, 18],
                1465: [, 19],
                1466: [, 19],
                1467: [, 20],
                1468: [, 21],
                1469: [, 22],
                1471: [, 23],
                1473: [, 24],
                1474: [, 25],
                1476: [, 230],
                1477: [, 220],
                1479: [, 18]
            },
            1536: {
                1552: [, 230],
                1553: [, 230],
                1554: [, 230],
                1555: [, 230],
                1556: [, 230],
                1557: [, 230],
                1558: [, 230],
                1559: [, 230],
                1560: [, 30],
                1561: [, 31],
                1562: [, 32],
                1570: [[1575, 1619]],
                1571: [[1575, 1620]],
                1572: [[1608, 1620]],
                1573: [[1575, 1621]],
                1574: [[1610, 1620]],
                1575: [, , {
                    1619: 1570,
                    1620: 1571,
                    1621: 1573
                }],
                1608: [, , {
                    1620: 1572
                }],
                1610: [, , {
                    1620: 1574
                }],
                1611: [, 27],
                1612: [, 28],
                1613: [, 29],
                1614: [, 30],
                1615: [, 31],
                1616: [, 32],
                1617: [, 33],
                1618: [, 34],
                1619: [, 230],
                1620: [, 230],
                1621: [, 220],
                1622: [, 220],
                1623: [, 230],
                1624: [, 230],
                1625: [, 230],
                1626: [, 230],
                1627: [, 230],
                1628: [, 220],
                1629: [, 230],
                1630: [, 230],
                1631: [, 220],
                1648: [, 35],
                1653: [[1575, 1652], 256],
                1654: [[1608, 1652], 256],
                1655: [[1735, 1652], 256],
                1656: [[1610, 1652], 256],
                1728: [[1749, 1620]],
                1729: [, , {
                    1620: 1730
                }],
                1730: [[1729, 1620]],
                1746: [, , {
                    1620: 1747
                }],
                1747: [[1746, 1620]],
                1749: [, , {
                    1620: 1728
                }],
                1750: [, 230],
                1751: [, 230],
                1752: [, 230],
                1753: [, 230],
                1754: [, 230],
                1755: [, 230],
                1756: [, 230],
                1759: [, 230],
                1760: [, 230],
                1761: [, 230],
                1762: [, 230],
                1763: [, 220],
                1764: [, 230],
                1767: [, 230],
                1768: [, 230],
                1770: [, 220],
                1771: [, 230],
                1772: [, 230],
                1773: [, 220]
            },
            1792: {
                1809: [, 36],
                1840: [, 230],
                1841: [, 220],
                1842: [, 230],
                1843: [, 230],
                1844: [, 220],
                1845: [, 230],
                1846: [, 230],
                1847: [, 220],
                1848: [, 220],
                1849: [, 220],
                1850: [, 230],
                1851: [, 220],
                1852: [, 220],
                1853: [, 230],
                1854: [, 220],
                1855: [, 230],
                1856: [, 230],
                1857: [, 230],
                1858: [, 220],
                1859: [, 230],
                1860: [, 220],
                1861: [, 230],
                1862: [, 220],
                1863: [, 230],
                1864: [, 220],
                1865: [, 230],
                1866: [, 230],
                2027: [, 230],
                2028: [, 230],
                2029: [, 230],
                2030: [, 230],
                2031: [, 230],
                2032: [, 230],
                2033: [, 230],
                2034: [, 220],
                2035: [, 230]
            },
            2048: {
                2070: [, 230],
                2071: [, 230],
                2072: [, 230],
                2073: [, 230],
                2075: [, 230],
                2076: [, 230],
                2077: [, 230],
                2078: [, 230],
                2079: [, 230],
                2080: [, 230],
                2081: [, 230],
                2082: [, 230],
                2083: [, 230],
                2085: [, 230],
                2086: [, 230],
                2087: [, 230],
                2089: [, 230],
                2090: [, 230],
                2091: [, 230],
                2092: [, 230],
                2093: [, 230],
                2137: [, 220],
                2138: [, 220],
                2139: [, 220],
                2276: [, 230],
                2277: [, 230],
                2278: [, 220],
                2279: [, 230],
                2280: [, 230],
                2281: [, 220],
                2282: [, 230],
                2283: [, 230],
                2284: [, 230],
                2285: [, 220],
                2286: [, 220],
                2287: [, 220],
                2288: [, 27],
                2289: [, 28],
                2290: [, 29],
                2291: [, 230],
                2292: [, 230],
                2293: [, 230],
                2294: [, 220],
                2295: [, 230],
                2296: [, 230],
                2297: [, 220],
                2298: [, 220],
                2299: [, 230],
                2300: [, 230],
                2301: [, 230],
                2302: [, 230],
                2303: [, 230]
            },
            2304: {
                2344: [, , {
                    2364: 2345
                }],
                2345: [[2344, 2364]],
                2352: [, , {
                    2364: 2353
                }],
                2353: [[2352, 2364]],
                2355: [, , {
                    2364: 2356
                }],
                2356: [[2355, 2364]],
                2364: [, 7],
                2381: [, 9],
                2385: [, 230],
                2386: [, 220],
                2387: [, 230],
                2388: [, 230],
                2392: [[2325, 2364], 512],
                2393: [[2326, 2364], 512],
                2394: [[2327, 2364], 512],
                2395: [[2332, 2364], 512],
                2396: [[2337, 2364], 512],
                2397: [[2338, 2364], 512],
                2398: [[2347, 2364], 512],
                2399: [[2351, 2364], 512],
                2492: [, 7],
                2503: [, , {
                    2494: 2507,
                    2519: 2508
                }],
                2507: [[2503, 2494]],
                2508: [[2503, 2519]],
                2509: [, 9],
                2524: [[2465, 2492], 512],
                2525: [[2466, 2492], 512],
                2527: [[2479, 2492], 512]
            },
            2560: {
                2611: [[2610, 2620], 512],
                2614: [[2616, 2620], 512],
                2620: [, 7],
                2637: [, 9],
                2649: [[2582, 2620], 512],
                2650: [[2583, 2620], 512],
                2651: [[2588, 2620], 512],
                2654: [[2603, 2620], 512],
                2748: [, 7],
                2765: [, 9],
                68109: [, 220],
                68111: [, 230],
                68152: [, 230],
                68153: [, 1],
                68154: [, 220],
                68159: [, 9],
                68325: [, 230],
                68326: [, 220]
            },
            2816: {
                2876: [, 7],
                2887: [, , {
                    2878: 2891,
                    2902: 2888,
                    2903: 2892
                }],
                2888: [[2887, 2902]],
                2891: [[2887, 2878]],
                2892: [[2887, 2903]],
                2893: [, 9],
                2908: [[2849, 2876], 512],
                2909: [[2850, 2876], 512],
                2962: [, , {
                    3031: 2964
                }],
                2964: [[2962, 3031]],
                3014: [, , {
                    3006: 3018,
                    3031: 3020
                }],
                3015: [, , {
                    3006: 3019
                }],
                3018: [[3014, 3006]],
                3019: [[3015, 3006]],
                3020: [[3014, 3031]],
                3021: [, 9]
            },
            3072: {
                3142: [, , {
                    3158: 3144
                }],
                3144: [[3142, 3158]],
                3149: [, 9],
                3157: [, 84],
                3158: [, 91],
                3260: [, 7],
                3263: [, , {
                    3285: 3264
                }],
                3264: [[3263, 3285]],
                3270: [, , {
                    3266: 3274,
                    3285: 3271,
                    3286: 3272
                }],
                3271: [[3270, 3285]],
                3272: [[3270, 3286]],
                3274: [[3270, 3266], , {
                    3285: 3275
                }],
                3275: [[3274, 3285]],
                3277: [, 9]
            },
            3328: {
                3398: [, , {
                    3390: 3402,
                    3415: 3404
                }],
                3399: [, , {
                    3390: 3403
                }],
                3402: [[3398, 3390]],
                3403: [[3399, 3390]],
                3404: [[3398, 3415]],
                3405: [, 9],
                3530: [, 9],
                3545: [, , {
                    3530: 3546,
                    3535: 3548,
                    3551: 3550
                }],
                3546: [[3545, 3530]],
                3548: [[3545, 3535], , {
                    3530: 3549
                }],
                3549: [[3548, 3530]],
                3550: [[3545, 3551]]
            },
            3584: {
                3635: [[3661, 3634], 256],
                3640: [, 103],
                3641: [, 103],
                3642: [, 9],
                3656: [, 107],
                3657: [, 107],
                3658: [, 107],
                3659: [, 107],
                3763: [[3789, 3762], 256],
                3768: [, 118],
                3769: [, 118],
                3784: [, 122],
                3785: [, 122],
                3786: [, 122],
                3787: [, 122],
                3804: [[3755, 3737], 256],
                3805: [[3755, 3745], 256]
            },
            3840: {
                3852: [[3851], 256],
                3864: [, 220],
                3865: [, 220],
                3893: [, 220],
                3895: [, 220],
                3897: [, 216],
                3907: [[3906, 4023], 512],
                3917: [[3916, 4023], 512],
                3922: [[3921, 4023], 512],
                3927: [[3926, 4023], 512],
                3932: [[3931, 4023], 512],
                3945: [[3904, 4021], 512],
                3953: [, 129],
                3954: [, 130],
                3955: [[3953, 3954], 512],
                3956: [, 132],
                3957: [[3953, 3956], 512],
                3958: [[4018, 3968], 512],
                3959: [[4018, 3969], 256],
                3960: [[4019, 3968], 512],
                3961: [[4019, 3969], 256],
                3962: [, 130],
                3963: [, 130],
                3964: [, 130],
                3965: [, 130],
                3968: [, 130],
                3969: [[3953, 3968], 512],
                3970: [, 230],
                3971: [, 230],
                3972: [, 9],
                3974: [, 230],
                3975: [, 230],
                3987: [[3986, 4023], 512],
                3997: [[3996, 4023], 512],
                4002: [[4001, 4023], 512],
                4007: [[4006, 4023], 512],
                4012: [[4011, 4023], 512],
                4025: [[3984, 4021], 512],
                4038: [, 220]
            },
            4096: {
                4133: [, , {
                    4142: 4134
                }],
                4134: [[4133, 4142]],
                4151: [, 7],
                4153: [, 9],
                4154: [, 9],
                4237: [, 220],
                4348: [[4316], 256],
                69702: [, 9],
                69759: [, 9],
                69785: [, , {
                    69818: 69786
                }],
                69786: [[69785, 69818]],
                69787: [, , {
                    69818: 69788
                }],
                69788: [[69787, 69818]],
                69797: [, , {
                    69818: 69803
                }],
                69803: [[69797, 69818]],
                69817: [, 9],
                69818: [, 7]
            },
            4352: {
                69888: [, 230],
                69889: [, 230],
                69890: [, 230],
                69934: [[69937, 69927]],
                69935: [[69938, 69927]],
                69937: [, , {
                    69927: 69934
                }],
                69938: [, , {
                    69927: 69935
                }],
                69939: [, 9],
                69940: [, 9],
                70003: [, 7],
                70080: [, 9]
            },
            4608: {
                70197: [, 9],
                70198: [, 7],
                70377: [, 7],
                70378: [, 9]
            },
            4864: {
                4957: [, 230],
                4958: [, 230],
                4959: [, 230],
                70460: [, 7],
                70471: [, , {
                    70462: 70475,
                    70487: 70476
                }],
                70475: [[70471, 70462]],
                70476: [[70471, 70487]],
                70477: [, 9],
                70502: [, 230],
                70503: [, 230],
                70504: [, 230],
                70505: [, 230],
                70506: [, 230],
                70507: [, 230],
                70508: [, 230],
                70512: [, 230],
                70513: [, 230],
                70514: [, 230],
                70515: [, 230],
                70516: [, 230]
            },
            5120: {
                70841: [, , {
                    70832: 70844,
                    70842: 70843,
                    70845: 70846
                }],
                70843: [[70841, 70842]],
                70844: [[70841, 70832]],
                70846: [[70841, 70845]],
                70850: [, 9],
                70851: [, 7]
            },
            5376: {
                71096: [, , {
                    71087: 71098
                }],
                71097: [, , {
                    71087: 71099
                }],
                71098: [[71096, 71087]],
                71099: [[71097, 71087]],
                71103: [, 9],
                71104: [, 7]
            },
            5632: {
                71231: [, 9],
                71350: [, 9],
                71351: [, 7]
            },
            5888: {
                5908: [, 9],
                5940: [, 9],
                6098: [, 9],
                6109: [, 230]
            },
            6144: {
                6313: [, 228]
            },
            6400: {
                6457: [, 222],
                6458: [, 230],
                6459: [, 220]
            },
            6656: {
                6679: [, 230],
                6680: [, 220],
                6752: [, 9],
                6773: [, 230],
                6774: [, 230],
                6775: [, 230],
                6776: [, 230],
                6777: [, 230],
                6778: [, 230],
                6779: [, 230],
                6780: [, 230],
                6783: [, 220],
                6832: [, 230],
                6833: [, 230],
                6834: [, 230],
                6835: [, 230],
                6836: [, 230],
                6837: [, 220],
                6838: [, 220],
                6839: [, 220],
                6840: [, 220],
                6841: [, 220],
                6842: [, 220],
                6843: [, 230],
                6844: [, 230],
                6845: [, 220]
            },
            6912: {
                6917: [, , {
                    6965: 6918
                }],
                6918: [[6917, 6965]],
                6919: [, , {
                    6965: 6920
                }],
                6920: [[6919, 6965]],
                6921: [, , {
                    6965: 6922
                }],
                6922: [[6921, 6965]],
                6923: [, , {
                    6965: 6924
                }],
                6924: [[6923, 6965]],
                6925: [, , {
                    6965: 6926
                }],
                6926: [[6925, 6965]],
                6929: [, , {
                    6965: 6930
                }],
                6930: [[6929, 6965]],
                6964: [, 7],
                6970: [, , {
                    6965: 6971
                }],
                6971: [[6970, 6965]],
                6972: [, , {
                    6965: 6973
                }],
                6973: [[6972, 6965]],
                6974: [, , {
                    6965: 6976
                }],
                6975: [, , {
                    6965: 6977
                }],
                6976: [[6974, 6965]],
                6977: [[6975, 6965]],
                6978: [, , {
                    6965: 6979
                }],
                6979: [[6978, 6965]],
                6980: [, 9],
                7019: [, 230],
                7020: [, 220],
                7021: [, 230],
                7022: [, 230],
                7023: [, 230],
                7024: [, 230],
                7025: [, 230],
                7026: [, 230],
                7027: [, 230],
                7082: [, 9],
                7083: [, 9],
                7142: [, 7],
                7154: [, 9],
                7155: [, 9]
            },
            7168: {
                7223: [, 7],
                7376: [, 230],
                7377: [, 230],
                7378: [, 230],
                7380: [, 1],
                7381: [, 220],
                7382: [, 220],
                7383: [, 220],
                7384: [, 220],
                7385: [, 220],
                7386: [, 230],
                7387: [, 230],
                7388: [, 220],
                7389: [, 220],
                7390: [, 220],
                7391: [, 220],
                7392: [, 230],
                7394: [, 1],
                7395: [, 1],
                7396: [, 1],
                7397: [, 1],
                7398: [, 1],
                7399: [, 1],
                7400: [, 1],
                7405: [, 220],
                7412: [, 230],
                7416: [, 230],
                7417: [, 230]
            },
            7424: {
                7468: [[65], 256],
                7469: [[198], 256],
                7470: [[66], 256],
                7472: [[68], 256],
                7473: [[69], 256],
                7474: [[398], 256],
                7475: [[71], 256],
                7476: [[72], 256],
                7477: [[73], 256],
                7478: [[74], 256],
                7479: [[75], 256],
                7480: [[76], 256],
                7481: [[77], 256],
                7482: [[78], 256],
                7484: [[79], 256],
                7485: [[546], 256],
                7486: [[80], 256],
                7487: [[82], 256],
                7488: [[84], 256],
                7489: [[85], 256],
                7490: [[87], 256],
                7491: [[97], 256],
                7492: [[592], 256],
                7493: [[593], 256],
                7494: [[7426], 256],
                7495: [[98], 256],
                7496: [[100], 256],
                7497: [[101], 256],
                7498: [[601], 256],
                7499: [[603], 256],
                7500: [[604], 256],
                7501: [[103], 256],
                7503: [[107], 256],
                7504: [[109], 256],
                7505: [[331], 256],
                7506: [[111], 256],
                7507: [[596], 256],
                7508: [[7446], 256],
                7509: [[7447], 256],
                7510: [[112], 256],
                7511: [[116], 256],
                7512: [[117], 256],
                7513: [[7453], 256],
                7514: [[623], 256],
                7515: [[118], 256],
                7516: [[7461], 256],
                7517: [[946], 256],
                7518: [[947], 256],
                7519: [[948], 256],
                7520: [[966], 256],
                7521: [[967], 256],
                7522: [[105], 256],
                7523: [[114], 256],
                7524: [[117], 256],
                7525: [[118], 256],
                7526: [[946], 256],
                7527: [[947], 256],
                7528: [[961], 256],
                7529: [[966], 256],
                7530: [[967], 256],
                7544: [[1085], 256],
                7579: [[594], 256],
                7580: [[99], 256],
                7581: [[597], 256],
                7582: [[240], 256],
                7583: [[604], 256],
                7584: [[102], 256],
                7585: [[607], 256],
                7586: [[609], 256],
                7587: [[613], 256],
                7588: [[616], 256],
                7589: [[617], 256],
                7590: [[618], 256],
                7591: [[7547], 256],
                7592: [[669], 256],
                7593: [[621], 256],
                7594: [[7557], 256],
                7595: [[671], 256],
                7596: [[625], 256],
                7597: [[624], 256],
                7598: [[626], 256],
                7599: [[627], 256],
                7600: [[628], 256],
                7601: [[629], 256],
                7602: [[632], 256],
                7603: [[642], 256],
                7604: [[643], 256],
                7605: [[427], 256],
                7606: [[649], 256],
                7607: [[650], 256],
                7608: [[7452], 256],
                7609: [[651], 256],
                7610: [[652], 256],
                7611: [[122], 256],
                7612: [[656], 256],
                7613: [[657], 256],
                7614: [[658], 256],
                7615: [[952], 256],
                7616: [, 230],
                7617: [, 230],
                7618: [, 220],
                7619: [, 230],
                7620: [, 230],
                7621: [, 230],
                7622: [, 230],
                7623: [, 230],
                7624: [, 230],
                7625: [, 230],
                7626: [, 220],
                7627: [, 230],
                7628: [, 230],
                7629: [, 234],
                7630: [, 214],
                7631: [, 220],
                7632: [, 202],
                7633: [, 230],
                7634: [, 230],
                7635: [, 230],
                7636: [, 230],
                7637: [, 230],
                7638: [, 230],
                7639: [, 230],
                7640: [, 230],
                7641: [, 230],
                7642: [, 230],
                7643: [, 230],
                7644: [, 230],
                7645: [, 230],
                7646: [, 230],
                7647: [, 230],
                7648: [, 230],
                7649: [, 230],
                7650: [, 230],
                7651: [, 230],
                7652: [, 230],
                7653: [, 230],
                7654: [, 230],
                7655: [, 230],
                7656: [, 230],
                7657: [, 230],
                7658: [, 230],
                7659: [, 230],
                7660: [, 230],
                7661: [, 230],
                7662: [, 230],
                7663: [, 230],
                7664: [, 230],
                7665: [, 230],
                7666: [, 230],
                7667: [, 230],
                7668: [, 230],
                7669: [, 230],
                7676: [, 233],
                7677: [, 220],
                7678: [, 230],
                7679: [, 220]
            },
            7680: {
                7680: [[65, 805]],
                7681: [[97, 805]],
                7682: [[66, 775]],
                7683: [[98, 775]],
                7684: [[66, 803]],
                7685: [[98, 803]],
                7686: [[66, 817]],
                7687: [[98, 817]],
                7688: [[199, 769]],
                7689: [[231, 769]],
                7690: [[68, 775]],
                7691: [[100, 775]],
                7692: [[68, 803]],
                7693: [[100, 803]],
                7694: [[68, 817]],
                7695: [[100, 817]],
                7696: [[68, 807]],
                7697: [[100, 807]],
                7698: [[68, 813]],
                7699: [[100, 813]],
                7700: [[274, 768]],
                7701: [[275, 768]],
                7702: [[274, 769]],
                7703: [[275, 769]],
                7704: [[69, 813]],
                7705: [[101, 813]],
                7706: [[69, 816]],
                7707: [[101, 816]],
                7708: [[552, 774]],
                7709: [[553, 774]],
                7710: [[70, 775]],
                7711: [[102, 775]],
                7712: [[71, 772]],
                7713: [[103, 772]],
                7714: [[72, 775]],
                7715: [[104, 775]],
                7716: [[72, 803]],
                7717: [[104, 803]],
                7718: [[72, 776]],
                7719: [[104, 776]],
                7720: [[72, 807]],
                7721: [[104, 807]],
                7722: [[72, 814]],
                7723: [[104, 814]],
                7724: [[73, 816]],
                7725: [[105, 816]],
                7726: [[207, 769]],
                7727: [[239, 769]],
                7728: [[75, 769]],
                7729: [[107, 769]],
                7730: [[75, 803]],
                7731: [[107, 803]],
                7732: [[75, 817]],
                7733: [[107, 817]],
                7734: [[76, 803], , {
                    772: 7736
                }],
                7735: [[108, 803], , {
                    772: 7737
                }],
                7736: [[7734, 772]],
                7737: [[7735, 772]],
                7738: [[76, 817]],
                7739: [[108, 817]],
                7740: [[76, 813]],
                7741: [[108, 813]],
                7742: [[77, 769]],
                7743: [[109, 769]],
                7744: [[77, 775]],
                7745: [[109, 775]],
                7746: [[77, 803]],
                7747: [[109, 803]],
                7748: [[78, 775]],
                7749: [[110, 775]],
                7750: [[78, 803]],
                7751: [[110, 803]],
                7752: [[78, 817]],
                7753: [[110, 817]],
                7754: [[78, 813]],
                7755: [[110, 813]],
                7756: [[213, 769]],
                7757: [[245, 769]],
                7758: [[213, 776]],
                7759: [[245, 776]],
                7760: [[332, 768]],
                7761: [[333, 768]],
                7762: [[332, 769]],
                7763: [[333, 769]],
                7764: [[80, 769]],
                7765: [[112, 769]],
                7766: [[80, 775]],
                7767: [[112, 775]],
                7768: [[82, 775]],
                7769: [[114, 775]],
                7770: [[82, 803], , {
                    772: 7772
                }],
                7771: [[114, 803], , {
                    772: 7773
                }],
                7772: [[7770, 772]],
                7773: [[7771, 772]],
                7774: [[82, 817]],
                7775: [[114, 817]],
                7776: [[83, 775]],
                7777: [[115, 775]],
                7778: [[83, 803], , {
                    775: 7784
                }],
                7779: [[115, 803], , {
                    775: 7785
                }],
                7780: [[346, 775]],
                7781: [[347, 775]],
                7782: [[352, 775]],
                7783: [[353, 775]],
                7784: [[7778, 775]],
                7785: [[7779, 775]],
                7786: [[84, 775]],
                7787: [[116, 775]],
                7788: [[84, 803]],
                7789: [[116, 803]],
                7790: [[84, 817]],
                7791: [[116, 817]],
                7792: [[84, 813]],
                7793: [[116, 813]],
                7794: [[85, 804]],
                7795: [[117, 804]],
                7796: [[85, 816]],
                7797: [[117, 816]],
                7798: [[85, 813]],
                7799: [[117, 813]],
                7800: [[360, 769]],
                7801: [[361, 769]],
                7802: [[362, 776]],
                7803: [[363, 776]],
                7804: [[86, 771]],
                7805: [[118, 771]],
                7806: [[86, 803]],
                7807: [[118, 803]],
                7808: [[87, 768]],
                7809: [[119, 768]],
                7810: [[87, 769]],
                7811: [[119, 769]],
                7812: [[87, 776]],
                7813: [[119, 776]],
                7814: [[87, 775]],
                7815: [[119, 775]],
                7816: [[87, 803]],
                7817: [[119, 803]],
                7818: [[88, 775]],
                7819: [[120, 775]],
                7820: [[88, 776]],
                7821: [[120, 776]],
                7822: [[89, 775]],
                7823: [[121, 775]],
                7824: [[90, 770]],
                7825: [[122, 770]],
                7826: [[90, 803]],
                7827: [[122, 803]],
                7828: [[90, 817]],
                7829: [[122, 817]],
                7830: [[104, 817]],
                7831: [[116, 776]],
                7832: [[119, 778]],
                7833: [[121, 778]],
                7834: [[97, 702], 256],
                7835: [[383, 775]],
                7840: [[65, 803], , {
                    770: 7852,
                    774: 7862
                }],
                7841: [[97, 803], , {
                    770: 7853,
                    774: 7863
                }],
                7842: [[65, 777]],
                7843: [[97, 777]],
                7844: [[194, 769]],
                7845: [[226, 769]],
                7846: [[194, 768]],
                7847: [[226, 768]],
                7848: [[194, 777]],
                7849: [[226, 777]],
                7850: [[194, 771]],
                7851: [[226, 771]],
                7852: [[7840, 770]],
                7853: [[7841, 770]],
                7854: [[258, 769]],
                7855: [[259, 769]],
                7856: [[258, 768]],
                7857: [[259, 768]],
                7858: [[258, 777]],
                7859: [[259, 777]],
                7860: [[258, 771]],
                7861: [[259, 771]],
                7862: [[7840, 774]],
                7863: [[7841, 774]],
                7864: [[69, 803], , {
                    770: 7878
                }],
                7865: [[101, 803], , {
                    770: 7879
                }],
                7866: [[69, 777]],
                7867: [[101, 777]],
                7868: [[69, 771]],
                7869: [[101, 771]],
                7870: [[202, 769]],
                7871: [[234, 769]],
                7872: [[202, 768]],
                7873: [[234, 768]],
                7874: [[202, 777]],
                7875: [[234, 777]],
                7876: [[202, 771]],
                7877: [[234, 771]],
                7878: [[7864, 770]],
                7879: [[7865, 770]],
                7880: [[73, 777]],
                7881: [[105, 777]],
                7882: [[73, 803]],
                7883: [[105, 803]],
                7884: [[79, 803], , {
                    770: 7896
                }],
                7885: [[111, 803], , {
                    770: 7897
                }],
                7886: [[79, 777]],
                7887: [[111, 777]],
                7888: [[212, 769]],
                7889: [[244, 769]],
                7890: [[212, 768]],
                7891: [[244, 768]],
                7892: [[212, 777]],
                7893: [[244, 777]],
                7894: [[212, 771]],
                7895: [[244, 771]],
                7896: [[7884, 770]],
                7897: [[7885, 770]],
                7898: [[416, 769]],
                7899: [[417, 769]],
                7900: [[416, 768]],
                7901: [[417, 768]],
                7902: [[416, 777]],
                7903: [[417, 777]],
                7904: [[416, 771]],
                7905: [[417, 771]],
                7906: [[416, 803]],
                7907: [[417, 803]],
                7908: [[85, 803]],
                7909: [[117, 803]],
                7910: [[85, 777]],
                7911: [[117, 777]],
                7912: [[431, 769]],
                7913: [[432, 769]],
                7914: [[431, 768]],
                7915: [[432, 768]],
                7916: [[431, 777]],
                7917: [[432, 777]],
                7918: [[431, 771]],
                7919: [[432, 771]],
                7920: [[431, 803]],
                7921: [[432, 803]],
                7922: [[89, 768]],
                7923: [[121, 768]],
                7924: [[89, 803]],
                7925: [[121, 803]],
                7926: [[89, 777]],
                7927: [[121, 777]],
                7928: [[89, 771]],
                7929: [[121, 771]]
            },
            7936: {
                7936: [[945, 787], , {
                    768: 7938,
                    769: 7940,
                    834: 7942,
                    837: 8064
                }],
                7937: [[945, 788], , {
                    768: 7939,
                    769: 7941,
                    834: 7943,
                    837: 8065
                }],
                7938: [[7936, 768], , {
                    837: 8066
                }],
                7939: [[7937, 768], , {
                    837: 8067
                }],
                7940: [[7936, 769], , {
                    837: 8068
                }],
                7941: [[7937, 769], , {
                    837: 8069
                }],
                7942: [[7936, 834], , {
                    837: 8070
                }],
                7943: [[7937, 834], , {
                    837: 8071
                }],
                7944: [[913, 787], , {
                    768: 7946,
                    769: 7948,
                    834: 7950,
                    837: 8072
                }],
                7945: [[913, 788], , {
                    768: 7947,
                    769: 7949,
                    834: 7951,
                    837: 8073
                }],
                7946: [[7944, 768], , {
                    837: 8074
                }],
                7947: [[7945, 768], , {
                    837: 8075
                }],
                7948: [[7944, 769], , {
                    837: 8076
                }],
                7949: [[7945, 769], , {
                    837: 8077
                }],
                7950: [[7944, 834], , {
                    837: 8078
                }],
                7951: [[7945, 834], , {
                    837: 8079
                }],
                7952: [[949, 787], , {
                    768: 7954,
                    769: 7956
                }],
                7953: [[949, 788], , {
                    768: 7955,
                    769: 7957
                }],
                7954: [[7952, 768]],
                7955: [[7953, 768]],
                7956: [[7952, 769]],
                7957: [[7953, 769]],
                7960: [[917, 787], , {
                    768: 7962,
                    769: 7964
                }],
                7961: [[917, 788], , {
                    768: 7963,
                    769: 7965
                }],
                7962: [[7960, 768]],
                7963: [[7961, 768]],
                7964: [[7960, 769]],
                7965: [[7961, 769]],
                7968: [[951, 787], , {
                    768: 7970,
                    769: 7972,
                    834: 7974,
                    837: 8080
                }],
                7969: [[951, 788], , {
                    768: 7971,
                    769: 7973,
                    834: 7975,
                    837: 8081
                }],
                7970: [[7968, 768], , {
                    837: 8082
                }],
                7971: [[7969, 768], , {
                    837: 8083
                }],
                7972: [[7968, 769], , {
                    837: 8084
                }],
                7973: [[7969, 769], , {
                    837: 8085
                }],
                7974: [[7968, 834], , {
                    837: 8086
                }],
                7975: [[7969, 834], , {
                    837: 8087
                }],
                7976: [[919, 787], , {
                    768: 7978,
                    769: 7980,
                    834: 7982,
                    837: 8088
                }],
                7977: [[919, 788], , {
                    768: 7979,
                    769: 7981,
                    834: 7983,
                    837: 8089
                }],
                7978: [[7976, 768], , {
                    837: 8090
                }],
                7979: [[7977, 768], , {
                    837: 8091
                }],
                7980: [[7976, 769], , {
                    837: 8092
                }],
                7981: [[7977, 769], , {
                    837: 8093
                }],
                7982: [[7976, 834], , {
                    837: 8094
                }],
                7983: [[7977, 834], , {
                    837: 8095
                }],
                7984: [[953, 787], , {
                    768: 7986,
                    769: 7988,
                    834: 7990
                }],
                7985: [[953, 788], , {
                    768: 7987,
                    769: 7989,
                    834: 7991
                }],
                7986: [[7984, 768]],
                7987: [[7985, 768]],
                7988: [[7984, 769]],
                7989: [[7985, 769]],
                7990: [[7984, 834]],
                7991: [[7985, 834]],
                7992: [[921, 787], , {
                    768: 7994,
                    769: 7996,
                    834: 7998
                }],
                7993: [[921, 788], , {
                    768: 7995,
                    769: 7997,
                    834: 7999
                }],
                7994: [[7992, 768]],
                7995: [[7993, 768]],
                7996: [[7992, 769]],
                7997: [[7993, 769]],
                7998: [[7992, 834]],
                7999: [[7993, 834]],
                8e3: [[959, 787], , {
                    768: 8002,
                    769: 8004
                }],
                8001: [[959, 788], , {
                    768: 8003,
                    769: 8005
                }],
                8002: [[8e3, 768]],
                8003: [[8001, 768]],
                8004: [[8e3, 769]],
                8005: [[8001, 769]],
                8008: [[927, 787], , {
                    768: 8010,
                    769: 8012
                }],
                8009: [[927, 788], , {
                    768: 8011,
                    769: 8013
                }],
                8010: [[8008, 768]],
                8011: [[8009, 768]],
                8012: [[8008, 769]],
                8013: [[8009, 769]],
                8016: [[965, 787], , {
                    768: 8018,
                    769: 8020,
                    834: 8022
                }],
                8017: [[965, 788], , {
                    768: 8019,
                    769: 8021,
                    834: 8023
                }],
                8018: [[8016, 768]],
                8019: [[8017, 768]],
                8020: [[8016, 769]],
                8021: [[8017, 769]],
                8022: [[8016, 834]],
                8023: [[8017, 834]],
                8025: [[933, 788], , {
                    768: 8027,
                    769: 8029,
                    834: 8031
                }],
                8027: [[8025, 768]],
                8029: [[8025, 769]],
                8031: [[8025, 834]],
                8032: [[969, 787], , {
                    768: 8034,
                    769: 8036,
                    834: 8038,
                    837: 8096
                }],
                8033: [[969, 788], , {
                    768: 8035,
                    769: 8037,
                    834: 8039,
                    837: 8097
                }],
                8034: [[8032, 768], , {
                    837: 8098
                }],
                8035: [[8033, 768], , {
                    837: 8099
                }],
                8036: [[8032, 769], , {
                    837: 8100
                }],
                8037: [[8033, 769], , {
                    837: 8101
                }],
                8038: [[8032, 834], , {
                    837: 8102
                }],
                8039: [[8033, 834], , {
                    837: 8103
                }],
                8040: [[937, 787], , {
                    768: 8042,
                    769: 8044,
                    834: 8046,
                    837: 8104
                }],
                8041: [[937, 788], , {
                    768: 8043,
                    769: 8045,
                    834: 8047,
                    837: 8105
                }],
                8042: [[8040, 768], , {
                    837: 8106
                }],
                8043: [[8041, 768], , {
                    837: 8107
                }],
                8044: [[8040, 769], , {
                    837: 8108
                }],
                8045: [[8041, 769], , {
                    837: 8109
                }],
                8046: [[8040, 834], , {
                    837: 8110
                }],
                8047: [[8041, 834], , {
                    837: 8111
                }],
                8048: [[945, 768], , {
                    837: 8114
                }],
                8049: [[940]],
                8050: [[949, 768]],
                8051: [[941]],
                8052: [[951, 768], , {
                    837: 8130
                }],
                8053: [[942]],
                8054: [[953, 768]],
                8055: [[943]],
                8056: [[959, 768]],
                8057: [[972]],
                8058: [[965, 768]],
                8059: [[973]],
                8060: [[969, 768], , {
                    837: 8178
                }],
                8061: [[974]],
                8064: [[7936, 837]],
                8065: [[7937, 837]],
                8066: [[7938, 837]],
                8067: [[7939, 837]],
                8068: [[7940, 837]],
                8069: [[7941, 837]],
                8070: [[7942, 837]],
                8071: [[7943, 837]],
                8072: [[7944, 837]],
                8073: [[7945, 837]],
                8074: [[7946, 837]],
                8075: [[7947, 837]],
                8076: [[7948, 837]],
                8077: [[7949, 837]],
                8078: [[7950, 837]],
                8079: [[7951, 837]],
                8080: [[7968, 837]],
                8081: [[7969, 837]],
                8082: [[7970, 837]],
                8083: [[7971, 837]],
                8084: [[7972, 837]],
                8085: [[7973, 837]],
                8086: [[7974, 837]],
                8087: [[7975, 837]],
                8088: [[7976, 837]],
                8089: [[7977, 837]],
                8090: [[7978, 837]],
                8091: [[7979, 837]],
                8092: [[7980, 837]],
                8093: [[7981, 837]],
                8094: [[7982, 837]],
                8095: [[7983, 837]],
                8096: [[8032, 837]],
                8097: [[8033, 837]],
                8098: [[8034, 837]],
                8099: [[8035, 837]],
                8100: [[8036, 837]],
                8101: [[8037, 837]],
                8102: [[8038, 837]],
                8103: [[8039, 837]],
                8104: [[8040, 837]],
                8105: [[8041, 837]],
                8106: [[8042, 837]],
                8107: [[8043, 837]],
                8108: [[8044, 837]],
                8109: [[8045, 837]],
                8110: [[8046, 837]],
                8111: [[8047, 837]],
                8112: [[945, 774]],
                8113: [[945, 772]],
                8114: [[8048, 837]],
                8115: [[945, 837]],
                8116: [[940, 837]],
                8118: [[945, 834], , {
                    837: 8119
                }],
                8119: [[8118, 837]],
                8120: [[913, 774]],
                8121: [[913, 772]],
                8122: [[913, 768]],
                8123: [[902]],
                8124: [[913, 837]],
                8125: [[32, 787], 256],
                8126: [[953]],
                8127: [[32, 787], 256, {
                    768: 8141,
                    769: 8142,
                    834: 8143
                }],
                8128: [[32, 834], 256],
                8129: [[168, 834]],
                8130: [[8052, 837]],
                8131: [[951, 837]],
                8132: [[942, 837]],
                8134: [[951, 834], , {
                    837: 8135
                }],
                8135: [[8134, 837]],
                8136: [[917, 768]],
                8137: [[904]],
                8138: [[919, 768]],
                8139: [[905]],
                8140: [[919, 837]],
                8141: [[8127, 768]],
                8142: [[8127, 769]],
                8143: [[8127, 834]],
                8144: [[953, 774]],
                8145: [[953, 772]],
                8146: [[970, 768]],
                8147: [[912]],
                8150: [[953, 834]],
                8151: [[970, 834]],
                8152: [[921, 774]],
                8153: [[921, 772]],
                8154: [[921, 768]],
                8155: [[906]],
                8157: [[8190, 768]],
                8158: [[8190, 769]],
                8159: [[8190, 834]],
                8160: [[965, 774]],
                8161: [[965, 772]],
                8162: [[971, 768]],
                8163: [[944]],
                8164: [[961, 787]],
                8165: [[961, 788]],
                8166: [[965, 834]],
                8167: [[971, 834]],
                8168: [[933, 774]],
                8169: [[933, 772]],
                8170: [[933, 768]],
                8171: [[910]],
                8172: [[929, 788]],
                8173: [[168, 768]],
                8174: [[901]],
                8175: [[96]],
                8178: [[8060, 837]],
                8179: [[969, 837]],
                8180: [[974, 837]],
                8182: [[969, 834], , {
                    837: 8183
                }],
                8183: [[8182, 837]],
                8184: [[927, 768]],
                8185: [[908]],
                8186: [[937, 768]],
                8187: [[911]],
                8188: [[937, 837]],
                8189: [[180]],
                8190: [[32, 788], 256, {
                    768: 8157,
                    769: 8158,
                    834: 8159
                }]
            },
            8192: {
                8192: [[8194]],
                8193: [[8195]],
                8194: [[32], 256],
                8195: [[32], 256],
                8196: [[32], 256],
                8197: [[32], 256],
                8198: [[32], 256],
                8199: [[32], 256],
                8200: [[32], 256],
                8201: [[32], 256],
                8202: [[32], 256],
                8209: [[8208], 256],
                8215: [[32, 819], 256],
                8228: [[46], 256],
                8229: [[46, 46], 256],
                8230: [[46, 46, 46], 256],
                8239: [[32], 256],
                8243: [[8242, 8242], 256],
                8244: [[8242, 8242, 8242], 256],
                8246: [[8245, 8245], 256],
                8247: [[8245, 8245, 8245], 256],
                8252: [[33, 33], 256],
                8254: [[32, 773], 256],
                8263: [[63, 63], 256],
                8264: [[63, 33], 256],
                8265: [[33, 63], 256],
                8279: [[8242, 8242, 8242, 8242], 256],
                8287: [[32], 256],
                8304: [[48], 256],
                8305: [[105], 256],
                8308: [[52], 256],
                8309: [[53], 256],
                8310: [[54], 256],
                8311: [[55], 256],
                8312: [[56], 256],
                8313: [[57], 256],
                8314: [[43], 256],
                8315: [[8722], 256],
                8316: [[61], 256],
                8317: [[40], 256],
                8318: [[41], 256],
                8319: [[110], 256],
                8320: [[48], 256],
                8321: [[49], 256],
                8322: [[50], 256],
                8323: [[51], 256],
                8324: [[52], 256],
                8325: [[53], 256],
                8326: [[54], 256],
                8327: [[55], 256],
                8328: [[56], 256],
                8329: [[57], 256],
                8330: [[43], 256],
                8331: [[8722], 256],
                8332: [[61], 256],
                8333: [[40], 256],
                8334: [[41], 256],
                8336: [[97], 256],
                8337: [[101], 256],
                8338: [[111], 256],
                8339: [[120], 256],
                8340: [[601], 256],
                8341: [[104], 256],
                8342: [[107], 256],
                8343: [[108], 256],
                8344: [[109], 256],
                8345: [[110], 256],
                8346: [[112], 256],
                8347: [[115], 256],
                8348: [[116], 256],
                8360: [[82, 115], 256],
                8400: [, 230],
                8401: [, 230],
                8402: [, 1],
                8403: [, 1],
                8404: [, 230],
                8405: [, 230],
                8406: [, 230],
                8407: [, 230],
                8408: [, 1],
                8409: [, 1],
                8410: [, 1],
                8411: [, 230],
                8412: [, 230],
                8417: [, 230],
                8421: [, 1],
                8422: [, 1],
                8423: [, 230],
                8424: [, 220],
                8425: [, 230],
                8426: [, 1],
                8427: [, 1],
                8428: [, 220],
                8429: [, 220],
                8430: [, 220],
                8431: [, 220],
                8432: [, 230]
            },
            8448: {
                8448: [[97, 47, 99], 256],
                8449: [[97, 47, 115], 256],
                8450: [[67], 256],
                8451: [[176, 67], 256],
                8453: [[99, 47, 111], 256],
                8454: [[99, 47, 117], 256],
                8455: [[400], 256],
                8457: [[176, 70], 256],
                8458: [[103], 256],
                8459: [[72], 256],
                8460: [[72], 256],
                8461: [[72], 256],
                8462: [[104], 256],
                8463: [[295], 256],
                8464: [[73], 256],
                8465: [[73], 256],
                8466: [[76], 256],
                8467: [[108], 256],
                8469: [[78], 256],
                8470: [[78, 111], 256],
                8473: [[80], 256],
                8474: [[81], 256],
                8475: [[82], 256],
                8476: [[82], 256],
                8477: [[82], 256],
                8480: [[83, 77], 256],
                8481: [[84, 69, 76], 256],
                8482: [[84, 77], 256],
                8484: [[90], 256],
                8486: [[937]],
                8488: [[90], 256],
                8490: [[75]],
                8491: [[197]],
                8492: [[66], 256],
                8493: [[67], 256],
                8495: [[101], 256],
                8496: [[69], 256],
                8497: [[70], 256],
                8499: [[77], 256],
                8500: [[111], 256],
                8501: [[1488], 256],
                8502: [[1489], 256],
                8503: [[1490], 256],
                8504: [[1491], 256],
                8505: [[105], 256],
                8507: [[70, 65, 88], 256],
                8508: [[960], 256],
                8509: [[947], 256],
                8510: [[915], 256],
                8511: [[928], 256],
                8512: [[8721], 256],
                8517: [[68], 256],
                8518: [[100], 256],
                8519: [[101], 256],
                8520: [[105], 256],
                8521: [[106], 256],
                8528: [[49, 8260, 55], 256],
                8529: [[49, 8260, 57], 256],
                8530: [[49, 8260, 49, 48], 256],
                8531: [[49, 8260, 51], 256],
                8532: [[50, 8260, 51], 256],
                8533: [[49, 8260, 53], 256],
                8534: [[50, 8260, 53], 256],
                8535: [[51, 8260, 53], 256],
                8536: [[52, 8260, 53], 256],
                8537: [[49, 8260, 54], 256],
                8538: [[53, 8260, 54], 256],
                8539: [[49, 8260, 56], 256],
                8540: [[51, 8260, 56], 256],
                8541: [[53, 8260, 56], 256],
                8542: [[55, 8260, 56], 256],
                8543: [[49, 8260], 256],
                8544: [[73], 256],
                8545: [[73, 73], 256],
                8546: [[73, 73, 73], 256],
                8547: [[73, 86], 256],
                8548: [[86], 256],
                8549: [[86, 73], 256],
                8550: [[86, 73, 73], 256],
                8551: [[86, 73, 73, 73], 256],
                8552: [[73, 88], 256],
                8553: [[88], 256],
                8554: [[88, 73], 256],
                8555: [[88, 73, 73], 256],
                8556: [[76], 256],
                8557: [[67], 256],
                8558: [[68], 256],
                8559: [[77], 256],
                8560: [[105], 256],
                8561: [[105, 105], 256],
                8562: [[105, 105, 105], 256],
                8563: [[105, 118], 256],
                8564: [[118], 256],
                8565: [[118, 105], 256],
                8566: [[118, 105, 105], 256],
                8567: [[118, 105, 105, 105], 256],
                8568: [[105, 120], 256],
                8569: [[120], 256],
                8570: [[120, 105], 256],
                8571: [[120, 105, 105], 256],
                8572: [[108], 256],
                8573: [[99], 256],
                8574: [[100], 256],
                8575: [[109], 256],
                8585: [[48, 8260, 51], 256],
                8592: [, , {
                    824: 8602
                }],
                8594: [, , {
                    824: 8603
                }],
                8596: [, , {
                    824: 8622
                }],
                8602: [[8592, 824]],
                8603: [[8594, 824]],
                8622: [[8596, 824]],
                8653: [[8656, 824]],
                8654: [[8660, 824]],
                8655: [[8658, 824]],
                8656: [, , {
                    824: 8653
                }],
                8658: [, , {
                    824: 8655
                }],
                8660: [, , {
                    824: 8654
                }]
            },
            8704: {
                8707: [, , {
                    824: 8708
                }],
                8708: [[8707, 824]],
                8712: [, , {
                    824: 8713
                }],
                8713: [[8712, 824]],
                8715: [, , {
                    824: 8716
                }],
                8716: [[8715, 824]],
                8739: [, , {
                    824: 8740
                }],
                8740: [[8739, 824]],
                8741: [, , {
                    824: 8742
                }],
                8742: [[8741, 824]],
                8748: [[8747, 8747], 256],
                8749: [[8747, 8747, 8747], 256],
                8751: [[8750, 8750], 256],
                8752: [[8750, 8750, 8750], 256],
                8764: [, , {
                    824: 8769
                }],
                8769: [[8764, 824]],
                8771: [, , {
                    824: 8772
                }],
                8772: [[8771, 824]],
                8773: [, , {
                    824: 8775
                }],
                8775: [[8773, 824]],
                8776: [, , {
                    824: 8777
                }],
                8777: [[8776, 824]],
                8781: [, , {
                    824: 8813
                }],
                8800: [[61, 824]],
                8801: [, , {
                    824: 8802
                }],
                8802: [[8801, 824]],
                8804: [, , {
                    824: 8816
                }],
                8805: [, , {
                    824: 8817
                }],
                8813: [[8781, 824]],
                8814: [[60, 824]],
                8815: [[62, 824]],
                8816: [[8804, 824]],
                8817: [[8805, 824]],
                8818: [, , {
                    824: 8820
                }],
                8819: [, , {
                    824: 8821
                }],
                8820: [[8818, 824]],
                8821: [[8819, 824]],
                8822: [, , {
                    824: 8824
                }],
                8823: [, , {
                    824: 8825
                }],
                8824: [[8822, 824]],
                8825: [[8823, 824]],
                8826: [, , {
                    824: 8832
                }],
                8827: [, , {
                    824: 8833
                }],
                8828: [, , {
                    824: 8928
                }],
                8829: [, , {
                    824: 8929
                }],
                8832: [[8826, 824]],
                8833: [[8827, 824]],
                8834: [, , {
                    824: 8836
                }],
                8835: [, , {
                    824: 8837
                }],
                8836: [[8834, 824]],
                8837: [[8835, 824]],
                8838: [, , {
                    824: 8840
                }],
                8839: [, , {
                    824: 8841
                }],
                8840: [[8838, 824]],
                8841: [[8839, 824]],
                8849: [, , {
                    824: 8930
                }],
                8850: [, , {
                    824: 8931
                }],
                8866: [, , {
                    824: 8876
                }],
                8872: [, , {
                    824: 8877
                }],
                8873: [, , {
                    824: 8878
                }],
                8875: [, , {
                    824: 8879
                }],
                8876: [[8866, 824]],
                8877: [[8872, 824]],
                8878: [[8873, 824]],
                8879: [[8875, 824]],
                8882: [, , {
                    824: 8938
                }],
                8883: [, , {
                    824: 8939
                }],
                8884: [, , {
                    824: 8940
                }],
                8885: [, , {
                    824: 8941
                }],
                8928: [[8828, 824]],
                8929: [[8829, 824]],
                8930: [[8849, 824]],
                8931: [[8850, 824]],
                8938: [[8882, 824]],
                8939: [[8883, 824]],
                8940: [[8884, 824]],
                8941: [[8885, 824]]
            },
            8960: {
                9001: [[12296]],
                9002: [[12297]]
            },
            9216: {
                9312: [[49], 256],
                9313: [[50], 256],
                9314: [[51], 256],
                9315: [[52], 256],
                9316: [[53], 256],
                9317: [[54], 256],
                9318: [[55], 256],
                9319: [[56], 256],
                9320: [[57], 256],
                9321: [[49, 48], 256],
                9322: [[49, 49], 256],
                9323: [[49, 50], 256],
                9324: [[49, 51], 256],
                9325: [[49, 52], 256],
                9326: [[49, 53], 256],
                9327: [[49, 54], 256],
                9328: [[49, 55], 256],
                9329: [[49, 56], 256],
                9330: [[49, 57], 256],
                9331: [[50, 48], 256],
                9332: [[40, 49, 41], 256],
                9333: [[40, 50, 41], 256],
                9334: [[40, 51, 41], 256],
                9335: [[40, 52, 41], 256],
                9336: [[40, 53, 41], 256],
                9337: [[40, 54, 41], 256],
                9338: [[40, 55, 41], 256],
                9339: [[40, 56, 41], 256],
                9340: [[40, 57, 41], 256],
                9341: [[40, 49, 48, 41], 256],
                9342: [[40, 49, 49, 41], 256],
                9343: [[40, 49, 50, 41], 256],
                9344: [[40, 49, 51, 41], 256],
                9345: [[40, 49, 52, 41], 256],
                9346: [[40, 49, 53, 41], 256],
                9347: [[40, 49, 54, 41], 256],
                9348: [[40, 49, 55, 41], 256],
                9349: [[40, 49, 56, 41], 256],
                9350: [[40, 49, 57, 41], 256],
                9351: [[40, 50, 48, 41], 256],
                9352: [[49, 46], 256],
                9353: [[50, 46], 256],
                9354: [[51, 46], 256],
                9355: [[52, 46], 256],
                9356: [[53, 46], 256],
                9357: [[54, 46], 256],
                9358: [[55, 46], 256],
                9359: [[56, 46], 256],
                9360: [[57, 46], 256],
                9361: [[49, 48, 46], 256],
                9362: [[49, 49, 46], 256],
                9363: [[49, 50, 46], 256],
                9364: [[49, 51, 46], 256],
                9365: [[49, 52, 46], 256],
                9366: [[49, 53, 46], 256],
                9367: [[49, 54, 46], 256],
                9368: [[49, 55, 46], 256],
                9369: [[49, 56, 46], 256],
                9370: [[49, 57, 46], 256],
                9371: [[50, 48, 46], 256],
                9372: [[40, 97, 41], 256],
                9373: [[40, 98, 41], 256],
                9374: [[40, 99, 41], 256],
                9375: [[40, 100, 41], 256],
                9376: [[40, 101, 41], 256],
                9377: [[40, 102, 41], 256],
                9378: [[40, 103, 41], 256],
                9379: [[40, 104, 41], 256],
                9380: [[40, 105, 41], 256],
                9381: [[40, 106, 41], 256],
                9382: [[40, 107, 41], 256],
                9383: [[40, 108, 41], 256],
                9384: [[40, 109, 41], 256],
                9385: [[40, 110, 41], 256],
                9386: [[40, 111, 41], 256],
                9387: [[40, 112, 41], 256],
                9388: [[40, 113, 41], 256],
                9389: [[40, 114, 41], 256],
                9390: [[40, 115, 41], 256],
                9391: [[40, 116, 41], 256],
                9392: [[40, 117, 41], 256],
                9393: [[40, 118, 41], 256],
                9394: [[40, 119, 41], 256],
                9395: [[40, 120, 41], 256],
                9396: [[40, 121, 41], 256],
                9397: [[40, 122, 41], 256],
                9398: [[65], 256],
                9399: [[66], 256],
                9400: [[67], 256],
                9401: [[68], 256],
                9402: [[69], 256],
                9403: [[70], 256],
                9404: [[71], 256],
                9405: [[72], 256],
                9406: [[73], 256],
                9407: [[74], 256],
                9408: [[75], 256],
                9409: [[76], 256],
                9410: [[77], 256],
                9411: [[78], 256],
                9412: [[79], 256],
                9413: [[80], 256],
                9414: [[81], 256],
                9415: [[82], 256],
                9416: [[83], 256],
                9417: [[84], 256],
                9418: [[85], 256],
                9419: [[86], 256],
                9420: [[87], 256],
                9421: [[88], 256],
                9422: [[89], 256],
                9423: [[90], 256],
                9424: [[97], 256],
                9425: [[98], 256],
                9426: [[99], 256],
                9427: [[100], 256],
                9428: [[101], 256],
                9429: [[102], 256],
                9430: [[103], 256],
                9431: [[104], 256],
                9432: [[105], 256],
                9433: [[106], 256],
                9434: [[107], 256],
                9435: [[108], 256],
                9436: [[109], 256],
                9437: [[110], 256],
                9438: [[111], 256],
                9439: [[112], 256],
                9440: [[113], 256],
                9441: [[114], 256],
                9442: [[115], 256],
                9443: [[116], 256],
                9444: [[117], 256],
                9445: [[118], 256],
                9446: [[119], 256],
                9447: [[120], 256],
                9448: [[121], 256],
                9449: [[122], 256],
                9450: [[48], 256]
            },
            10752: {
                10764: [[8747, 8747, 8747, 8747], 256],
                10868: [[58, 58, 61], 256],
                10869: [[61, 61], 256],
                10870: [[61, 61, 61], 256],
                10972: [[10973, 824], 512]
            },
            11264: {
                11388: [[106], 256],
                11389: [[86], 256],
                11503: [, 230],
                11504: [, 230],
                11505: [, 230]
            },
            11520: {
                11631: [[11617], 256],
                11647: [, 9],
                11744: [, 230],
                11745: [, 230],
                11746: [, 230],
                11747: [, 230],
                11748: [, 230],
                11749: [, 230],
                11750: [, 230],
                11751: [, 230],
                11752: [, 230],
                11753: [, 230],
                11754: [, 230],
                11755: [, 230],
                11756: [, 230],
                11757: [, 230],
                11758: [, 230],
                11759: [, 230],
                11760: [, 230],
                11761: [, 230],
                11762: [, 230],
                11763: [, 230],
                11764: [, 230],
                11765: [, 230],
                11766: [, 230],
                11767: [, 230],
                11768: [, 230],
                11769: [, 230],
                11770: [, 230],
                11771: [, 230],
                11772: [, 230],
                11773: [, 230],
                11774: [, 230],
                11775: [, 230]
            },
            11776: {
                11935: [[27597], 256],
                12019: [[40863], 256]
            },
            12032: {
                12032: [[19968], 256],
                12033: [[20008], 256],
                12034: [[20022], 256],
                12035: [[20031], 256],
                12036: [[20057], 256],
                12037: [[20101], 256],
                12038: [[20108], 256],
                12039: [[20128], 256],
                12040: [[20154], 256],
                12041: [[20799], 256],
                12042: [[20837], 256],
                12043: [[20843], 256],
                12044: [[20866], 256],
                12045: [[20886], 256],
                12046: [[20907], 256],
                12047: [[20960], 256],
                12048: [[20981], 256],
                12049: [[20992], 256],
                12050: [[21147], 256],
                12051: [[21241], 256],
                12052: [[21269], 256],
                12053: [[21274], 256],
                12054: [[21304], 256],
                12055: [[21313], 256],
                12056: [[21340], 256],
                12057: [[21353], 256],
                12058: [[21378], 256],
                12059: [[21430], 256],
                12060: [[21448], 256],
                12061: [[21475], 256],
                12062: [[22231], 256],
                12063: [[22303], 256],
                12064: [[22763], 256],
                12065: [[22786], 256],
                12066: [[22794], 256],
                12067: [[22805], 256],
                12068: [[22823], 256],
                12069: [[22899], 256],
                12070: [[23376], 256],
                12071: [[23424], 256],
                12072: [[23544], 256],
                12073: [[23567], 256],
                12074: [[23586], 256],
                12075: [[23608], 256],
                12076: [[23662], 256],
                12077: [[23665], 256],
                12078: [[24027], 256],
                12079: [[24037], 256],
                12080: [[24049], 256],
                12081: [[24062], 256],
                12082: [[24178], 256],
                12083: [[24186], 256],
                12084: [[24191], 256],
                12085: [[24308], 256],
                12086: [[24318], 256],
                12087: [[24331], 256],
                12088: [[24339], 256],
                12089: [[24400], 256],
                12090: [[24417], 256],
                12091: [[24435], 256],
                12092: [[24515], 256],
                12093: [[25096], 256],
                12094: [[25142], 256],
                12095: [[25163], 256],
                12096: [[25903], 256],
                12097: [[25908], 256],
                12098: [[25991], 256],
                12099: [[26007], 256],
                12100: [[26020], 256],
                12101: [[26041], 256],
                12102: [[26080], 256],
                12103: [[26085], 256],
                12104: [[26352], 256],
                12105: [[26376], 256],
                12106: [[26408], 256],
                12107: [[27424], 256],
                12108: [[27490], 256],
                12109: [[27513], 256],
                12110: [[27571], 256],
                12111: [[27595], 256],
                12112: [[27604], 256],
                12113: [[27611], 256],
                12114: [[27663], 256],
                12115: [[27668], 256],
                12116: [[27700], 256],
                12117: [[28779], 256],
                12118: [[29226], 256],
                12119: [[29238], 256],
                12120: [[29243], 256],
                12121: [[29247], 256],
                12122: [[29255], 256],
                12123: [[29273], 256],
                12124: [[29275], 256],
                12125: [[29356], 256],
                12126: [[29572], 256],
                12127: [[29577], 256],
                12128: [[29916], 256],
                12129: [[29926], 256],
                12130: [[29976], 256],
                12131: [[29983], 256],
                12132: [[29992], 256],
                12133: [[3e4], 256],
                12134: [[30091], 256],
                12135: [[30098], 256],
                12136: [[30326], 256],
                12137: [[30333], 256],
                12138: [[30382], 256],
                12139: [[30399], 256],
                12140: [[30446], 256],
                12141: [[30683], 256],
                12142: [[30690], 256],
                12143: [[30707], 256],
                12144: [[31034], 256],
                12145: [[31160], 256],
                12146: [[31166], 256],
                12147: [[31348], 256],
                12148: [[31435], 256],
                12149: [[31481], 256],
                12150: [[31859], 256],
                12151: [[31992], 256],
                12152: [[32566], 256],
                12153: [[32593], 256],
                12154: [[32650], 256],
                12155: [[32701], 256],
                12156: [[32769], 256],
                12157: [[32780], 256],
                12158: [[32786], 256],
                12159: [[32819], 256],
                12160: [[32895], 256],
                12161: [[32905], 256],
                12162: [[33251], 256],
                12163: [[33258], 256],
                12164: [[33267], 256],
                12165: [[33276], 256],
                12166: [[33292], 256],
                12167: [[33307], 256],
                12168: [[33311], 256],
                12169: [[33390], 256],
                12170: [[33394], 256],
                12171: [[33400], 256],
                12172: [[34381], 256],
                12173: [[34411], 256],
                12174: [[34880], 256],
                12175: [[34892], 256],
                12176: [[34915], 256],
                12177: [[35198], 256],
                12178: [[35211], 256],
                12179: [[35282], 256],
                12180: [[35328], 256],
                12181: [[35895], 256],
                12182: [[35910], 256],
                12183: [[35925], 256],
                12184: [[35960], 256],
                12185: [[35997], 256],
                12186: [[36196], 256],
                12187: [[36208], 256],
                12188: [[36275], 256],
                12189: [[36523], 256],
                12190: [[36554], 256],
                12191: [[36763], 256],
                12192: [[36784], 256],
                12193: [[36789], 256],
                12194: [[37009], 256],
                12195: [[37193], 256],
                12196: [[37318], 256],
                12197: [[37324], 256],
                12198: [[37329], 256],
                12199: [[38263], 256],
                12200: [[38272], 256],
                12201: [[38428], 256],
                12202: [[38582], 256],
                12203: [[38585], 256],
                12204: [[38632], 256],
                12205: [[38737], 256],
                12206: [[38750], 256],
                12207: [[38754], 256],
                12208: [[38761], 256],
                12209: [[38859], 256],
                12210: [[38893], 256],
                12211: [[38899], 256],
                12212: [[38913], 256],
                12213: [[39080], 256],
                12214: [[39131], 256],
                12215: [[39135], 256],
                12216: [[39318], 256],
                12217: [[39321], 256],
                12218: [[39340], 256],
                12219: [[39592], 256],
                12220: [[39640], 256],
                12221: [[39647], 256],
                12222: [[39717], 256],
                12223: [[39727], 256],
                12224: [[39730], 256],
                12225: [[39740], 256],
                12226: [[39770], 256],
                12227: [[40165], 256],
                12228: [[40565], 256],
                12229: [[40575], 256],
                12230: [[40613], 256],
                12231: [[40635], 256],
                12232: [[40643], 256],
                12233: [[40653], 256],
                12234: [[40657], 256],
                12235: [[40697], 256],
                12236: [[40701], 256],
                12237: [[40718], 256],
                12238: [[40723], 256],
                12239: [[40736], 256],
                12240: [[40763], 256],
                12241: [[40778], 256],
                12242: [[40786], 256],
                12243: [[40845], 256],
                12244: [[40860], 256],
                12245: [[40864], 256]
            },
            12288: {
                12288: [[32], 256],
                12330: [, 218],
                12331: [, 228],
                12332: [, 232],
                12333: [, 222],
                12334: [, 224],
                12335: [, 224],
                12342: [[12306], 256],
                12344: [[21313], 256],
                12345: [[21316], 256],
                12346: [[21317], 256],
                12358: [, , {
                    12441: 12436
                }],
                12363: [, , {
                    12441: 12364
                }],
                12364: [[12363, 12441]],
                12365: [, , {
                    12441: 12366
                }],
                12366: [[12365, 12441]],
                12367: [, , {
                    12441: 12368
                }],
                12368: [[12367, 12441]],
                12369: [, , {
                    12441: 12370
                }],
                12370: [[12369, 12441]],
                12371: [, , {
                    12441: 12372
                }],
                12372: [[12371, 12441]],
                12373: [, , {
                    12441: 12374
                }],
                12374: [[12373, 12441]],
                12375: [, , {
                    12441: 12376
                }],
                12376: [[12375, 12441]],
                12377: [, , {
                    12441: 12378
                }],
                12378: [[12377, 12441]],
                12379: [, , {
                    12441: 12380
                }],
                12380: [[12379, 12441]],
                12381: [, , {
                    12441: 12382
                }],
                12382: [[12381, 12441]],
                12383: [, , {
                    12441: 12384
                }],
                12384: [[12383, 12441]],
                12385: [, , {
                    12441: 12386
                }],
                12386: [[12385, 12441]],
                12388: [, , {
                    12441: 12389
                }],
                12389: [[12388, 12441]],
                12390: [, , {
                    12441: 12391
                }],
                12391: [[12390, 12441]],
                12392: [, , {
                    12441: 12393
                }],
                12393: [[12392, 12441]],
                12399: [, , {
                    12441: 12400,
                    12442: 12401
                }],
                12400: [[12399, 12441]],
                12401: [[12399, 12442]],
                12402: [, , {
                    12441: 12403,
                    12442: 12404
                }],
                12403: [[12402, 12441]],
                12404: [[12402, 12442]],
                12405: [, , {
                    12441: 12406,
                    12442: 12407
                }],
                12406: [[12405, 12441]],
                12407: [[12405, 12442]],
                12408: [, , {
                    12441: 12409,
                    12442: 12410
                }],
                12409: [[12408, 12441]],
                12410: [[12408, 12442]],
                12411: [, , {
                    12441: 12412,
                    12442: 12413
                }],
                12412: [[12411, 12441]],
                12413: [[12411, 12442]],
                12436: [[12358, 12441]],
                12441: [, 8],
                12442: [, 8],
                12443: [[32, 12441], 256],
                12444: [[32, 12442], 256],
                12445: [, , {
                    12441: 12446
                }],
                12446: [[12445, 12441]],
                12447: [[12424, 12426], 256],
                12454: [, , {
                    12441: 12532
                }],
                12459: [, , {
                    12441: 12460
                }],
                12460: [[12459, 12441]],
                12461: [, , {
                    12441: 12462
                }],
                12462: [[12461, 12441]],
                12463: [, , {
                    12441: 12464
                }],
                12464: [[12463, 12441]],
                12465: [, , {
                    12441: 12466
                }],
                12466: [[12465, 12441]],
                12467: [, , {
                    12441: 12468
                }],
                12468: [[12467, 12441]],
                12469: [, , {
                    12441: 12470
                }],
                12470: [[12469, 12441]],
                12471: [, , {
                    12441: 12472
                }],
                12472: [[12471, 12441]],
                12473: [, , {
                    12441: 12474
                }],
                12474: [[12473, 12441]],
                12475: [, , {
                    12441: 12476
                }],
                12476: [[12475, 12441]],
                12477: [, , {
                    12441: 12478
                }],
                12478: [[12477, 12441]],
                12479: [, , {
                    12441: 12480
                }],
                12480: [[12479, 12441]],
                12481: [, , {
                    12441: 12482
                }],
                12482: [[12481, 12441]],
                12484: [, , {
                    12441: 12485
                }],
                12485: [[12484, 12441]],
                12486: [, , {
                    12441: 12487
                }],
                12487: [[12486, 12441]],
                12488: [, , {
                    12441: 12489
                }],
                12489: [[12488, 12441]],
                12495: [, , {
                    12441: 12496,
                    12442: 12497
                }],
                12496: [[12495, 12441]],
                12497: [[12495, 12442]],
                12498: [, , {
                    12441: 12499,
                    12442: 12500
                }],
                12499: [[12498, 12441]],
                12500: [[12498, 12442]],
                12501: [, , {
                    12441: 12502,
                    12442: 12503
                }],
                12502: [[12501, 12441]],
                12503: [[12501, 12442]],
                12504: [, , {
                    12441: 12505,
                    12442: 12506
                }],
                12505: [[12504, 12441]],
                12506: [[12504, 12442]],
                12507: [, , {
                    12441: 12508,
                    12442: 12509
                }],
                12508: [[12507, 12441]],
                12509: [[12507, 12442]],
                12527: [, , {
                    12441: 12535
                }],
                12528: [, , {
                    12441: 12536
                }],
                12529: [, , {
                    12441: 12537
                }],
                12530: [, , {
                    12441: 12538
                }],
                12532: [[12454, 12441]],
                12535: [[12527, 12441]],
                12536: [[12528, 12441]],
                12537: [[12529, 12441]],
                12538: [[12530, 12441]],
                12541: [, , {
                    12441: 12542
                }],
                12542: [[12541, 12441]],
                12543: [[12467, 12488], 256]
            },
            12544: {
                12593: [[4352], 256],
                12594: [[4353], 256],
                12595: [[4522], 256],
                12596: [[4354], 256],
                12597: [[4524], 256],
                12598: [[4525], 256],
                12599: [[4355], 256],
                12600: [[4356], 256],
                12601: [[4357], 256],
                12602: [[4528], 256],
                12603: [[4529], 256],
                12604: [[4530], 256],
                12605: [[4531], 256],
                12606: [[4532], 256],
                12607: [[4533], 256],
                12608: [[4378], 256],
                12609: [[4358], 256],
                12610: [[4359], 256],
                12611: [[4360], 256],
                12612: [[4385], 256],
                12613: [[4361], 256],
                12614: [[4362], 256],
                12615: [[4363], 256],
                12616: [[4364], 256],
                12617: [[4365], 256],
                12618: [[4366], 256],
                12619: [[4367], 256],
                12620: [[4368], 256],
                12621: [[4369], 256],
                12622: [[4370], 256],
                12623: [[4449], 256],
                12624: [[4450], 256],
                12625: [[4451], 256],
                12626: [[4452], 256],
                12627: [[4453], 256],
                12628: [[4454], 256],
                12629: [[4455], 256],
                12630: [[4456], 256],
                12631: [[4457], 256],
                12632: [[4458], 256],
                12633: [[4459], 256],
                12634: [[4460], 256],
                12635: [[4461], 256],
                12636: [[4462], 256],
                12637: [[4463], 256],
                12638: [[4464], 256],
                12639: [[4465], 256],
                12640: [[4466], 256],
                12641: [[4467], 256],
                12642: [[4468], 256],
                12643: [[4469], 256],
                12644: [[4448], 256],
                12645: [[4372], 256],
                12646: [[4373], 256],
                12647: [[4551], 256],
                12648: [[4552], 256],
                12649: [[4556], 256],
                12650: [[4558], 256],
                12651: [[4563], 256],
                12652: [[4567], 256],
                12653: [[4569], 256],
                12654: [[4380], 256],
                12655: [[4573], 256],
                12656: [[4575], 256],
                12657: [[4381], 256],
                12658: [[4382], 256],
                12659: [[4384], 256],
                12660: [[4386], 256],
                12661: [[4387], 256],
                12662: [[4391], 256],
                12663: [[4393], 256],
                12664: [[4395], 256],
                12665: [[4396], 256],
                12666: [[4397], 256],
                12667: [[4398], 256],
                12668: [[4399], 256],
                12669: [[4402], 256],
                12670: [[4406], 256],
                12671: [[4416], 256],
                12672: [[4423], 256],
                12673: [[4428], 256],
                12674: [[4593], 256],
                12675: [[4594], 256],
                12676: [[4439], 256],
                12677: [[4440], 256],
                12678: [[4441], 256],
                12679: [[4484], 256],
                12680: [[4485], 256],
                12681: [[4488], 256],
                12682: [[4497], 256],
                12683: [[4498], 256],
                12684: [[4500], 256],
                12685: [[4510], 256],
                12686: [[4513], 256],
                12690: [[19968], 256],
                12691: [[20108], 256],
                12692: [[19977], 256],
                12693: [[22235], 256],
                12694: [[19978], 256],
                12695: [[20013], 256],
                12696: [[19979], 256],
                12697: [[30002], 256],
                12698: [[20057], 256],
                12699: [[19993], 256],
                12700: [[19969], 256],
                12701: [[22825], 256],
                12702: [[22320], 256],
                12703: [[20154], 256]
            },
            12800: {
                12800: [[40, 4352, 41], 256],
                12801: [[40, 4354, 41], 256],
                12802: [[40, 4355, 41], 256],
                12803: [[40, 4357, 41], 256],
                12804: [[40, 4358, 41], 256],
                12805: [[40, 4359, 41], 256],
                12806: [[40, 4361, 41], 256],
                12807: [[40, 4363, 41], 256],
                12808: [[40, 4364, 41], 256],
                12809: [[40, 4366, 41], 256],
                12810: [[40, 4367, 41], 256],
                12811: [[40, 4368, 41], 256],
                12812: [[40, 4369, 41], 256],
                12813: [[40, 4370, 41], 256],
                12814: [[40, 4352, 4449, 41], 256],
                12815: [[40, 4354, 4449, 41], 256],
                12816: [[40, 4355, 4449, 41], 256],
                12817: [[40, 4357, 4449, 41], 256],
                12818: [[40, 4358, 4449, 41], 256],
                12819: [[40, 4359, 4449, 41], 256],
                12820: [[40, 4361, 4449, 41], 256],
                12821: [[40, 4363, 4449, 41], 256],
                12822: [[40, 4364, 4449, 41], 256],
                12823: [[40, 4366, 4449, 41], 256],
                12824: [[40, 4367, 4449, 41], 256],
                12825: [[40, 4368, 4449, 41], 256],
                12826: [[40, 4369, 4449, 41], 256],
                12827: [[40, 4370, 4449, 41], 256],
                12828: [[40, 4364, 4462, 41], 256],
                12829: [[40, 4363, 4457, 4364, 4453, 4523, 41], 256],
                12830: [[40, 4363, 4457, 4370, 4462, 41], 256],
                12832: [[40, 19968, 41], 256],
                12833: [[40, 20108, 41], 256],
                12834: [[40, 19977, 41], 256],
                12835: [[40, 22235, 41], 256],
                12836: [[40, 20116, 41], 256],
                12837: [[40, 20845, 41], 256],
                12838: [[40, 19971, 41], 256],
                12839: [[40, 20843, 41], 256],
                12840: [[40, 20061, 41], 256],
                12841: [[40, 21313, 41], 256],
                12842: [[40, 26376, 41], 256],
                12843: [[40, 28779, 41], 256],
                12844: [[40, 27700, 41], 256],
                12845: [[40, 26408, 41], 256],
                12846: [[40, 37329, 41], 256],
                12847: [[40, 22303, 41], 256],
                12848: [[40, 26085, 41], 256],
                12849: [[40, 26666, 41], 256],
                12850: [[40, 26377, 41], 256],
                12851: [[40, 31038, 41], 256],
                12852: [[40, 21517, 41], 256],
                12853: [[40, 29305, 41], 256],
                12854: [[40, 36001, 41], 256],
                12855: [[40, 31069, 41], 256],
                12856: [[40, 21172, 41], 256],
                12857: [[40, 20195, 41], 256],
                12858: [[40, 21628, 41], 256],
                12859: [[40, 23398, 41], 256],
                12860: [[40, 30435, 41], 256],
                12861: [[40, 20225, 41], 256],
                12862: [[40, 36039, 41], 256],
                12863: [[40, 21332, 41], 256],
                12864: [[40, 31085, 41], 256],
                12865: [[40, 20241, 41], 256],
                12866: [[40, 33258, 41], 256],
                12867: [[40, 33267, 41], 256],
                12868: [[21839], 256],
                12869: [[24188], 256],
                12870: [[25991], 256],
                12871: [[31631], 256],
                12880: [[80, 84, 69], 256],
                12881: [[50, 49], 256],
                12882: [[50, 50], 256],
                12883: [[50, 51], 256],
                12884: [[50, 52], 256],
                12885: [[50, 53], 256],
                12886: [[50, 54], 256],
                12887: [[50, 55], 256],
                12888: [[50, 56], 256],
                12889: [[50, 57], 256],
                12890: [[51, 48], 256],
                12891: [[51, 49], 256],
                12892: [[51, 50], 256],
                12893: [[51, 51], 256],
                12894: [[51, 52], 256],
                12895: [[51, 53], 256],
                12896: [[4352], 256],
                12897: [[4354], 256],
                12898: [[4355], 256],
                12899: [[4357], 256],
                12900: [[4358], 256],
                12901: [[4359], 256],
                12902: [[4361], 256],
                12903: [[4363], 256],
                12904: [[4364], 256],
                12905: [[4366], 256],
                12906: [[4367], 256],
                12907: [[4368], 256],
                12908: [[4369], 256],
                12909: [[4370], 256],
                12910: [[4352, 4449], 256],
                12911: [[4354, 4449], 256],
                12912: [[4355, 4449], 256],
                12913: [[4357, 4449], 256],
                12914: [[4358, 4449], 256],
                12915: [[4359, 4449], 256],
                12916: [[4361, 4449], 256],
                12917: [[4363, 4449], 256],
                12918: [[4364, 4449], 256],
                12919: [[4366, 4449], 256],
                12920: [[4367, 4449], 256],
                12921: [[4368, 4449], 256],
                12922: [[4369, 4449], 256],
                12923: [[4370, 4449], 256],
                12924: [[4366, 4449, 4535, 4352, 4457], 256],
                12925: [[4364, 4462, 4363, 4468], 256],
                12926: [[4363, 4462], 256],
                12928: [[19968], 256],
                12929: [[20108], 256],
                12930: [[19977], 256],
                12931: [[22235], 256],
                12932: [[20116], 256],
                12933: [[20845], 256],
                12934: [[19971], 256],
                12935: [[20843], 256],
                12936: [[20061], 256],
                12937: [[21313], 256],
                12938: [[26376], 256],
                12939: [[28779], 256],
                12940: [[27700], 256],
                12941: [[26408], 256],
                12942: [[37329], 256],
                12943: [[22303], 256],
                12944: [[26085], 256],
                12945: [[26666], 256],
                12946: [[26377], 256],
                12947: [[31038], 256],
                12948: [[21517], 256],
                12949: [[29305], 256],
                12950: [[36001], 256],
                12951: [[31069], 256],
                12952: [[21172], 256],
                12953: [[31192], 256],
                12954: [[30007], 256],
                12955: [[22899], 256],
                12956: [[36969], 256],
                12957: [[20778], 256],
                12958: [[21360], 256],
                12959: [[27880], 256],
                12960: [[38917], 256],
                12961: [[20241], 256],
                12962: [[20889], 256],
                12963: [[27491], 256],
                12964: [[19978], 256],
                12965: [[20013], 256],
                12966: [[19979], 256],
                12967: [[24038], 256],
                12968: [[21491], 256],
                12969: [[21307], 256],
                12970: [[23447], 256],
                12971: [[23398], 256],
                12972: [[30435], 256],
                12973: [[20225], 256],
                12974: [[36039], 256],
                12975: [[21332], 256],
                12976: [[22812], 256],
                12977: [[51, 54], 256],
                12978: [[51, 55], 256],
                12979: [[51, 56], 256],
                12980: [[51, 57], 256],
                12981: [[52, 48], 256],
                12982: [[52, 49], 256],
                12983: [[52, 50], 256],
                12984: [[52, 51], 256],
                12985: [[52, 52], 256],
                12986: [[52, 53], 256],
                12987: [[52, 54], 256],
                12988: [[52, 55], 256],
                12989: [[52, 56], 256],
                12990: [[52, 57], 256],
                12991: [[53, 48], 256],
                12992: [[49, 26376], 256],
                12993: [[50, 26376], 256],
                12994: [[51, 26376], 256],
                12995: [[52, 26376], 256],
                12996: [[53, 26376], 256],
                12997: [[54, 26376], 256],
                12998: [[55, 26376], 256],
                12999: [[56, 26376], 256],
                13e3: [[57, 26376], 256],
                13001: [[49, 48, 26376], 256],
                13002: [[49, 49, 26376], 256],
                13003: [[49, 50, 26376], 256],
                13004: [[72, 103], 256],
                13005: [[101, 114, 103], 256],
                13006: [[101, 86], 256],
                13007: [[76, 84, 68], 256],
                13008: [[12450], 256],
                13009: [[12452], 256],
                13010: [[12454], 256],
                13011: [[12456], 256],
                13012: [[12458], 256],
                13013: [[12459], 256],
                13014: [[12461], 256],
                13015: [[12463], 256],
                13016: [[12465], 256],
                13017: [[12467], 256],
                13018: [[12469], 256],
                13019: [[12471], 256],
                13020: [[12473], 256],
                13021: [[12475], 256],
                13022: [[12477], 256],
                13023: [[12479], 256],
                13024: [[12481], 256],
                13025: [[12484], 256],
                13026: [[12486], 256],
                13027: [[12488], 256],
                13028: [[12490], 256],
                13029: [[12491], 256],
                13030: [[12492], 256],
                13031: [[12493], 256],
                13032: [[12494], 256],
                13033: [[12495], 256],
                13034: [[12498], 256],
                13035: [[12501], 256],
                13036: [[12504], 256],
                13037: [[12507], 256],
                13038: [[12510], 256],
                13039: [[12511], 256],
                13040: [[12512], 256],
                13041: [[12513], 256],
                13042: [[12514], 256],
                13043: [[12516], 256],
                13044: [[12518], 256],
                13045: [[12520], 256],
                13046: [[12521], 256],
                13047: [[12522], 256],
                13048: [[12523], 256],
                13049: [[12524], 256],
                13050: [[12525], 256],
                13051: [[12527], 256],
                13052: [[12528], 256],
                13053: [[12529], 256],
                13054: [[12530], 256]
            },
            13056: {
                13056: [[12450, 12497, 12540, 12488], 256],
                13057: [[12450, 12523, 12501, 12449], 256],
                13058: [[12450, 12531, 12506, 12450], 256],
                13059: [[12450, 12540, 12523], 256],
                13060: [[12452, 12491, 12531, 12464], 256],
                13061: [[12452, 12531, 12481], 256],
                13062: [[12454, 12457, 12531], 256],
                13063: [[12456, 12473, 12463, 12540, 12489], 256],
                13064: [[12456, 12540, 12459, 12540], 256],
                13065: [[12458, 12531, 12473], 256],
                13066: [[12458, 12540, 12512], 256],
                13067: [[12459, 12452, 12522], 256],
                13068: [[12459, 12521, 12483, 12488], 256],
                13069: [[12459, 12525, 12522, 12540], 256],
                13070: [[12460, 12525, 12531], 256],
                13071: [[12460, 12531, 12510], 256],
                13072: [[12462, 12460], 256],
                13073: [[12462, 12491, 12540], 256],
                13074: [[12461, 12517, 12522, 12540], 256],
                13075: [[12462, 12523, 12480, 12540], 256],
                13076: [[12461, 12525], 256],
                13077: [[12461, 12525, 12464, 12521, 12512], 256],
                13078: [[12461, 12525, 12513, 12540, 12488, 12523], 256],
                13079: [[12461, 12525, 12527, 12483, 12488], 256],
                13080: [[12464, 12521, 12512], 256],
                13081: [[12464, 12521, 12512, 12488, 12531], 256],
                13082: [[12463, 12523, 12476, 12452, 12525], 256],
                13083: [[12463, 12525, 12540, 12493], 256],
                13084: [[12465, 12540, 12473], 256],
                13085: [[12467, 12523, 12490], 256],
                13086: [[12467, 12540, 12509], 256],
                13087: [[12469, 12452, 12463, 12523], 256],
                13088: [[12469, 12531, 12481, 12540, 12512], 256],
                13089: [[12471, 12522, 12531, 12464], 256],
                13090: [[12475, 12531, 12481], 256],
                13091: [[12475, 12531, 12488], 256],
                13092: [[12480, 12540, 12473], 256],
                13093: [[12487, 12471], 256],
                13094: [[12489, 12523], 256],
                13095: [[12488, 12531], 256],
                13096: [[12490, 12494], 256],
                13097: [[12494, 12483, 12488], 256],
                13098: [[12495, 12452, 12484], 256],
                13099: [[12497, 12540, 12475, 12531, 12488], 256],
                13100: [[12497, 12540, 12484], 256],
                13101: [[12496, 12540, 12524, 12523], 256],
                13102: [[12500, 12450, 12473, 12488, 12523], 256],
                13103: [[12500, 12463, 12523], 256],
                13104: [[12500, 12467], 256],
                13105: [[12499, 12523], 256],
                13106: [[12501, 12449, 12521, 12483, 12489], 256],
                13107: [[12501, 12451, 12540, 12488], 256],
                13108: [[12502, 12483, 12471, 12455, 12523], 256],
                13109: [[12501, 12521, 12531], 256],
                13110: [[12504, 12463, 12479, 12540, 12523], 256],
                13111: [[12506, 12477], 256],
                13112: [[12506, 12491, 12498], 256],
                13113: [[12504, 12523, 12484], 256],
                13114: [[12506, 12531, 12473], 256],
                13115: [[12506, 12540, 12472], 256],
                13116: [[12505, 12540, 12479], 256],
                13117: [[12509, 12452, 12531, 12488], 256],
                13118: [[12508, 12523, 12488], 256],
                13119: [[12507, 12531], 256],
                13120: [[12509, 12531, 12489], 256],
                13121: [[12507, 12540, 12523], 256],
                13122: [[12507, 12540, 12531], 256],
                13123: [[12510, 12452, 12463, 12525], 256],
                13124: [[12510, 12452, 12523], 256],
                13125: [[12510, 12483, 12495], 256],
                13126: [[12510, 12523, 12463], 256],
                13127: [[12510, 12531, 12471, 12519, 12531], 256],
                13128: [[12511, 12463, 12525, 12531], 256],
                13129: [[12511, 12522], 256],
                13130: [[12511, 12522, 12496, 12540, 12523], 256],
                13131: [[12513, 12460], 256],
                13132: [[12513, 12460, 12488, 12531], 256],
                13133: [[12513, 12540, 12488, 12523], 256],
                13134: [[12516, 12540, 12489], 256],
                13135: [[12516, 12540, 12523], 256],
                13136: [[12518, 12450, 12531], 256],
                13137: [[12522, 12483, 12488, 12523], 256],
                13138: [[12522, 12521], 256],
                13139: [[12523, 12500, 12540], 256],
                13140: [[12523, 12540, 12502, 12523], 256],
                13141: [[12524, 12512], 256],
                13142: [[12524, 12531, 12488, 12466, 12531], 256],
                13143: [[12527, 12483, 12488], 256],
                13144: [[48, 28857], 256],
                13145: [[49, 28857], 256],
                13146: [[50, 28857], 256],
                13147: [[51, 28857], 256],
                13148: [[52, 28857], 256],
                13149: [[53, 28857], 256],
                13150: [[54, 28857], 256],
                13151: [[55, 28857], 256],
                13152: [[56, 28857], 256],
                13153: [[57, 28857], 256],
                13154: [[49, 48, 28857], 256],
                13155: [[49, 49, 28857], 256],
                13156: [[49, 50, 28857], 256],
                13157: [[49, 51, 28857], 256],
                13158: [[49, 52, 28857], 256],
                13159: [[49, 53, 28857], 256],
                13160: [[49, 54, 28857], 256],
                13161: [[49, 55, 28857], 256],
                13162: [[49, 56, 28857], 256],
                13163: [[49, 57, 28857], 256],
                13164: [[50, 48, 28857], 256],
                13165: [[50, 49, 28857], 256],
                13166: [[50, 50, 28857], 256],
                13167: [[50, 51, 28857], 256],
                13168: [[50, 52, 28857], 256],
                13169: [[104, 80, 97], 256],
                13170: [[100, 97], 256],
                13171: [[65, 85], 256],
                13172: [[98, 97, 114], 256],
                13173: [[111, 86], 256],
                13174: [[112, 99], 256],
                13175: [[100, 109], 256],
                13176: [[100, 109, 178], 256],
                13177: [[100, 109, 179], 256],
                13178: [[73, 85], 256],
                13179: [[24179, 25104], 256],
                13180: [[26157, 21644], 256],
                13181: [[22823, 27491], 256],
                13182: [[26126, 27835], 256],
                13183: [[26666, 24335, 20250, 31038], 256],
                13184: [[112, 65], 256],
                13185: [[110, 65], 256],
                13186: [[956, 65], 256],
                13187: [[109, 65], 256],
                13188: [[107, 65], 256],
                13189: [[75, 66], 256],
                13190: [[77, 66], 256],
                13191: [[71, 66], 256],
                13192: [[99, 97, 108], 256],
                13193: [[107, 99, 97, 108], 256],
                13194: [[112, 70], 256],
                13195: [[110, 70], 256],
                13196: [[956, 70], 256],
                13197: [[956, 103], 256],
                13198: [[109, 103], 256],
                13199: [[107, 103], 256],
                13200: [[72, 122], 256],
                13201: [[107, 72, 122], 256],
                13202: [[77, 72, 122], 256],
                13203: [[71, 72, 122], 256],
                13204: [[84, 72, 122], 256],
                13205: [[956, 8467], 256],
                13206: [[109, 8467], 256],
                13207: [[100, 8467], 256],
                13208: [[107, 8467], 256],
                13209: [[102, 109], 256],
                13210: [[110, 109], 256],
                13211: [[956, 109], 256],
                13212: [[109, 109], 256],
                13213: [[99, 109], 256],
                13214: [[107, 109], 256],
                13215: [[109, 109, 178], 256],
                13216: [[99, 109, 178], 256],
                13217: [[109, 178], 256],
                13218: [[107, 109, 178], 256],
                13219: [[109, 109, 179], 256],
                13220: [[99, 109, 179], 256],
                13221: [[109, 179], 256],
                13222: [[107, 109, 179], 256],
                13223: [[109, 8725, 115], 256],
                13224: [[109, 8725, 115, 178], 256],
                13225: [[80, 97], 256],
                13226: [[107, 80, 97], 256],
                13227: [[77, 80, 97], 256],
                13228: [[71, 80, 97], 256],
                13229: [[114, 97, 100], 256],
                13230: [[114, 97, 100, 8725, 115], 256],
                13231: [[114, 97, 100, 8725, 115, 178], 256],
                13232: [[112, 115], 256],
                13233: [[110, 115], 256],
                13234: [[956, 115], 256],
                13235: [[109, 115], 256],
                13236: [[112, 86], 256],
                13237: [[110, 86], 256],
                13238: [[956, 86], 256],
                13239: [[109, 86], 256],
                13240: [[107, 86], 256],
                13241: [[77, 86], 256],
                13242: [[112, 87], 256],
                13243: [[110, 87], 256],
                13244: [[956, 87], 256],
                13245: [[109, 87], 256],
                13246: [[107, 87], 256],
                13247: [[77, 87], 256],
                13248: [[107, 937], 256],
                13249: [[77, 937], 256],
                13250: [[97, 46, 109, 46], 256],
                13251: [[66, 113], 256],
                13252: [[99, 99], 256],
                13253: [[99, 100], 256],
                13254: [[67, 8725, 107, 103], 256],
                13255: [[67, 111, 46], 256],
                13256: [[100, 66], 256],
                13257: [[71, 121], 256],
                13258: [[104, 97], 256],
                13259: [[72, 80], 256],
                13260: [[105, 110], 256],
                13261: [[75, 75], 256],
                13262: [[75, 77], 256],
                13263: [[107, 116], 256],
                13264: [[108, 109], 256],
                13265: [[108, 110], 256],
                13266: [[108, 111, 103], 256],
                13267: [[108, 120], 256],
                13268: [[109, 98], 256],
                13269: [[109, 105, 108], 256],
                13270: [[109, 111, 108], 256],
                13271: [[80, 72], 256],
                13272: [[112, 46, 109, 46], 256],
                13273: [[80, 80, 77], 256],
                13274: [[80, 82], 256],
                13275: [[115, 114], 256],
                13276: [[83, 118], 256],
                13277: [[87, 98], 256],
                13278: [[86, 8725, 109], 256],
                13279: [[65, 8725, 109], 256],
                13280: [[49, 26085], 256],
                13281: [[50, 26085], 256],
                13282: [[51, 26085], 256],
                13283: [[52, 26085], 256],
                13284: [[53, 26085], 256],
                13285: [[54, 26085], 256],
                13286: [[55, 26085], 256],
                13287: [[56, 26085], 256],
                13288: [[57, 26085], 256],
                13289: [[49, 48, 26085], 256],
                13290: [[49, 49, 26085], 256],
                13291: [[49, 50, 26085], 256],
                13292: [[49, 51, 26085], 256],
                13293: [[49, 52, 26085], 256],
                13294: [[49, 53, 26085], 256],
                13295: [[49, 54, 26085], 256],
                13296: [[49, 55, 26085], 256],
                13297: [[49, 56, 26085], 256],
                13298: [[49, 57, 26085], 256],
                13299: [[50, 48, 26085], 256],
                13300: [[50, 49, 26085], 256],
                13301: [[50, 50, 26085], 256],
                13302: [[50, 51, 26085], 256],
                13303: [[50, 52, 26085], 256],
                13304: [[50, 53, 26085], 256],
                13305: [[50, 54, 26085], 256],
                13306: [[50, 55, 26085], 256],
                13307: [[50, 56, 26085], 256],
                13308: [[50, 57, 26085], 256],
                13309: [[51, 48, 26085], 256],
                13310: [[51, 49, 26085], 256],
                13311: [[103, 97, 108], 256]
            },
            27136: {
                92912: [, 1],
                92913: [, 1],
                92914: [, 1],
                92915: [, 1],
                92916: [, 1]
            },
            27392: {
                92976: [, 230],
                92977: [, 230],
                92978: [, 230],
                92979: [, 230],
                92980: [, 230],
                92981: [, 230],
                92982: [, 230]
            },
            42496: {
                42607: [, 230],
                42612: [, 230],
                42613: [, 230],
                42614: [, 230],
                42615: [, 230],
                42616: [, 230],
                42617: [, 230],
                42618: [, 230],
                42619: [, 230],
                42620: [, 230],
                42621: [, 230],
                42652: [[1098], 256],
                42653: [[1100], 256],
                42655: [, 230],
                42736: [, 230],
                42737: [, 230]
            },
            42752: {
                42864: [[42863], 256],
                43e3: [[294], 256],
                43001: [[339], 256]
            },
            43008: {
                43014: [, 9],
                43204: [, 9],
                43232: [, 230],
                43233: [, 230],
                43234: [, 230],
                43235: [, 230],
                43236: [, 230],
                43237: [, 230],
                43238: [, 230],
                43239: [, 230],
                43240: [, 230],
                43241: [, 230],
                43242: [, 230],
                43243: [, 230],
                43244: [, 230],
                43245: [, 230],
                43246: [, 230],
                43247: [, 230],
                43248: [, 230],
                43249: [, 230]
            },
            43264: {
                43307: [, 220],
                43308: [, 220],
                43309: [, 220],
                43347: [, 9],
                43443: [, 7],
                43456: [, 9]
            },
            43520: {
                43696: [, 230],
                43698: [, 230],
                43699: [, 230],
                43700: [, 220],
                43703: [, 230],
                43704: [, 230],
                43710: [, 230],
                43711: [, 230],
                43713: [, 230],
                43766: [, 9]
            },
            43776: {
                43868: [[42791], 256],
                43869: [[43831], 256],
                43870: [[619], 256],
                43871: [[43858], 256],
                44013: [, 9]
            },
            48128: {
                113822: [, 1]
            },
            53504: {
                119134: [[119127, 119141], 512],
                119135: [[119128, 119141], 512],
                119136: [[119135, 119150], 512],
                119137: [[119135, 119151], 512],
                119138: [[119135, 119152], 512],
                119139: [[119135, 119153], 512],
                119140: [[119135, 119154], 512],
                119141: [, 216],
                119142: [, 216],
                119143: [, 1],
                119144: [, 1],
                119145: [, 1],
                119149: [, 226],
                119150: [, 216],
                119151: [, 216],
                119152: [, 216],
                119153: [, 216],
                119154: [, 216],
                119163: [, 220],
                119164: [, 220],
                119165: [, 220],
                119166: [, 220],
                119167: [, 220],
                119168: [, 220],
                119169: [, 220],
                119170: [, 220],
                119173: [, 230],
                119174: [, 230],
                119175: [, 230],
                119176: [, 230],
                119177: [, 230],
                119178: [, 220],
                119179: [, 220],
                119210: [, 230],
                119211: [, 230],
                119212: [, 230],
                119213: [, 230],
                119227: [[119225, 119141], 512],
                119228: [[119226, 119141], 512],
                119229: [[119227, 119150], 512],
                119230: [[119228, 119150], 512],
                119231: [[119227, 119151], 512],
                119232: [[119228, 119151], 512]
            },
            53760: {
                119362: [, 230],
                119363: [, 230],
                119364: [, 230]
            },
            54272: {
                119808: [[65], 256],
                119809: [[66], 256],
                119810: [[67], 256],
                119811: [[68], 256],
                119812: [[69], 256],
                119813: [[70], 256],
                119814: [[71], 256],
                119815: [[72], 256],
                119816: [[73], 256],
                119817: [[74], 256],
                119818: [[75], 256],
                119819: [[76], 256],
                119820: [[77], 256],
                119821: [[78], 256],
                119822: [[79], 256],
                119823: [[80], 256],
                119824: [[81], 256],
                119825: [[82], 256],
                119826: [[83], 256],
                119827: [[84], 256],
                119828: [[85], 256],
                119829: [[86], 256],
                119830: [[87], 256],
                119831: [[88], 256],
                119832: [[89], 256],
                119833: [[90], 256],
                119834: [[97], 256],
                119835: [[98], 256],
                119836: [[99], 256],
                119837: [[100], 256],
                119838: [[101], 256],
                119839: [[102], 256],
                119840: [[103], 256],
                119841: [[104], 256],
                119842: [[105], 256],
                119843: [[106], 256],
                119844: [[107], 256],
                119845: [[108], 256],
                119846: [[109], 256],
                119847: [[110], 256],
                119848: [[111], 256],
                119849: [[112], 256],
                119850: [[113], 256],
                119851: [[114], 256],
                119852: [[115], 256],
                119853: [[116], 256],
                119854: [[117], 256],
                119855: [[118], 256],
                119856: [[119], 256],
                119857: [[120], 256],
                119858: [[121], 256],
                119859: [[122], 256],
                119860: [[65], 256],
                119861: [[66], 256],
                119862: [[67], 256],
                119863: [[68], 256],
                119864: [[69], 256],
                119865: [[70], 256],
                119866: [[71], 256],
                119867: [[72], 256],
                119868: [[73], 256],
                119869: [[74], 256],
                119870: [[75], 256],
                119871: [[76], 256],
                119872: [[77], 256],
                119873: [[78], 256],
                119874: [[79], 256],
                119875: [[80], 256],
                119876: [[81], 256],
                119877: [[82], 256],
                119878: [[83], 256],
                119879: [[84], 256],
                119880: [[85], 256],
                119881: [[86], 256],
                119882: [[87], 256],
                119883: [[88], 256],
                119884: [[89], 256],
                119885: [[90], 256],
                119886: [[97], 256],
                119887: [[98], 256],
                119888: [[99], 256],
                119889: [[100], 256],
                119890: [[101], 256],
                119891: [[102], 256],
                119892: [[103], 256],
                119894: [[105], 256],
                119895: [[106], 256],
                119896: [[107], 256],
                119897: [[108], 256],
                119898: [[109], 256],
                119899: [[110], 256],
                119900: [[111], 256],
                119901: [[112], 256],
                119902: [[113], 256],
                119903: [[114], 256],
                119904: [[115], 256],
                119905: [[116], 256],
                119906: [[117], 256],
                119907: [[118], 256],
                119908: [[119], 256],
                119909: [[120], 256],
                119910: [[121], 256],
                119911: [[122], 256],
                119912: [[65], 256],
                119913: [[66], 256],
                119914: [[67], 256],
                119915: [[68], 256],
                119916: [[69], 256],
                119917: [[70], 256],
                119918: [[71], 256],
                119919: [[72], 256],
                119920: [[73], 256],
                119921: [[74], 256],
                119922: [[75], 256],
                119923: [[76], 256],
                119924: [[77], 256],
                119925: [[78], 256],
                119926: [[79], 256],
                119927: [[80], 256],
                119928: [[81], 256],
                119929: [[82], 256],
                119930: [[83], 256],
                119931: [[84], 256],
                119932: [[85], 256],
                119933: [[86], 256],
                119934: [[87], 256],
                119935: [[88], 256],
                119936: [[89], 256],
                119937: [[90], 256],
                119938: [[97], 256],
                119939: [[98], 256],
                119940: [[99], 256],
                119941: [[100], 256],
                119942: [[101], 256],
                119943: [[102], 256],
                119944: [[103], 256],
                119945: [[104], 256],
                119946: [[105], 256],
                119947: [[106], 256],
                119948: [[107], 256],
                119949: [[108], 256],
                119950: [[109], 256],
                119951: [[110], 256],
                119952: [[111], 256],
                119953: [[112], 256],
                119954: [[113], 256],
                119955: [[114], 256],
                119956: [[115], 256],
                119957: [[116], 256],
                119958: [[117], 256],
                119959: [[118], 256],
                119960: [[119], 256],
                119961: [[120], 256],
                119962: [[121], 256],
                119963: [[122], 256],
                119964: [[65], 256],
                119966: [[67], 256],
                119967: [[68], 256],
                119970: [[71], 256],
                119973: [[74], 256],
                119974: [[75], 256],
                119977: [[78], 256],
                119978: [[79], 256],
                119979: [[80], 256],
                119980: [[81], 256],
                119982: [[83], 256],
                119983: [[84], 256],
                119984: [[85], 256],
                119985: [[86], 256],
                119986: [[87], 256],
                119987: [[88], 256],
                119988: [[89], 256],
                119989: [[90], 256],
                119990: [[97], 256],
                119991: [[98], 256],
                119992: [[99], 256],
                119993: [[100], 256],
                119995: [[102], 256],
                119997: [[104], 256],
                119998: [[105], 256],
                119999: [[106], 256],
                12e4: [[107], 256],
                120001: [[108], 256],
                120002: [[109], 256],
                120003: [[110], 256],
                120005: [[112], 256],
                120006: [[113], 256],
                120007: [[114], 256],
                120008: [[115], 256],
                120009: [[116], 256],
                120010: [[117], 256],
                120011: [[118], 256],
                120012: [[119], 256],
                120013: [[120], 256],
                120014: [[121], 256],
                120015: [[122], 256],
                120016: [[65], 256],
                120017: [[66], 256],
                120018: [[67], 256],
                120019: [[68], 256],
                120020: [[69], 256],
                120021: [[70], 256],
                120022: [[71], 256],
                120023: [[72], 256],
                120024: [[73], 256],
                120025: [[74], 256],
                120026: [[75], 256],
                120027: [[76], 256],
                120028: [[77], 256],
                120029: [[78], 256],
                120030: [[79], 256],
                120031: [[80], 256],
                120032: [[81], 256],
                120033: [[82], 256],
                120034: [[83], 256],
                120035: [[84], 256],
                120036: [[85], 256],
                120037: [[86], 256],
                120038: [[87], 256],
                120039: [[88], 256],
                120040: [[89], 256],
                120041: [[90], 256],
                120042: [[97], 256],
                120043: [[98], 256],
                120044: [[99], 256],
                120045: [[100], 256],
                120046: [[101], 256],
                120047: [[102], 256],
                120048: [[103], 256],
                120049: [[104], 256],
                120050: [[105], 256],
                120051: [[106], 256],
                120052: [[107], 256],
                120053: [[108], 256],
                120054: [[109], 256],
                120055: [[110], 256],
                120056: [[111], 256],
                120057: [[112], 256],
                120058: [[113], 256],
                120059: [[114], 256],
                120060: [[115], 256],
                120061: [[116], 256],
                120062: [[117], 256],
                120063: [[118], 256]
            },
            54528: {
                120064: [[119], 256],
                120065: [[120], 256],
                120066: [[121], 256],
                120067: [[122], 256],
                120068: [[65], 256],
                120069: [[66], 256],
                120071: [[68], 256],
                120072: [[69], 256],
                120073: [[70], 256],
                120074: [[71], 256],
                120077: [[74], 256],
                120078: [[75], 256],
                120079: [[76], 256],
                120080: [[77], 256],
                120081: [[78], 256],
                120082: [[79], 256],
                120083: [[80], 256],
                120084: [[81], 256],
                120086: [[83], 256],
                120087: [[84], 256],
                120088: [[85], 256],
                120089: [[86], 256],
                120090: [[87], 256],
                120091: [[88], 256],
                120092: [[89], 256],
                120094: [[97], 256],
                120095: [[98], 256],
                120096: [[99], 256],
                120097: [[100], 256],
                120098: [[101], 256],
                120099: [[102], 256],
                120100: [[103], 256],
                120101: [[104], 256],
                120102: [[105], 256],
                120103: [[106], 256],
                120104: [[107], 256],
                120105: [[108], 256],
                120106: [[109], 256],
                120107: [[110], 256],
                120108: [[111], 256],
                120109: [[112], 256],
                120110: [[113], 256],
                120111: [[114], 256],
                120112: [[115], 256],
                120113: [[116], 256],
                120114: [[117], 256],
                120115: [[118], 256],
                120116: [[119], 256],
                120117: [[120], 256],
                120118: [[121], 256],
                120119: [[122], 256],
                120120: [[65], 256],
                120121: [[66], 256],
                120123: [[68], 256],
                120124: [[69], 256],
                120125: [[70], 256],
                120126: [[71], 256],
                120128: [[73], 256],
                120129: [[74], 256],
                120130: [[75], 256],
                120131: [[76], 256],
                120132: [[77], 256],
                120134: [[79], 256],
                120138: [[83], 256],
                120139: [[84], 256],
                120140: [[85], 256],
                120141: [[86], 256],
                120142: [[87], 256],
                120143: [[88], 256],
                120144: [[89], 256],
                120146: [[97], 256],
                120147: [[98], 256],
                120148: [[99], 256],
                120149: [[100], 256],
                120150: [[101], 256],
                120151: [[102], 256],
                120152: [[103], 256],
                120153: [[104], 256],
                120154: [[105], 256],
                120155: [[106], 256],
                120156: [[107], 256],
                120157: [[108], 256],
                120158: [[109], 256],
                120159: [[110], 256],
                120160: [[111], 256],
                120161: [[112], 256],
                120162: [[113], 256],
                120163: [[114], 256],
                120164: [[115], 256],
                120165: [[116], 256],
                120166: [[117], 256],
                120167: [[118], 256],
                120168: [[119], 256],
                120169: [[120], 256],
                120170: [[121], 256],
                120171: [[122], 256],
                120172: [[65], 256],
                120173: [[66], 256],
                120174: [[67], 256],
                120175: [[68], 256],
                120176: [[69], 256],
                120177: [[70], 256],
                120178: [[71], 256],
                120179: [[72], 256],
                120180: [[73], 256],
                120181: [[74], 256],
                120182: [[75], 256],
                120183: [[76], 256],
                120184: [[77], 256],
                120185: [[78], 256],
                120186: [[79], 256],
                120187: [[80], 256],
                120188: [[81], 256],
                120189: [[82], 256],
                120190: [[83], 256],
                120191: [[84], 256],
                120192: [[85], 256],
                120193: [[86], 256],
                120194: [[87], 256],
                120195: [[88], 256],
                120196: [[89], 256],
                120197: [[90], 256],
                120198: [[97], 256],
                120199: [[98], 256],
                120200: [[99], 256],
                120201: [[100], 256],
                120202: [[101], 256],
                120203: [[102], 256],
                120204: [[103], 256],
                120205: [[104], 256],
                120206: [[105], 256],
                120207: [[106], 256],
                120208: [[107], 256],
                120209: [[108], 256],
                120210: [[109], 256],
                120211: [[110], 256],
                120212: [[111], 256],
                120213: [[112], 256],
                120214: [[113], 256],
                120215: [[114], 256],
                120216: [[115], 256],
                120217: [[116], 256],
                120218: [[117], 256],
                120219: [[118], 256],
                120220: [[119], 256],
                120221: [[120], 256],
                120222: [[121], 256],
                120223: [[122], 256],
                120224: [[65], 256],
                120225: [[66], 256],
                120226: [[67], 256],
                120227: [[68], 256],
                120228: [[69], 256],
                120229: [[70], 256],
                120230: [[71], 256],
                120231: [[72], 256],
                120232: [[73], 256],
                120233: [[74], 256],
                120234: [[75], 256],
                120235: [[76], 256],
                120236: [[77], 256],
                120237: [[78], 256],
                120238: [[79], 256],
                120239: [[80], 256],
                120240: [[81], 256],
                120241: [[82], 256],
                120242: [[83], 256],
                120243: [[84], 256],
                120244: [[85], 256],
                120245: [[86], 256],
                120246: [[87], 256],
                120247: [[88], 256],
                120248: [[89], 256],
                120249: [[90], 256],
                120250: [[97], 256],
                120251: [[98], 256],
                120252: [[99], 256],
                120253: [[100], 256],
                120254: [[101], 256],
                120255: [[102], 256],
                120256: [[103], 256],
                120257: [[104], 256],
                120258: [[105], 256],
                120259: [[106], 256],
                120260: [[107], 256],
                120261: [[108], 256],
                120262: [[109], 256],
                120263: [[110], 256],
                120264: [[111], 256],
                120265: [[112], 256],
                120266: [[113], 256],
                120267: [[114], 256],
                120268: [[115], 256],
                120269: [[116], 256],
                120270: [[117], 256],
                120271: [[118], 256],
                120272: [[119], 256],
                120273: [[120], 256],
                120274: [[121], 256],
                120275: [[122], 256],
                120276: [[65], 256],
                120277: [[66], 256],
                120278: [[67], 256],
                120279: [[68], 256],
                120280: [[69], 256],
                120281: [[70], 256],
                120282: [[71], 256],
                120283: [[72], 256],
                120284: [[73], 256],
                120285: [[74], 256],
                120286: [[75], 256],
                120287: [[76], 256],
                120288: [[77], 256],
                120289: [[78], 256],
                120290: [[79], 256],
                120291: [[80], 256],
                120292: [[81], 256],
                120293: [[82], 256],
                120294: [[83], 256],
                120295: [[84], 256],
                120296: [[85], 256],
                120297: [[86], 256],
                120298: [[87], 256],
                120299: [[88], 256],
                120300: [[89], 256],
                120301: [[90], 256],
                120302: [[97], 256],
                120303: [[98], 256],
                120304: [[99], 256],
                120305: [[100], 256],
                120306: [[101], 256],
                120307: [[102], 256],
                120308: [[103], 256],
                120309: [[104], 256],
                120310: [[105], 256],
                120311: [[106], 256],
                120312: [[107], 256],
                120313: [[108], 256],
                120314: [[109], 256],
                120315: [[110], 256],
                120316: [[111], 256],
                120317: [[112], 256],
                120318: [[113], 256],
                120319: [[114], 256]
            },
            54784: {
                120320: [[115], 256],
                120321: [[116], 256],
                120322: [[117], 256],
                120323: [[118], 256],
                120324: [[119], 256],
                120325: [[120], 256],
                120326: [[121], 256],
                120327: [[122], 256],
                120328: [[65], 256],
                120329: [[66], 256],
                120330: [[67], 256],
                120331: [[68], 256],
                120332: [[69], 256],
                120333: [[70], 256],
                120334: [[71], 256],
                120335: [[72], 256],
                120336: [[73], 256],
                120337: [[74], 256],
                120338: [[75], 256],
                120339: [[76], 256],
                120340: [[77], 256],
                120341: [[78], 256],
                120342: [[79], 256],
                120343: [[80], 256],
                120344: [[81], 256],
                120345: [[82], 256],
                120346: [[83], 256],
                120347: [[84], 256],
                120348: [[85], 256],
                120349: [[86], 256],
                120350: [[87], 256],
                120351: [[88], 256],
                120352: [[89], 256],
                120353: [[90], 256],
                120354: [[97], 256],
                120355: [[98], 256],
                120356: [[99], 256],
                120357: [[100], 256],
                120358: [[101], 256],
                120359: [[102], 256],
                120360: [[103], 256],
                120361: [[104], 256],
                120362: [[105], 256],
                120363: [[106], 256],
                120364: [[107], 256],
                120365: [[108], 256],
                120366: [[109], 256],
                120367: [[110], 256],
                120368: [[111], 256],
                120369: [[112], 256],
                120370: [[113], 256],
                120371: [[114], 256],
                120372: [[115], 256],
                120373: [[116], 256],
                120374: [[117], 256],
                120375: [[118], 256],
                120376: [[119], 256],
                120377: [[120], 256],
                120378: [[121], 256],
                120379: [[122], 256],
                120380: [[65], 256],
                120381: [[66], 256],
                120382: [[67], 256],
                120383: [[68], 256],
                120384: [[69], 256],
                120385: [[70], 256],
                120386: [[71], 256],
                120387: [[72], 256],
                120388: [[73], 256],
                120389: [[74], 256],
                120390: [[75], 256],
                120391: [[76], 256],
                120392: [[77], 256],
                120393: [[78], 256],
                120394: [[79], 256],
                120395: [[80], 256],
                120396: [[81], 256],
                120397: [[82], 256],
                120398: [[83], 256],
                120399: [[84], 256],
                120400: [[85], 256],
                120401: [[86], 256],
                120402: [[87], 256],
                120403: [[88], 256],
                120404: [[89], 256],
                120405: [[90], 256],
                120406: [[97], 256],
                120407: [[98], 256],
                120408: [[99], 256],
                120409: [[100], 256],
                120410: [[101], 256],
                120411: [[102], 256],
                120412: [[103], 256],
                120413: [[104], 256],
                120414: [[105], 256],
                120415: [[106], 256],
                120416: [[107], 256],
                120417: [[108], 256],
                120418: [[109], 256],
                120419: [[110], 256],
                120420: [[111], 256],
                120421: [[112], 256],
                120422: [[113], 256],
                120423: [[114], 256],
                120424: [[115], 256],
                120425: [[116], 256],
                120426: [[117], 256],
                120427: [[118], 256],
                120428: [[119], 256],
                120429: [[120], 256],
                120430: [[121], 256],
                120431: [[122], 256],
                120432: [[65], 256],
                120433: [[66], 256],
                120434: [[67], 256],
                120435: [[68], 256],
                120436: [[69], 256],
                120437: [[70], 256],
                120438: [[71], 256],
                120439: [[72], 256],
                120440: [[73], 256],
                120441: [[74], 256],
                120442: [[75], 256],
                120443: [[76], 256],
                120444: [[77], 256],
                120445: [[78], 256],
                120446: [[79], 256],
                120447: [[80], 256],
                120448: [[81], 256],
                120449: [[82], 256],
                120450: [[83], 256],
                120451: [[84], 256],
                120452: [[85], 256],
                120453: [[86], 256],
                120454: [[87], 256],
                120455: [[88], 256],
                120456: [[89], 256],
                120457: [[90], 256],
                120458: [[97], 256],
                120459: [[98], 256],
                120460: [[99], 256],
                120461: [[100], 256],
                120462: [[101], 256],
                120463: [[102], 256],
                120464: [[103], 256],
                120465: [[104], 256],
                120466: [[105], 256],
                120467: [[106], 256],
                120468: [[107], 256],
                120469: [[108], 256],
                120470: [[109], 256],
                120471: [[110], 256],
                120472: [[111], 256],
                120473: [[112], 256],
                120474: [[113], 256],
                120475: [[114], 256],
                120476: [[115], 256],
                120477: [[116], 256],
                120478: [[117], 256],
                120479: [[118], 256],
                120480: [[119], 256],
                120481: [[120], 256],
                120482: [[121], 256],
                120483: [[122], 256],
                120484: [[305], 256],
                120485: [[567], 256],
                120488: [[913], 256],
                120489: [[914], 256],
                120490: [[915], 256],
                120491: [[916], 256],
                120492: [[917], 256],
                120493: [[918], 256],
                120494: [[919], 256],
                120495: [[920], 256],
                120496: [[921], 256],
                120497: [[922], 256],
                120498: [[923], 256],
                120499: [[924], 256],
                120500: [[925], 256],
                120501: [[926], 256],
                120502: [[927], 256],
                120503: [[928], 256],
                120504: [[929], 256],
                120505: [[1012], 256],
                120506: [[931], 256],
                120507: [[932], 256],
                120508: [[933], 256],
                120509: [[934], 256],
                120510: [[935], 256],
                120511: [[936], 256],
                120512: [[937], 256],
                120513: [[8711], 256],
                120514: [[945], 256],
                120515: [[946], 256],
                120516: [[947], 256],
                120517: [[948], 256],
                120518: [[949], 256],
                120519: [[950], 256],
                120520: [[951], 256],
                120521: [[952], 256],
                120522: [[953], 256],
                120523: [[954], 256],
                120524: [[955], 256],
                120525: [[956], 256],
                120526: [[957], 256],
                120527: [[958], 256],
                120528: [[959], 256],
                120529: [[960], 256],
                120530: [[961], 256],
                120531: [[962], 256],
                120532: [[963], 256],
                120533: [[964], 256],
                120534: [[965], 256],
                120535: [[966], 256],
                120536: [[967], 256],
                120537: [[968], 256],
                120538: [[969], 256],
                120539: [[8706], 256],
                120540: [[1013], 256],
                120541: [[977], 256],
                120542: [[1008], 256],
                120543: [[981], 256],
                120544: [[1009], 256],
                120545: [[982], 256],
                120546: [[913], 256],
                120547: [[914], 256],
                120548: [[915], 256],
                120549: [[916], 256],
                120550: [[917], 256],
                120551: [[918], 256],
                120552: [[919], 256],
                120553: [[920], 256],
                120554: [[921], 256],
                120555: [[922], 256],
                120556: [[923], 256],
                120557: [[924], 256],
                120558: [[925], 256],
                120559: [[926], 256],
                120560: [[927], 256],
                120561: [[928], 256],
                120562: [[929], 256],
                120563: [[1012], 256],
                120564: [[931], 256],
                120565: [[932], 256],
                120566: [[933], 256],
                120567: [[934], 256],
                120568: [[935], 256],
                120569: [[936], 256],
                120570: [[937], 256],
                120571: [[8711], 256],
                120572: [[945], 256],
                120573: [[946], 256],
                120574: [[947], 256],
                120575: [[948], 256]
            },
            55040: {
                120576: [[949], 256],
                120577: [[950], 256],
                120578: [[951], 256],
                120579: [[952], 256],
                120580: [[953], 256],
                120581: [[954], 256],
                120582: [[955], 256],
                120583: [[956], 256],
                120584: [[957], 256],
                120585: [[958], 256],
                120586: [[959], 256],
                120587: [[960], 256],
                120588: [[961], 256],
                120589: [[962], 256],
                120590: [[963], 256],
                120591: [[964], 256],
                120592: [[965], 256],
                120593: [[966], 256],
                120594: [[967], 256],
                120595: [[968], 256],
                120596: [[969], 256],
                120597: [[8706], 256],
                120598: [[1013], 256],
                120599: [[977], 256],
                120600: [[1008], 256],
                120601: [[981], 256],
                120602: [[1009], 256],
                120603: [[982], 256],
                120604: [[913], 256],
                120605: [[914], 256],
                120606: [[915], 256],
                120607: [[916], 256],
                120608: [[917], 256],
                120609: [[918], 256],
                120610: [[919], 256],
                120611: [[920], 256],
                120612: [[921], 256],
                120613: [[922], 256],
                120614: [[923], 256],
                120615: [[924], 256],
                120616: [[925], 256],
                120617: [[926], 256],
                120618: [[927], 256],
                120619: [[928], 256],
                120620: [[929], 256],
                120621: [[1012], 256],
                120622: [[931], 256],
                120623: [[932], 256],
                120624: [[933], 256],
                120625: [[934], 256],
                120626: [[935], 256],
                120627: [[936], 256],
                120628: [[937], 256],
                120629: [[8711], 256],
                120630: [[945], 256],
                120631: [[946], 256],
                120632: [[947], 256],
                120633: [[948], 256],
                120634: [[949], 256],
                120635: [[950], 256],
                120636: [[951], 256],
                120637: [[952], 256],
                120638: [[953], 256],
                120639: [[954], 256],
                120640: [[955], 256],
                120641: [[956], 256],
                120642: [[957], 256],
                120643: [[958], 256],
                120644: [[959], 256],
                120645: [[960], 256],
                120646: [[961], 256],
                120647: [[962], 256],
                120648: [[963], 256],
                120649: [[964], 256],
                120650: [[965], 256],
                120651: [[966], 256],
                120652: [[967], 256],
                120653: [[968], 256],
                120654: [[969], 256],
                120655: [[8706], 256],
                120656: [[1013], 256],
                120657: [[977], 256],
                120658: [[1008], 256],
                120659: [[981], 256],
                120660: [[1009], 256],
                120661: [[982], 256],
                120662: [[913], 256],
                120663: [[914], 256],
                120664: [[915], 256],
                120665: [[916], 256],
                120666: [[917], 256],
                120667: [[918], 256],
                120668: [[919], 256],
                120669: [[920], 256],
                120670: [[921], 256],
                120671: [[922], 256],
                120672: [[923], 256],
                120673: [[924], 256],
                120674: [[925], 256],
                120675: [[926], 256],
                120676: [[927], 256],
                120677: [[928], 256],
                120678: [[929], 256],
                120679: [[1012], 256],
                120680: [[931], 256],
                120681: [[932], 256],
                120682: [[933], 256],
                120683: [[934], 256],
                120684: [[935], 256],
                120685: [[936], 256],
                120686: [[937], 256],
                120687: [[8711], 256],
                120688: [[945], 256],
                120689: [[946], 256],
                120690: [[947], 256],
                120691: [[948], 256],
                120692: [[949], 256],
                120693: [[950], 256],
                120694: [[951], 256],
                120695: [[952], 256],
                120696: [[953], 256],
                120697: [[954], 256],
                120698: [[955], 256],
                120699: [[956], 256],
                120700: [[957], 256],
                120701: [[958], 256],
                120702: [[959], 256],
                120703: [[960], 256],
                120704: [[961], 256],
                120705: [[962], 256],
                120706: [[963], 256],
                120707: [[964], 256],
                120708: [[965], 256],
                120709: [[966], 256],
                120710: [[967], 256],
                120711: [[968], 256],
                120712: [[969], 256],
                120713: [[8706], 256],
                120714: [[1013], 256],
                120715: [[977], 256],
                120716: [[1008], 256],
                120717: [[981], 256],
                120718: [[1009], 256],
                120719: [[982], 256],
                120720: [[913], 256],
                120721: [[914], 256],
                120722: [[915], 256],
                120723: [[916], 256],
                120724: [[917], 256],
                120725: [[918], 256],
                120726: [[919], 256],
                120727: [[920], 256],
                120728: [[921], 256],
                120729: [[922], 256],
                120730: [[923], 256],
                120731: [[924], 256],
                120732: [[925], 256],
                120733: [[926], 256],
                120734: [[927], 256],
                120735: [[928], 256],
                120736: [[929], 256],
                120737: [[1012], 256],
                120738: [[931], 256],
                120739: [[932], 256],
                120740: [[933], 256],
                120741: [[934], 256],
                120742: [[935], 256],
                120743: [[936], 256],
                120744: [[937], 256],
                120745: [[8711], 256],
                120746: [[945], 256],
                120747: [[946], 256],
                120748: [[947], 256],
                120749: [[948], 256],
                120750: [[949], 256],
                120751: [[950], 256],
                120752: [[951], 256],
                120753: [[952], 256],
                120754: [[953], 256],
                120755: [[954], 256],
                120756: [[955], 256],
                120757: [[956], 256],
                120758: [[957], 256],
                120759: [[958], 256],
                120760: [[959], 256],
                120761: [[960], 256],
                120762: [[961], 256],
                120763: [[962], 256],
                120764: [[963], 256],
                120765: [[964], 256],
                120766: [[965], 256],
                120767: [[966], 256],
                120768: [[967], 256],
                120769: [[968], 256],
                120770: [[969], 256],
                120771: [[8706], 256],
                120772: [[1013], 256],
                120773: [[977], 256],
                120774: [[1008], 256],
                120775: [[981], 256],
                120776: [[1009], 256],
                120777: [[982], 256],
                120778: [[988], 256],
                120779: [[989], 256],
                120782: [[48], 256],
                120783: [[49], 256],
                120784: [[50], 256],
                120785: [[51], 256],
                120786: [[52], 256],
                120787: [[53], 256],
                120788: [[54], 256],
                120789: [[55], 256],
                120790: [[56], 256],
                120791: [[57], 256],
                120792: [[48], 256],
                120793: [[49], 256],
                120794: [[50], 256],
                120795: [[51], 256],
                120796: [[52], 256],
                120797: [[53], 256],
                120798: [[54], 256],
                120799: [[55], 256],
                120800: [[56], 256],
                120801: [[57], 256],
                120802: [[48], 256],
                120803: [[49], 256],
                120804: [[50], 256],
                120805: [[51], 256],
                120806: [[52], 256],
                120807: [[53], 256],
                120808: [[54], 256],
                120809: [[55], 256],
                120810: [[56], 256],
                120811: [[57], 256],
                120812: [[48], 256],
                120813: [[49], 256],
                120814: [[50], 256],
                120815: [[51], 256],
                120816: [[52], 256],
                120817: [[53], 256],
                120818: [[54], 256],
                120819: [[55], 256],
                120820: [[56], 256],
                120821: [[57], 256],
                120822: [[48], 256],
                120823: [[49], 256],
                120824: [[50], 256],
                120825: [[51], 256],
                120826: [[52], 256],
                120827: [[53], 256],
                120828: [[54], 256],
                120829: [[55], 256],
                120830: [[56], 256],
                120831: [[57], 256]
            },
            59392: {
                125136: [, 220],
                125137: [, 220],
                125138: [, 220],
                125139: [, 220],
                125140: [, 220],
                125141: [, 220],
                125142: [, 220]
            },
            60928: {
                126464: [[1575], 256],
                126465: [[1576], 256],
                126466: [[1580], 256],
                126467: [[1583], 256],
                126469: [[1608], 256],
                126470: [[1586], 256],
                126471: [[1581], 256],
                126472: [[1591], 256],
                126473: [[1610], 256],
                126474: [[1603], 256],
                126475: [[1604], 256],
                126476: [[1605], 256],
                126477: [[1606], 256],
                126478: [[1587], 256],
                126479: [[1593], 256],
                126480: [[1601], 256],
                126481: [[1589], 256],
                126482: [[1602], 256],
                126483: [[1585], 256],
                126484: [[1588], 256],
                126485: [[1578], 256],
                126486: [[1579], 256],
                126487: [[1582], 256],
                126488: [[1584], 256],
                126489: [[1590], 256],
                126490: [[1592], 256],
                126491: [[1594], 256],
                126492: [[1646], 256],
                126493: [[1722], 256],
                126494: [[1697], 256],
                126495: [[1647], 256],
                126497: [[1576], 256],
                126498: [[1580], 256],
                126500: [[1607], 256],
                126503: [[1581], 256],
                126505: [[1610], 256],
                126506: [[1603], 256],
                126507: [[1604], 256],
                126508: [[1605], 256],
                126509: [[1606], 256],
                126510: [[1587], 256],
                126511: [[1593], 256],
                126512: [[1601], 256],
                126513: [[1589], 256],
                126514: [[1602], 256],
                126516: [[1588], 256],
                126517: [[1578], 256],
                126518: [[1579], 256],
                126519: [[1582], 256],
                126521: [[1590], 256],
                126523: [[1594], 256],
                126530: [[1580], 256],
                126535: [[1581], 256],
                126537: [[1610], 256],
                126539: [[1604], 256],
                126541: [[1606], 256],
                126542: [[1587], 256],
                126543: [[1593], 256],
                126545: [[1589], 256],
                126546: [[1602], 256],
                126548: [[1588], 256],
                126551: [[1582], 256],
                126553: [[1590], 256],
                126555: [[1594], 256],
                126557: [[1722], 256],
                126559: [[1647], 256],
                126561: [[1576], 256],
                126562: [[1580], 256],
                126564: [[1607], 256],
                126567: [[1581], 256],
                126568: [[1591], 256],
                126569: [[1610], 256],
                126570: [[1603], 256],
                126572: [[1605], 256],
                126573: [[1606], 256],
                126574: [[1587], 256],
                126575: [[1593], 256],
                126576: [[1601], 256],
                126577: [[1589], 256],
                126578: [[1602], 256],
                126580: [[1588], 256],
                126581: [[1578], 256],
                126582: [[1579], 256],
                126583: [[1582], 256],
                126585: [[1590], 256],
                126586: [[1592], 256],
                126587: [[1594], 256],
                126588: [[1646], 256],
                126590: [[1697], 256],
                126592: [[1575], 256],
                126593: [[1576], 256],
                126594: [[1580], 256],
                126595: [[1583], 256],
                126596: [[1607], 256],
                126597: [[1608], 256],
                126598: [[1586], 256],
                126599: [[1581], 256],
                126600: [[1591], 256],
                126601: [[1610], 256],
                126603: [[1604], 256],
                126604: [[1605], 256],
                126605: [[1606], 256],
                126606: [[1587], 256],
                126607: [[1593], 256],
                126608: [[1601], 256],
                126609: [[1589], 256],
                126610: [[1602], 256],
                126611: [[1585], 256],
                126612: [[1588], 256],
                126613: [[1578], 256],
                126614: [[1579], 256],
                126615: [[1582], 256],
                126616: [[1584], 256],
                126617: [[1590], 256],
                126618: [[1592], 256],
                126619: [[1594], 256],
                126625: [[1576], 256],
                126626: [[1580], 256],
                126627: [[1583], 256],
                126629: [[1608], 256],
                126630: [[1586], 256],
                126631: [[1581], 256],
                126632: [[1591], 256],
                126633: [[1610], 256],
                126635: [[1604], 256],
                126636: [[1605], 256],
                126637: [[1606], 256],
                126638: [[1587], 256],
                126639: [[1593], 256],
                126640: [[1601], 256],
                126641: [[1589], 256],
                126642: [[1602], 256],
                126643: [[1585], 256],
                126644: [[1588], 256],
                126645: [[1578], 256],
                126646: [[1579], 256],
                126647: [[1582], 256],
                126648: [[1584], 256],
                126649: [[1590], 256],
                126650: [[1592], 256],
                126651: [[1594], 256]
            },
            61696: {
                127232: [[48, 46], 256],
                127233: [[48, 44], 256],
                127234: [[49, 44], 256],
                127235: [[50, 44], 256],
                127236: [[51, 44], 256],
                127237: [[52, 44], 256],
                127238: [[53, 44], 256],
                127239: [[54, 44], 256],
                127240: [[55, 44], 256],
                127241: [[56, 44], 256],
                127242: [[57, 44], 256],
                127248: [[40, 65, 41], 256],
                127249: [[40, 66, 41], 256],
                127250: [[40, 67, 41], 256],
                127251: [[40, 68, 41], 256],
                127252: [[40, 69, 41], 256],
                127253: [[40, 70, 41], 256],
                127254: [[40, 71, 41], 256],
                127255: [[40, 72, 41], 256],
                127256: [[40, 73, 41], 256],
                127257: [[40, 74, 41], 256],
                127258: [[40, 75, 41], 256],
                127259: [[40, 76, 41], 256],
                127260: [[40, 77, 41], 256],
                127261: [[40, 78, 41], 256],
                127262: [[40, 79, 41], 256],
                127263: [[40, 80, 41], 256],
                127264: [[40, 81, 41], 256],
                127265: [[40, 82, 41], 256],
                127266: [[40, 83, 41], 256],
                127267: [[40, 84, 41], 256],
                127268: [[40, 85, 41], 256],
                127269: [[40, 86, 41], 256],
                127270: [[40, 87, 41], 256],
                127271: [[40, 88, 41], 256],
                127272: [[40, 89, 41], 256],
                127273: [[40, 90, 41], 256],
                127274: [[12308, 83, 12309], 256],
                127275: [[67], 256],
                127276: [[82], 256],
                127277: [[67, 68], 256],
                127278: [[87, 90], 256],
                127280: [[65], 256],
                127281: [[66], 256],
                127282: [[67], 256],
                127283: [[68], 256],
                127284: [[69], 256],
                127285: [[70], 256],
                127286: [[71], 256],
                127287: [[72], 256],
                127288: [[73], 256],
                127289: [[74], 256],
                127290: [[75], 256],
                127291: [[76], 256],
                127292: [[77], 256],
                127293: [[78], 256],
                127294: [[79], 256],
                127295: [[80], 256],
                127296: [[81], 256],
                127297: [[82], 256],
                127298: [[83], 256],
                127299: [[84], 256],
                127300: [[85], 256],
                127301: [[86], 256],
                127302: [[87], 256],
                127303: [[88], 256],
                127304: [[89], 256],
                127305: [[90], 256],
                127306: [[72, 86], 256],
                127307: [[77, 86], 256],
                127308: [[83, 68], 256],
                127309: [[83, 83], 256],
                127310: [[80, 80, 86], 256],
                127311: [[87, 67], 256],
                127338: [[77, 67], 256],
                127339: [[77, 68], 256],
                127376: [[68, 74], 256]
            },
            61952: {
                127488: [[12411, 12363], 256],
                127489: [[12467, 12467], 256],
                127490: [[12469], 256],
                127504: [[25163], 256],
                127505: [[23383], 256],
                127506: [[21452], 256],
                127507: [[12487], 256],
                127508: [[20108], 256],
                127509: [[22810], 256],
                127510: [[35299], 256],
                127511: [[22825], 256],
                127512: [[20132], 256],
                127513: [[26144], 256],
                127514: [[28961], 256],
                127515: [[26009], 256],
                127516: [[21069], 256],
                127517: [[24460], 256],
                127518: [[20877], 256],
                127519: [[26032], 256],
                127520: [[21021], 256],
                127521: [[32066], 256],
                127522: [[29983], 256],
                127523: [[36009], 256],
                127524: [[22768], 256],
                127525: [[21561], 256],
                127526: [[28436], 256],
                127527: [[25237], 256],
                127528: [[25429], 256],
                127529: [[19968], 256],
                127530: [[19977], 256],
                127531: [[36938], 256],
                127532: [[24038], 256],
                127533: [[20013], 256],
                127534: [[21491], 256],
                127535: [[25351], 256],
                127536: [[36208], 256],
                127537: [[25171], 256],
                127538: [[31105], 256],
                127539: [[31354], 256],
                127540: [[21512], 256],
                127541: [[28288], 256],
                127542: [[26377], 256],
                127543: [[26376], 256],
                127544: [[30003], 256],
                127545: [[21106], 256],
                127546: [[21942], 256],
                127552: [[12308, 26412, 12309], 256],
                127553: [[12308, 19977, 12309], 256],
                127554: [[12308, 20108, 12309], 256],
                127555: [[12308, 23433, 12309], 256],
                127556: [[12308, 28857, 12309], 256],
                127557: [[12308, 25171, 12309], 256],
                127558: [[12308, 30423, 12309], 256],
                127559: [[12308, 21213, 12309], 256],
                127560: [[12308, 25943, 12309], 256],
                127568: [[24471], 256],
                127569: [[21487], 256]
            },
            63488: {
                194560: [[20029]],
                194561: [[20024]],
                194562: [[20033]],
                194563: [[131362]],
                194564: [[20320]],
                194565: [[20398]],
                194566: [[20411]],
                194567: [[20482]],
                194568: [[20602]],
                194569: [[20633]],
                194570: [[20711]],
                194571: [[20687]],
                194572: [[13470]],
                194573: [[132666]],
                194574: [[20813]],
                194575: [[20820]],
                194576: [[20836]],
                194577: [[20855]],
                194578: [[132380]],
                194579: [[13497]],
                194580: [[20839]],
                194581: [[20877]],
                194582: [[132427]],
                194583: [[20887]],
                194584: [[20900]],
                194585: [[20172]],
                194586: [[20908]],
                194587: [[20917]],
                194588: [[168415]],
                194589: [[20981]],
                194590: [[20995]],
                194591: [[13535]],
                194592: [[21051]],
                194593: [[21062]],
                194594: [[21106]],
                194595: [[21111]],
                194596: [[13589]],
                194597: [[21191]],
                194598: [[21193]],
                194599: [[21220]],
                194600: [[21242]],
                194601: [[21253]],
                194602: [[21254]],
                194603: [[21271]],
                194604: [[21321]],
                194605: [[21329]],
                194606: [[21338]],
                194607: [[21363]],
                194608: [[21373]],
                194609: [[21375]],
                194610: [[21375]],
                194611: [[21375]],
                194612: [[133676]],
                194613: [[28784]],
                194614: [[21450]],
                194615: [[21471]],
                194616: [[133987]],
                194617: [[21483]],
                194618: [[21489]],
                194619: [[21510]],
                194620: [[21662]],
                194621: [[21560]],
                194622: [[21576]],
                194623: [[21608]],
                194624: [[21666]],
                194625: [[21750]],
                194626: [[21776]],
                194627: [[21843]],
                194628: [[21859]],
                194629: [[21892]],
                194630: [[21892]],
                194631: [[21913]],
                194632: [[21931]],
                194633: [[21939]],
                194634: [[21954]],
                194635: [[22294]],
                194636: [[22022]],
                194637: [[22295]],
                194638: [[22097]],
                194639: [[22132]],
                194640: [[20999]],
                194641: [[22766]],
                194642: [[22478]],
                194643: [[22516]],
                194644: [[22541]],
                194645: [[22411]],
                194646: [[22578]],
                194647: [[22577]],
                194648: [[22700]],
                194649: [[136420]],
                194650: [[22770]],
                194651: [[22775]],
                194652: [[22790]],
                194653: [[22810]],
                194654: [[22818]],
                194655: [[22882]],
                194656: [[136872]],
                194657: [[136938]],
                194658: [[23020]],
                194659: [[23067]],
                194660: [[23079]],
                194661: [[23e3]],
                194662: [[23142]],
                194663: [[14062]],
                194664: [[14076]],
                194665: [[23304]],
                194666: [[23358]],
                194667: [[23358]],
                194668: [[137672]],
                194669: [[23491]],
                194670: [[23512]],
                194671: [[23527]],
                194672: [[23539]],
                194673: [[138008]],
                194674: [[23551]],
                194675: [[23558]],
                194676: [[24403]],
                194677: [[23586]],
                194678: [[14209]],
                194679: [[23648]],
                194680: [[23662]],
                194681: [[23744]],
                194682: [[23693]],
                194683: [[138724]],
                194684: [[23875]],
                194685: [[138726]],
                194686: [[23918]],
                194687: [[23915]],
                194688: [[23932]],
                194689: [[24033]],
                194690: [[24034]],
                194691: [[14383]],
                194692: [[24061]],
                194693: [[24104]],
                194694: [[24125]],
                194695: [[24169]],
                194696: [[14434]],
                194697: [[139651]],
                194698: [[14460]],
                194699: [[24240]],
                194700: [[24243]],
                194701: [[24246]],
                194702: [[24266]],
                194703: [[172946]],
                194704: [[24318]],
                194705: [[140081]],
                194706: [[140081]],
                194707: [[33281]],
                194708: [[24354]],
                194709: [[24354]],
                194710: [[14535]],
                194711: [[144056]],
                194712: [[156122]],
                194713: [[24418]],
                194714: [[24427]],
                194715: [[14563]],
                194716: [[24474]],
                194717: [[24525]],
                194718: [[24535]],
                194719: [[24569]],
                194720: [[24705]],
                194721: [[14650]],
                194722: [[14620]],
                194723: [[24724]],
                194724: [[141012]],
                194725: [[24775]],
                194726: [[24904]],
                194727: [[24908]],
                194728: [[24910]],
                194729: [[24908]],
                194730: [[24954]],
                194731: [[24974]],
                194732: [[25010]],
                194733: [[24996]],
                194734: [[25007]],
                194735: [[25054]],
                194736: [[25074]],
                194737: [[25078]],
                194738: [[25104]],
                194739: [[25115]],
                194740: [[25181]],
                194741: [[25265]],
                194742: [[25300]],
                194743: [[25424]],
                194744: [[142092]],
                194745: [[25405]],
                194746: [[25340]],
                194747: [[25448]],
                194748: [[25475]],
                194749: [[25572]],
                194750: [[142321]],
                194751: [[25634]],
                194752: [[25541]],
                194753: [[25513]],
                194754: [[14894]],
                194755: [[25705]],
                194756: [[25726]],
                194757: [[25757]],
                194758: [[25719]],
                194759: [[14956]],
                194760: [[25935]],
                194761: [[25964]],
                194762: [[143370]],
                194763: [[26083]],
                194764: [[26360]],
                194765: [[26185]],
                194766: [[15129]],
                194767: [[26257]],
                194768: [[15112]],
                194769: [[15076]],
                194770: [[20882]],
                194771: [[20885]],
                194772: [[26368]],
                194773: [[26268]],
                194774: [[32941]],
                194775: [[17369]],
                194776: [[26391]],
                194777: [[26395]],
                194778: [[26401]],
                194779: [[26462]],
                194780: [[26451]],
                194781: [[144323]],
                194782: [[15177]],
                194783: [[26618]],
                194784: [[26501]],
                194785: [[26706]],
                194786: [[26757]],
                194787: [[144493]],
                194788: [[26766]],
                194789: [[26655]],
                194790: [[26900]],
                194791: [[15261]],
                194792: [[26946]],
                194793: [[27043]],
                194794: [[27114]],
                194795: [[27304]],
                194796: [[145059]],
                194797: [[27355]],
                194798: [[15384]],
                194799: [[27425]],
                194800: [[145575]],
                194801: [[27476]],
                194802: [[15438]],
                194803: [[27506]],
                194804: [[27551]],
                194805: [[27578]],
                194806: [[27579]],
                194807: [[146061]],
                194808: [[138507]],
                194809: [[146170]],
                194810: [[27726]],
                194811: [[146620]],
                194812: [[27839]],
                194813: [[27853]],
                194814: [[27751]],
                194815: [[27926]]
            },
            63744: {
                63744: [[35912]],
                63745: [[26356]],
                63746: [[36554]],
                63747: [[36040]],
                63748: [[28369]],
                63749: [[20018]],
                63750: [[21477]],
                63751: [[40860]],
                63752: [[40860]],
                63753: [[22865]],
                63754: [[37329]],
                63755: [[21895]],
                63756: [[22856]],
                63757: [[25078]],
                63758: [[30313]],
                63759: [[32645]],
                63760: [[34367]],
                63761: [[34746]],
                63762: [[35064]],
                63763: [[37007]],
                63764: [[27138]],
                63765: [[27931]],
                63766: [[28889]],
                63767: [[29662]],
                63768: [[33853]],
                63769: [[37226]],
                63770: [[39409]],
                63771: [[20098]],
                63772: [[21365]],
                63773: [[27396]],
                63774: [[29211]],
                63775: [[34349]],
                63776: [[40478]],
                63777: [[23888]],
                63778: [[28651]],
                63779: [[34253]],
                63780: [[35172]],
                63781: [[25289]],
                63782: [[33240]],
                63783: [[34847]],
                63784: [[24266]],
                63785: [[26391]],
                63786: [[28010]],
                63787: [[29436]],
                63788: [[37070]],
                63789: [[20358]],
                63790: [[20919]],
                63791: [[21214]],
                63792: [[25796]],
                63793: [[27347]],
                63794: [[29200]],
                63795: [[30439]],
                63796: [[32769]],
                63797: [[34310]],
                63798: [[34396]],
                63799: [[36335]],
                63800: [[38706]],
                63801: [[39791]],
                63802: [[40442]],
                63803: [[30860]],
                63804: [[31103]],
                63805: [[32160]],
                63806: [[33737]],
                63807: [[37636]],
                63808: [[40575]],
                63809: [[35542]],
                63810: [[22751]],
                63811: [[24324]],
                63812: [[31840]],
                63813: [[32894]],
                63814: [[29282]],
                63815: [[30922]],
                63816: [[36034]],
                63817: [[38647]],
                63818: [[22744]],
                63819: [[23650]],
                63820: [[27155]],
                63821: [[28122]],
                63822: [[28431]],
                63823: [[32047]],
                63824: [[32311]],
                63825: [[38475]],
                63826: [[21202]],
                63827: [[32907]],
                63828: [[20956]],
                63829: [[20940]],
                63830: [[31260]],
                63831: [[32190]],
                63832: [[33777]],
                63833: [[38517]],
                63834: [[35712]],
                63835: [[25295]],
                63836: [[27138]],
                63837: [[35582]],
                63838: [[20025]],
                63839: [[23527]],
                63840: [[24594]],
                63841: [[29575]],
                63842: [[30064]],
                63843: [[21271]],
                63844: [[30971]],
                63845: [[20415]],
                63846: [[24489]],
                63847: [[19981]],
                63848: [[27852]],
                63849: [[25976]],
                63850: [[32034]],
                63851: [[21443]],
                63852: [[22622]],
                63853: [[30465]],
                63854: [[33865]],
                63855: [[35498]],
                63856: [[27578]],
                63857: [[36784]],
                63858: [[27784]],
                63859: [[25342]],
                63860: [[33509]],
                63861: [[25504]],
                63862: [[30053]],
                63863: [[20142]],
                63864: [[20841]],
                63865: [[20937]],
                63866: [[26753]],
                63867: [[31975]],
                63868: [[33391]],
                63869: [[35538]],
                63870: [[37327]],
                63871: [[21237]],
                63872: [[21570]],
                63873: [[22899]],
                63874: [[24300]],
                63875: [[26053]],
                63876: [[28670]],
                63877: [[31018]],
                63878: [[38317]],
                63879: [[39530]],
                63880: [[40599]],
                63881: [[40654]],
                63882: [[21147]],
                63883: [[26310]],
                63884: [[27511]],
                63885: [[36706]],
                63886: [[24180]],
                63887: [[24976]],
                63888: [[25088]],
                63889: [[25754]],
                63890: [[28451]],
                63891: [[29001]],
                63892: [[29833]],
                63893: [[31178]],
                63894: [[32244]],
                63895: [[32879]],
                63896: [[36646]],
                63897: [[34030]],
                63898: [[36899]],
                63899: [[37706]],
                63900: [[21015]],
                63901: [[21155]],
                63902: [[21693]],
                63903: [[28872]],
                63904: [[35010]],
                63905: [[35498]],
                63906: [[24265]],
                63907: [[24565]],
                63908: [[25467]],
                63909: [[27566]],
                63910: [[31806]],
                63911: [[29557]],
                63912: [[20196]],
                63913: [[22265]],
                63914: [[23527]],
                63915: [[23994]],
                63916: [[24604]],
                63917: [[29618]],
                63918: [[29801]],
                63919: [[32666]],
                63920: [[32838]],
                63921: [[37428]],
                63922: [[38646]],
                63923: [[38728]],
                63924: [[38936]],
                63925: [[20363]],
                63926: [[31150]],
                63927: [[37300]],
                63928: [[38584]],
                63929: [[24801]],
                63930: [[20102]],
                63931: [[20698]],
                63932: [[23534]],
                63933: [[23615]],
                63934: [[26009]],
                63935: [[27138]],
                63936: [[29134]],
                63937: [[30274]],
                63938: [[34044]],
                63939: [[36988]],
                63940: [[40845]],
                63941: [[26248]],
                63942: [[38446]],
                63943: [[21129]],
                63944: [[26491]],
                63945: [[26611]],
                63946: [[27969]],
                63947: [[28316]],
                63948: [[29705]],
                63949: [[30041]],
                63950: [[30827]],
                63951: [[32016]],
                63952: [[39006]],
                63953: [[20845]],
                63954: [[25134]],
                63955: [[38520]],
                63956: [[20523]],
                63957: [[23833]],
                63958: [[28138]],
                63959: [[36650]],
                63960: [[24459]],
                63961: [[24900]],
                63962: [[26647]],
                63963: [[29575]],
                63964: [[38534]],
                63965: [[21033]],
                63966: [[21519]],
                63967: [[23653]],
                63968: [[26131]],
                63969: [[26446]],
                63970: [[26792]],
                63971: [[27877]],
                63972: [[29702]],
                63973: [[30178]],
                63974: [[32633]],
                63975: [[35023]],
                63976: [[35041]],
                63977: [[37324]],
                63978: [[38626]],
                63979: [[21311]],
                63980: [[28346]],
                63981: [[21533]],
                63982: [[29136]],
                63983: [[29848]],
                63984: [[34298]],
                63985: [[38563]],
                63986: [[40023]],
                63987: [[40607]],
                63988: [[26519]],
                63989: [[28107]],
                63990: [[33256]],
                63991: [[31435]],
                63992: [[31520]],
                63993: [[31890]],
                63994: [[29376]],
                63995: [[28825]],
                63996: [[35672]],
                63997: [[20160]],
                63998: [[33590]],
                63999: [[21050]],
                194816: [[27966]],
                194817: [[28023]],
                194818: [[27969]],
                194819: [[28009]],
                194820: [[28024]],
                194821: [[28037]],
                194822: [[146718]],
                194823: [[27956]],
                194824: [[28207]],
                194825: [[28270]],
                194826: [[15667]],
                194827: [[28363]],
                194828: [[28359]],
                194829: [[147153]],
                194830: [[28153]],
                194831: [[28526]],
                194832: [[147294]],
                194833: [[147342]],
                194834: [[28614]],
                194835: [[28729]],
                194836: [[28702]],
                194837: [[28699]],
                194838: [[15766]],
                194839: [[28746]],
                194840: [[28797]],
                194841: [[28791]],
                194842: [[28845]],
                194843: [[132389]],
                194844: [[28997]],
                194845: [[148067]],
                194846: [[29084]],
                194847: [[148395]],
                194848: [[29224]],
                194849: [[29237]],
                194850: [[29264]],
                194851: [[149e3]],
                194852: [[29312]],
                194853: [[29333]],
                194854: [[149301]],
                194855: [[149524]],
                194856: [[29562]],
                194857: [[29579]],
                194858: [[16044]],
                194859: [[29605]],
                194860: [[16056]],
                194861: [[16056]],
                194862: [[29767]],
                194863: [[29788]],
                194864: [[29809]],
                194865: [[29829]],
                194866: [[29898]],
                194867: [[16155]],
                194868: [[29988]],
                194869: [[150582]],
                194870: [[30014]],
                194871: [[150674]],
                194872: [[30064]],
                194873: [[139679]],
                194874: [[30224]],
                194875: [[151457]],
                194876: [[151480]],
                194877: [[151620]],
                194878: [[16380]],
                194879: [[16392]],
                194880: [[30452]],
                194881: [[151795]],
                194882: [[151794]],
                194883: [[151833]],
                194884: [[151859]],
                194885: [[30494]],
                194886: [[30495]],
                194887: [[30495]],
                194888: [[30538]],
                194889: [[16441]],
                194890: [[30603]],
                194891: [[16454]],
                194892: [[16534]],
                194893: [[152605]],
                194894: [[30798]],
                194895: [[30860]],
                194896: [[30924]],
                194897: [[16611]],
                194898: [[153126]],
                194899: [[31062]],
                194900: [[153242]],
                194901: [[153285]],
                194902: [[31119]],
                194903: [[31211]],
                194904: [[16687]],
                194905: [[31296]],
                194906: [[31306]],
                194907: [[31311]],
                194908: [[153980]],
                194909: [[154279]],
                194910: [[154279]],
                194911: [[31470]],
                194912: [[16898]],
                194913: [[154539]],
                194914: [[31686]],
                194915: [[31689]],
                194916: [[16935]],
                194917: [[154752]],
                194918: [[31954]],
                194919: [[17056]],
                194920: [[31976]],
                194921: [[31971]],
                194922: [[32e3]],
                194923: [[155526]],
                194924: [[32099]],
                194925: [[17153]],
                194926: [[32199]],
                194927: [[32258]],
                194928: [[32325]],
                194929: [[17204]],
                194930: [[156200]],
                194931: [[156231]],
                194932: [[17241]],
                194933: [[156377]],
                194934: [[32634]],
                194935: [[156478]],
                194936: [[32661]],
                194937: [[32762]],
                194938: [[32773]],
                194939: [[156890]],
                194940: [[156963]],
                194941: [[32864]],
                194942: [[157096]],
                194943: [[32880]],
                194944: [[144223]],
                194945: [[17365]],
                194946: [[32946]],
                194947: [[33027]],
                194948: [[17419]],
                194949: [[33086]],
                194950: [[23221]],
                194951: [[157607]],
                194952: [[157621]],
                194953: [[144275]],
                194954: [[144284]],
                194955: [[33281]],
                194956: [[33284]],
                194957: [[36766]],
                194958: [[17515]],
                194959: [[33425]],
                194960: [[33419]],
                194961: [[33437]],
                194962: [[21171]],
                194963: [[33457]],
                194964: [[33459]],
                194965: [[33469]],
                194966: [[33510]],
                194967: [[158524]],
                194968: [[33509]],
                194969: [[33565]],
                194970: [[33635]],
                194971: [[33709]],
                194972: [[33571]],
                194973: [[33725]],
                194974: [[33767]],
                194975: [[33879]],
                194976: [[33619]],
                194977: [[33738]],
                194978: [[33740]],
                194979: [[33756]],
                194980: [[158774]],
                194981: [[159083]],
                194982: [[158933]],
                194983: [[17707]],
                194984: [[34033]],
                194985: [[34035]],
                194986: [[34070]],
                194987: [[160714]],
                194988: [[34148]],
                194989: [[159532]],
                194990: [[17757]],
                194991: [[17761]],
                194992: [[159665]],
                194993: [[159954]],
                194994: [[17771]],
                194995: [[34384]],
                194996: [[34396]],
                194997: [[34407]],
                194998: [[34409]],
                194999: [[34473]],
                195e3: [[34440]],
                195001: [[34574]],
                195002: [[34530]],
                195003: [[34681]],
                195004: [[34600]],
                195005: [[34667]],
                195006: [[34694]],
                195007: [[17879]],
                195008: [[34785]],
                195009: [[34817]],
                195010: [[17913]],
                195011: [[34912]],
                195012: [[34915]],
                195013: [[161383]],
                195014: [[35031]],
                195015: [[35038]],
                195016: [[17973]],
                195017: [[35066]],
                195018: [[13499]],
                195019: [[161966]],
                195020: [[162150]],
                195021: [[18110]],
                195022: [[18119]],
                195023: [[35488]],
                195024: [[35565]],
                195025: [[35722]],
                195026: [[35925]],
                195027: [[162984]],
                195028: [[36011]],
                195029: [[36033]],
                195030: [[36123]],
                195031: [[36215]],
                195032: [[163631]],
                195033: [[133124]],
                195034: [[36299]],
                195035: [[36284]],
                195036: [[36336]],
                195037: [[133342]],
                195038: [[36564]],
                195039: [[36664]],
                195040: [[165330]],
                195041: [[165357]],
                195042: [[37012]],
                195043: [[37105]],
                195044: [[37137]],
                195045: [[165678]],
                195046: [[37147]],
                195047: [[37432]],
                195048: [[37591]],
                195049: [[37592]],
                195050: [[37500]],
                195051: [[37881]],
                195052: [[37909]],
                195053: [[166906]],
                195054: [[38283]],
                195055: [[18837]],
                195056: [[38327]],
                195057: [[167287]],
                195058: [[18918]],
                195059: [[38595]],
                195060: [[23986]],
                195061: [[38691]],
                195062: [[168261]],
                195063: [[168474]],
                195064: [[19054]],
                195065: [[19062]],
                195066: [[38880]],
                195067: [[168970]],
                195068: [[19122]],
                195069: [[169110]],
                195070: [[38923]],
                195071: [[38923]]
            },
            64e3: {
                64e3: [[20999]],
                64001: [[24230]],
                64002: [[25299]],
                64003: [[31958]],
                64004: [[23429]],
                64005: [[27934]],
                64006: [[26292]],
                64007: [[36667]],
                64008: [[34892]],
                64009: [[38477]],
                64010: [[35211]],
                64011: [[24275]],
                64012: [[20800]],
                64013: [[21952]],
                64016: [[22618]],
                64018: [[26228]],
                64021: [[20958]],
                64022: [[29482]],
                64023: [[30410]],
                64024: [[31036]],
                64025: [[31070]],
                64026: [[31077]],
                64027: [[31119]],
                64028: [[38742]],
                64029: [[31934]],
                64030: [[32701]],
                64032: [[34322]],
                64034: [[35576]],
                64037: [[36920]],
                64038: [[37117]],
                64042: [[39151]],
                64043: [[39164]],
                64044: [[39208]],
                64045: [[40372]],
                64046: [[37086]],
                64047: [[38583]],
                64048: [[20398]],
                64049: [[20711]],
                64050: [[20813]],
                64051: [[21193]],
                64052: [[21220]],
                64053: [[21329]],
                64054: [[21917]],
                64055: [[22022]],
                64056: [[22120]],
                64057: [[22592]],
                64058: [[22696]],
                64059: [[23652]],
                64060: [[23662]],
                64061: [[24724]],
                64062: [[24936]],
                64063: [[24974]],
                64064: [[25074]],
                64065: [[25935]],
                64066: [[26082]],
                64067: [[26257]],
                64068: [[26757]],
                64069: [[28023]],
                64070: [[28186]],
                64071: [[28450]],
                64072: [[29038]],
                64073: [[29227]],
                64074: [[29730]],
                64075: [[30865]],
                64076: [[31038]],
                64077: [[31049]],
                64078: [[31048]],
                64079: [[31056]],
                64080: [[31062]],
                64081: [[31069]],
                64082: [[31117]],
                64083: [[31118]],
                64084: [[31296]],
                64085: [[31361]],
                64086: [[31680]],
                64087: [[32244]],
                64088: [[32265]],
                64089: [[32321]],
                64090: [[32626]],
                64091: [[32773]],
                64092: [[33261]],
                64093: [[33401]],
                64094: [[33401]],
                64095: [[33879]],
                64096: [[35088]],
                64097: [[35222]],
                64098: [[35585]],
                64099: [[35641]],
                64100: [[36051]],
                64101: [[36104]],
                64102: [[36790]],
                64103: [[36920]],
                64104: [[38627]],
                64105: [[38911]],
                64106: [[38971]],
                64107: [[24693]],
                64108: [[148206]],
                64109: [[33304]],
                64112: [[20006]],
                64113: [[20917]],
                64114: [[20840]],
                64115: [[20352]],
                64116: [[20805]],
                64117: [[20864]],
                64118: [[21191]],
                64119: [[21242]],
                64120: [[21917]],
                64121: [[21845]],
                64122: [[21913]],
                64123: [[21986]],
                64124: [[22618]],
                64125: [[22707]],
                64126: [[22852]],
                64127: [[22868]],
                64128: [[23138]],
                64129: [[23336]],
                64130: [[24274]],
                64131: [[24281]],
                64132: [[24425]],
                64133: [[24493]],
                64134: [[24792]],
                64135: [[24910]],
                64136: [[24840]],
                64137: [[24974]],
                64138: [[24928]],
                64139: [[25074]],
                64140: [[25140]],
                64141: [[25540]],
                64142: [[25628]],
                64143: [[25682]],
                64144: [[25942]],
                64145: [[26228]],
                64146: [[26391]],
                64147: [[26395]],
                64148: [[26454]],
                64149: [[27513]],
                64150: [[27578]],
                64151: [[27969]],
                64152: [[28379]],
                64153: [[28363]],
                64154: [[28450]],
                64155: [[28702]],
                64156: [[29038]],
                64157: [[30631]],
                64158: [[29237]],
                64159: [[29359]],
                64160: [[29482]],
                64161: [[29809]],
                64162: [[29958]],
                64163: [[30011]],
                64164: [[30237]],
                64165: [[30239]],
                64166: [[30410]],
                64167: [[30427]],
                64168: [[30452]],
                64169: [[30538]],
                64170: [[30528]],
                64171: [[30924]],
                64172: [[31409]],
                64173: [[31680]],
                64174: [[31867]],
                64175: [[32091]],
                64176: [[32244]],
                64177: [[32574]],
                64178: [[32773]],
                64179: [[33618]],
                64180: [[33775]],
                64181: [[34681]],
                64182: [[35137]],
                64183: [[35206]],
                64184: [[35222]],
                64185: [[35519]],
                64186: [[35576]],
                64187: [[35531]],
                64188: [[35585]],
                64189: [[35582]],
                64190: [[35565]],
                64191: [[35641]],
                64192: [[35722]],
                64193: [[36104]],
                64194: [[36664]],
                64195: [[36978]],
                64196: [[37273]],
                64197: [[37494]],
                64198: [[38524]],
                64199: [[38627]],
                64200: [[38742]],
                64201: [[38875]],
                64202: [[38911]],
                64203: [[38923]],
                64204: [[38971]],
                64205: [[39698]],
                64206: [[40860]],
                64207: [[141386]],
                64208: [[141380]],
                64209: [[144341]],
                64210: [[15261]],
                64211: [[16408]],
                64212: [[16441]],
                64213: [[152137]],
                64214: [[154832]],
                64215: [[163539]],
                64216: [[40771]],
                64217: [[40846]],
                195072: [[38953]],
                195073: [[169398]],
                195074: [[39138]],
                195075: [[19251]],
                195076: [[39209]],
                195077: [[39335]],
                195078: [[39362]],
                195079: [[39422]],
                195080: [[19406]],
                195081: [[170800]],
                195082: [[39698]],
                195083: [[4e4]],
                195084: [[40189]],
                195085: [[19662]],
                195086: [[19693]],
                195087: [[40295]],
                195088: [[172238]],
                195089: [[19704]],
                195090: [[172293]],
                195091: [[172558]],
                195092: [[172689]],
                195093: [[40635]],
                195094: [[19798]],
                195095: [[40697]],
                195096: [[40702]],
                195097: [[40709]],
                195098: [[40719]],
                195099: [[40726]],
                195100: [[40763]],
                195101: [[173568]]
            },
            64256: {
                64256: [[102, 102], 256],
                64257: [[102, 105], 256],
                64258: [[102, 108], 256],
                64259: [[102, 102, 105], 256],
                64260: [[102, 102, 108], 256],
                64261: [[383, 116], 256],
                64262: [[115, 116], 256],
                64275: [[1396, 1398], 256],
                64276: [[1396, 1381], 256],
                64277: [[1396, 1387], 256],
                64278: [[1406, 1398], 256],
                64279: [[1396, 1389], 256],
                64285: [[1497, 1460], 512],
                64286: [, 26],
                64287: [[1522, 1463], 512],
                64288: [[1506], 256],
                64289: [[1488], 256],
                64290: [[1491], 256],
                64291: [[1492], 256],
                64292: [[1499], 256],
                64293: [[1500], 256],
                64294: [[1501], 256],
                64295: [[1512], 256],
                64296: [[1514], 256],
                64297: [[43], 256],
                64298: [[1513, 1473], 512],
                64299: [[1513, 1474], 512],
                64300: [[64329, 1473], 512],
                64301: [[64329, 1474], 512],
                64302: [[1488, 1463], 512],
                64303: [[1488, 1464], 512],
                64304: [[1488, 1468], 512],
                64305: [[1489, 1468], 512],
                64306: [[1490, 1468], 512],
                64307: [[1491, 1468], 512],
                64308: [[1492, 1468], 512],
                64309: [[1493, 1468], 512],
                64310: [[1494, 1468], 512],
                64312: [[1496, 1468], 512],
                64313: [[1497, 1468], 512],
                64314: [[1498, 1468], 512],
                64315: [[1499, 1468], 512],
                64316: [[1500, 1468], 512],
                64318: [[1502, 1468], 512],
                64320: [[1504, 1468], 512],
                64321: [[1505, 1468], 512],
                64323: [[1507, 1468], 512],
                64324: [[1508, 1468], 512],
                64326: [[1510, 1468], 512],
                64327: [[1511, 1468], 512],
                64328: [[1512, 1468], 512],
                64329: [[1513, 1468], 512],
                64330: [[1514, 1468], 512],
                64331: [[1493, 1465], 512],
                64332: [[1489, 1471], 512],
                64333: [[1499, 1471], 512],
                64334: [[1508, 1471], 512],
                64335: [[1488, 1500], 256],
                64336: [[1649], 256],
                64337: [[1649], 256],
                64338: [[1659], 256],
                64339: [[1659], 256],
                64340: [[1659], 256],
                64341: [[1659], 256],
                64342: [[1662], 256],
                64343: [[1662], 256],
                64344: [[1662], 256],
                64345: [[1662], 256],
                64346: [[1664], 256],
                64347: [[1664], 256],
                64348: [[1664], 256],
                64349: [[1664], 256],
                64350: [[1658], 256],
                64351: [[1658], 256],
                64352: [[1658], 256],
                64353: [[1658], 256],
                64354: [[1663], 256],
                64355: [[1663], 256],
                64356: [[1663], 256],
                64357: [[1663], 256],
                64358: [[1657], 256],
                64359: [[1657], 256],
                64360: [[1657], 256],
                64361: [[1657], 256],
                64362: [[1700], 256],
                64363: [[1700], 256],
                64364: [[1700], 256],
                64365: [[1700], 256],
                64366: [[1702], 256],
                64367: [[1702], 256],
                64368: [[1702], 256],
                64369: [[1702], 256],
                64370: [[1668], 256],
                64371: [[1668], 256],
                64372: [[1668], 256],
                64373: [[1668], 256],
                64374: [[1667], 256],
                64375: [[1667], 256],
                64376: [[1667], 256],
                64377: [[1667], 256],
                64378: [[1670], 256],
                64379: [[1670], 256],
                64380: [[1670], 256],
                64381: [[1670], 256],
                64382: [[1671], 256],
                64383: [[1671], 256],
                64384: [[1671], 256],
                64385: [[1671], 256],
                64386: [[1677], 256],
                64387: [[1677], 256],
                64388: [[1676], 256],
                64389: [[1676], 256],
                64390: [[1678], 256],
                64391: [[1678], 256],
                64392: [[1672], 256],
                64393: [[1672], 256],
                64394: [[1688], 256],
                64395: [[1688], 256],
                64396: [[1681], 256],
                64397: [[1681], 256],
                64398: [[1705], 256],
                64399: [[1705], 256],
                64400: [[1705], 256],
                64401: [[1705], 256],
                64402: [[1711], 256],
                64403: [[1711], 256],
                64404: [[1711], 256],
                64405: [[1711], 256],
                64406: [[1715], 256],
                64407: [[1715], 256],
                64408: [[1715], 256],
                64409: [[1715], 256],
                64410: [[1713], 256],
                64411: [[1713], 256],
                64412: [[1713], 256],
                64413: [[1713], 256],
                64414: [[1722], 256],
                64415: [[1722], 256],
                64416: [[1723], 256],
                64417: [[1723], 256],
                64418: [[1723], 256],
                64419: [[1723], 256],
                64420: [[1728], 256],
                64421: [[1728], 256],
                64422: [[1729], 256],
                64423: [[1729], 256],
                64424: [[1729], 256],
                64425: [[1729], 256],
                64426: [[1726], 256],
                64427: [[1726], 256],
                64428: [[1726], 256],
                64429: [[1726], 256],
                64430: [[1746], 256],
                64431: [[1746], 256],
                64432: [[1747], 256],
                64433: [[1747], 256],
                64467: [[1709], 256],
                64468: [[1709], 256],
                64469: [[1709], 256],
                64470: [[1709], 256],
                64471: [[1735], 256],
                64472: [[1735], 256],
                64473: [[1734], 256],
                64474: [[1734], 256],
                64475: [[1736], 256],
                64476: [[1736], 256],
                64477: [[1655], 256],
                64478: [[1739], 256],
                64479: [[1739], 256],
                64480: [[1733], 256],
                64481: [[1733], 256],
                64482: [[1737], 256],
                64483: [[1737], 256],
                64484: [[1744], 256],
                64485: [[1744], 256],
                64486: [[1744], 256],
                64487: [[1744], 256],
                64488: [[1609], 256],
                64489: [[1609], 256],
                64490: [[1574, 1575], 256],
                64491: [[1574, 1575], 256],
                64492: [[1574, 1749], 256],
                64493: [[1574, 1749], 256],
                64494: [[1574, 1608], 256],
                64495: [[1574, 1608], 256],
                64496: [[1574, 1735], 256],
                64497: [[1574, 1735], 256],
                64498: [[1574, 1734], 256],
                64499: [[1574, 1734], 256],
                64500: [[1574, 1736], 256],
                64501: [[1574, 1736], 256],
                64502: [[1574, 1744], 256],
                64503: [[1574, 1744], 256],
                64504: [[1574, 1744], 256],
                64505: [[1574, 1609], 256],
                64506: [[1574, 1609], 256],
                64507: [[1574, 1609], 256],
                64508: [[1740], 256],
                64509: [[1740], 256],
                64510: [[1740], 256],
                64511: [[1740], 256]
            },
            64512: {
                64512: [[1574, 1580], 256],
                64513: [[1574, 1581], 256],
                64514: [[1574, 1605], 256],
                64515: [[1574, 1609], 256],
                64516: [[1574, 1610], 256],
                64517: [[1576, 1580], 256],
                64518: [[1576, 1581], 256],
                64519: [[1576, 1582], 256],
                64520: [[1576, 1605], 256],
                64521: [[1576, 1609], 256],
                64522: [[1576, 1610], 256],
                64523: [[1578, 1580], 256],
                64524: [[1578, 1581], 256],
                64525: [[1578, 1582], 256],
                64526: [[1578, 1605], 256],
                64527: [[1578, 1609], 256],
                64528: [[1578, 1610], 256],
                64529: [[1579, 1580], 256],
                64530: [[1579, 1605], 256],
                64531: [[1579, 1609], 256],
                64532: [[1579, 1610], 256],
                64533: [[1580, 1581], 256],
                64534: [[1580, 1605], 256],
                64535: [[1581, 1580], 256],
                64536: [[1581, 1605], 256],
                64537: [[1582, 1580], 256],
                64538: [[1582, 1581], 256],
                64539: [[1582, 1605], 256],
                64540: [[1587, 1580], 256],
                64541: [[1587, 1581], 256],
                64542: [[1587, 1582], 256],
                64543: [[1587, 1605], 256],
                64544: [[1589, 1581], 256],
                64545: [[1589, 1605], 256],
                64546: [[1590, 1580], 256],
                64547: [[1590, 1581], 256],
                64548: [[1590, 1582], 256],
                64549: [[1590, 1605], 256],
                64550: [[1591, 1581], 256],
                64551: [[1591, 1605], 256],
                64552: [[1592, 1605], 256],
                64553: [[1593, 1580], 256],
                64554: [[1593, 1605], 256],
                64555: [[1594, 1580], 256],
                64556: [[1594, 1605], 256],
                64557: [[1601, 1580], 256],
                64558: [[1601, 1581], 256],
                64559: [[1601, 1582], 256],
                64560: [[1601, 1605], 256],
                64561: [[1601, 1609], 256],
                64562: [[1601, 1610], 256],
                64563: [[1602, 1581], 256],
                64564: [[1602, 1605], 256],
                64565: [[1602, 1609], 256],
                64566: [[1602, 1610], 256],
                64567: [[1603, 1575], 256],
                64568: [[1603, 1580], 256],
                64569: [[1603, 1581], 256],
                64570: [[1603, 1582], 256],
                64571: [[1603, 1604], 256],
                64572: [[1603, 1605], 256],
                64573: [[1603, 1609], 256],
                64574: [[1603, 1610], 256],
                64575: [[1604, 1580], 256],
                64576: [[1604, 1581], 256],
                64577: [[1604, 1582], 256],
                64578: [[1604, 1605], 256],
                64579: [[1604, 1609], 256],
                64580: [[1604, 1610], 256],
                64581: [[1605, 1580], 256],
                64582: [[1605, 1581], 256],
                64583: [[1605, 1582], 256],
                64584: [[1605, 1605], 256],
                64585: [[1605, 1609], 256],
                64586: [[1605, 1610], 256],
                64587: [[1606, 1580], 256],
                64588: [[1606, 1581], 256],
                64589: [[1606, 1582], 256],
                64590: [[1606, 1605], 256],
                64591: [[1606, 1609], 256],
                64592: [[1606, 1610], 256],
                64593: [[1607, 1580], 256],
                64594: [[1607, 1605], 256],
                64595: [[1607, 1609], 256],
                64596: [[1607, 1610], 256],
                64597: [[1610, 1580], 256],
                64598: [[1610, 1581], 256],
                64599: [[1610, 1582], 256],
                64600: [[1610, 1605], 256],
                64601: [[1610, 1609], 256],
                64602: [[1610, 1610], 256],
                64603: [[1584, 1648], 256],
                64604: [[1585, 1648], 256],
                64605: [[1609, 1648], 256],
                64606: [[32, 1612, 1617], 256],
                64607: [[32, 1613, 1617], 256],
                64608: [[32, 1614, 1617], 256],
                64609: [[32, 1615, 1617], 256],
                64610: [[32, 1616, 1617], 256],
                64611: [[32, 1617, 1648], 256],
                64612: [[1574, 1585], 256],
                64613: [[1574, 1586], 256],
                64614: [[1574, 1605], 256],
                64615: [[1574, 1606], 256],
                64616: [[1574, 1609], 256],
                64617: [[1574, 1610], 256],
                64618: [[1576, 1585], 256],
                64619: [[1576, 1586], 256],
                64620: [[1576, 1605], 256],
                64621: [[1576, 1606], 256],
                64622: [[1576, 1609], 256],
                64623: [[1576, 1610], 256],
                64624: [[1578, 1585], 256],
                64625: [[1578, 1586], 256],
                64626: [[1578, 1605], 256],
                64627: [[1578, 1606], 256],
                64628: [[1578, 1609], 256],
                64629: [[1578, 1610], 256],
                64630: [[1579, 1585], 256],
                64631: [[1579, 1586], 256],
                64632: [[1579, 1605], 256],
                64633: [[1579, 1606], 256],
                64634: [[1579, 1609], 256],
                64635: [[1579, 1610], 256],
                64636: [[1601, 1609], 256],
                64637: [[1601, 1610], 256],
                64638: [[1602, 1609], 256],
                64639: [[1602, 1610], 256],
                64640: [[1603, 1575], 256],
                64641: [[1603, 1604], 256],
                64642: [[1603, 1605], 256],
                64643: [[1603, 1609], 256],
                64644: [[1603, 1610], 256],
                64645: [[1604, 1605], 256],
                64646: [[1604, 1609], 256],
                64647: [[1604, 1610], 256],
                64648: [[1605, 1575], 256],
                64649: [[1605, 1605], 256],
                64650: [[1606, 1585], 256],
                64651: [[1606, 1586], 256],
                64652: [[1606, 1605], 256],
                64653: [[1606, 1606], 256],
                64654: [[1606, 1609], 256],
                64655: [[1606, 1610], 256],
                64656: [[1609, 1648], 256],
                64657: [[1610, 1585], 256],
                64658: [[1610, 1586], 256],
                64659: [[1610, 1605], 256],
                64660: [[1610, 1606], 256],
                64661: [[1610, 1609], 256],
                64662: [[1610, 1610], 256],
                64663: [[1574, 1580], 256],
                64664: [[1574, 1581], 256],
                64665: [[1574, 1582], 256],
                64666: [[1574, 1605], 256],
                64667: [[1574, 1607], 256],
                64668: [[1576, 1580], 256],
                64669: [[1576, 1581], 256],
                64670: [[1576, 1582], 256],
                64671: [[1576, 1605], 256],
                64672: [[1576, 1607], 256],
                64673: [[1578, 1580], 256],
                64674: [[1578, 1581], 256],
                64675: [[1578, 1582], 256],
                64676: [[1578, 1605], 256],
                64677: [[1578, 1607], 256],
                64678: [[1579, 1605], 256],
                64679: [[1580, 1581], 256],
                64680: [[1580, 1605], 256],
                64681: [[1581, 1580], 256],
                64682: [[1581, 1605], 256],
                64683: [[1582, 1580], 256],
                64684: [[1582, 1605], 256],
                64685: [[1587, 1580], 256],
                64686: [[1587, 1581], 256],
                64687: [[1587, 1582], 256],
                64688: [[1587, 1605], 256],
                64689: [[1589, 1581], 256],
                64690: [[1589, 1582], 256],
                64691: [[1589, 1605], 256],
                64692: [[1590, 1580], 256],
                64693: [[1590, 1581], 256],
                64694: [[1590, 1582], 256],
                64695: [[1590, 1605], 256],
                64696: [[1591, 1581], 256],
                64697: [[1592, 1605], 256],
                64698: [[1593, 1580], 256],
                64699: [[1593, 1605], 256],
                64700: [[1594, 1580], 256],
                64701: [[1594, 1605], 256],
                64702: [[1601, 1580], 256],
                64703: [[1601, 1581], 256],
                64704: [[1601, 1582], 256],
                64705: [[1601, 1605], 256],
                64706: [[1602, 1581], 256],
                64707: [[1602, 1605], 256],
                64708: [[1603, 1580], 256],
                64709: [[1603, 1581], 256],
                64710: [[1603, 1582], 256],
                64711: [[1603, 1604], 256],
                64712: [[1603, 1605], 256],
                64713: [[1604, 1580], 256],
                64714: [[1604, 1581], 256],
                64715: [[1604, 1582], 256],
                64716: [[1604, 1605], 256],
                64717: [[1604, 1607], 256],
                64718: [[1605, 1580], 256],
                64719: [[1605, 1581], 256],
                64720: [[1605, 1582], 256],
                64721: [[1605, 1605], 256],
                64722: [[1606, 1580], 256],
                64723: [[1606, 1581], 256],
                64724: [[1606, 1582], 256],
                64725: [[1606, 1605], 256],
                64726: [[1606, 1607], 256],
                64727: [[1607, 1580], 256],
                64728: [[1607, 1605], 256],
                64729: [[1607, 1648], 256],
                64730: [[1610, 1580], 256],
                64731: [[1610, 1581], 256],
                64732: [[1610, 1582], 256],
                64733: [[1610, 1605], 256],
                64734: [[1610, 1607], 256],
                64735: [[1574, 1605], 256],
                64736: [[1574, 1607], 256],
                64737: [[1576, 1605], 256],
                64738: [[1576, 1607], 256],
                64739: [[1578, 1605], 256],
                64740: [[1578, 1607], 256],
                64741: [[1579, 1605], 256],
                64742: [[1579, 1607], 256],
                64743: [[1587, 1605], 256],
                64744: [[1587, 1607], 256],
                64745: [[1588, 1605], 256],
                64746: [[1588, 1607], 256],
                64747: [[1603, 1604], 256],
                64748: [[1603, 1605], 256],
                64749: [[1604, 1605], 256],
                64750: [[1606, 1605], 256],
                64751: [[1606, 1607], 256],
                64752: [[1610, 1605], 256],
                64753: [[1610, 1607], 256],
                64754: [[1600, 1614, 1617], 256],
                64755: [[1600, 1615, 1617], 256],
                64756: [[1600, 1616, 1617], 256],
                64757: [[1591, 1609], 256],
                64758: [[1591, 1610], 256],
                64759: [[1593, 1609], 256],
                64760: [[1593, 1610], 256],
                64761: [[1594, 1609], 256],
                64762: [[1594, 1610], 256],
                64763: [[1587, 1609], 256],
                64764: [[1587, 1610], 256],
                64765: [[1588, 1609], 256],
                64766: [[1588, 1610], 256],
                64767: [[1581, 1609], 256]
            },
            64768: {
                64768: [[1581, 1610], 256],
                64769: [[1580, 1609], 256],
                64770: [[1580, 1610], 256],
                64771: [[1582, 1609], 256],
                64772: [[1582, 1610], 256],
                64773: [[1589, 1609], 256],
                64774: [[1589, 1610], 256],
                64775: [[1590, 1609], 256],
                64776: [[1590, 1610], 256],
                64777: [[1588, 1580], 256],
                64778: [[1588, 1581], 256],
                64779: [[1588, 1582], 256],
                64780: [[1588, 1605], 256],
                64781: [[1588, 1585], 256],
                64782: [[1587, 1585], 256],
                64783: [[1589, 1585], 256],
                64784: [[1590, 1585], 256],
                64785: [[1591, 1609], 256],
                64786: [[1591, 1610], 256],
                64787: [[1593, 1609], 256],
                64788: [[1593, 1610], 256],
                64789: [[1594, 1609], 256],
                64790: [[1594, 1610], 256],
                64791: [[1587, 1609], 256],
                64792: [[1587, 1610], 256],
                64793: [[1588, 1609], 256],
                64794: [[1588, 1610], 256],
                64795: [[1581, 1609], 256],
                64796: [[1581, 1610], 256],
                64797: [[1580, 1609], 256],
                64798: [[1580, 1610], 256],
                64799: [[1582, 1609], 256],
                64800: [[1582, 1610], 256],
                64801: [[1589, 1609], 256],
                64802: [[1589, 1610], 256],
                64803: [[1590, 1609], 256],
                64804: [[1590, 1610], 256],
                64805: [[1588, 1580], 256],
                64806: [[1588, 1581], 256],
                64807: [[1588, 1582], 256],
                64808: [[1588, 1605], 256],
                64809: [[1588, 1585], 256],
                64810: [[1587, 1585], 256],
                64811: [[1589, 1585], 256],
                64812: [[1590, 1585], 256],
                64813: [[1588, 1580], 256],
                64814: [[1588, 1581], 256],
                64815: [[1588, 1582], 256],
                64816: [[1588, 1605], 256],
                64817: [[1587, 1607], 256],
                64818: [[1588, 1607], 256],
                64819: [[1591, 1605], 256],
                64820: [[1587, 1580], 256],
                64821: [[1587, 1581], 256],
                64822: [[1587, 1582], 256],
                64823: [[1588, 1580], 256],
                64824: [[1588, 1581], 256],
                64825: [[1588, 1582], 256],
                64826: [[1591, 1605], 256],
                64827: [[1592, 1605], 256],
                64828: [[1575, 1611], 256],
                64829: [[1575, 1611], 256],
                64848: [[1578, 1580, 1605], 256],
                64849: [[1578, 1581, 1580], 256],
                64850: [[1578, 1581, 1580], 256],
                64851: [[1578, 1581, 1605], 256],
                64852: [[1578, 1582, 1605], 256],
                64853: [[1578, 1605, 1580], 256],
                64854: [[1578, 1605, 1581], 256],
                64855: [[1578, 1605, 1582], 256],
                64856: [[1580, 1605, 1581], 256],
                64857: [[1580, 1605, 1581], 256],
                64858: [[1581, 1605, 1610], 256],
                64859: [[1581, 1605, 1609], 256],
                64860: [[1587, 1581, 1580], 256],
                64861: [[1587, 1580, 1581], 256],
                64862: [[1587, 1580, 1609], 256],
                64863: [[1587, 1605, 1581], 256],
                64864: [[1587, 1605, 1581], 256],
                64865: [[1587, 1605, 1580], 256],
                64866: [[1587, 1605, 1605], 256],
                64867: [[1587, 1605, 1605], 256],
                64868: [[1589, 1581, 1581], 256],
                64869: [[1589, 1581, 1581], 256],
                64870: [[1589, 1605, 1605], 256],
                64871: [[1588, 1581, 1605], 256],
                64872: [[1588, 1581, 1605], 256],
                64873: [[1588, 1580, 1610], 256],
                64874: [[1588, 1605, 1582], 256],
                64875: [[1588, 1605, 1582], 256],
                64876: [[1588, 1605, 1605], 256],
                64877: [[1588, 1605, 1605], 256],
                64878: [[1590, 1581, 1609], 256],
                64879: [[1590, 1582, 1605], 256],
                64880: [[1590, 1582, 1605], 256],
                64881: [[1591, 1605, 1581], 256],
                64882: [[1591, 1605, 1581], 256],
                64883: [[1591, 1605, 1605], 256],
                64884: [[1591, 1605, 1610], 256],
                64885: [[1593, 1580, 1605], 256],
                64886: [[1593, 1605, 1605], 256],
                64887: [[1593, 1605, 1605], 256],
                64888: [[1593, 1605, 1609], 256],
                64889: [[1594, 1605, 1605], 256],
                64890: [[1594, 1605, 1610], 256],
                64891: [[1594, 1605, 1609], 256],
                64892: [[1601, 1582, 1605], 256],
                64893: [[1601, 1582, 1605], 256],
                64894: [[1602, 1605, 1581], 256],
                64895: [[1602, 1605, 1605], 256],
                64896: [[1604, 1581, 1605], 256],
                64897: [[1604, 1581, 1610], 256],
                64898: [[1604, 1581, 1609], 256],
                64899: [[1604, 1580, 1580], 256],
                64900: [[1604, 1580, 1580], 256],
                64901: [[1604, 1582, 1605], 256],
                64902: [[1604, 1582, 1605], 256],
                64903: [[1604, 1605, 1581], 256],
                64904: [[1604, 1605, 1581], 256],
                64905: [[1605, 1581, 1580], 256],
                64906: [[1605, 1581, 1605], 256],
                64907: [[1605, 1581, 1610], 256],
                64908: [[1605, 1580, 1581], 256],
                64909: [[1605, 1580, 1605], 256],
                64910: [[1605, 1582, 1580], 256],
                64911: [[1605, 1582, 1605], 256],
                64914: [[1605, 1580, 1582], 256],
                64915: [[1607, 1605, 1580], 256],
                64916: [[1607, 1605, 1605], 256],
                64917: [[1606, 1581, 1605], 256],
                64918: [[1606, 1581, 1609], 256],
                64919: [[1606, 1580, 1605], 256],
                64920: [[1606, 1580, 1605], 256],
                64921: [[1606, 1580, 1609], 256],
                64922: [[1606, 1605, 1610], 256],
                64923: [[1606, 1605, 1609], 256],
                64924: [[1610, 1605, 1605], 256],
                64925: [[1610, 1605, 1605], 256],
                64926: [[1576, 1582, 1610], 256],
                64927: [[1578, 1580, 1610], 256],
                64928: [[1578, 1580, 1609], 256],
                64929: [[1578, 1582, 1610], 256],
                64930: [[1578, 1582, 1609], 256],
                64931: [[1578, 1605, 1610], 256],
                64932: [[1578, 1605, 1609], 256],
                64933: [[1580, 1605, 1610], 256],
                64934: [[1580, 1581, 1609], 256],
                64935: [[1580, 1605, 1609], 256],
                64936: [[1587, 1582, 1609], 256],
                64937: [[1589, 1581, 1610], 256],
                64938: [[1588, 1581, 1610], 256],
                64939: [[1590, 1581, 1610], 256],
                64940: [[1604, 1580, 1610], 256],
                64941: [[1604, 1605, 1610], 256],
                64942: [[1610, 1581, 1610], 256],
                64943: [[1610, 1580, 1610], 256],
                64944: [[1610, 1605, 1610], 256],
                64945: [[1605, 1605, 1610], 256],
                64946: [[1602, 1605, 1610], 256],
                64947: [[1606, 1581, 1610], 256],
                64948: [[1602, 1605, 1581], 256],
                64949: [[1604, 1581, 1605], 256],
                64950: [[1593, 1605, 1610], 256],
                64951: [[1603, 1605, 1610], 256],
                64952: [[1606, 1580, 1581], 256],
                64953: [[1605, 1582, 1610], 256],
                64954: [[1604, 1580, 1605], 256],
                64955: [[1603, 1605, 1605], 256],
                64956: [[1604, 1580, 1605], 256],
                64957: [[1606, 1580, 1581], 256],
                64958: [[1580, 1581, 1610], 256],
                64959: [[1581, 1580, 1610], 256],
                64960: [[1605, 1580, 1610], 256],
                64961: [[1601, 1605, 1610], 256],
                64962: [[1576, 1581, 1610], 256],
                64963: [[1603, 1605, 1605], 256],
                64964: [[1593, 1580, 1605], 256],
                64965: [[1589, 1605, 1605], 256],
                64966: [[1587, 1582, 1610], 256],
                64967: [[1606, 1580, 1610], 256],
                65008: [[1589, 1604, 1746], 256],
                65009: [[1602, 1604, 1746], 256],
                65010: [[1575, 1604, 1604, 1607], 256],
                65011: [[1575, 1603, 1576, 1585], 256],
                65012: [[1605, 1581, 1605, 1583], 256],
                65013: [[1589, 1604, 1593, 1605], 256],
                65014: [[1585, 1587, 1608, 1604], 256],
                65015: [[1593, 1604, 1610, 1607], 256],
                65016: [[1608, 1587, 1604, 1605], 256],
                65017: [[1589, 1604, 1609], 256],
                65018: [[1589, 1604, 1609, 32, 1575, 1604, 1604, 1607, 32, 1593, 1604, 1610, 1607, 32, 1608, 1587, 1604, 1605], 256],
                65019: [[1580, 1604, 32, 1580, 1604, 1575, 1604, 1607], 256],
                65020: [[1585, 1740, 1575, 1604], 256]
            },
            65024: {
                65040: [[44], 256],
                65041: [[12289], 256],
                65042: [[12290], 256],
                65043: [[58], 256],
                65044: [[59], 256],
                65045: [[33], 256],
                65046: [[63], 256],
                65047: [[12310], 256],
                65048: [[12311], 256],
                65049: [[8230], 256],
                65056: [, 230],
                65057: [, 230],
                65058: [, 230],
                65059: [, 230],
                65060: [, 230],
                65061: [, 230],
                65062: [, 230],
                65063: [, 220],
                65064: [, 220],
                65065: [, 220],
                65066: [, 220],
                65067: [, 220],
                65068: [, 220],
                65069: [, 220],
                65072: [[8229], 256],
                65073: [[8212], 256],
                65074: [[8211], 256],
                65075: [[95], 256],
                65076: [[95], 256],
                65077: [[40], 256],
                65078: [[41], 256],
                65079: [[123], 256],
                65080: [[125], 256],
                65081: [[12308], 256],
                65082: [[12309], 256],
                65083: [[12304], 256],
                65084: [[12305], 256],
                65085: [[12298], 256],
                65086: [[12299], 256],
                65087: [[12296], 256],
                65088: [[12297], 256],
                65089: [[12300], 256],
                65090: [[12301], 256],
                65091: [[12302], 256],
                65092: [[12303], 256],
                65095: [[91], 256],
                65096: [[93], 256],
                65097: [[8254], 256],
                65098: [[8254], 256],
                65099: [[8254], 256],
                65100: [[8254], 256],
                65101: [[95], 256],
                65102: [[95], 256],
                65103: [[95], 256],
                65104: [[44], 256],
                65105: [[12289], 256],
                65106: [[46], 256],
                65108: [[59], 256],
                65109: [[58], 256],
                65110: [[63], 256],
                65111: [[33], 256],
                65112: [[8212], 256],
                65113: [[40], 256],
                65114: [[41], 256],
                65115: [[123], 256],
                65116: [[125], 256],
                65117: [[12308], 256],
                65118: [[12309], 256],
                65119: [[35], 256],
                65120: [[38], 256],
                65121: [[42], 256],
                65122: [[43], 256],
                65123: [[45], 256],
                65124: [[60], 256],
                65125: [[62], 256],
                65126: [[61], 256],
                65128: [[92], 256],
                65129: [[36], 256],
                65130: [[37], 256],
                65131: [[64], 256],
                65136: [[32, 1611], 256],
                65137: [[1600, 1611], 256],
                65138: [[32, 1612], 256],
                65140: [[32, 1613], 256],
                65142: [[32, 1614], 256],
                65143: [[1600, 1614], 256],
                65144: [[32, 1615], 256],
                65145: [[1600, 1615], 256],
                65146: [[32, 1616], 256],
                65147: [[1600, 1616], 256],
                65148: [[32, 1617], 256],
                65149: [[1600, 1617], 256],
                65150: [[32, 1618], 256],
                65151: [[1600, 1618], 256],
                65152: [[1569], 256],
                65153: [[1570], 256],
                65154: [[1570], 256],
                65155: [[1571], 256],
                65156: [[1571], 256],
                65157: [[1572], 256],
                65158: [[1572], 256],
                65159: [[1573], 256],
                65160: [[1573], 256],
                65161: [[1574], 256],
                65162: [[1574], 256],
                65163: [[1574], 256],
                65164: [[1574], 256],
                65165: [[1575], 256],
                65166: [[1575], 256],
                65167: [[1576], 256],
                65168: [[1576], 256],
                65169: [[1576], 256],
                65170: [[1576], 256],
                65171: [[1577], 256],
                65172: [[1577], 256],
                65173: [[1578], 256],
                65174: [[1578], 256],
                65175: [[1578], 256],
                65176: [[1578], 256],
                65177: [[1579], 256],
                65178: [[1579], 256],
                65179: [[1579], 256],
                65180: [[1579], 256],
                65181: [[1580], 256],
                65182: [[1580], 256],
                65183: [[1580], 256],
                65184: [[1580], 256],
                65185: [[1581], 256],
                65186: [[1581], 256],
                65187: [[1581], 256],
                65188: [[1581], 256],
                65189: [[1582], 256],
                65190: [[1582], 256],
                65191: [[1582], 256],
                65192: [[1582], 256],
                65193: [[1583], 256],
                65194: [[1583], 256],
                65195: [[1584], 256],
                65196: [[1584], 256],
                65197: [[1585], 256],
                65198: [[1585], 256],
                65199: [[1586], 256],
                65200: [[1586], 256],
                65201: [[1587], 256],
                65202: [[1587], 256],
                65203: [[1587], 256],
                65204: [[1587], 256],
                65205: [[1588], 256],
                65206: [[1588], 256],
                65207: [[1588], 256],
                65208: [[1588], 256],
                65209: [[1589], 256],
                65210: [[1589], 256],
                65211: [[1589], 256],
                65212: [[1589], 256],
                65213: [[1590], 256],
                65214: [[1590], 256],
                65215: [[1590], 256],
                65216: [[1590], 256],
                65217: [[1591], 256],
                65218: [[1591], 256],
                65219: [[1591], 256],
                65220: [[1591], 256],
                65221: [[1592], 256],
                65222: [[1592], 256],
                65223: [[1592], 256],
                65224: [[1592], 256],
                65225: [[1593], 256],
                65226: [[1593], 256],
                65227: [[1593], 256],
                65228: [[1593], 256],
                65229: [[1594], 256],
                65230: [[1594], 256],
                65231: [[1594], 256],
                65232: [[1594], 256],
                65233: [[1601], 256],
                65234: [[1601], 256],
                65235: [[1601], 256],
                65236: [[1601], 256],
                65237: [[1602], 256],
                65238: [[1602], 256],
                65239: [[1602], 256],
                65240: [[1602], 256],
                65241: [[1603], 256],
                65242: [[1603], 256],
                65243: [[1603], 256],
                65244: [[1603], 256],
                65245: [[1604], 256],
                65246: [[1604], 256],
                65247: [[1604], 256],
                65248: [[1604], 256],
                65249: [[1605], 256],
                65250: [[1605], 256],
                65251: [[1605], 256],
                65252: [[1605], 256],
                65253: [[1606], 256],
                65254: [[1606], 256],
                65255: [[1606], 256],
                65256: [[1606], 256],
                65257: [[1607], 256],
                65258: [[1607], 256],
                65259: [[1607], 256],
                65260: [[1607], 256],
                65261: [[1608], 256],
                65262: [[1608], 256],
                65263: [[1609], 256],
                65264: [[1609], 256],
                65265: [[1610], 256],
                65266: [[1610], 256],
                65267: [[1610], 256],
                65268: [[1610], 256],
                65269: [[1604, 1570], 256],
                65270: [[1604, 1570], 256],
                65271: [[1604, 1571], 256],
                65272: [[1604, 1571], 256],
                65273: [[1604, 1573], 256],
                65274: [[1604, 1573], 256],
                65275: [[1604, 1575], 256],
                65276: [[1604, 1575], 256]
            },
            65280: {
                65281: [[33], 256],
                65282: [[34], 256],
                65283: [[35], 256],
                65284: [[36], 256],
                65285: [[37], 256],
                65286: [[38], 256],
                65287: [[39], 256],
                65288: [[40], 256],
                65289: [[41], 256],
                65290: [[42], 256],
                65291: [[43], 256],
                65292: [[44], 256],
                65293: [[45], 256],
                65294: [[46], 256],
                65295: [[47], 256],
                65296: [[48], 256],
                65297: [[49], 256],
                65298: [[50], 256],
                65299: [[51], 256],
                65300: [[52], 256],
                65301: [[53], 256],
                65302: [[54], 256],
                65303: [[55], 256],
                65304: [[56], 256],
                65305: [[57], 256],
                65306: [[58], 256],
                65307: [[59], 256],
                65308: [[60], 256],
                65309: [[61], 256],
                65310: [[62], 256],
                65311: [[63], 256],
                65312: [[64], 256],
                65313: [[65], 256],
                65314: [[66], 256],
                65315: [[67], 256],
                65316: [[68], 256],
                65317: [[69], 256],
                65318: [[70], 256],
                65319: [[71], 256],
                65320: [[72], 256],
                65321: [[73], 256],
                65322: [[74], 256],
                65323: [[75], 256],
                65324: [[76], 256],
                65325: [[77], 256],
                65326: [[78], 256],
                65327: [[79], 256],
                65328: [[80], 256],
                65329: [[81], 256],
                65330: [[82], 256],
                65331: [[83], 256],
                65332: [[84], 256],
                65333: [[85], 256],
                65334: [[86], 256],
                65335: [[87], 256],
                65336: [[88], 256],
                65337: [[89], 256],
                65338: [[90], 256],
                65339: [[91], 256],
                65340: [[92], 256],
                65341: [[93], 256],
                65342: [[94], 256],
                65343: [[95], 256],
                65344: [[96], 256],
                65345: [[97], 256],
                65346: [[98], 256],
                65347: [[99], 256],
                65348: [[100], 256],
                65349: [[101], 256],
                65350: [[102], 256],
                65351: [[103], 256],
                65352: [[104], 256],
                65353: [[105], 256],
                65354: [[106], 256],
                65355: [[107], 256],
                65356: [[108], 256],
                65357: [[109], 256],
                65358: [[110], 256],
                65359: [[111], 256],
                65360: [[112], 256],
                65361: [[113], 256],
                65362: [[114], 256],
                65363: [[115], 256],
                65364: [[116], 256],
                65365: [[117], 256],
                65366: [[118], 256],
                65367: [[119], 256],
                65368: [[120], 256],
                65369: [[121], 256],
                65370: [[122], 256],
                65371: [[123], 256],
                65372: [[124], 256],
                65373: [[125], 256],
                65374: [[126], 256],
                65375: [[10629], 256],
                65376: [[10630], 256],
                65377: [[12290], 256],
                65378: [[12300], 256],
                65379: [[12301], 256],
                65380: [[12289], 256],
                65381: [[12539], 256],
                65382: [[12530], 256],
                65383: [[12449], 256],
                65384: [[12451], 256],
                65385: [[12453], 256],
                65386: [[12455], 256],
                65387: [[12457], 256],
                65388: [[12515], 256],
                65389: [[12517], 256],
                65390: [[12519], 256],
                65391: [[12483], 256],
                65392: [[12540], 256],
                65393: [[12450], 256],
                65394: [[12452], 256],
                65395: [[12454], 256],
                65396: [[12456], 256],
                65397: [[12458], 256],
                65398: [[12459], 256],
                65399: [[12461], 256],
                65400: [[12463], 256],
                65401: [[12465], 256],
                65402: [[12467], 256],
                65403: [[12469], 256],
                65404: [[12471], 256],
                65405: [[12473], 256],
                65406: [[12475], 256],
                65407: [[12477], 256],
                65408: [[12479], 256],
                65409: [[12481], 256],
                65410: [[12484], 256],
                65411: [[12486], 256],
                65412: [[12488], 256],
                65413: [[12490], 256],
                65414: [[12491], 256],
                65415: [[12492], 256],
                65416: [[12493], 256],
                65417: [[12494], 256],
                65418: [[12495], 256],
                65419: [[12498], 256],
                65420: [[12501], 256],
                65421: [[12504], 256],
                65422: [[12507], 256],
                65423: [[12510], 256],
                65424: [[12511], 256],
                65425: [[12512], 256],
                65426: [[12513], 256],
                65427: [[12514], 256],
                65428: [[12516], 256],
                65429: [[12518], 256],
                65430: [[12520], 256],
                65431: [[12521], 256],
                65432: [[12522], 256],
                65433: [[12523], 256],
                65434: [[12524], 256],
                65435: [[12525], 256],
                65436: [[12527], 256],
                65437: [[12531], 256],
                65438: [[12441], 256],
                65439: [[12442], 256],
                65440: [[12644], 256],
                65441: [[12593], 256],
                65442: [[12594], 256],
                65443: [[12595], 256],
                65444: [[12596], 256],
                65445: [[12597], 256],
                65446: [[12598], 256],
                65447: [[12599], 256],
                65448: [[12600], 256],
                65449: [[12601], 256],
                65450: [[12602], 256],
                65451: [[12603], 256],
                65452: [[12604], 256],
                65453: [[12605], 256],
                65454: [[12606], 256],
                65455: [[12607], 256],
                65456: [[12608], 256],
                65457: [[12609], 256],
                65458: [[12610], 256],
                65459: [[12611], 256],
                65460: [[12612], 256],
                65461: [[12613], 256],
                65462: [[12614], 256],
                65463: [[12615], 256],
                65464: [[12616], 256],
                65465: [[12617], 256],
                65466: [[12618], 256],
                65467: [[12619], 256],
                65468: [[12620], 256],
                65469: [[12621], 256],
                65470: [[12622], 256],
                65474: [[12623], 256],
                65475: [[12624], 256],
                65476: [[12625], 256],
                65477: [[12626], 256],
                65478: [[12627], 256],
                65479: [[12628], 256],
                65482: [[12629], 256],
                65483: [[12630], 256],
                65484: [[12631], 256],
                65485: [[12632], 256],
                65486: [[12633], 256],
                65487: [[12634], 256],
                65490: [[12635], 256],
                65491: [[12636], 256],
                65492: [[12637], 256],
                65493: [[12638], 256],
                65494: [[12639], 256],
                65495: [[12640], 256],
                65498: [[12641], 256],
                65499: [[12642], 256],
                65500: [[12643], 256],
                65504: [[162], 256],
                65505: [[163], 256],
                65506: [[172], 256],
                65507: [[175], 256],
                65508: [[166], 256],
                65509: [[165], 256],
                65510: [[8361], 256],
                65512: [[9474], 256],
                65513: [[8592], 256],
                65514: [[8593], 256],
                65515: [[8594], 256],
                65516: [[8595], 256],
                65517: [[9632], 256],
                65518: [[9675], 256]
            }
        };
        var d = {
            nfc: function(e) {
                return l("NFC", e)
            },
            nfd: function(e) {
                return l("NFD", e)
            },
            nfkc: function(e) {
                return l("NFKC", e)
            },
            nfkd: function(e) {
                return l("NFKD", e)
            }
        };
        e.exports = d,
        d.shimApplied = !1,
        String.prototype.normalize || (Object.defineProperty(String.prototype, "normalize", {
            enumerable: !1,
            configurable: !0,
            writable: !0,
            value: function() {
                var e = "" + this
                  , t = void 0 === arguments[0] ? "NFC" : arguments[0];
                if (null == this)
                    throw new TypeError("Cannot call method on " + Object.prototype.toString.call(this));
                if ("NFC" === t)
                    return d.nfc(e);
                if ("NFD" === t)
                    return d.nfd(e);
                if ("NFKC" === t)
                    return d.nfkc(e);
                if ("NFKD" === t)
                    return d.nfkd(e);
                throw new RangeError("Invalid normalization form: " + t)
            }
        }),
        d.shimApplied = !0)
    }()
}
, function(e) {
    e.exports = JSON.parse('["的","一","是","在","不","了","有","和","人","这","中","大","为","上","个","国","我","以","要","他","时","来","用","们","生","到","作","地","于","出","就","分","对","成","会","可","主","发","年","动","同","工","也","能","下","过","子","说","产","种","面","而","方","后","多","定","行","学","法","所","民","得","经","十","三","之","进","着","等","部","度","家","电","力","里","如","水","化","高","自","二","理","起","小","物","现","实","加","量","都","两","体","制","机","当","使","点","从","业","本","去","把","性","好","应","开","它","合","还","因","由","其","些","然","前","外","天","政","四","日","那","社","义","事","平","形","相","全","表","间","样","与","关","各","重","新","线","内","数","正","心","反","你","明","看","原","又","么","利","比","或","但","质","气","第","向","道","命","此","变","条","只","没","结","解","问","意","建","月","公","无","系","军","很","情","者","最","立","代","想","已","通","并","提","直","题","党","程","展","五","果","料","象","员","革","位","入","常","文","总","次","品","式","活","设","及","管","特","件","长","求","老","头","基","资","边","流","路","级","少","图","山","统","接","知","较","将","组","见","计","别","她","手","角","期","根","论","运","农","指","几","九","区","强","放","决","西","被","干","做","必","战","先","回","则","任","取","据","处","队","南","给","色","光","门","即","保","治","北","造","百","规","热","领","七","海","口","东","导","器","压","志","世","金","增","争","济","阶","油","思","术","极","交","受","联","什","认","六","共","权","收","证","改","清","美","再","采","转","更","单","风","切","打","白","教","速","花","带","安","场","身","车","例","真","务","具","万","每","目","至","达","走","积","示","议","声","报","斗","完","类","八","离","华","名","确","才","科","张","信","马","节","话","米","整","空","元","况","今","集","温","传","土","许","步","群","广","石","记","需","段","研","界","拉","林","律","叫","且","究","观","越","织","装","影","算","低","持","音","众","书","布","复","容","儿","须","际","商","非","验","连","断","深","难","近","矿","千","周","委","素","技","备","半","办","青","省","列","习","响","约","支","般","史","感","劳","便","团","往","酸","历","市","克","何","除","消","构","府","称","太","准","精","值","号","率","族","维","划","选","标","写","存","候","毛","亲","快","效","斯","院","查","江","型","眼","王","按","格","养","易","置","派","层","片","始","却","专","状","育","厂","京","识","适","属","圆","包","火","住","调","满","县","局","照","参","红","细","引","听","该","铁","价","严","首","底","液","官","德","随","病","苏","失","尔","死","讲","配","女","黄","推","显","谈","罪","神","艺","呢","席","含","企","望","密","批","营","项","防","举","球","英","氧","势","告","李","台","落","木","帮","轮","破","亚","师","围","注","远","字","材","排","供","河","态","封","另","施","减","树","溶","怎","止","案","言","士","均","武","固","叶","鱼","波","视","仅","费","紧","爱","左","章","早","朝","害","续","轻","服","试","食","充","兵","源","判","护","司","足","某","练","差","致","板","田","降","黑","犯","负","击","范","继","兴","似","余","坚","曲","输","修","故","城","夫","够","送","笔","船","占","右","财","吃","富","春","职","觉","汉","画","功","巴","跟","虽","杂","飞","检","吸","助","升","阳","互","初","创","抗","考","投","坏","策","古","径","换","未","跑","留","钢","曾","端","责","站","简","述","钱","副","尽","帝","射","草","冲","承","独","令","限","阿","宣","环","双","请","超","微","让","控","州","良","轴","找","否","纪","益","依","优","顶","础","载","倒","房","突","坐","粉","敌","略","客","袁","冷","胜","绝","析","块","剂","测","丝","协","诉","念","陈","仍","罗","盐","友","洋","错","苦","夜","刑","移","频","逐","靠","混","母","短","皮","终","聚","汽","村","云","哪","既","距","卫","停","烈","央","察","烧","迅","境","若","印","洲","刻","括","激","孔","搞","甚","室","待","核","校","散","侵","吧","甲","游","久","菜","味","旧","模","湖","货","损","预","阻","毫","普","稳","乙","妈","植","息","扩","银","语","挥","酒","守","拿","序","纸","医","缺","雨","吗","针","刘","啊","急","唱","误","训","愿","审","附","获","茶","鲜","粮","斤","孩","脱","硫","肥","善","龙","演","父","渐","血","欢","械","掌","歌","沙","刚","攻","谓","盾","讨","晚","粒","乱","燃","矛","乎","杀","药","宁","鲁","贵","钟","煤","读","班","伯","香","介","迫","句","丰","培","握","兰","担","弦","蛋","沉","假","穿","执","答","乐","谁","顺","烟","缩","征","脸","喜","松","脚","困","异","免","背","星","福","买","染","井","概","慢","怕","磁","倍","祖","皇","促","静","补","评","翻","肉","践","尼","衣","宽","扬","棉","希","伤","操","垂","秋","宜","氢","套","督","振","架","亮","末","宪","庆","编","牛","触","映","雷","销","诗","座","居","抓","裂","胞","呼","娘","景","威","绿","晶","厚","盟","衡","鸡","孙","延","危","胶","屋","乡","临","陆","顾","掉","呀","灯","岁","措","束","耐","剧","玉","赵","跳","哥","季","课","凯","胡","额","款","绍","卷","齐","伟","蒸","殖","永","宗","苗","川","炉","岩","弱","零","杨","奏","沿","露","杆","探","滑","镇","饭","浓","航","怀","赶","库","夺","伊","灵","税","途","灭","赛","归","召","鼓","播","盘","裁","险","康","唯","录","菌","纯","借","糖","盖","横","符","私","努","堂","域","枪","润","幅","哈","竟","熟","虫","泽","脑","壤","碳","欧","遍","侧","寨","敢","彻","虑","斜","薄","庭","纳","弹","饲","伸","折","麦","湿","暗","荷","瓦","塞","床","筑","恶","户","访","塔","奇","透","梁","刀","旋","迹","卡","氯","遇","份","毒","泥","退","洗","摆","灰","彩","卖","耗","夏","择","忙","铜","献","硬","予","繁","圈","雪","函","亦","抽","篇","阵","阴","丁","尺","追","堆","雄","迎","泛","爸","楼","避","谋","吨","野","猪","旗","累","偏","典","馆","索","秦","脂","潮","爷","豆","忽","托","惊","塑","遗","愈","朱","替","纤","粗","倾","尚","痛","楚","谢","奋","购","磨","君","池","旁","碎","骨","监","捕","弟","暴","割","贯","殊","释","词","亡","壁","顿","宝","午","尘","闻","揭","炮","残","冬","桥","妇","警","综","招","吴","付","浮","遭","徐","您","摇","谷","赞","箱","隔","订","男","吹","园","纷","唐","败","宋","玻","巨","耕","坦","荣","闭","湾","键","凡","驻","锅","救","恩","剥","凝","碱","齿","截","炼","麻","纺","禁","废","盛","版","缓","净","睛","昌","婚","涉","筒","嘴","插","岸","朗","庄","街","藏","姑","贸","腐","奴","啦","惯","乘","伙","恢","匀","纱","扎","辩","耳","彪","臣","亿","璃","抵","脉","秀","萨","俄","网","舞","店","喷","纵","寸","汗","挂","洪","贺","闪","柬","爆","烯","津","稻","墙","软","勇","像","滚","厘","蒙","芳","肯","坡","柱","荡","腿","仪","旅","尾","轧","冰","贡","登","黎","削","钻","勒","逃","障","氨","郭","峰","币","港","伏","轨","亩","毕","擦","莫","刺","浪","秘","援","株","健","售","股","岛","甘","泡","睡","童","铸","汤","阀","休","汇","舍","牧","绕","炸","哲","磷","绩","朋","淡","尖","启","陷","柴","呈","徒","颜","泪","稍","忘","泵","蓝","拖","洞","授","镜","辛","壮","锋","贫","虚","弯","摩","泰","幼","廷","尊","窗","纲","弄","隶","疑","氏","宫","姐","震","瑞","怪","尤","琴","循","描","膜","违","夹","腰","缘","珠","穷","森","枝","竹","沟","催","绳","忆","邦","剩","幸","浆","栏","拥","牙","贮","礼","滤","钠","纹","罢","拍","咱","喊","袖","埃","勤","罚","焦","潜","伍","墨","欲","缝","姓","刊","饱","仿","奖","铝","鬼","丽","跨","默","挖","链","扫","喝","袋","炭","污","幕","诸","弧","励","梅","奶","洁","灾","舟","鉴","苯","讼","抱","毁","懂","寒","智","埔","寄","届","跃","渡","挑","丹","艰","贝","碰","拔","爹","戴","码","梦","芽","熔","赤","渔","哭","敬","颗","奔","铅","仲","虎","稀","妹","乏","珍","申","桌","遵","允","隆","螺","仓","魏","锐","晓","氮","兼","隐","碍","赫","拨","忠","肃","缸","牵","抢","博","巧","壳","兄","杜","讯","诚","碧","祥","柯","页","巡","矩","悲","灌","龄","伦","票","寻","桂","铺","圣","恐","恰","郑","趣","抬","荒","腾","贴","柔","滴","猛","阔","辆","妻","填","撤","储","签","闹","扰","紫","砂","递","戏","吊","陶","伐","喂","疗","瓶","婆","抚","臂","摸","忍","虾","蜡","邻","胸","巩","挤","偶","弃","槽","劲","乳","邓","吉","仁","烂","砖","租","乌","舰","伴","瓜","浅","丙","暂","燥","橡","柳","迷","暖","牌","秧","胆","详","簧","踏","瓷","谱","呆","宾","糊","洛","辉","愤","竞","隙","怒","粘","乃","绪","肩","籍","敏","涂","熙","皆","侦","悬","掘","享","纠","醒","狂","锁","淀","恨","牲","霸","爬","赏","逆","玩","陵","祝","秒","浙","貌","役","彼","悉","鸭","趋","凤","晨","畜","辈","秩","卵","署","梯","炎","滩","棋","驱","筛","峡","冒","啥","寿","译","浸","泉","帽","迟","硅","疆","贷","漏","稿","冠","嫩","胁","芯","牢","叛","蚀","奥","鸣","岭","羊","凭","串","塘","绘","酵","融","盆","锡","庙","筹","冻","辅","摄","袭","筋","拒","僚","旱","钾","鸟","漆","沈","眉","疏","添","棒","穗","硝","韩","逼","扭","侨","凉","挺","碗","栽","炒","杯","患","馏","劝","豪","辽","勃","鸿","旦","吏","拜","狗","埋","辊","掩","饮","搬","骂","辞","勾","扣","估","蒋","绒","雾","丈","朵","姆","拟","宇","辑","陕","雕","偿","蓄","崇","剪","倡","厅","咬","驶","薯","刷","斥","番","赋","奉","佛","浇","漫","曼","扇","钙","桃","扶","仔","返","俗","亏","腔","鞋","棱","覆","框","悄","叔","撞","骗","勘","旺","沸","孤","吐","孟","渠","屈","疾","妙","惜","仰","狠","胀","谐","抛","霉","桑","岗","嘛","衰","盗","渗","脏","赖","涌","甜","曹","阅","肌","哩","厉","烃","纬","毅","昨","伪","症","煮","叹","钉","搭","茎","笼","酷","偷","弓","锥","恒","杰","坑","鼻","翼","纶","叙","狱","逮","罐","络","棚","抑","膨","蔬","寺","骤","穆","冶","枯","册","尸","凸","绅","坯","牺","焰","轰","欣","晋","瘦","御","锭","锦","丧","旬","锻","垄","搜","扑","邀","亭","酯","迈","舒","脆","酶","闲","忧","酚","顽","羽","涨","卸","仗","陪","辟","惩","杭","姚","肚","捉","飘","漂","昆","欺","吾","郎","烷","汁","呵","饰","萧","雅","邮","迁","燕","撒","姻","赴","宴","烦","债","帐","斑","铃","旨","醇","董","饼","雏","姿","拌","傅","腹","妥","揉","贤","拆","歪","葡","胺","丢","浩","徽","昂","垫","挡","览","贪","慰","缴","汪","慌","冯","诺","姜","谊","凶","劣","诬","耀","昏","躺","盈","骑","乔","溪","丛","卢","抹","闷","咨","刮","驾","缆","悟","摘","铒","掷","颇","幻","柄","惠","惨","佳","仇","腊","窝","涤","剑","瞧","堡","泼","葱","罩","霍","捞","胎","苍","滨","俩","捅","湘","砍","霞","邵","萄","疯","淮","遂","熊","粪","烘","宿","档","戈","驳","嫂","裕","徙","箭","捐","肠","撑","晒","辨","殿","莲","摊","搅","酱","屏","疫","哀","蔡","堵","沫","皱","畅","叠","阁","莱","敲","辖","钩","痕","坝","巷","饿","祸","丘","玄","溜","曰","逻","彭","尝","卿","妨","艇","吞","韦","怨","矮","歇"]')
}
, function(e) {
    e.exports = JSON.parse('["的","一","是","在","不","了","有","和","人","這","中","大","為","上","個","國","我","以","要","他","時","來","用","們","生","到","作","地","於","出","就","分","對","成","會","可","主","發","年","動","同","工","也","能","下","過","子","說","產","種","面","而","方","後","多","定","行","學","法","所","民","得","經","十","三","之","進","著","等","部","度","家","電","力","裡","如","水","化","高","自","二","理","起","小","物","現","實","加","量","都","兩","體","制","機","當","使","點","從","業","本","去","把","性","好","應","開","它","合","還","因","由","其","些","然","前","外","天","政","四","日","那","社","義","事","平","形","相","全","表","間","樣","與","關","各","重","新","線","內","數","正","心","反","你","明","看","原","又","麼","利","比","或","但","質","氣","第","向","道","命","此","變","條","只","沒","結","解","問","意","建","月","公","無","系","軍","很","情","者","最","立","代","想","已","通","並","提","直","題","黨","程","展","五","果","料","象","員","革","位","入","常","文","總","次","品","式","活","設","及","管","特","件","長","求","老","頭","基","資","邊","流","路","級","少","圖","山","統","接","知","較","將","組","見","計","別","她","手","角","期","根","論","運","農","指","幾","九","區","強","放","決","西","被","幹","做","必","戰","先","回","則","任","取","據","處","隊","南","給","色","光","門","即","保","治","北","造","百","規","熱","領","七","海","口","東","導","器","壓","志","世","金","增","爭","濟","階","油","思","術","極","交","受","聯","什","認","六","共","權","收","證","改","清","美","再","採","轉","更","單","風","切","打","白","教","速","花","帶","安","場","身","車","例","真","務","具","萬","每","目","至","達","走","積","示","議","聲","報","鬥","完","類","八","離","華","名","確","才","科","張","信","馬","節","話","米","整","空","元","況","今","集","溫","傳","土","許","步","群","廣","石","記","需","段","研","界","拉","林","律","叫","且","究","觀","越","織","裝","影","算","低","持","音","眾","書","布","复","容","兒","須","際","商","非","驗","連","斷","深","難","近","礦","千","週","委","素","技","備","半","辦","青","省","列","習","響","約","支","般","史","感","勞","便","團","往","酸","歷","市","克","何","除","消","構","府","稱","太","準","精","值","號","率","族","維","劃","選","標","寫","存","候","毛","親","快","效","斯","院","查","江","型","眼","王","按","格","養","易","置","派","層","片","始","卻","專","狀","育","廠","京","識","適","屬","圓","包","火","住","調","滿","縣","局","照","參","紅","細","引","聽","該","鐵","價","嚴","首","底","液","官","德","隨","病","蘇","失","爾","死","講","配","女","黃","推","顯","談","罪","神","藝","呢","席","含","企","望","密","批","營","項","防","舉","球","英","氧","勢","告","李","台","落","木","幫","輪","破","亞","師","圍","注","遠","字","材","排","供","河","態","封","另","施","減","樹","溶","怎","止","案","言","士","均","武","固","葉","魚","波","視","僅","費","緊","愛","左","章","早","朝","害","續","輕","服","試","食","充","兵","源","判","護","司","足","某","練","差","致","板","田","降","黑","犯","負","擊","范","繼","興","似","餘","堅","曲","輸","修","故","城","夫","夠","送","筆","船","佔","右","財","吃","富","春","職","覺","漢","畫","功","巴","跟","雖","雜","飛","檢","吸","助","昇","陽","互","初","創","抗","考","投","壞","策","古","徑","換","未","跑","留","鋼","曾","端","責","站","簡","述","錢","副","盡","帝","射","草","衝","承","獨","令","限","阿","宣","環","雙","請","超","微","讓","控","州","良","軸","找","否","紀","益","依","優","頂","礎","載","倒","房","突","坐","粉","敵","略","客","袁","冷","勝","絕","析","塊","劑","測","絲","協","訴","念","陳","仍","羅","鹽","友","洋","錯","苦","夜","刑","移","頻","逐","靠","混","母","短","皮","終","聚","汽","村","雲","哪","既","距","衛","停","烈","央","察","燒","迅","境","若","印","洲","刻","括","激","孔","搞","甚","室","待","核","校","散","侵","吧","甲","遊","久","菜","味","舊","模","湖","貨","損","預","阻","毫","普","穩","乙","媽","植","息","擴","銀","語","揮","酒","守","拿","序","紙","醫","缺","雨","嗎","針","劉","啊","急","唱","誤","訓","願","審","附","獲","茶","鮮","糧","斤","孩","脫","硫","肥","善","龍","演","父","漸","血","歡","械","掌","歌","沙","剛","攻","謂","盾","討","晚","粒","亂","燃","矛","乎","殺","藥","寧","魯","貴","鐘","煤","讀","班","伯","香","介","迫","句","豐","培","握","蘭","擔","弦","蛋","沉","假","穿","執","答","樂","誰","順","煙","縮","徵","臉","喜","松","腳","困","異","免","背","星","福","買","染","井","概","慢","怕","磁","倍","祖","皇","促","靜","補","評","翻","肉","踐","尼","衣","寬","揚","棉","希","傷","操","垂","秋","宜","氫","套","督","振","架","亮","末","憲","慶","編","牛","觸","映","雷","銷","詩","座","居","抓","裂","胞","呼","娘","景","威","綠","晶","厚","盟","衡","雞","孫","延","危","膠","屋","鄉","臨","陸","顧","掉","呀","燈","歲","措","束","耐","劇","玉","趙","跳","哥","季","課","凱","胡","額","款","紹","卷","齊","偉","蒸","殖","永","宗","苗","川","爐","岩","弱","零","楊","奏","沿","露","桿","探","滑","鎮","飯","濃","航","懷","趕","庫","奪","伊","靈","稅","途","滅","賽","歸","召","鼓","播","盤","裁","險","康","唯","錄","菌","純","借","糖","蓋","橫","符","私","努","堂","域","槍","潤","幅","哈","竟","熟","蟲","澤","腦","壤","碳","歐","遍","側","寨","敢","徹","慮","斜","薄","庭","納","彈","飼","伸","折","麥","濕","暗","荷","瓦","塞","床","築","惡","戶","訪","塔","奇","透","梁","刀","旋","跡","卡","氯","遇","份","毒","泥","退","洗","擺","灰","彩","賣","耗","夏","擇","忙","銅","獻","硬","予","繁","圈","雪","函","亦","抽","篇","陣","陰","丁","尺","追","堆","雄","迎","泛","爸","樓","避","謀","噸","野","豬","旗","累","偏","典","館","索","秦","脂","潮","爺","豆","忽","托","驚","塑","遺","愈","朱","替","纖","粗","傾","尚","痛","楚","謝","奮","購","磨","君","池","旁","碎","骨","監","捕","弟","暴","割","貫","殊","釋","詞","亡","壁","頓","寶","午","塵","聞","揭","炮","殘","冬","橋","婦","警","綜","招","吳","付","浮","遭","徐","您","搖","谷","贊","箱","隔","訂","男","吹","園","紛","唐","敗","宋","玻","巨","耕","坦","榮","閉","灣","鍵","凡","駐","鍋","救","恩","剝","凝","鹼","齒","截","煉","麻","紡","禁","廢","盛","版","緩","淨","睛","昌","婚","涉","筒","嘴","插","岸","朗","莊","街","藏","姑","貿","腐","奴","啦","慣","乘","夥","恢","勻","紗","扎","辯","耳","彪","臣","億","璃","抵","脈","秀","薩","俄","網","舞","店","噴","縱","寸","汗","掛","洪","賀","閃","柬","爆","烯","津","稻","牆","軟","勇","像","滾","厘","蒙","芳","肯","坡","柱","盪","腿","儀","旅","尾","軋","冰","貢","登","黎","削","鑽","勒","逃","障","氨","郭","峰","幣","港","伏","軌","畝","畢","擦","莫","刺","浪","秘","援","株","健","售","股","島","甘","泡","睡","童","鑄","湯","閥","休","匯","舍","牧","繞","炸","哲","磷","績","朋","淡","尖","啟","陷","柴","呈","徒","顏","淚","稍","忘","泵","藍","拖","洞","授","鏡","辛","壯","鋒","貧","虛","彎","摩","泰","幼","廷","尊","窗","綱","弄","隸","疑","氏","宮","姐","震","瑞","怪","尤","琴","循","描","膜","違","夾","腰","緣","珠","窮","森","枝","竹","溝","催","繩","憶","邦","剩","幸","漿","欄","擁","牙","貯","禮","濾","鈉","紋","罷","拍","咱","喊","袖","埃","勤","罰","焦","潛","伍","墨","欲","縫","姓","刊","飽","仿","獎","鋁","鬼","麗","跨","默","挖","鏈","掃","喝","袋","炭","污","幕","諸","弧","勵","梅","奶","潔","災","舟","鑑","苯","訟","抱","毀","懂","寒","智","埔","寄","屆","躍","渡","挑","丹","艱","貝","碰","拔","爹","戴","碼","夢","芽","熔","赤","漁","哭","敬","顆","奔","鉛","仲","虎","稀","妹","乏","珍","申","桌","遵","允","隆","螺","倉","魏","銳","曉","氮","兼","隱","礙","赫","撥","忠","肅","缸","牽","搶","博","巧","殼","兄","杜","訊","誠","碧","祥","柯","頁","巡","矩","悲","灌","齡","倫","票","尋","桂","鋪","聖","恐","恰","鄭","趣","抬","荒","騰","貼","柔","滴","猛","闊","輛","妻","填","撤","儲","簽","鬧","擾","紫","砂","遞","戲","吊","陶","伐","餵","療","瓶","婆","撫","臂","摸","忍","蝦","蠟","鄰","胸","鞏","擠","偶","棄","槽","勁","乳","鄧","吉","仁","爛","磚","租","烏","艦","伴","瓜","淺","丙","暫","燥","橡","柳","迷","暖","牌","秧","膽","詳","簧","踏","瓷","譜","呆","賓","糊","洛","輝","憤","競","隙","怒","粘","乃","緒","肩","籍","敏","塗","熙","皆","偵","懸","掘","享","糾","醒","狂","鎖","淀","恨","牲","霸","爬","賞","逆","玩","陵","祝","秒","浙","貌","役","彼","悉","鴨","趨","鳳","晨","畜","輩","秩","卵","署","梯","炎","灘","棋","驅","篩","峽","冒","啥","壽","譯","浸","泉","帽","遲","矽","疆","貸","漏","稿","冠","嫩","脅","芯","牢","叛","蝕","奧","鳴","嶺","羊","憑","串","塘","繪","酵","融","盆","錫","廟","籌","凍","輔","攝","襲","筋","拒","僚","旱","鉀","鳥","漆","沈","眉","疏","添","棒","穗","硝","韓","逼","扭","僑","涼","挺","碗","栽","炒","杯","患","餾","勸","豪","遼","勃","鴻","旦","吏","拜","狗","埋","輥","掩","飲","搬","罵","辭","勾","扣","估","蔣","絨","霧","丈","朵","姆","擬","宇","輯","陝","雕","償","蓄","崇","剪","倡","廳","咬","駛","薯","刷","斥","番","賦","奉","佛","澆","漫","曼","扇","鈣","桃","扶","仔","返","俗","虧","腔","鞋","棱","覆","框","悄","叔","撞","騙","勘","旺","沸","孤","吐","孟","渠","屈","疾","妙","惜","仰","狠","脹","諧","拋","黴","桑","崗","嘛","衰","盜","滲","臟","賴","湧","甜","曹","閱","肌","哩","厲","烴","緯","毅","昨","偽","症","煮","嘆","釘","搭","莖","籠","酷","偷","弓","錐","恆","傑","坑","鼻","翼","綸","敘","獄","逮","罐","絡","棚","抑","膨","蔬","寺","驟","穆","冶","枯","冊","屍","凸","紳","坯","犧","焰","轟","欣","晉","瘦","禦","錠","錦","喪","旬","鍛","壟","搜","撲","邀","亭","酯","邁","舒","脆","酶","閒","憂","酚","頑","羽","漲","卸","仗","陪","闢","懲","杭","姚","肚","捉","飄","漂","昆","欺","吾","郎","烷","汁","呵","飾","蕭","雅","郵","遷","燕","撒","姻","赴","宴","煩","債","帳","斑","鈴","旨","醇","董","餅","雛","姿","拌","傅","腹","妥","揉","賢","拆","歪","葡","胺","丟","浩","徽","昂","墊","擋","覽","貪","慰","繳","汪","慌","馮","諾","姜","誼","兇","劣","誣","耀","昏","躺","盈","騎","喬","溪","叢","盧","抹","悶","諮","刮","駕","纜","悟","摘","鉺","擲","頗","幻","柄","惠","慘","佳","仇","臘","窩","滌","劍","瞧","堡","潑","蔥","罩","霍","撈","胎","蒼","濱","倆","捅","湘","砍","霞","邵","萄","瘋","淮","遂","熊","糞","烘","宿","檔","戈","駁","嫂","裕","徙","箭","捐","腸","撐","曬","辨","殿","蓮","攤","攪","醬","屏","疫","哀","蔡","堵","沫","皺","暢","疊","閣","萊","敲","轄","鉤","痕","壩","巷","餓","禍","丘","玄","溜","曰","邏","彭","嘗","卿","妨","艇","吞","韋","怨","矮","歇"]')
}
, function(e) {
    e.exports = JSON.parse('["abandon","ability","able","about","above","absent","absorb","abstract","absurd","abuse","access","accident","account","accuse","achieve","acid","acoustic","acquire","across","act","action","actor","actress","actual","adapt","add","addict","address","adjust","admit","adult","advance","advice","aerobic","affair","afford","afraid","again","age","agent","agree","ahead","aim","air","airport","aisle","alarm","album","alcohol","alert","alien","all","alley","allow","almost","alone","alpha","already","also","alter","always","amateur","amazing","among","amount","amused","analyst","anchor","ancient","anger","angle","angry","animal","ankle","announce","annual","another","answer","antenna","antique","anxiety","any","apart","apology","appear","apple","approve","april","arch","arctic","area","arena","argue","arm","armed","armor","army","around","arrange","arrest","arrive","arrow","art","artefact","artist","artwork","ask","aspect","assault","asset","assist","assume","asthma","athlete","atom","attack","attend","attitude","attract","auction","audit","august","aunt","author","auto","autumn","average","avocado","avoid","awake","aware","away","awesome","awful","awkward","axis","baby","bachelor","bacon","badge","bag","balance","balcony","ball","bamboo","banana","banner","bar","barely","bargain","barrel","base","basic","basket","battle","beach","bean","beauty","because","become","beef","before","begin","behave","behind","believe","below","belt","bench","benefit","best","betray","better","between","beyond","bicycle","bid","bike","bind","biology","bird","birth","bitter","black","blade","blame","blanket","blast","bleak","bless","blind","blood","blossom","blouse","blue","blur","blush","board","boat","body","boil","bomb","bone","bonus","book","boost","border","boring","borrow","boss","bottom","bounce","box","boy","bracket","brain","brand","brass","brave","bread","breeze","brick","bridge","brief","bright","bring","brisk","broccoli","broken","bronze","broom","brother","brown","brush","bubble","buddy","budget","buffalo","build","bulb","bulk","bullet","bundle","bunker","burden","burger","burst","bus","business","busy","butter","buyer","buzz","cabbage","cabin","cable","cactus","cage","cake","call","calm","camera","camp","can","canal","cancel","candy","cannon","canoe","canvas","canyon","capable","capital","captain","car","carbon","card","cargo","carpet","carry","cart","case","cash","casino","castle","casual","cat","catalog","catch","category","cattle","caught","cause","caution","cave","ceiling","celery","cement","census","century","cereal","certain","chair","chalk","champion","change","chaos","chapter","charge","chase","chat","cheap","check","cheese","chef","cherry","chest","chicken","chief","child","chimney","choice","choose","chronic","chuckle","chunk","churn","cigar","cinnamon","circle","citizen","city","civil","claim","clap","clarify","claw","clay","clean","clerk","clever","click","client","cliff","climb","clinic","clip","clock","clog","close","cloth","cloud","clown","club","clump","cluster","clutch","coach","coast","coconut","code","coffee","coil","coin","collect","color","column","combine","come","comfort","comic","common","company","concert","conduct","confirm","congress","connect","consider","control","convince","cook","cool","copper","copy","coral","core","corn","correct","cost","cotton","couch","country","couple","course","cousin","cover","coyote","crack","cradle","craft","cram","crane","crash","crater","crawl","crazy","cream","credit","creek","crew","cricket","crime","crisp","critic","crop","cross","crouch","crowd","crucial","cruel","cruise","crumble","crunch","crush","cry","crystal","cube","culture","cup","cupboard","curious","current","curtain","curve","cushion","custom","cute","cycle","dad","damage","damp","dance","danger","daring","dash","daughter","dawn","day","deal","debate","debris","decade","december","decide","decline","decorate","decrease","deer","defense","define","defy","degree","delay","deliver","demand","demise","denial","dentist","deny","depart","depend","deposit","depth","deputy","derive","describe","desert","design","desk","despair","destroy","detail","detect","develop","device","devote","diagram","dial","diamond","diary","dice","diesel","diet","differ","digital","dignity","dilemma","dinner","dinosaur","direct","dirt","disagree","discover","disease","dish","dismiss","disorder","display","distance","divert","divide","divorce","dizzy","doctor","document","dog","doll","dolphin","domain","donate","donkey","donor","door","dose","double","dove","draft","dragon","drama","drastic","draw","dream","dress","drift","drill","drink","drip","drive","drop","drum","dry","duck","dumb","dune","during","dust","dutch","duty","dwarf","dynamic","eager","eagle","early","earn","earth","easily","east","easy","echo","ecology","economy","edge","edit","educate","effort","egg","eight","either","elbow","elder","electric","elegant","element","elephant","elevator","elite","else","embark","embody","embrace","emerge","emotion","employ","empower","empty","enable","enact","end","endless","endorse","enemy","energy","enforce","engage","engine","enhance","enjoy","enlist","enough","enrich","enroll","ensure","enter","entire","entry","envelope","episode","equal","equip","era","erase","erode","erosion","error","erupt","escape","essay","essence","estate","eternal","ethics","evidence","evil","evoke","evolve","exact","example","excess","exchange","excite","exclude","excuse","execute","exercise","exhaust","exhibit","exile","exist","exit","exotic","expand","expect","expire","explain","expose","express","extend","extra","eye","eyebrow","fabric","face","faculty","fade","faint","faith","fall","false","fame","family","famous","fan","fancy","fantasy","farm","fashion","fat","fatal","father","fatigue","fault","favorite","feature","february","federal","fee","feed","feel","female","fence","festival","fetch","fever","few","fiber","fiction","field","figure","file","film","filter","final","find","fine","finger","finish","fire","firm","first","fiscal","fish","fit","fitness","fix","flag","flame","flash","flat","flavor","flee","flight","flip","float","flock","floor","flower","fluid","flush","fly","foam","focus","fog","foil","fold","follow","food","foot","force","forest","forget","fork","fortune","forum","forward","fossil","foster","found","fox","fragile","frame","frequent","fresh","friend","fringe","frog","front","frost","frown","frozen","fruit","fuel","fun","funny","furnace","fury","future","gadget","gain","galaxy","gallery","game","gap","garage","garbage","garden","garlic","garment","gas","gasp","gate","gather","gauge","gaze","general","genius","genre","gentle","genuine","gesture","ghost","giant","gift","giggle","ginger","giraffe","girl","give","glad","glance","glare","glass","glide","glimpse","globe","gloom","glory","glove","glow","glue","goat","goddess","gold","good","goose","gorilla","gospel","gossip","govern","gown","grab","grace","grain","grant","grape","grass","gravity","great","green","grid","grief","grit","grocery","group","grow","grunt","guard","guess","guide","guilt","guitar","gun","gym","habit","hair","half","hammer","hamster","hand","happy","harbor","hard","harsh","harvest","hat","have","hawk","hazard","head","health","heart","heavy","hedgehog","height","hello","helmet","help","hen","hero","hidden","high","hill","hint","hip","hire","history","hobby","hockey","hold","hole","holiday","hollow","home","honey","hood","hope","horn","horror","horse","hospital","host","hotel","hour","hover","hub","huge","human","humble","humor","hundred","hungry","hunt","hurdle","hurry","hurt","husband","hybrid","ice","icon","idea","identify","idle","ignore","ill","illegal","illness","image","imitate","immense","immune","impact","impose","improve","impulse","inch","include","income","increase","index","indicate","indoor","industry","infant","inflict","inform","inhale","inherit","initial","inject","injury","inmate","inner","innocent","input","inquiry","insane","insect","inside","inspire","install","intact","interest","into","invest","invite","involve","iron","island","isolate","issue","item","ivory","jacket","jaguar","jar","jazz","jealous","jeans","jelly","jewel","job","join","joke","journey","joy","judge","juice","jump","jungle","junior","junk","just","kangaroo","keen","keep","ketchup","key","kick","kid","kidney","kind","kingdom","kiss","kit","kitchen","kite","kitten","kiwi","knee","knife","knock","know","lab","label","labor","ladder","lady","lake","lamp","language","laptop","large","later","latin","laugh","laundry","lava","law","lawn","lawsuit","layer","lazy","leader","leaf","learn","leave","lecture","left","leg","legal","legend","leisure","lemon","lend","length","lens","leopard","lesson","letter","level","liar","liberty","library","license","life","lift","light","like","limb","limit","link","lion","liquid","list","little","live","lizard","load","loan","lobster","local","lock","logic","lonely","long","loop","lottery","loud","lounge","love","loyal","lucky","luggage","lumber","lunar","lunch","luxury","lyrics","machine","mad","magic","magnet","maid","mail","main","major","make","mammal","man","manage","mandate","mango","mansion","manual","maple","marble","march","margin","marine","market","marriage","mask","mass","master","match","material","math","matrix","matter","maximum","maze","meadow","mean","measure","meat","mechanic","medal","media","melody","melt","member","memory","mention","menu","mercy","merge","merit","merry","mesh","message","metal","method","middle","midnight","milk","million","mimic","mind","minimum","minor","minute","miracle","mirror","misery","miss","mistake","mix","mixed","mixture","mobile","model","modify","mom","moment","monitor","monkey","monster","month","moon","moral","more","morning","mosquito","mother","motion","motor","mountain","mouse","move","movie","much","muffin","mule","multiply","muscle","museum","mushroom","music","must","mutual","myself","mystery","myth","naive","name","napkin","narrow","nasty","nation","nature","near","neck","need","negative","neglect","neither","nephew","nerve","nest","net","network","neutral","never","news","next","nice","night","noble","noise","nominee","noodle","normal","north","nose","notable","note","nothing","notice","novel","now","nuclear","number","nurse","nut","oak","obey","object","oblige","obscure","observe","obtain","obvious","occur","ocean","october","odor","off","offer","office","often","oil","okay","old","olive","olympic","omit","once","one","onion","online","only","open","opera","opinion","oppose","option","orange","orbit","orchard","order","ordinary","organ","orient","original","orphan","ostrich","other","outdoor","outer","output","outside","oval","oven","over","own","owner","oxygen","oyster","ozone","pact","paddle","page","pair","palace","palm","panda","panel","panic","panther","paper","parade","parent","park","parrot","party","pass","patch","path","patient","patrol","pattern","pause","pave","payment","peace","peanut","pear","peasant","pelican","pen","penalty","pencil","people","pepper","perfect","permit","person","pet","phone","photo","phrase","physical","piano","picnic","picture","piece","pig","pigeon","pill","pilot","pink","pioneer","pipe","pistol","pitch","pizza","place","planet","plastic","plate","play","please","pledge","pluck","plug","plunge","poem","poet","point","polar","pole","police","pond","pony","pool","popular","portion","position","possible","post","potato","pottery","poverty","powder","power","practice","praise","predict","prefer","prepare","present","pretty","prevent","price","pride","primary","print","priority","prison","private","prize","problem","process","produce","profit","program","project","promote","proof","property","prosper","protect","proud","provide","public","pudding","pull","pulp","pulse","pumpkin","punch","pupil","puppy","purchase","purity","purpose","purse","push","put","puzzle","pyramid","quality","quantum","quarter","question","quick","quit","quiz","quote","rabbit","raccoon","race","rack","radar","radio","rail","rain","raise","rally","ramp","ranch","random","range","rapid","rare","rate","rather","raven","raw","razor","ready","real","reason","rebel","rebuild","recall","receive","recipe","record","recycle","reduce","reflect","reform","refuse","region","regret","regular","reject","relax","release","relief","rely","remain","remember","remind","remove","render","renew","rent","reopen","repair","repeat","replace","report","require","rescue","resemble","resist","resource","response","result","retire","retreat","return","reunion","reveal","review","reward","rhythm","rib","ribbon","rice","rich","ride","ridge","rifle","right","rigid","ring","riot","ripple","risk","ritual","rival","river","road","roast","robot","robust","rocket","romance","roof","rookie","room","rose","rotate","rough","round","route","royal","rubber","rude","rug","rule","run","runway","rural","sad","saddle","sadness","safe","sail","salad","salmon","salon","salt","salute","same","sample","sand","satisfy","satoshi","sauce","sausage","save","say","scale","scan","scare","scatter","scene","scheme","school","science","scissors","scorpion","scout","scrap","screen","script","scrub","sea","search","season","seat","second","secret","section","security","seed","seek","segment","select","sell","seminar","senior","sense","sentence","series","service","session","settle","setup","seven","shadow","shaft","shallow","share","shed","shell","sheriff","shield","shift","shine","ship","shiver","shock","shoe","shoot","shop","short","shoulder","shove","shrimp","shrug","shuffle","shy","sibling","sick","side","siege","sight","sign","silent","silk","silly","silver","similar","simple","since","sing","siren","sister","situate","six","size","skate","sketch","ski","skill","skin","skirt","skull","slab","slam","sleep","slender","slice","slide","slight","slim","slogan","slot","slow","slush","small","smart","smile","smoke","smooth","snack","snake","snap","sniff","snow","soap","soccer","social","sock","soda","soft","solar","soldier","solid","solution","solve","someone","song","soon","sorry","sort","soul","sound","soup","source","south","space","spare","spatial","spawn","speak","special","speed","spell","spend","sphere","spice","spider","spike","spin","spirit","split","spoil","sponsor","spoon","sport","spot","spray","spread","spring","spy","square","squeeze","squirrel","stable","stadium","staff","stage","stairs","stamp","stand","start","state","stay","steak","steel","stem","step","stereo","stick","still","sting","stock","stomach","stone","stool","story","stove","strategy","street","strike","strong","struggle","student","stuff","stumble","style","subject","submit","subway","success","such","sudden","suffer","sugar","suggest","suit","summer","sun","sunny","sunset","super","supply","supreme","sure","surface","surge","surprise","surround","survey","suspect","sustain","swallow","swamp","swap","swarm","swear","sweet","swift","swim","swing","switch","sword","symbol","symptom","syrup","system","table","tackle","tag","tail","talent","talk","tank","tape","target","task","taste","tattoo","taxi","teach","team","tell","ten","tenant","tennis","tent","term","test","text","thank","that","theme","then","theory","there","they","thing","this","thought","three","thrive","throw","thumb","thunder","ticket","tide","tiger","tilt","timber","time","tiny","tip","tired","tissue","title","toast","tobacco","today","toddler","toe","together","toilet","token","tomato","tomorrow","tone","tongue","tonight","tool","tooth","top","topic","topple","torch","tornado","tortoise","toss","total","tourist","toward","tower","town","toy","track","trade","traffic","tragic","train","transfer","trap","trash","travel","tray","treat","tree","trend","trial","tribe","trick","trigger","trim","trip","trophy","trouble","truck","true","truly","trumpet","trust","truth","try","tube","tuition","tumble","tuna","tunnel","turkey","turn","turtle","twelve","twenty","twice","twin","twist","two","type","typical","ugly","umbrella","unable","unaware","uncle","uncover","under","undo","unfair","unfold","unhappy","uniform","unique","unit","universe","unknown","unlock","until","unusual","unveil","update","upgrade","uphold","upon","upper","upset","urban","urge","usage","use","used","useful","useless","usual","utility","vacant","vacuum","vague","valid","valley","valve","van","vanish","vapor","various","vast","vault","vehicle","velvet","vendor","venture","venue","verb","verify","version","very","vessel","veteran","viable","vibrant","vicious","victory","video","view","village","vintage","violin","virtual","virus","visa","visit","visual","vital","vivid","vocal","voice","void","volcano","volume","vote","voyage","wage","wagon","wait","walk","wall","walnut","want","warfare","warm","warrior","wash","wasp","waste","water","wave","way","wealth","weapon","wear","weasel","weather","web","wedding","weekend","weird","welcome","west","wet","whale","what","wheat","wheel","when","where","whip","whisper","wide","width","wife","wild","will","win","window","wine","wing","wink","winner","winter","wire","wisdom","wise","wish","witness","wolf","woman","wonder","wood","wool","word","work","world","worry","worth","wrap","wreck","wrestle","wrist","write","wrong","yard","year","yellow","you","young","youth","zebra","zero","zone","zoo"]')
}
, function(e) {
    e.exports = JSON.parse('["abaisser","abandon","abdiquer","abeille","abolir","aborder","aboutir","aboyer","abrasif","abreuver","abriter","abroger","abrupt","absence","absolu","absurde","abusif","abyssal","académie","acajou","acarien","accabler","accepter","acclamer","accolade","accroche","accuser","acerbe","achat","acheter","aciduler","acier","acompte","acquérir","acronyme","acteur","actif","actuel","adepte","adéquat","adhésif","adjectif","adjuger","admettre","admirer","adopter","adorer","adoucir","adresse","adroit","adulte","adverbe","aérer","aéronef","affaire","affecter","affiche","affreux","affubler","agacer","agencer","agile","agiter","agrafer","agréable","agrume","aider","aiguille","ailier","aimable","aisance","ajouter","ajuster","alarmer","alchimie","alerte","algèbre","algue","aliéner","aliment","alléger","alliage","allouer","allumer","alourdir","alpaga","altesse","alvéole","amateur","ambigu","ambre","aménager","amertume","amidon","amiral","amorcer","amour","amovible","amphibie","ampleur","amusant","analyse","anaphore","anarchie","anatomie","ancien","anéantir","angle","angoisse","anguleux","animal","annexer","annonce","annuel","anodin","anomalie","anonyme","anormal","antenne","antidote","anxieux","apaiser","apéritif","aplanir","apologie","appareil","appeler","apporter","appuyer","aquarium","aqueduc","arbitre","arbuste","ardeur","ardoise","argent","arlequin","armature","armement","armoire","armure","arpenter","arracher","arriver","arroser","arsenic","artériel","article","aspect","asphalte","aspirer","assaut","asservir","assiette","associer","assurer","asticot","astre","astuce","atelier","atome","atrium","atroce","attaque","attentif","attirer","attraper","aubaine","auberge","audace","audible","augurer","aurore","automne","autruche","avaler","avancer","avarice","avenir","averse","aveugle","aviateur","avide","avion","aviser","avoine","avouer","avril","axial","axiome","badge","bafouer","bagage","baguette","baignade","balancer","balcon","baleine","balisage","bambin","bancaire","bandage","banlieue","bannière","banquier","barbier","baril","baron","barque","barrage","bassin","bastion","bataille","bateau","batterie","baudrier","bavarder","belette","bélier","belote","bénéfice","berceau","berger","berline","bermuda","besace","besogne","bétail","beurre","biberon","bicycle","bidule","bijou","bilan","bilingue","billard","binaire","biologie","biopsie","biotype","biscuit","bison","bistouri","bitume","bizarre","blafard","blague","blanchir","blessant","blinder","blond","bloquer","blouson","bobard","bobine","boire","boiser","bolide","bonbon","bondir","bonheur","bonifier","bonus","bordure","borne","botte","boucle","boueux","bougie","boulon","bouquin","bourse","boussole","boutique","boxeur","branche","brasier","brave","brebis","brèche","breuvage","bricoler","brigade","brillant","brioche","brique","brochure","broder","bronzer","brousse","broyeur","brume","brusque","brutal","bruyant","buffle","buisson","bulletin","bureau","burin","bustier","butiner","butoir","buvable","buvette","cabanon","cabine","cachette","cadeau","cadre","caféine","caillou","caisson","calculer","calepin","calibre","calmer","calomnie","calvaire","camarade","caméra","camion","campagne","canal","caneton","canon","cantine","canular","capable","caporal","caprice","capsule","capter","capuche","carabine","carbone","caresser","caribou","carnage","carotte","carreau","carton","cascade","casier","casque","cassure","causer","caution","cavalier","caverne","caviar","cédille","ceinture","céleste","cellule","cendrier","censurer","central","cercle","cérébral","cerise","cerner","cerveau","cesser","chagrin","chaise","chaleur","chambre","chance","chapitre","charbon","chasseur","chaton","chausson","chavirer","chemise","chenille","chéquier","chercher","cheval","chien","chiffre","chignon","chimère","chiot","chlorure","chocolat","choisir","chose","chouette","chrome","chute","cigare","cigogne","cimenter","cinéma","cintrer","circuler","cirer","cirque","citerne","citoyen","citron","civil","clairon","clameur","claquer","classe","clavier","client","cligner","climat","clivage","cloche","clonage","cloporte","cobalt","cobra","cocasse","cocotier","coder","codifier","coffre","cogner","cohésion","coiffer","coincer","colère","colibri","colline","colmater","colonel","combat","comédie","commande","compact","concert","conduire","confier","congeler","connoter","consonne","contact","convexe","copain","copie","corail","corbeau","cordage","corniche","corpus","correct","cortège","cosmique","costume","coton","coude","coupure","courage","couteau","couvrir","coyote","crabe","crainte","cravate","crayon","créature","créditer","crémeux","creuser","crevette","cribler","crier","cristal","critère","croire","croquer","crotale","crucial","cruel","crypter","cubique","cueillir","cuillère","cuisine","cuivre","culminer","cultiver","cumuler","cupide","curatif","curseur","cyanure","cycle","cylindre","cynique","daigner","damier","danger","danseur","dauphin","débattre","débiter","déborder","débrider","débutant","décaler","décembre","déchirer","décider","déclarer","décorer","décrire","décupler","dédale","déductif","déesse","défensif","défiler","défrayer","dégager","dégivrer","déglutir","dégrafer","déjeuner","délice","déloger","demander","demeurer","démolir","dénicher","dénouer","dentelle","dénuder","départ","dépenser","déphaser","déplacer","déposer","déranger","dérober","désastre","descente","désert","désigner","désobéir","dessiner","destrier","détacher","détester","détourer","détresse","devancer","devenir","deviner","devoir","diable","dialogue","diamant","dicter","différer","digérer","digital","digne","diluer","dimanche","diminuer","dioxyde","directif","diriger","discuter","disposer","dissiper","distance","divertir","diviser","docile","docteur","dogme","doigt","domaine","domicile","dompter","donateur","donjon","donner","dopamine","dortoir","dorure","dosage","doseur","dossier","dotation","douanier","double","douceur","douter","doyen","dragon","draper","dresser","dribbler","droiture","duperie","duplexe","durable","durcir","dynastie","éblouir","écarter","écharpe","échelle","éclairer","éclipse","éclore","écluse","école","économie","écorce","écouter","écraser","écrémer","écrivain","écrou","écume","écureuil","édifier","éduquer","effacer","effectif","effigie","effort","effrayer","effusion","égaliser","égarer","éjecter","élaborer","élargir","électron","élégant","éléphant","élève","éligible","élitisme","éloge","élucider","éluder","emballer","embellir","embryon","émeraude","émission","emmener","émotion","émouvoir","empereur","employer","emporter","emprise","émulsion","encadrer","enchère","enclave","encoche","endiguer","endosser","endroit","enduire","énergie","enfance","enfermer","enfouir","engager","engin","englober","énigme","enjamber","enjeu","enlever","ennemi","ennuyeux","enrichir","enrobage","enseigne","entasser","entendre","entier","entourer","entraver","énumérer","envahir","enviable","envoyer","enzyme","éolien","épaissir","épargne","épatant","épaule","épicerie","épidémie","épier","épilogue","épine","épisode","épitaphe","époque","épreuve","éprouver","épuisant","équerre","équipe","ériger","érosion","erreur","éruption","escalier","espadon","espèce","espiègle","espoir","esprit","esquiver","essayer","essence","essieu","essorer","estime","estomac","estrade","étagère","étaler","étanche","étatique","éteindre","étendoir","éternel","éthanol","éthique","ethnie","étirer","étoffer","étoile","étonnant","étourdir","étrange","étroit","étude","euphorie","évaluer","évasion","éventail","évidence","éviter","évolutif","évoquer","exact","exagérer","exaucer","exceller","excitant","exclusif","excuse","exécuter","exemple","exercer","exhaler","exhorter","exigence","exiler","exister","exotique","expédier","explorer","exposer","exprimer","exquis","extensif","extraire","exulter","fable","fabuleux","facette","facile","facture","faiblir","falaise","fameux","famille","farceur","farfelu","farine","farouche","fasciner","fatal","fatigue","faucon","fautif","faveur","favori","fébrile","féconder","fédérer","félin","femme","fémur","fendoir","féodal","fermer","féroce","ferveur","festival","feuille","feutre","février","fiasco","ficeler","fictif","fidèle","figure","filature","filetage","filière","filleul","filmer","filou","filtrer","financer","finir","fiole","firme","fissure","fixer","flairer","flamme","flasque","flatteur","fléau","flèche","fleur","flexion","flocon","flore","fluctuer","fluide","fluvial","folie","fonderie","fongible","fontaine","forcer","forgeron","formuler","fortune","fossile","foudre","fougère","fouiller","foulure","fourmi","fragile","fraise","franchir","frapper","frayeur","frégate","freiner","frelon","frémir","frénésie","frère","friable","friction","frisson","frivole","froid","fromage","frontal","frotter","fruit","fugitif","fuite","fureur","furieux","furtif","fusion","futur","gagner","galaxie","galerie","gambader","garantir","gardien","garnir","garrigue","gazelle","gazon","géant","gélatine","gélule","gendarme","général","génie","genou","gentil","géologie","géomètre","géranium","germe","gestuel","geyser","gibier","gicler","girafe","givre","glace","glaive","glisser","globe","gloire","glorieux","golfeur","gomme","gonfler","gorge","gorille","goudron","gouffre","goulot","goupille","gourmand","goutte","graduel","graffiti","graine","grand","grappin","gratuit","gravir","grenat","griffure","griller","grimper","grogner","gronder","grotte","groupe","gruger","grutier","gruyère","guépard","guerrier","guide","guimauve","guitare","gustatif","gymnaste","gyrostat","habitude","hachoir","halte","hameau","hangar","hanneton","haricot","harmonie","harpon","hasard","hélium","hématome","herbe","hérisson","hermine","héron","hésiter","heureux","hiberner","hibou","hilarant","histoire","hiver","homard","hommage","homogène","honneur","honorer","honteux","horde","horizon","horloge","hormone","horrible","houleux","housse","hublot","huileux","humain","humble","humide","humour","hurler","hydromel","hygiène","hymne","hypnose","idylle","ignorer","iguane","illicite","illusion","image","imbiber","imiter","immense","immobile","immuable","impact","impérial","implorer","imposer","imprimer","imputer","incarner","incendie","incident","incliner","incolore","indexer","indice","inductif","inédit","ineptie","inexact","infini","infliger","informer","infusion","ingérer","inhaler","inhiber","injecter","injure","innocent","inoculer","inonder","inscrire","insecte","insigne","insolite","inspirer","instinct","insulter","intact","intense","intime","intrigue","intuitif","inutile","invasion","inventer","inviter","invoquer","ironique","irradier","irréel","irriter","isoler","ivoire","ivresse","jaguar","jaillir","jambe","janvier","jardin","jauger","jaune","javelot","jetable","jeton","jeudi","jeunesse","joindre","joncher","jongler","joueur","jouissif","journal","jovial","joyau","joyeux","jubiler","jugement","junior","jupon","juriste","justice","juteux","juvénile","kayak","kimono","kiosque","label","labial","labourer","lacérer","lactose","lagune","laine","laisser","laitier","lambeau","lamelle","lampe","lanceur","langage","lanterne","lapin","largeur","larme","laurier","lavabo","lavoir","lecture","légal","léger","légume","lessive","lettre","levier","lexique","lézard","liasse","libérer","libre","licence","licorne","liège","lièvre","ligature","ligoter","ligue","limer","limite","limonade","limpide","linéaire","lingot","lionceau","liquide","lisière","lister","lithium","litige","littoral","livreur","logique","lointain","loisir","lombric","loterie","louer","lourd","loutre","louve","loyal","lubie","lucide","lucratif","lueur","lugubre","luisant","lumière","lunaire","lundi","luron","lutter","luxueux","machine","magasin","magenta","magique","maigre","maillon","maintien","mairie","maison","majorer","malaxer","maléfice","malheur","malice","mallette","mammouth","mandater","maniable","manquant","manteau","manuel","marathon","marbre","marchand","mardi","maritime","marqueur","marron","marteler","mascotte","massif","matériel","matière","matraque","maudire","maussade","mauve","maximal","méchant","méconnu","médaille","médecin","méditer","méduse","meilleur","mélange","mélodie","membre","mémoire","menacer","mener","menhir","mensonge","mentor","mercredi","mérite","merle","messager","mesure","métal","météore","méthode","métier","meuble","miauler","microbe","miette","mignon","migrer","milieu","million","mimique","mince","minéral","minimal","minorer","minute","miracle","miroiter","missile","mixte","mobile","moderne","moelleux","mondial","moniteur","monnaie","monotone","monstre","montagne","monument","moqueur","morceau","morsure","mortier","moteur","motif","mouche","moufle","moulin","mousson","mouton","mouvant","multiple","munition","muraille","murène","murmure","muscle","muséum","musicien","mutation","muter","mutuel","myriade","myrtille","mystère","mythique","nageur","nappe","narquois","narrer","natation","nation","nature","naufrage","nautique","navire","nébuleux","nectar","néfaste","négation","négliger","négocier","neige","nerveux","nettoyer","neurone","neutron","neveu","niche","nickel","nitrate","niveau","noble","nocif","nocturne","noirceur","noisette","nomade","nombreux","nommer","normatif","notable","notifier","notoire","nourrir","nouveau","novateur","novembre","novice","nuage","nuancer","nuire","nuisible","numéro","nuptial","nuque","nutritif","obéir","objectif","obliger","obscur","observer","obstacle","obtenir","obturer","occasion","occuper","océan","octobre","octroyer","octupler","oculaire","odeur","odorant","offenser","officier","offrir","ogive","oiseau","oisillon","olfactif","olivier","ombrage","omettre","onctueux","onduler","onéreux","onirique","opale","opaque","opérer","opinion","opportun","opprimer","opter","optique","orageux","orange","orbite","ordonner","oreille","organe","orgueil","orifice","ornement","orque","ortie","osciller","osmose","ossature","otarie","ouragan","ourson","outil","outrager","ouvrage","ovation","oxyde","oxygène","ozone","paisible","palace","palmarès","palourde","palper","panache","panda","pangolin","paniquer","panneau","panorama","pantalon","papaye","papier","papoter","papyrus","paradoxe","parcelle","paresse","parfumer","parler","parole","parrain","parsemer","partager","parure","parvenir","passion","pastèque","paternel","patience","patron","pavillon","pavoiser","payer","paysage","peigne","peintre","pelage","pélican","pelle","pelouse","peluche","pendule","pénétrer","pénible","pensif","pénurie","pépite","péplum","perdrix","perforer","période","permuter","perplexe","persil","perte","peser","pétale","petit","pétrir","peuple","pharaon","phobie","phoque","photon","phrase","physique","piano","pictural","pièce","pierre","pieuvre","pilote","pinceau","pipette","piquer","pirogue","piscine","piston","pivoter","pixel","pizza","placard","plafond","plaisir","planer","plaque","plastron","plateau","pleurer","plexus","pliage","plomb","plonger","pluie","plumage","pochette","poésie","poète","pointe","poirier","poisson","poivre","polaire","policier","pollen","polygone","pommade","pompier","ponctuel","pondérer","poney","portique","position","posséder","posture","potager","poteau","potion","pouce","poulain","poumon","pourpre","poussin","pouvoir","prairie","pratique","précieux","prédire","préfixe","prélude","prénom","présence","prétexte","prévoir","primitif","prince","prison","priver","problème","procéder","prodige","profond","progrès","proie","projeter","prologue","promener","propre","prospère","protéger","prouesse","proverbe","prudence","pruneau","psychose","public","puceron","puiser","pulpe","pulsar","punaise","punitif","pupitre","purifier","puzzle","pyramide","quasar","querelle","question","quiétude","quitter","quotient","racine","raconter","radieux","ragondin","raideur","raisin","ralentir","rallonge","ramasser","rapide","rasage","ratisser","ravager","ravin","rayonner","réactif","réagir","réaliser","réanimer","recevoir","réciter","réclamer","récolter","recruter","reculer","recycler","rédiger","redouter","refaire","réflexe","réformer","refrain","refuge","régalien","région","réglage","régulier","réitérer","rejeter","rejouer","relatif","relever","relief","remarque","remède","remise","remonter","remplir","remuer","renard","renfort","renifler","renoncer","rentrer","renvoi","replier","reporter","reprise","reptile","requin","réserve","résineux","résoudre","respect","rester","résultat","rétablir","retenir","réticule","retomber","retracer","réunion","réussir","revanche","revivre","révolte","révulsif","richesse","rideau","rieur","rigide","rigoler","rincer","riposter","risible","risque","rituel","rival","rivière","rocheux","romance","rompre","ronce","rondin","roseau","rosier","rotatif","rotor","rotule","rouge","rouille","rouleau","routine","royaume","ruban","rubis","ruche","ruelle","rugueux","ruiner","ruisseau","ruser","rustique","rythme","sabler","saboter","sabre","sacoche","safari","sagesse","saisir","salade","salive","salon","saluer","samedi","sanction","sanglier","sarcasme","sardine","saturer","saugrenu","saumon","sauter","sauvage","savant","savonner","scalpel","scandale","scélérat","scénario","sceptre","schéma","science","scinder","score","scrutin","sculpter","séance","sécable","sécher","secouer","sécréter","sédatif","séduire","seigneur","séjour","sélectif","semaine","sembler","semence","séminal","sénateur","sensible","sentence","séparer","séquence","serein","sergent","sérieux","serrure","sérum","service","sésame","sévir","sevrage","sextuple","sidéral","siècle","siéger","siffler","sigle","signal","silence","silicium","simple","sincère","sinistre","siphon","sirop","sismique","situer","skier","social","socle","sodium","soigneux","soldat","soleil","solitude","soluble","sombre","sommeil","somnoler","sonde","songeur","sonnette","sonore","sorcier","sortir","sosie","sottise","soucieux","soudure","souffle","soulever","soupape","source","soutirer","souvenir","spacieux","spatial","spécial","sphère","spiral","stable","station","sternum","stimulus","stipuler","strict","studieux","stupeur","styliste","sublime","substrat","subtil","subvenir","succès","sucre","suffixe","suggérer","suiveur","sulfate","superbe","supplier","surface","suricate","surmener","surprise","sursaut","survie","suspect","syllabe","symbole","symétrie","synapse","syntaxe","système","tabac","tablier","tactile","tailler","talent","talisman","talonner","tambour","tamiser","tangible","tapis","taquiner","tarder","tarif","tartine","tasse","tatami","tatouage","taupe","taureau","taxer","témoin","temporel","tenaille","tendre","teneur","tenir","tension","terminer","terne","terrible","tétine","texte","thème","théorie","thérapie","thorax","tibia","tiède","timide","tirelire","tiroir","tissu","titane","titre","tituber","toboggan","tolérant","tomate","tonique","tonneau","toponyme","torche","tordre","tornade","torpille","torrent","torse","tortue","totem","toucher","tournage","tousser","toxine","traction","trafic","tragique","trahir","train","trancher","travail","trèfle","tremper","trésor","treuil","triage","tribunal","tricoter","trilogie","triomphe","tripler","triturer","trivial","trombone","tronc","tropical","troupeau","tuile","tulipe","tumulte","tunnel","turbine","tuteur","tutoyer","tuyau","tympan","typhon","typique","tyran","ubuesque","ultime","ultrason","unanime","unifier","union","unique","unitaire","univers","uranium","urbain","urticant","usage","usine","usuel","usure","utile","utopie","vacarme","vaccin","vagabond","vague","vaillant","vaincre","vaisseau","valable","valise","vallon","valve","vampire","vanille","vapeur","varier","vaseux","vassal","vaste","vecteur","vedette","végétal","véhicule","veinard","véloce","vendredi","vénérer","venger","venimeux","ventouse","verdure","vérin","vernir","verrou","verser","vertu","veston","vétéran","vétuste","vexant","vexer","viaduc","viande","victoire","vidange","vidéo","vignette","vigueur","vilain","village","vinaigre","violon","vipère","virement","virtuose","virus","visage","viseur","vision","visqueux","visuel","vital","vitesse","viticole","vitrine","vivace","vivipare","vocation","voguer","voile","voisin","voiture","volaille","volcan","voltiger","volume","vorace","vortex","voter","vouloir","voyage","voyelle","wagon","xénon","yacht","zèbre","zénith","zeste","zoologie"]')
}
, function(e) {
    e.exports = JSON.parse('["abaco","abbaglio","abbinato","abete","abisso","abolire","abrasivo","abrogato","accadere","accenno","accusato","acetone","achille","acido","acqua","acre","acrilico","acrobata","acuto","adagio","addebito","addome","adeguato","aderire","adipe","adottare","adulare","affabile","affetto","affisso","affranto","aforisma","afoso","africano","agave","agente","agevole","aggancio","agire","agitare","agonismo","agricolo","agrumeto","aguzzo","alabarda","alato","albatro","alberato","albo","albume","alce","alcolico","alettone","alfa","algebra","aliante","alibi","alimento","allagato","allegro","allievo","allodola","allusivo","almeno","alogeno","alpaca","alpestre","altalena","alterno","alticcio","altrove","alunno","alveolo","alzare","amalgama","amanita","amarena","ambito","ambrato","ameba","america","ametista","amico","ammasso","ammenda","ammirare","ammonito","amore","ampio","ampliare","amuleto","anacardo","anagrafe","analista","anarchia","anatra","anca","ancella","ancora","andare","andrea","anello","angelo","angolare","angusto","anima","annegare","annidato","anno","annuncio","anonimo","anticipo","anzi","apatico","apertura","apode","apparire","appetito","appoggio","approdo","appunto","aprile","arabica","arachide","aragosta","araldica","arancio","aratura","arazzo","arbitro","archivio","ardito","arenile","argento","argine","arguto","aria","armonia","arnese","arredato","arringa","arrosto","arsenico","arso","artefice","arzillo","asciutto","ascolto","asepsi","asettico","asfalto","asino","asola","aspirato","aspro","assaggio","asse","assoluto","assurdo","asta","astenuto","astice","astratto","atavico","ateismo","atomico","atono","attesa","attivare","attorno","attrito","attuale","ausilio","austria","autista","autonomo","autunno","avanzato","avere","avvenire","avviso","avvolgere","azione","azoto","azzimo","azzurro","babele","baccano","bacino","baco","badessa","badilata","bagnato","baita","balcone","baldo","balena","ballata","balzano","bambino","bandire","baraonda","barbaro","barca","baritono","barlume","barocco","basilico","basso","batosta","battuto","baule","bava","bavosa","becco","beffa","belgio","belva","benda","benevole","benigno","benzina","bere","berlina","beta","bibita","bici","bidone","bifido","biga","bilancia","bimbo","binocolo","biologo","bipede","bipolare","birbante","birra","biscotto","bisesto","bisnonno","bisonte","bisturi","bizzarro","blando","blatta","bollito","bonifico","bordo","bosco","botanico","bottino","bozzolo","braccio","bradipo","brama","branca","bravura","bretella","brevetto","brezza","briglia","brillante","brindare","broccolo","brodo","bronzina","brullo","bruno","bubbone","buca","budino","buffone","buio","bulbo","buono","burlone","burrasca","bussola","busta","cadetto","caduco","calamaro","calcolo","calesse","calibro","calmo","caloria","cambusa","camerata","camicia","cammino","camola","campale","canapa","candela","cane","canino","canotto","cantina","capace","capello","capitolo","capogiro","cappero","capra","capsula","carapace","carcassa","cardo","carisma","carovana","carretto","cartolina","casaccio","cascata","caserma","caso","cassone","castello","casuale","catasta","catena","catrame","cauto","cavillo","cedibile","cedrata","cefalo","celebre","cellulare","cena","cenone","centesimo","ceramica","cercare","certo","cerume","cervello","cesoia","cespo","ceto","chela","chiaro","chicca","chiedere","chimera","china","chirurgo","chitarra","ciao","ciclismo","cifrare","cigno","cilindro","ciottolo","circa","cirrosi","citrico","cittadino","ciuffo","civetta","civile","classico","clinica","cloro","cocco","codardo","codice","coerente","cognome","collare","colmato","colore","colposo","coltivato","colza","coma","cometa","commando","comodo","computer","comune","conciso","condurre","conferma","congelare","coniuge","connesso","conoscere","consumo","continuo","convegno","coperto","copione","coppia","copricapo","corazza","cordata","coricato","cornice","corolla","corpo","corredo","corsia","cortese","cosmico","costante","cottura","covato","cratere","cravatta","creato","credere","cremoso","crescita","creta","criceto","crinale","crisi","critico","croce","cronaca","crostata","cruciale","crusca","cucire","cuculo","cugino","cullato","cupola","curatore","cursore","curvo","cuscino","custode","dado","daino","dalmata","damerino","daniela","dannoso","danzare","datato","davanti","davvero","debutto","decennio","deciso","declino","decollo","decreto","dedicato","definito","deforme","degno","delegare","delfino","delirio","delta","demenza","denotato","dentro","deposito","derapata","derivare","deroga","descritto","deserto","desiderio","desumere","detersivo","devoto","diametro","dicembre","diedro","difeso","diffuso","digerire","digitale","diluvio","dinamico","dinnanzi","dipinto","diploma","dipolo","diradare","dire","dirotto","dirupo","disagio","discreto","disfare","disgelo","disposto","distanza","disumano","dito","divano","divelto","dividere","divorato","doblone","docente","doganale","dogma","dolce","domato","domenica","dominare","dondolo","dono","dormire","dote","dottore","dovuto","dozzina","drago","druido","dubbio","dubitare","ducale","duna","duomo","duplice","duraturo","ebano","eccesso","ecco","eclissi","economia","edera","edicola","edile","editoria","educare","egemonia","egli","egoismo","egregio","elaborato","elargire","elegante","elencato","eletto","elevare","elfico","elica","elmo","elsa","eluso","emanato","emblema","emesso","emiro","emotivo","emozione","empirico","emulo","endemico","enduro","energia","enfasi","enoteca","entrare","enzima","epatite","epilogo","episodio","epocale","eppure","equatore","erario","erba","erboso","erede","eremita","erigere","ermetico","eroe","erosivo","errante","esagono","esame","esanime","esaudire","esca","esempio","esercito","esibito","esigente","esistere","esito","esofago","esortato","esoso","espanso","espresso","essenza","esso","esteso","estimare","estonia","estroso","esultare","etilico","etnico","etrusco","etto","euclideo","europa","evaso","evidenza","evitato","evoluto","evviva","fabbrica","faccenda","fachiro","falco","famiglia","fanale","fanfara","fango","fantasma","fare","farfalla","farinoso","farmaco","fascia","fastoso","fasullo","faticare","fato","favoloso","febbre","fecola","fede","fegato","felpa","feltro","femmina","fendere","fenomeno","fermento","ferro","fertile","fessura","festivo","fetta","feudo","fiaba","fiducia","fifa","figurato","filo","finanza","finestra","finire","fiore","fiscale","fisico","fiume","flacone","flamenco","flebo","flemma","florido","fluente","fluoro","fobico","focaccia","focoso","foderato","foglio","folata","folclore","folgore","fondente","fonetico","fonia","fontana","forbito","forchetta","foresta","formica","fornaio","foro","fortezza","forzare","fosfato","fosso","fracasso","frana","frassino","fratello","freccetta","frenata","fresco","frigo","frollino","fronde","frugale","frutta","fucilata","fucsia","fuggente","fulmine","fulvo","fumante","fumetto","fumoso","fune","funzione","fuoco","furbo","furgone","furore","fuso","futile","gabbiano","gaffe","galateo","gallina","galoppo","gambero","gamma","garanzia","garbo","garofano","garzone","gasdotto","gasolio","gastrico","gatto","gaudio","gazebo","gazzella","geco","gelatina","gelso","gemello","gemmato","gene","genitore","gennaio","genotipo","gergo","ghepardo","ghiaccio","ghisa","giallo","gilda","ginepro","giocare","gioiello","giorno","giove","girato","girone","gittata","giudizio","giurato","giusto","globulo","glutine","gnomo","gobba","golf","gomito","gommone","gonfio","gonna","governo","gracile","grado","grafico","grammo","grande","grattare","gravoso","grazia","greca","gregge","grifone","grigio","grinza","grotta","gruppo","guadagno","guaio","guanto","guardare","gufo","guidare","ibernato","icona","identico","idillio","idolo","idra","idrico","idrogeno","igiene","ignaro","ignorato","ilare","illeso","illogico","illudere","imballo","imbevuto","imbocco","imbuto","immane","immerso","immolato","impacco","impeto","impiego","importo","impronta","inalare","inarcare","inattivo","incanto","incendio","inchino","incisivo","incluso","incontro","incrocio","incubo","indagine","india","indole","inedito","infatti","infilare","inflitto","ingaggio","ingegno","inglese","ingordo","ingrosso","innesco","inodore","inoltrare","inondato","insano","insetto","insieme","insonnia","insulina","intasato","intero","intonaco","intuito","inumidire","invalido","invece","invito","iperbole","ipnotico","ipotesi","ippica","iride","irlanda","ironico","irrigato","irrorare","isolato","isotopo","isterico","istituto","istrice","italia","iterare","labbro","labirinto","lacca","lacerato","lacrima","lacuna","laddove","lago","lampo","lancetta","lanterna","lardoso","larga","laringe","lastra","latenza","latino","lattuga","lavagna","lavoro","legale","leggero","lembo","lentezza","lenza","leone","lepre","lesivo","lessato","lesto","letterale","leva","levigato","libero","lido","lievito","lilla","limatura","limitare","limpido","lineare","lingua","liquido","lira","lirica","lisca","lite","litigio","livrea","locanda","lode","logica","lombare","londra","longevo","loquace","lorenzo","loto","lotteria","luce","lucidato","lumaca","luminoso","lungo","lupo","luppolo","lusinga","lusso","lutto","macabro","macchina","macero","macinato","madama","magico","maglia","magnete","magro","maiolica","malafede","malgrado","malinteso","malsano","malto","malumore","mana","mancia","mandorla","mangiare","manifesto","mannaro","manovra","mansarda","mantide","manubrio","mappa","maratona","marcire","maretta","marmo","marsupio","maschera","massaia","mastino","materasso","matricola","mattone","maturo","mazurca","meandro","meccanico","mecenate","medesimo","meditare","mega","melassa","melis","melodia","meninge","meno","mensola","mercurio","merenda","merlo","meschino","mese","messere","mestolo","metallo","metodo","mettere","miagolare","mica","micelio","michele","microbo","midollo","miele","migliore","milano","milite","mimosa","minerale","mini","minore","mirino","mirtillo","miscela","missiva","misto","misurare","mitezza","mitigare","mitra","mittente","mnemonico","modello","modifica","modulo","mogano","mogio","mole","molosso","monastero","monco","mondina","monetario","monile","monotono","monsone","montato","monviso","mora","mordere","morsicato","mostro","motivato","motosega","motto","movenza","movimento","mozzo","mucca","mucosa","muffa","mughetto","mugnaio","mulatto","mulinello","multiplo","mummia","munto","muovere","murale","musa","muscolo","musica","mutevole","muto","nababbo","nafta","nanometro","narciso","narice","narrato","nascere","nastrare","naturale","nautica","naviglio","nebulosa","necrosi","negativo","negozio","nemmeno","neofita","neretto","nervo","nessuno","nettuno","neutrale","neve","nevrotico","nicchia","ninfa","nitido","nobile","nocivo","nodo","nome","nomina","nordico","normale","norvegese","nostrano","notare","notizia","notturno","novella","nucleo","nulla","numero","nuovo","nutrire","nuvola","nuziale","oasi","obbedire","obbligo","obelisco","oblio","obolo","obsoleto","occasione","occhio","occidente","occorrere","occultare","ocra","oculato","odierno","odorare","offerta","offrire","offuscato","oggetto","oggi","ognuno","olandese","olfatto","oliato","oliva","ologramma","oltre","omaggio","ombelico","ombra","omega","omissione","ondoso","onere","onice","onnivoro","onorevole","onta","operato","opinione","opposto","oracolo","orafo","ordine","orecchino","orefice","orfano","organico","origine","orizzonte","orma","ormeggio","ornativo","orologio","orrendo","orribile","ortensia","ortica","orzata","orzo","osare","oscurare","osmosi","ospedale","ospite","ossa","ossidare","ostacolo","oste","otite","otre","ottagono","ottimo","ottobre","ovale","ovest","ovino","oviparo","ovocito","ovunque","ovviare","ozio","pacchetto","pace","pacifico","padella","padrone","paese","paga","pagina","palazzina","palesare","pallido","palo","palude","pandoro","pannello","paolo","paonazzo","paprica","parabola","parcella","parere","pargolo","pari","parlato","parola","partire","parvenza","parziale","passivo","pasticca","patacca","patologia","pattume","pavone","peccato","pedalare","pedonale","peggio","peloso","penare","pendice","penisola","pennuto","penombra","pensare","pentola","pepe","pepita","perbene","percorso","perdonato","perforare","pergamena","periodo","permesso","perno","perplesso","persuaso","pertugio","pervaso","pesatore","pesista","peso","pestifero","petalo","pettine","petulante","pezzo","piacere","pianta","piattino","piccino","picozza","piega","pietra","piffero","pigiama","pigolio","pigro","pila","pilifero","pillola","pilota","pimpante","pineta","pinna","pinolo","pioggia","piombo","piramide","piretico","pirite","pirolisi","pitone","pizzico","placebo","planare","plasma","platano","plenario","pochezza","poderoso","podismo","poesia","poggiare","polenta","poligono","pollice","polmonite","polpetta","polso","poltrona","polvere","pomice","pomodoro","ponte","popoloso","porfido","poroso","porpora","porre","portata","posa","positivo","possesso","postulato","potassio","potere","pranzo","prassi","pratica","precluso","predica","prefisso","pregiato","prelievo","premere","prenotare","preparato","presenza","pretesto","prevalso","prima","principe","privato","problema","procura","produrre","profumo","progetto","prolunga","promessa","pronome","proposta","proroga","proteso","prova","prudente","prugna","prurito","psiche","pubblico","pudica","pugilato","pugno","pulce","pulito","pulsante","puntare","pupazzo","pupilla","puro","quadro","qualcosa","quasi","querela","quota","raccolto","raddoppio","radicale","radunato","raffica","ragazzo","ragione","ragno","ramarro","ramingo","ramo","randagio","rantolare","rapato","rapina","rappreso","rasatura","raschiato","rasente","rassegna","rastrello","rata","ravveduto","reale","recepire","recinto","recluta","recondito","recupero","reddito","redimere","regalato","registro","regola","regresso","relazione","remare","remoto","renna","replica","reprimere","reputare","resa","residente","responso","restauro","rete","retina","retorica","rettifica","revocato","riassunto","ribadire","ribelle","ribrezzo","ricarica","ricco","ricevere","riciclato","ricordo","ricreduto","ridicolo","ridurre","rifasare","riflesso","riforma","rifugio","rigare","rigettato","righello","rilassato","rilevato","rimanere","rimbalzo","rimedio","rimorchio","rinascita","rincaro","rinforzo","rinnovo","rinomato","rinsavito","rintocco","rinuncia","rinvenire","riparato","ripetuto","ripieno","riportare","ripresa","ripulire","risata","rischio","riserva","risibile","riso","rispetto","ristoro","risultato","risvolto","ritardo","ritegno","ritmico","ritrovo","riunione","riva","riverso","rivincita","rivolto","rizoma","roba","robotico","robusto","roccia","roco","rodaggio","rodere","roditore","rogito","rollio","romantico","rompere","ronzio","rosolare","rospo","rotante","rotondo","rotula","rovescio","rubizzo","rubrica","ruga","rullino","rumine","rumoroso","ruolo","rupe","russare","rustico","sabato","sabbiare","sabotato","sagoma","salasso","saldatura","salgemma","salivare","salmone","salone","saltare","saluto","salvo","sapere","sapido","saporito","saraceno","sarcasmo","sarto","sassoso","satellite","satira","satollo","saturno","savana","savio","saziato","sbadiglio","sbalzo","sbancato","sbarra","sbattere","sbavare","sbendare","sbirciare","sbloccato","sbocciato","sbrinare","sbruffone","sbuffare","scabroso","scadenza","scala","scambiare","scandalo","scapola","scarso","scatenare","scavato","scelto","scenico","scettro","scheda","schiena","sciarpa","scienza","scindere","scippo","sciroppo","scivolo","sclerare","scodella","scolpito","scomparto","sconforto","scoprire","scorta","scossone","scozzese","scriba","scrollare","scrutinio","scuderia","scultore","scuola","scuro","scusare","sdebitare","sdoganare","seccatura","secondo","sedano","seggiola","segnalato","segregato","seguito","selciato","selettivo","sella","selvaggio","semaforo","sembrare","seme","seminato","sempre","senso","sentire","sepolto","sequenza","serata","serbato","sereno","serio","serpente","serraglio","servire","sestina","setola","settimana","sfacelo","sfaldare","sfamato","sfarzoso","sfaticato","sfera","sfida","sfilato","sfinge","sfocato","sfoderare","sfogo","sfoltire","sforzato","sfratto","sfruttato","sfuggito","sfumare","sfuso","sgabello","sgarbato","sgonfiare","sgorbio","sgrassato","sguardo","sibilo","siccome","sierra","sigla","signore","silenzio","sillaba","simbolo","simpatico","simulato","sinfonia","singolo","sinistro","sino","sintesi","sinusoide","sipario","sisma","sistole","situato","slitta","slogatura","sloveno","smarrito","smemorato","smentito","smeraldo","smilzo","smontare","smottato","smussato","snellire","snervato","snodo","sobbalzo","sobrio","soccorso","sociale","sodale","soffitto","sogno","soldato","solenne","solido","sollazzo","solo","solubile","solvente","somatico","somma","sonda","sonetto","sonnifero","sopire","soppeso","sopra","sorgere","sorpasso","sorriso","sorso","sorteggio","sorvolato","sospiro","sosta","sottile","spada","spalla","spargere","spatola","spavento","spazzola","specie","spedire","spegnere","spelatura","speranza","spessore","spettrale","spezzato","spia","spigoloso","spillato","spinoso","spirale","splendido","sportivo","sposo","spranga","sprecare","spronato","spruzzo","spuntino","squillo","sradicare","srotolato","stabile","stacco","staffa","stagnare","stampato","stantio","starnuto","stasera","statuto","stelo","steppa","sterzo","stiletto","stima","stirpe","stivale","stizzoso","stonato","storico","strappo","stregato","stridulo","strozzare","strutto","stuccare","stufo","stupendo","subentro","succoso","sudore","suggerito","sugo","sultano","suonare","superbo","supporto","surgelato","surrogato","sussurro","sutura","svagare","svedese","sveglio","svelare","svenuto","svezia","sviluppo","svista","svizzera","svolta","svuotare","tabacco","tabulato","tacciare","taciturno","tale","talismano","tampone","tannino","tara","tardivo","targato","tariffa","tarpare","tartaruga","tasto","tattico","taverna","tavolata","tazza","teca","tecnico","telefono","temerario","tempo","temuto","tendone","tenero","tensione","tentacolo","teorema","terme","terrazzo","terzetto","tesi","tesserato","testato","tetro","tettoia","tifare","tigella","timbro","tinto","tipico","tipografo","tiraggio","tiro","titanio","titolo","titubante","tizio","tizzone","toccare","tollerare","tolto","tombola","tomo","tonfo","tonsilla","topazio","topologia","toppa","torba","tornare","torrone","tortora","toscano","tossire","tostatura","totano","trabocco","trachea","trafila","tragedia","tralcio","tramonto","transito","trapano","trarre","trasloco","trattato","trave","treccia","tremolio","trespolo","tributo","tricheco","trifoglio","trillo","trincea","trio","tristezza","triturato","trivella","tromba","trono","troppo","trottola","trovare","truccato","tubatura","tuffato","tulipano","tumulto","tunisia","turbare","turchino","tuta","tutela","ubicato","uccello","uccisore","udire","uditivo","uffa","ufficio","uguale","ulisse","ultimato","umano","umile","umorismo","uncinetto","ungere","ungherese","unicorno","unificato","unisono","unitario","unte","uovo","upupa","uragano","urgenza","urlo","usanza","usato","uscito","usignolo","usuraio","utensile","utilizzo","utopia","vacante","vaccinato","vagabondo","vagliato","valanga","valgo","valico","valletta","valoroso","valutare","valvola","vampata","vangare","vanitoso","vano","vantaggio","vanvera","vapore","varano","varcato","variante","vasca","vedetta","vedova","veduto","vegetale","veicolo","velcro","velina","velluto","veloce","venato","vendemmia","vento","verace","verbale","vergogna","verifica","vero","verruca","verticale","vescica","vessillo","vestale","veterano","vetrina","vetusto","viandante","vibrante","vicenda","vichingo","vicinanza","vidimare","vigilia","vigneto","vigore","vile","villano","vimini","vincitore","viola","vipera","virgola","virologo","virulento","viscoso","visione","vispo","vissuto","visura","vita","vitello","vittima","vivanda","vivido","viziare","voce","voga","volatile","volere","volpe","voragine","vulcano","zampogna","zanna","zappato","zattera","zavorra","zefiro","zelante","zelo","zenzero","zerbino","zibetto","zinco","zircone","zitto","zolla","zotico","zucchero","zufolo","zulu","zuppa"]')
}
, function(e) {
    e.exports = JSON.parse('["あいこくしん","あいさつ","あいだ","あおぞら","あかちゃん","あきる","あけがた","あける","あこがれる","あさい","あさひ","あしあと","あじわう","あずかる","あずき","あそぶ","あたえる","あたためる","あたりまえ","あたる","あつい","あつかう","あっしゅく","あつまり","あつめる","あてな","あてはまる","あひる","あぶら","あぶる","あふれる","あまい","あまど","あまやかす","あまり","あみもの","あめりか","あやまる","あゆむ","あらいぐま","あらし","あらすじ","あらためる","あらゆる","あらわす","ありがとう","あわせる","あわてる","あんい","あんがい","あんこ","あんぜん","あんてい","あんない","あんまり","いいだす","いおん","いがい","いがく","いきおい","いきなり","いきもの","いきる","いくじ","いくぶん","いけばな","いけん","いこう","いこく","いこつ","いさましい","いさん","いしき","いじゅう","いじょう","いじわる","いずみ","いずれ","いせい","いせえび","いせかい","いせき","いぜん","いそうろう","いそがしい","いだい","いだく","いたずら","いたみ","いたりあ","いちおう","いちじ","いちど","いちば","いちぶ","いちりゅう","いつか","いっしゅん","いっせい","いっそう","いったん","いっち","いってい","いっぽう","いてざ","いてん","いどう","いとこ","いない","いなか","いねむり","いのち","いのる","いはつ","いばる","いはん","いびき","いひん","いふく","いへん","いほう","いみん","いもうと","いもたれ","いもり","いやがる","いやす","いよかん","いよく","いらい","いらすと","いりぐち","いりょう","いれい","いれもの","いれる","いろえんぴつ","いわい","いわう","いわかん","いわば","いわゆる","いんげんまめ","いんさつ","いんしょう","いんよう","うえき","うえる","うおざ","うがい","うかぶ","うかべる","うきわ","うくらいな","うくれれ","うけたまわる","うけつけ","うけとる","うけもつ","うける","うごかす","うごく","うこん","うさぎ","うしなう","うしろがみ","うすい","うすぎ","うすぐらい","うすめる","うせつ","うちあわせ","うちがわ","うちき","うちゅう","うっかり","うつくしい","うったえる","うつる","うどん","うなぎ","うなじ","うなずく","うなる","うねる","うのう","うぶげ","うぶごえ","うまれる","うめる","うもう","うやまう","うよく","うらがえす","うらぐち","うらない","うりあげ","うりきれ","うるさい","うれしい","うれゆき","うれる","うろこ","うわき","うわさ","うんこう","うんちん","うんてん","うんどう","えいえん","えいが","えいきょう","えいご","えいせい","えいぶん","えいよう","えいわ","えおり","えがお","えがく","えきたい","えくせる","えしゃく","えすて","えつらん","えのぐ","えほうまき","えほん","えまき","えもじ","えもの","えらい","えらぶ","えりあ","えんえん","えんかい","えんぎ","えんげき","えんしゅう","えんぜつ","えんそく","えんちょう","えんとつ","おいかける","おいこす","おいしい","おいつく","おうえん","おうさま","おうじ","おうせつ","おうたい","おうふく","おうべい","おうよう","おえる","おおい","おおう","おおどおり","おおや","おおよそ","おかえり","おかず","おがむ","おかわり","おぎなう","おきる","おくさま","おくじょう","おくりがな","おくる","おくれる","おこす","おこなう","おこる","おさえる","おさない","おさめる","おしいれ","おしえる","おじぎ","おじさん","おしゃれ","おそらく","おそわる","おたがい","おたく","おだやか","おちつく","おっと","おつり","おでかけ","おとしもの","おとなしい","おどり","おどろかす","おばさん","おまいり","おめでとう","おもいで","おもう","おもたい","おもちゃ","おやつ","おやゆび","およぼす","おらんだ","おろす","おんがく","おんけい","おんしゃ","おんせん","おんだん","おんちゅう","おんどけい","かあつ","かいが","がいき","がいけん","がいこう","かいさつ","かいしゃ","かいすいよく","かいぜん","かいぞうど","かいつう","かいてん","かいとう","かいふく","がいへき","かいほう","かいよう","がいらい","かいわ","かえる","かおり","かかえる","かがく","かがし","かがみ","かくご","かくとく","かざる","がぞう","かたい","かたち","がちょう","がっきゅう","がっこう","がっさん","がっしょう","かなざわし","かのう","がはく","かぶか","かほう","かほご","かまう","かまぼこ","かめれおん","かゆい","かようび","からい","かるい","かろう","かわく","かわら","がんか","かんけい","かんこう","かんしゃ","かんそう","かんたん","かんち","がんばる","きあい","きあつ","きいろ","ぎいん","きうい","きうん","きえる","きおう","きおく","きおち","きおん","きかい","きかく","きかんしゃ","ききて","きくばり","きくらげ","きけんせい","きこう","きこえる","きこく","きさい","きさく","きさま","きさらぎ","ぎじかがく","ぎしき","ぎじたいけん","ぎじにってい","ぎじゅつしゃ","きすう","きせい","きせき","きせつ","きそう","きぞく","きぞん","きたえる","きちょう","きつえん","ぎっちり","きつつき","きつね","きてい","きどう","きどく","きない","きなが","きなこ","きぬごし","きねん","きのう","きのした","きはく","きびしい","きひん","きふく","きぶん","きぼう","きほん","きまる","きみつ","きむずかしい","きめる","きもだめし","きもち","きもの","きゃく","きやく","ぎゅうにく","きよう","きょうりゅう","きらい","きらく","きりん","きれい","きれつ","きろく","ぎろん","きわめる","ぎんいろ","きんかくじ","きんじょ","きんようび","ぐあい","くいず","くうかん","くうき","くうぐん","くうこう","ぐうせい","くうそう","ぐうたら","くうふく","くうぼ","くかん","くきょう","くげん","ぐこう","くさい","くさき","くさばな","くさる","くしゃみ","くしょう","くすのき","くすりゆび","くせげ","くせん","ぐたいてき","くださる","くたびれる","くちこみ","くちさき","くつした","ぐっすり","くつろぐ","くとうてん","くどく","くなん","くねくね","くのう","くふう","くみあわせ","くみたてる","くめる","くやくしょ","くらす","くらべる","くるま","くれる","くろう","くわしい","ぐんかん","ぐんしょく","ぐんたい","ぐんて","けあな","けいかく","けいけん","けいこ","けいさつ","げいじゅつ","けいたい","げいのうじん","けいれき","けいろ","けおとす","けおりもの","げきか","げきげん","げきだん","げきちん","げきとつ","げきは","げきやく","げこう","げこくじょう","げざい","けさき","げざん","けしき","けしごむ","けしょう","げすと","けたば","けちゃっぷ","けちらす","けつあつ","けつい","けつえき","けっこん","けつじょ","けっせき","けってい","けつまつ","げつようび","げつれい","けつろん","げどく","けとばす","けとる","けなげ","けなす","けなみ","けぬき","げねつ","けねん","けはい","げひん","けぶかい","げぼく","けまり","けみかる","けむし","けむり","けもの","けらい","けろけろ","けわしい","けんい","けんえつ","けんお","けんか","げんき","けんげん","けんこう","けんさく","けんしゅう","けんすう","げんそう","けんちく","けんてい","けんとう","けんない","けんにん","げんぶつ","けんま","けんみん","けんめい","けんらん","けんり","こあくま","こいぬ","こいびと","ごうい","こうえん","こうおん","こうかん","ごうきゅう","ごうけい","こうこう","こうさい","こうじ","こうすい","ごうせい","こうそく","こうたい","こうちゃ","こうつう","こうてい","こうどう","こうない","こうはい","ごうほう","ごうまん","こうもく","こうりつ","こえる","こおり","ごかい","ごがつ","ごかん","こくご","こくさい","こくとう","こくない","こくはく","こぐま","こけい","こける","ここのか","こころ","こさめ","こしつ","こすう","こせい","こせき","こぜん","こそだて","こたい","こたえる","こたつ","こちょう","こっか","こつこつ","こつばん","こつぶ","こてい","こてん","ことがら","ことし","ことば","ことり","こなごな","こねこね","このまま","このみ","このよ","ごはん","こひつじ","こふう","こふん","こぼれる","ごまあぶら","こまかい","ごますり","こまつな","こまる","こむぎこ","こもじ","こもち","こもの","こもん","こやく","こやま","こゆう","こゆび","こよい","こよう","こりる","これくしょん","ころっけ","こわもて","こわれる","こんいん","こんかい","こんき","こんしゅう","こんすい","こんだて","こんとん","こんなん","こんびに","こんぽん","こんまけ","こんや","こんれい","こんわく","ざいえき","さいかい","さいきん","ざいげん","ざいこ","さいしょ","さいせい","ざいたく","ざいちゅう","さいてき","ざいりょう","さうな","さかいし","さがす","さかな","さかみち","さがる","さぎょう","さくし","さくひん","さくら","さこく","さこつ","さずかる","ざせき","さたん","さつえい","ざつおん","ざっか","ざつがく","さっきょく","ざっし","さつじん","ざっそう","さつたば","さつまいも","さてい","さといも","さとう","さとおや","さとし","さとる","さのう","さばく","さびしい","さべつ","さほう","さほど","さます","さみしい","さみだれ","さむけ","さめる","さやえんどう","さゆう","さよう","さよく","さらだ","ざるそば","さわやか","さわる","さんいん","さんか","さんきゃく","さんこう","さんさい","ざんしょ","さんすう","さんせい","さんそ","さんち","さんま","さんみ","さんらん","しあい","しあげ","しあさって","しあわせ","しいく","しいん","しうち","しえい","しおけ","しかい","しかく","じかん","しごと","しすう","じだい","したうけ","したぎ","したて","したみ","しちょう","しちりん","しっかり","しつじ","しつもん","してい","してき","してつ","じてん","じどう","しなぎれ","しなもの","しなん","しねま","しねん","しのぐ","しのぶ","しはい","しばかり","しはつ","しはらい","しはん","しひょう","しふく","じぶん","しへい","しほう","しほん","しまう","しまる","しみん","しむける","じむしょ","しめい","しめる","しもん","しゃいん","しゃうん","しゃおん","じゃがいも","しやくしょ","しゃくほう","しゃけん","しゃこ","しゃざい","しゃしん","しゃせん","しゃそう","しゃたい","しゃちょう","しゃっきん","じゃま","しゃりん","しゃれい","じゆう","じゅうしょ","しゅくはく","じゅしん","しゅっせき","しゅみ","しゅらば","じゅんばん","しょうかい","しょくたく","しょっけん","しょどう","しょもつ","しらせる","しらべる","しんか","しんこう","じんじゃ","しんせいじ","しんちく","しんりん","すあげ","すあし","すあな","ずあん","すいえい","すいか","すいとう","ずいぶん","すいようび","すうがく","すうじつ","すうせん","すおどり","すきま","すくう","すくない","すける","すごい","すこし","ずさん","すずしい","すすむ","すすめる","すっかり","ずっしり","ずっと","すてき","すてる","すねる","すのこ","すはだ","すばらしい","ずひょう","ずぶぬれ","すぶり","すふれ","すべて","すべる","ずほう","すぼん","すまい","すめし","すもう","すやき","すらすら","するめ","すれちがう","すろっと","すわる","すんぜん","すんぽう","せあぶら","せいかつ","せいげん","せいじ","せいよう","せおう","せかいかん","せきにん","せきむ","せきゆ","せきらんうん","せけん","せこう","せすじ","せたい","せたけ","せっかく","せっきゃく","ぜっく","せっけん","せっこつ","せっさたくま","せつぞく","せつだん","せつでん","せっぱん","せつび","せつぶん","せつめい","せつりつ","せなか","せのび","せはば","せびろ","せぼね","せまい","せまる","せめる","せもたれ","せりふ","ぜんあく","せんい","せんえい","せんか","せんきょ","せんく","せんげん","ぜんご","せんさい","せんしゅ","せんすい","せんせい","せんぞ","せんたく","せんちょう","せんてい","せんとう","せんぬき","せんねん","せんぱい","ぜんぶ","ぜんぽう","せんむ","せんめんじょ","せんもん","せんやく","せんゆう","せんよう","ぜんら","ぜんりゃく","せんれい","せんろ","そあく","そいとげる","そいね","そうがんきょう","そうき","そうご","そうしん","そうだん","そうなん","そうび","そうめん","そうり","そえもの","そえん","そがい","そげき","そこう","そこそこ","そざい","そしな","そせい","そせん","そそぐ","そだてる","そつう","そつえん","そっかん","そつぎょう","そっけつ","そっこう","そっせん","そっと","そとがわ","そとづら","そなえる","そなた","そふぼ","そぼく","そぼろ","そまつ","そまる","そむく","そむりえ","そめる","そもそも","そよかぜ","そらまめ","そろう","そんかい","そんけい","そんざい","そんしつ","そんぞく","そんちょう","ぞんび","ぞんぶん","そんみん","たあい","たいいん","たいうん","たいえき","たいおう","だいがく","たいき","たいぐう","たいけん","たいこ","たいざい","だいじょうぶ","だいすき","たいせつ","たいそう","だいたい","たいちょう","たいてい","だいどころ","たいない","たいねつ","たいのう","たいはん","だいひょう","たいふう","たいへん","たいほ","たいまつばな","たいみんぐ","たいむ","たいめん","たいやき","たいよう","たいら","たいりょく","たいる","たいわん","たうえ","たえる","たおす","たおる","たおれる","たかい","たかね","たきび","たくさん","たこく","たこやき","たさい","たしざん","だじゃれ","たすける","たずさわる","たそがれ","たたかう","たたく","ただしい","たたみ","たちばな","だっかい","だっきゃく","だっこ","だっしゅつ","だったい","たてる","たとえる","たなばた","たにん","たぬき","たのしみ","たはつ","たぶん","たべる","たぼう","たまご","たまる","だむる","ためいき","ためす","ためる","たもつ","たやすい","たよる","たらす","たりきほんがん","たりょう","たりる","たると","たれる","たれんと","たろっと","たわむれる","だんあつ","たんい","たんおん","たんか","たんき","たんけん","たんご","たんさん","たんじょうび","だんせい","たんそく","たんたい","だんち","たんてい","たんとう","だんな","たんにん","だんねつ","たんのう","たんぴん","だんぼう","たんまつ","たんめい","だんれつ","だんろ","だんわ","ちあい","ちあん","ちいき","ちいさい","ちえん","ちかい","ちから","ちきゅう","ちきん","ちけいず","ちけん","ちこく","ちさい","ちしき","ちしりょう","ちせい","ちそう","ちたい","ちたん","ちちおや","ちつじょ","ちてき","ちてん","ちぬき","ちぬり","ちのう","ちひょう","ちへいせん","ちほう","ちまた","ちみつ","ちみどろ","ちめいど","ちゃんこなべ","ちゅうい","ちゆりょく","ちょうし","ちょさくけん","ちらし","ちらみ","ちりがみ","ちりょう","ちるど","ちわわ","ちんたい","ちんもく","ついか","ついたち","つうか","つうじょう","つうはん","つうわ","つかう","つかれる","つくね","つくる","つけね","つける","つごう","つたえる","つづく","つつじ","つつむ","つとめる","つながる","つなみ","つねづね","つのる","つぶす","つまらない","つまる","つみき","つめたい","つもり","つもる","つよい","つるぼ","つるみく","つわもの","つわり","てあし","てあて","てあみ","ていおん","ていか","ていき","ていけい","ていこく","ていさつ","ていし","ていせい","ていたい","ていど","ていねい","ていひょう","ていへん","ていぼう","てうち","ておくれ","てきとう","てくび","でこぼこ","てさぎょう","てさげ","てすり","てそう","てちがい","てちょう","てつがく","てつづき","でっぱ","てつぼう","てつや","でぬかえ","てぬき","てぬぐい","てのひら","てはい","てぶくろ","てふだ","てほどき","てほん","てまえ","てまきずし","てみじか","てみやげ","てらす","てれび","てわけ","てわたし","でんあつ","てんいん","てんかい","てんき","てんぐ","てんけん","てんごく","てんさい","てんし","てんすう","でんち","てんてき","てんとう","てんない","てんぷら","てんぼうだい","てんめつ","てんらんかい","でんりょく","でんわ","どあい","といれ","どうかん","とうきゅう","どうぐ","とうし","とうむぎ","とおい","とおか","とおく","とおす","とおる","とかい","とかす","ときおり","ときどき","とくい","とくしゅう","とくてん","とくに","とくべつ","とけい","とける","とこや","とさか","としょかん","とそう","とたん","とちゅう","とっきゅう","とっくん","とつぜん","とつにゅう","とどける","ととのえる","とない","となえる","となり","とのさま","とばす","どぶがわ","とほう","とまる","とめる","ともだち","ともる","どようび","とらえる","とんかつ","どんぶり","ないかく","ないこう","ないしょ","ないす","ないせん","ないそう","なおす","ながい","なくす","なげる","なこうど","なさけ","なたでここ","なっとう","なつやすみ","ななおし","なにごと","なにもの","なにわ","なのか","なふだ","なまいき","なまえ","なまみ","なみだ","なめらか","なめる","なやむ","ならう","ならび","ならぶ","なれる","なわとび","なわばり","にあう","にいがた","にうけ","におい","にかい","にがて","にきび","にくしみ","にくまん","にげる","にさんかたんそ","にしき","にせもの","にちじょう","にちようび","にっか","にっき","にっけい","にっこう","にっさん","にっしょく","にっすう","にっせき","にってい","になう","にほん","にまめ","にもつ","にやり","にゅういん","にりんしゃ","にわとり","にんい","にんか","にんき","にんげん","にんしき","にんずう","にんそう","にんたい","にんち","にんてい","にんにく","にんぷ","にんまり","にんむ","にんめい","にんよう","ぬいくぎ","ぬかす","ぬぐいとる","ぬぐう","ぬくもり","ぬすむ","ぬまえび","ぬめり","ぬらす","ぬんちゃく","ねあげ","ねいき","ねいる","ねいろ","ねぐせ","ねくたい","ねくら","ねこぜ","ねこむ","ねさげ","ねすごす","ねそべる","ねだん","ねつい","ねっしん","ねつぞう","ねったいぎょ","ねぶそく","ねふだ","ねぼう","ねほりはほり","ねまき","ねまわし","ねみみ","ねむい","ねむたい","ねもと","ねらう","ねわざ","ねんいり","ねんおし","ねんかん","ねんきん","ねんぐ","ねんざ","ねんし","ねんちゃく","ねんど","ねんぴ","ねんぶつ","ねんまつ","ねんりょう","ねんれい","のいず","のおづま","のがす","のきなみ","のこぎり","のこす","のこる","のせる","のぞく","のぞむ","のたまう","のちほど","のっく","のばす","のはら","のべる","のぼる","のみもの","のやま","のらいぬ","のらねこ","のりもの","のりゆき","のれん","のんき","ばあい","はあく","ばあさん","ばいか","ばいく","はいけん","はいご","はいしん","はいすい","はいせん","はいそう","はいち","ばいばい","はいれつ","はえる","はおる","はかい","ばかり","はかる","はくしゅ","はけん","はこぶ","はさみ","はさん","はしご","ばしょ","はしる","はせる","ぱそこん","はそん","はたん","はちみつ","はつおん","はっかく","はづき","はっきり","はっくつ","はっけん","はっこう","はっさん","はっしん","はったつ","はっちゅう","はってん","はっぴょう","はっぽう","はなす","はなび","はにかむ","はぶらし","はみがき","はむかう","はめつ","はやい","はやし","はらう","はろうぃん","はわい","はんい","はんえい","はんおん","はんかく","はんきょう","ばんぐみ","はんこ","はんしゃ","はんすう","はんだん","ぱんち","ぱんつ","はんてい","はんとし","はんのう","はんぱ","はんぶん","はんぺん","はんぼうき","はんめい","はんらん","はんろん","ひいき","ひうん","ひえる","ひかく","ひかり","ひかる","ひかん","ひくい","ひけつ","ひこうき","ひこく","ひさい","ひさしぶり","ひさん","びじゅつかん","ひしょ","ひそか","ひそむ","ひたむき","ひだり","ひたる","ひつぎ","ひっこし","ひっし","ひつじゅひん","ひっす","ひつぜん","ぴったり","ぴっちり","ひつよう","ひてい","ひとごみ","ひなまつり","ひなん","ひねる","ひはん","ひびく","ひひょう","ひほう","ひまわり","ひまん","ひみつ","ひめい","ひめじし","ひやけ","ひやす","ひよう","びょうき","ひらがな","ひらく","ひりつ","ひりょう","ひるま","ひるやすみ","ひれい","ひろい","ひろう","ひろき","ひろゆき","ひんかく","ひんけつ","ひんこん","ひんしゅ","ひんそう","ぴんち","ひんぱん","びんぼう","ふあん","ふいうち","ふうけい","ふうせん","ぷうたろう","ふうとう","ふうふ","ふえる","ふおん","ふかい","ふきん","ふくざつ","ふくぶくろ","ふこう","ふさい","ふしぎ","ふじみ","ふすま","ふせい","ふせぐ","ふそく","ぶたにく","ふたん","ふちょう","ふつう","ふつか","ふっかつ","ふっき","ふっこく","ぶどう","ふとる","ふとん","ふのう","ふはい","ふひょう","ふへん","ふまん","ふみん","ふめつ","ふめん","ふよう","ふりこ","ふりる","ふるい","ふんいき","ぶんがく","ぶんぐ","ふんしつ","ぶんせき","ふんそう","ぶんぽう","へいあん","へいおん","へいがい","へいき","へいげん","へいこう","へいさ","へいしゃ","へいせつ","へいそ","へいたく","へいてん","へいねつ","へいわ","へきが","へこむ","べにいろ","べにしょうが","へらす","へんかん","べんきょう","べんごし","へんさい","へんたい","べんり","ほあん","ほいく","ぼうぎょ","ほうこく","ほうそう","ほうほう","ほうもん","ほうりつ","ほえる","ほおん","ほかん","ほきょう","ぼきん","ほくろ","ほけつ","ほけん","ほこう","ほこる","ほしい","ほしつ","ほしゅ","ほしょう","ほせい","ほそい","ほそく","ほたて","ほたる","ぽちぶくろ","ほっきょく","ほっさ","ほったん","ほとんど","ほめる","ほんい","ほんき","ほんけ","ほんしつ","ほんやく","まいにち","まかい","まかせる","まがる","まける","まこと","まさつ","まじめ","ますく","まぜる","まつり","まとめ","まなぶ","まぬけ","まねく","まほう","まもる","まゆげ","まよう","まろやか","まわす","まわり","まわる","まんが","まんきつ","まんぞく","まんなか","みいら","みうち","みえる","みがく","みかた","みかん","みけん","みこん","みじかい","みすい","みすえる","みせる","みっか","みつかる","みつける","みてい","みとめる","みなと","みなみかさい","みねらる","みのう","みのがす","みほん","みもと","みやげ","みらい","みりょく","みわく","みんか","みんぞく","むいか","むえき","むえん","むかい","むかう","むかえ","むかし","むぎちゃ","むける","むげん","むさぼる","むしあつい","むしば","むじゅん","むしろ","むすう","むすこ","むすぶ","むすめ","むせる","むせん","むちゅう","むなしい","むのう","むやみ","むよう","むらさき","むりょう","むろん","めいあん","めいうん","めいえん","めいかく","めいきょく","めいさい","めいし","めいそう","めいぶつ","めいれい","めいわく","めぐまれる","めざす","めした","めずらしい","めだつ","めまい","めやす","めんきょ","めんせき","めんどう","もうしあげる","もうどうけん","もえる","もくし","もくてき","もくようび","もちろん","もどる","もらう","もんく","もんだい","やおや","やける","やさい","やさしい","やすい","やすたろう","やすみ","やせる","やそう","やたい","やちん","やっと","やっぱり","やぶる","やめる","ややこしい","やよい","やわらかい","ゆうき","ゆうびんきょく","ゆうべ","ゆうめい","ゆけつ","ゆしゅつ","ゆせん","ゆそう","ゆたか","ゆちゃく","ゆでる","ゆにゅう","ゆびわ","ゆらい","ゆれる","ようい","ようか","ようきゅう","ようじ","ようす","ようちえん","よかぜ","よかん","よきん","よくせい","よくぼう","よけい","よごれる","よさん","よしゅう","よそう","よそく","よっか","よてい","よどがわく","よねつ","よやく","よゆう","よろこぶ","よろしい","らいう","らくがき","らくご","らくさつ","らくだ","らしんばん","らせん","らぞく","らたい","らっか","られつ","りえき","りかい","りきさく","りきせつ","りくぐん","りくつ","りけん","りこう","りせい","りそう","りそく","りてん","りねん","りゆう","りゅうがく","りよう","りょうり","りょかん","りょくちゃ","りょこう","りりく","りれき","りろん","りんご","るいけい","るいさい","るいじ","るいせき","るすばん","るりがわら","れいかん","れいぎ","れいせい","れいぞうこ","れいとう","れいぼう","れきし","れきだい","れんあい","れんけい","れんこん","れんさい","れんしゅう","れんぞく","れんらく","ろうか","ろうご","ろうじん","ろうそく","ろくが","ろこつ","ろじうら","ろしゅつ","ろせん","ろてん","ろめん","ろれつ","ろんぎ","ろんぱ","ろんぶん","ろんり","わかす","わかめ","わかやま","わかれる","わしつ","わじまし","わすれもの","わらう","われる"]')
}
, function(e) {
    e.exports = JSON.parse('["가격","가끔","가난","가능","가득","가르침","가뭄","가방","가상","가슴","가운데","가을","가이드","가입","가장","가정","가족","가죽","각오","각자","간격","간부","간섭","간장","간접","간판","갈등","갈비","갈색","갈증","감각","감기","감소","감수성","감자","감정","갑자기","강남","강당","강도","강력히","강변","강북","강사","강수량","강아지","강원도","강의","강제","강조","같이","개구리","개나리","개방","개별","개선","개성","개인","객관적","거실","거액","거울","거짓","거품","걱정","건강","건물","건설","건조","건축","걸음","검사","검토","게시판","게임","겨울","견해","결과","결국","결론","결석","결승","결심","결정","결혼","경계","경고","경기","경력","경복궁","경비","경상도","경영","경우","경쟁","경제","경주","경찰","경치","경향","경험","계곡","계단","계란","계산","계속","계약","계절","계층","계획","고객","고구려","고궁","고급","고등학생","고무신","고민","고양이","고장","고전","고집","고춧가루","고통","고향","곡식","골목","골짜기","골프","공간","공개","공격","공군","공급","공기","공동","공무원","공부","공사","공식","공업","공연","공원","공장","공짜","공책","공통","공포","공항","공휴일","과목","과일","과장","과정","과학","관객","관계","관광","관념","관람","관련","관리","관습","관심","관점","관찰","광경","광고","광장","광주","괴로움","굉장히","교과서","교문","교복","교실","교양","교육","교장","교직","교통","교환","교훈","구경","구름","구멍","구별","구분","구석","구성","구속","구역","구입","구청","구체적","국가","국기","국내","국립","국물","국민","국수","국어","국왕","국적","국제","국회","군대","군사","군인","궁극적","권리","권위","권투","귀국","귀신","규정","규칙","균형","그날","그냥","그늘","그러나","그룹","그릇","그림","그제서야","그토록","극복","극히","근거","근교","근래","근로","근무","근본","근원","근육","근처","글씨","글자","금강산","금고","금년","금메달","금액","금연","금요일","금지","긍정적","기간","기관","기념","기능","기독교","기둥","기록","기름","기법","기본","기분","기쁨","기숙사","기술","기억","기업","기온","기운","기원","기적","기준","기침","기혼","기획","긴급","긴장","길이","김밥","김치","김포공항","깍두기","깜빡","깨달음","깨소금","껍질","꼭대기","꽃잎","나들이","나란히","나머지","나물","나침반","나흘","낙엽","난방","날개","날씨","날짜","남녀","남대문","남매","남산","남자","남편","남학생","낭비","낱말","내년","내용","내일","냄비","냄새","냇물","냉동","냉면","냉방","냉장고","넥타이","넷째","노동","노란색","노력","노인","녹음","녹차","녹화","논리","논문","논쟁","놀이","농구","농담","농민","농부","농업","농장","농촌","높이","눈동자","눈물","눈썹","뉴욕","느낌","늑대","능동적","능력","다방","다양성","다음","다이어트","다행","단계","단골","단독","단맛","단순","단어","단위","단점","단체","단추","단편","단풍","달걀","달러","달력","달리","닭고기","담당","담배","담요","담임","답변","답장","당근","당분간","당연히","당장","대규모","대낮","대단히","대답","대도시","대략","대량","대륙","대문","대부분","대신","대응","대장","대전","대접","대중","대책","대출","대충","대통령","대학","대한민국","대합실","대형","덩어리","데이트","도대체","도덕","도둑","도망","도서관","도심","도움","도입","도자기","도저히","도전","도중","도착","독감","독립","독서","독일","독창적","동화책","뒷모습","뒷산","딸아이","마누라","마늘","마당","마라톤","마련","마무리","마사지","마약","마요네즈","마을","마음","마이크","마중","마지막","마찬가지","마찰","마흔","막걸리","막내","막상","만남","만두","만세","만약","만일","만점","만족","만화","많이","말기","말씀","말투","맘대로","망원경","매년","매달","매력","매번","매스컴","매일","매장","맥주","먹이","먼저","먼지","멀리","메일","며느리","며칠","면담","멸치","명단","명령","명예","명의","명절","명칭","명함","모금","모니터","모델","모든","모범","모습","모양","모임","모조리","모집","모퉁이","목걸이","목록","목사","목소리","목숨","목적","목표","몰래","몸매","몸무게","몸살","몸속","몸짓","몸통","몹시","무관심","무궁화","무더위","무덤","무릎","무슨","무엇","무역","무용","무조건","무지개","무척","문구","문득","문법","문서","문제","문학","문화","물가","물건","물결","물고기","물론","물리학","물음","물질","물체","미국","미디어","미사일","미술","미역","미용실","미움","미인","미팅","미혼","민간","민족","민주","믿음","밀가루","밀리미터","밑바닥","바가지","바구니","바나나","바늘","바닥","바닷가","바람","바이러스","바탕","박물관","박사","박수","반대","반드시","반말","반발","반성","반응","반장","반죽","반지","반찬","받침","발가락","발걸음","발견","발달","발레","발목","발바닥","발생","발음","발자국","발전","발톱","발표","밤하늘","밥그릇","밥맛","밥상","밥솥","방금","방면","방문","방바닥","방법","방송","방식","방안","방울","방지","방학","방해","방향","배경","배꼽","배달","배드민턴","백두산","백색","백성","백인","백제","백화점","버릇","버섯","버튼","번개","번역","번지","번호","벌금","벌레","벌써","범위","범인","범죄","법률","법원","법적","법칙","베이징","벨트","변경","변동","변명","변신","변호사","변화","별도","별명","별일","병실","병아리","병원","보관","보너스","보라색","보람","보름","보상","보안","보자기","보장","보전","보존","보통","보편적","보험","복도","복사","복숭아","복습","볶음","본격적","본래","본부","본사","본성","본인","본질","볼펜","봉사","봉지","봉투","부근","부끄러움","부담","부동산","부문","부분","부산","부상","부엌","부인","부작용","부장","부정","부족","부지런히","부친","부탁","부품","부회장","북부","북한","분노","분량","분리","분명","분석","분야","분위기","분필","분홍색","불고기","불과","불교","불꽃","불만","불법","불빛","불안","불이익","불행","브랜드","비극","비난","비닐","비둘기","비디오","비로소","비만","비명","비밀","비바람","비빔밥","비상","비용","비율","비중","비타민","비판","빌딩","빗물","빗방울","빗줄기","빛깔","빨간색","빨래","빨리","사건","사계절","사나이","사냥","사람","사랑","사립","사모님","사물","사방","사상","사생활","사설","사슴","사실","사업","사용","사월","사장","사전","사진","사촌","사춘기","사탕","사투리","사흘","산길","산부인과","산업","산책","살림","살인","살짝","삼계탕","삼국","삼십","삼월","삼촌","상관","상금","상대","상류","상반기","상상","상식","상업","상인","상자","상점","상처","상추","상태","상표","상품","상황","새벽","색깔","색연필","생각","생명","생물","생방송","생산","생선","생신","생일","생활","서랍","서른","서명","서민","서비스","서양","서울","서적","서점","서쪽","서클","석사","석유","선거","선물","선배","선생","선수","선원","선장","선전","선택","선풍기","설거지","설날","설렁탕","설명","설문","설사","설악산","설치","설탕","섭씨","성공","성당","성명","성별","성인","성장","성적","성질","성함","세금","세미나","세상","세월","세종대왕","세탁","센터","센티미터","셋째","소규모","소극적","소금","소나기","소년","소득","소망","소문","소설","소속","소아과","소용","소원","소음","소중히","소지품","소질","소풍","소형","속담","속도","속옷","손가락","손길","손녀","손님","손등","손목","손뼉","손실","손질","손톱","손해","솔직히","솜씨","송아지","송이","송편","쇠고기","쇼핑","수건","수년","수단","수돗물","수동적","수면","수명","수박","수상","수석","수술","수시로","수업","수염","수영","수입","수준","수집","수출","수컷","수필","수학","수험생","수화기","숙녀","숙소","숙제","순간","순서","순수","순식간","순위","숟가락","술병","술집","숫자","스님","스물","스스로","스승","스웨터","스위치","스케이트","스튜디오","스트레스","스포츠","슬쩍","슬픔","습관","습기","승객","승리","승부","승용차","승진","시각","시간","시골","시금치","시나리오","시댁","시리즈","시멘트","시민","시부모","시선","시설","시스템","시아버지","시어머니","시월","시인","시일","시작","시장","시절","시점","시중","시즌","시집","시청","시합","시험","식구","식기","식당","식량","식료품","식물","식빵","식사","식생활","식초","식탁","식품","신고","신규","신념","신문","신발","신비","신사","신세","신용","신제품","신청","신체","신화","실감","실내","실력","실례","실망","실수","실습","실시","실장","실정","실질적","실천","실체","실컷","실태","실패","실험","실현","심리","심부름","심사","심장","심정","심판","쌍둥이","씨름","씨앗","아가씨","아나운서","아드님","아들","아쉬움","아스팔트","아시아","아울러","아저씨","아줌마","아직","아침","아파트","아프리카","아픔","아홉","아흔","악기","악몽","악수","안개","안경","안과","안내","안녕","안동","안방","안부","안주","알루미늄","알코올","암시","암컷","압력","앞날","앞문","애인","애정","액수","앨범","야간","야단","야옹","약간","약국","약속","약수","약점","약품","약혼녀","양념","양력","양말","양배추","양주","양파","어둠","어려움","어른","어젯밤","어쨌든","어쩌다가","어쩐지","언니","언덕","언론","언어","얼굴","얼른","얼음","얼핏","엄마","업무","업종","업체","엉덩이","엉망","엉터리","엊그제","에너지","에어컨","엔진","여건","여고생","여관","여군","여권","여대생","여덟","여동생","여든","여론","여름","여섯","여성","여왕","여인","여전히","여직원","여학생","여행","역사","역시","역할","연결","연구","연극","연기","연락","연설","연세","연속","연습","연애","연예인","연인","연장","연주","연출","연필","연합","연휴","열기","열매","열쇠","열심히","열정","열차","열흘","염려","엽서","영국","영남","영상","영양","영역","영웅","영원히","영하","영향","영혼","영화","옆구리","옆방","옆집","예감","예금","예방","예산","예상","예선","예술","예습","예식장","예약","예전","예절","예정","예컨대","옛날","오늘","오락","오랫동안","오렌지","오로지","오른발","오븐","오십","오염","오월","오전","오직","오징어","오페라","오피스텔","오히려","옥상","옥수수","온갖","온라인","온몸","온종일","온통","올가을","올림픽","올해","옷차림","와이셔츠","와인","완성","완전","왕비","왕자","왜냐하면","왠지","외갓집","외국","외로움","외삼촌","외출","외침","외할머니","왼발","왼손","왼쪽","요금","요일","요즘","요청","용기","용서","용어","우산","우선","우승","우연히","우정","우체국","우편","운동","운명","운반","운전","운행","울산","울음","움직임","웃어른","웃음","워낙","원고","원래","원서","원숭이","원인","원장","원피스","월급","월드컵","월세","월요일","웨이터","위반","위법","위성","위원","위험","위협","윗사람","유난히","유럽","유명","유물","유산","유적","유치원","유학","유행","유형","육군","육상","육십","육체","은행","음력","음료","음반","음성","음식","음악","음주","의견","의논","의문","의복","의식","의심","의외로","의욕","의원","의학","이것","이곳","이념","이놈","이달","이대로","이동","이렇게","이력서","이론적","이름","이민","이발소","이별","이불","이빨","이상","이성","이슬","이야기","이용","이웃","이월","이윽고","이익","이전","이중","이튿날","이틀","이혼","인간","인격","인공","인구","인근","인기","인도","인류","인물","인생","인쇄","인연","인원","인재","인종","인천","인체","인터넷","인하","인형","일곱","일기","일단","일대","일등","일반","일본","일부","일상","일생","일손","일요일","일월","일정","일종","일주일","일찍","일체","일치","일행","일회용","임금","임무","입대","입력","입맛","입사","입술","입시","입원","입장","입학","자가용","자격","자극","자동","자랑","자부심","자식","자신","자연","자원","자율","자전거","자정","자존심","자판","작가","작년","작성","작업","작용","작은딸","작품","잔디","잔뜩","잔치","잘못","잠깐","잠수함","잠시","잠옷","잠자리","잡지","장관","장군","장기간","장래","장례","장르","장마","장면","장모","장미","장비","장사","장소","장식","장애인","장인","장점","장차","장학금","재능","재빨리","재산","재생","재작년","재정","재채기","재판","재학","재활용","저것","저고리","저곳","저녁","저런","저렇게","저번","저울","저절로","저축","적극","적당히","적성","적용","적응","전개","전공","전기","전달","전라도","전망","전문","전반","전부","전세","전시","전용","전자","전쟁","전주","전철","전체","전통","전혀","전후","절대","절망","절반","절약","절차","점검","점수","점심","점원","점점","점차","접근","접시","접촉","젓가락","정거장","정도","정류장","정리","정말","정면","정문","정반대","정보","정부","정비","정상","정성","정오","정원","정장","정지","정치","정확히","제공","제과점","제대로","제목","제발","제법","제삿날","제안","제일","제작","제주도","제출","제품","제한","조각","조건","조금","조깅","조명","조미료","조상","조선","조용히","조절","조정","조직","존댓말","존재","졸업","졸음","종교","종로","종류","종소리","종업원","종종","종합","좌석","죄인","주관적","주름","주말","주머니","주먹","주문","주민","주방","주변","주식","주인","주일","주장","주전자","주택","준비","줄거리","줄기","줄무늬","중간","중계방송","중국","중년","중단","중독","중반","중부","중세","중소기업","중순","중앙","중요","중학교","즉석","즉시","즐거움","증가","증거","증권","증상","증세","지각","지갑","지경","지극히","지금","지급","지능","지름길","지리산","지방","지붕","지식","지역","지우개","지원","지적","지점","지진","지출","직선","직업","직원","직장","진급","진동","진로","진료","진리","진짜","진찰","진출","진통","진행","질문","질병","질서","짐작","집단","집안","집중","짜증","찌꺼기","차남","차라리","차량","차림","차별","차선","차츰","착각","찬물","찬성","참가","참기름","참새","참석","참여","참외","참조","찻잔","창가","창고","창구","창문","창밖","창작","창조","채널","채점","책가방","책방","책상","책임","챔피언","처벌","처음","천국","천둥","천장","천재","천천히","철도","철저히","철학","첫날","첫째","청년","청바지","청소","청춘","체계","체력","체온","체육","체중","체험","초등학생","초반","초밥","초상화","초순","초여름","초원","초저녁","초점","초청","초콜릿","촛불","총각","총리","총장","촬영","최근","최상","최선","최신","최악","최종","추석","추억","추진","추천","추측","축구","축소","축제","축하","출근","출발","출산","출신","출연","출입","출장","출판","충격","충고","충돌","충분히","충청도","취업","취직","취향","치약","친구","친척","칠십","칠월","칠판","침대","침묵","침실","칫솔","칭찬","카메라","카운터","칼국수","캐릭터","캠퍼스","캠페인","커튼","컨디션","컬러","컴퓨터","코끼리","코미디","콘서트","콜라","콤플렉스","콩나물","쾌감","쿠데타","크림","큰길","큰딸","큰소리","큰아들","큰어머니","큰일","큰절","클래식","클럽","킬로","타입","타자기","탁구","탁자","탄생","태권도","태양","태풍","택시","탤런트","터널","터미널","테니스","테스트","테이블","텔레비전","토론","토마토","토요일","통계","통과","통로","통신","통역","통일","통장","통제","통증","통합","통화","퇴근","퇴원","퇴직금","튀김","트럭","특급","특별","특성","특수","특징","특히","튼튼히","티셔츠","파란색","파일","파출소","판결","판단","판매","판사","팔십","팔월","팝송","패션","팩스","팩시밀리","팬티","퍼센트","페인트","편견","편의","편지","편히","평가","평균","평생","평소","평양","평일","평화","포스터","포인트","포장","포함","표면","표정","표준","표현","품목","품질","풍경","풍속","풍습","프랑스","프린터","플라스틱","피곤","피망","피아노","필름","필수","필요","필자","필통","핑계","하느님","하늘","하드웨어","하룻밤","하반기","하숙집","하순","하여튼","하지만","하천","하품","하필","학과","학교","학급","학기","학년","학력","학번","학부모","학비","학생","학술","학습","학용품","학원","학위","학자","학점","한계","한글","한꺼번에","한낮","한눈","한동안","한때","한라산","한마디","한문","한번","한복","한식","한여름","한쪽","할머니","할아버지","할인","함께","함부로","합격","합리적","항공","항구","항상","항의","해결","해군","해답","해당","해물","해석","해설","해수욕장","해안","핵심","핸드백","햄버거","햇볕","햇살","행동","행복","행사","행운","행위","향기","향상","향수","허락","허용","헬기","현관","현금","현대","현상","현실","현장","현재","현지","혈액","협력","형부","형사","형수","형식","형제","형태","형편","혜택","호기심","호남","호랑이","호박","호텔","호흡","혹시","홀로","홈페이지","홍보","홍수","홍차","화면","화분","화살","화요일","화장","화학","확보","확인","확장","확정","환갑","환경","환영","환율","환자","활기","활동","활발히","활용","활짝","회견","회관","회복","회색","회원","회장","회전","횟수","횡단보도","효율적","후반","후춧가루","훈련","훨씬","휴식","휴일","흉내","흐름","흑백","흑인","흔적","흔히","흥미","흥분","희곡","희망","희생","흰색","힘껏"]')
}
, function(e) {
    e.exports = JSON.parse('["ábaco","abdomen","abeja","abierto","abogado","abono","aborto","abrazo","abrir","abuelo","abuso","acabar","academia","acceso","acción","aceite","acelga","acento","aceptar","ácido","aclarar","acné","acoger","acoso","activo","acto","actriz","actuar","acudir","acuerdo","acusar","adicto","admitir","adoptar","adorno","aduana","adulto","aéreo","afectar","afición","afinar","afirmar","ágil","agitar","agonía","agosto","agotar","agregar","agrio","agua","agudo","águila","aguja","ahogo","ahorro","aire","aislar","ajedrez","ajeno","ajuste","alacrán","alambre","alarma","alba","álbum","alcalde","aldea","alegre","alejar","alerta","aleta","alfiler","alga","algodón","aliado","aliento","alivio","alma","almeja","almíbar","altar","alteza","altivo","alto","altura","alumno","alzar","amable","amante","amapola","amargo","amasar","ámbar","ámbito","ameno","amigo","amistad","amor","amparo","amplio","ancho","anciano","ancla","andar","andén","anemia","ángulo","anillo","ánimo","anís","anotar","antena","antiguo","antojo","anual","anular","anuncio","añadir","añejo","año","apagar","aparato","apetito","apio","aplicar","apodo","aporte","apoyo","aprender","aprobar","apuesta","apuro","arado","araña","arar","árbitro","árbol","arbusto","archivo","arco","arder","ardilla","arduo","área","árido","aries","armonía","arnés","aroma","arpa","arpón","arreglo","arroz","arruga","arte","artista","asa","asado","asalto","ascenso","asegurar","aseo","asesor","asiento","asilo","asistir","asno","asombro","áspero","astilla","astro","astuto","asumir","asunto","atajo","ataque","atar","atento","ateo","ático","atleta","átomo","atraer","atroz","atún","audaz","audio","auge","aula","aumento","ausente","autor","aval","avance","avaro","ave","avellana","avena","avestruz","avión","aviso","ayer","ayuda","ayuno","azafrán","azar","azote","azúcar","azufre","azul","baba","babor","bache","bahía","baile","bajar","balanza","balcón","balde","bambú","banco","banda","baño","barba","barco","barniz","barro","báscula","bastón","basura","batalla","batería","batir","batuta","baúl","bazar","bebé","bebida","bello","besar","beso","bestia","bicho","bien","bingo","blanco","bloque","blusa","boa","bobina","bobo","boca","bocina","boda","bodega","boina","bola","bolero","bolsa","bomba","bondad","bonito","bono","bonsái","borde","borrar","bosque","bote","botín","bóveda","bozal","bravo","brazo","brecha","breve","brillo","brinco","brisa","broca","broma","bronce","brote","bruja","brusco","bruto","buceo","bucle","bueno","buey","bufanda","bufón","búho","buitre","bulto","burbuja","burla","burro","buscar","butaca","buzón","caballo","cabeza","cabina","cabra","cacao","cadáver","cadena","caer","café","caída","caimán","caja","cajón","cal","calamar","calcio","caldo","calidad","calle","calma","calor","calvo","cama","cambio","camello","camino","campo","cáncer","candil","canela","canguro","canica","canto","caña","cañón","caoba","caos","capaz","capitán","capote","captar","capucha","cara","carbón","cárcel","careta","carga","cariño","carne","carpeta","carro","carta","casa","casco","casero","caspa","castor","catorce","catre","caudal","causa","cazo","cebolla","ceder","cedro","celda","célebre","celoso","célula","cemento","ceniza","centro","cerca","cerdo","cereza","cero","cerrar","certeza","césped","cetro","chacal","chaleco","champú","chancla","chapa","charla","chico","chiste","chivo","choque","choza","chuleta","chupar","ciclón","ciego","cielo","cien","cierto","cifra","cigarro","cima","cinco","cine","cinta","ciprés","circo","ciruela","cisne","cita","ciudad","clamor","clan","claro","clase","clave","cliente","clima","clínica","cobre","cocción","cochino","cocina","coco","código","codo","cofre","coger","cohete","cojín","cojo","cola","colcha","colegio","colgar","colina","collar","colmo","columna","combate","comer","comida","cómodo","compra","conde","conejo","conga","conocer","consejo","contar","copa","copia","corazón","corbata","corcho","cordón","corona","correr","coser","cosmos","costa","cráneo","cráter","crear","crecer","creído","crema","cría","crimen","cripta","crisis","cromo","crónica","croqueta","crudo","cruz","cuadro","cuarto","cuatro","cubo","cubrir","cuchara","cuello","cuento","cuerda","cuesta","cueva","cuidar","culebra","culpa","culto","cumbre","cumplir","cuna","cuneta","cuota","cupón","cúpula","curar","curioso","curso","curva","cutis","dama","danza","dar","dardo","dátil","deber","débil","década","decir","dedo","defensa","definir","dejar","delfín","delgado","delito","demora","denso","dental","deporte","derecho","derrota","desayuno","deseo","desfile","desnudo","destino","desvío","detalle","detener","deuda","día","diablo","diadema","diamante","diana","diario","dibujo","dictar","diente","dieta","diez","difícil","digno","dilema","diluir","dinero","directo","dirigir","disco","diseño","disfraz","diva","divino","doble","doce","dolor","domingo","don","donar","dorado","dormir","dorso","dos","dosis","dragón","droga","ducha","duda","duelo","dueño","dulce","dúo","duque","durar","dureza","duro","ébano","ebrio","echar","eco","ecuador","edad","edición","edificio","editor","educar","efecto","eficaz","eje","ejemplo","elefante","elegir","elemento","elevar","elipse","élite","elixir","elogio","eludir","embudo","emitir","emoción","empate","empeño","empleo","empresa","enano","encargo","enchufe","encía","enemigo","enero","enfado","enfermo","engaño","enigma","enlace","enorme","enredo","ensayo","enseñar","entero","entrar","envase","envío","época","equipo","erizo","escala","escena","escolar","escribir","escudo","esencia","esfera","esfuerzo","espada","espejo","espía","esposa","espuma","esquí","estar","este","estilo","estufa","etapa","eterno","ética","etnia","evadir","evaluar","evento","evitar","exacto","examen","exceso","excusa","exento","exigir","exilio","existir","éxito","experto","explicar","exponer","extremo","fábrica","fábula","fachada","fácil","factor","faena","faja","falda","fallo","falso","faltar","fama","familia","famoso","faraón","farmacia","farol","farsa","fase","fatiga","fauna","favor","fax","febrero","fecha","feliz","feo","feria","feroz","fértil","fervor","festín","fiable","fianza","fiar","fibra","ficción","ficha","fideo","fiebre","fiel","fiera","fiesta","figura","fijar","fijo","fila","filete","filial","filtro","fin","finca","fingir","finito","firma","flaco","flauta","flecha","flor","flota","fluir","flujo","flúor","fobia","foca","fogata","fogón","folio","folleto","fondo","forma","forro","fortuna","forzar","fosa","foto","fracaso","frágil","franja","frase","fraude","freír","freno","fresa","frío","frito","fruta","fuego","fuente","fuerza","fuga","fumar","función","funda","furgón","furia","fusil","fútbol","futuro","gacela","gafas","gaita","gajo","gala","galería","gallo","gamba","ganar","gancho","ganga","ganso","garaje","garza","gasolina","gastar","gato","gavilán","gemelo","gemir","gen","género","genio","gente","geranio","gerente","germen","gesto","gigante","gimnasio","girar","giro","glaciar","globo","gloria","gol","golfo","goloso","golpe","goma","gordo","gorila","gorra","gota","goteo","gozar","grada","gráfico","grano","grasa","gratis","grave","grieta","grillo","gripe","gris","grito","grosor","grúa","grueso","grumo","grupo","guante","guapo","guardia","guerra","guía","guiño","guion","guiso","guitarra","gusano","gustar","haber","hábil","hablar","hacer","hacha","hada","hallar","hamaca","harina","haz","hazaña","hebilla","hebra","hecho","helado","helio","hembra","herir","hermano","héroe","hervir","hielo","hierro","hígado","higiene","hijo","himno","historia","hocico","hogar","hoguera","hoja","hombre","hongo","honor","honra","hora","hormiga","horno","hostil","hoyo","hueco","huelga","huerta","hueso","huevo","huida","huir","humano","húmedo","humilde","humo","hundir","huracán","hurto","icono","ideal","idioma","ídolo","iglesia","iglú","igual","ilegal","ilusión","imagen","imán","imitar","impar","imperio","imponer","impulso","incapaz","índice","inerte","infiel","informe","ingenio","inicio","inmenso","inmune","innato","insecto","instante","interés","íntimo","intuir","inútil","invierno","ira","iris","ironía","isla","islote","jabalí","jabón","jamón","jarabe","jardín","jarra","jaula","jazmín","jefe","jeringa","jinete","jornada","joroba","joven","joya","juerga","jueves","juez","jugador","jugo","juguete","juicio","junco","jungla","junio","juntar","júpiter","jurar","justo","juvenil","juzgar","kilo","koala","labio","lacio","lacra","lado","ladrón","lagarto","lágrima","laguna","laico","lamer","lámina","lámpara","lana","lancha","langosta","lanza","lápiz","largo","larva","lástima","lata","látex","latir","laurel","lavar","lazo","leal","lección","leche","lector","leer","legión","legumbre","lejano","lengua","lento","leña","león","leopardo","lesión","letal","letra","leve","leyenda","libertad","libro","licor","líder","lidiar","lienzo","liga","ligero","lima","límite","limón","limpio","lince","lindo","línea","lingote","lino","linterna","líquido","liso","lista","litera","litio","litro","llaga","llama","llanto","llave","llegar","llenar","llevar","llorar","llover","lluvia","lobo","loción","loco","locura","lógica","logro","lombriz","lomo","lonja","lote","lucha","lucir","lugar","lujo","luna","lunes","lupa","lustro","luto","luz","maceta","macho","madera","madre","maduro","maestro","mafia","magia","mago","maíz","maldad","maleta","malla","malo","mamá","mambo","mamut","manco","mando","manejar","manga","maniquí","manjar","mano","manso","manta","mañana","mapa","máquina","mar","marco","marea","marfil","margen","marido","mármol","marrón","martes","marzo","masa","máscara","masivo","matar","materia","matiz","matriz","máximo","mayor","mazorca","mecha","medalla","medio","médula","mejilla","mejor","melena","melón","memoria","menor","mensaje","mente","menú","mercado","merengue","mérito","mes","mesón","meta","meter","método","metro","mezcla","miedo","miel","miembro","miga","mil","milagro","militar","millón","mimo","mina","minero","mínimo","minuto","miope","mirar","misa","miseria","misil","mismo","mitad","mito","mochila","moción","moda","modelo","moho","mojar","molde","moler","molino","momento","momia","monarca","moneda","monja","monto","moño","morada","morder","moreno","morir","morro","morsa","mortal","mosca","mostrar","motivo","mover","móvil","mozo","mucho","mudar","mueble","muela","muerte","muestra","mugre","mujer","mula","muleta","multa","mundo","muñeca","mural","muro","músculo","museo","musgo","música","muslo","nácar","nación","nadar","naipe","naranja","nariz","narrar","nasal","natal","nativo","natural","náusea","naval","nave","navidad","necio","néctar","negar","negocio","negro","neón","nervio","neto","neutro","nevar","nevera","nicho","nido","niebla","nieto","niñez","niño","nítido","nivel","nobleza","noche","nómina","noria","norma","norte","nota","noticia","novato","novela","novio","nube","nuca","núcleo","nudillo","nudo","nuera","nueve","nuez","nulo","número","nutria","oasis","obeso","obispo","objeto","obra","obrero","observar","obtener","obvio","oca","ocaso","océano","ochenta","ocho","ocio","ocre","octavo","octubre","oculto","ocupar","ocurrir","odiar","odio","odisea","oeste","ofensa","oferta","oficio","ofrecer","ogro","oído","oír","ojo","ola","oleada","olfato","olivo","olla","olmo","olor","olvido","ombligo","onda","onza","opaco","opción","ópera","opinar","oponer","optar","óptica","opuesto","oración","orador","oral","órbita","orca","orden","oreja","órgano","orgía","orgullo","oriente","origen","orilla","oro","orquesta","oruga","osadía","oscuro","osezno","oso","ostra","otoño","otro","oveja","óvulo","óxido","oxígeno","oyente","ozono","pacto","padre","paella","página","pago","país","pájaro","palabra","palco","paleta","pálido","palma","paloma","palpar","pan","panal","pánico","pantera","pañuelo","papá","papel","papilla","paquete","parar","parcela","pared","parir","paro","párpado","parque","párrafo","parte","pasar","paseo","pasión","paso","pasta","pata","patio","patria","pausa","pauta","pavo","payaso","peatón","pecado","pecera","pecho","pedal","pedir","pegar","peine","pelar","peldaño","pelea","peligro","pellejo","pelo","peluca","pena","pensar","peñón","peón","peor","pepino","pequeño","pera","percha","perder","pereza","perfil","perico","perla","permiso","perro","persona","pesa","pesca","pésimo","pestaña","pétalo","petróleo","pez","pezuña","picar","pichón","pie","piedra","pierna","pieza","pijama","pilar","piloto","pimienta","pino","pintor","pinza","piña","piojo","pipa","pirata","pisar","piscina","piso","pista","pitón","pizca","placa","plan","plata","playa","plaza","pleito","pleno","plomo","pluma","plural","pobre","poco","poder","podio","poema","poesía","poeta","polen","policía","pollo","polvo","pomada","pomelo","pomo","pompa","poner","porción","portal","posada","poseer","posible","poste","potencia","potro","pozo","prado","precoz","pregunta","premio","prensa","preso","previo","primo","príncipe","prisión","privar","proa","probar","proceso","producto","proeza","profesor","programa","prole","promesa","pronto","propio","próximo","prueba","público","puchero","pudor","pueblo","puerta","puesto","pulga","pulir","pulmón","pulpo","pulso","puma","punto","puñal","puño","pupa","pupila","puré","quedar","queja","quemar","querer","queso","quieto","química","quince","quitar","rábano","rabia","rabo","ración","radical","raíz","rama","rampa","rancho","rango","rapaz","rápido","rapto","rasgo","raspa","rato","rayo","raza","razón","reacción","realidad","rebaño","rebote","recaer","receta","rechazo","recoger","recreo","recto","recurso","red","redondo","reducir","reflejo","reforma","refrán","refugio","regalo","regir","regla","regreso","rehén","reino","reír","reja","relato","relevo","relieve","relleno","reloj","remar","remedio","remo","rencor","rendir","renta","reparto","repetir","reposo","reptil","res","rescate","resina","respeto","resto","resumen","retiro","retorno","retrato","reunir","revés","revista","rey","rezar","rico","riego","rienda","riesgo","rifa","rígido","rigor","rincón","riñón","río","riqueza","risa","ritmo","rito","rizo","roble","roce","rociar","rodar","rodeo","rodilla","roer","rojizo","rojo","romero","romper","ron","ronco","ronda","ropa","ropero","rosa","rosca","rostro","rotar","rubí","rubor","rudo","rueda","rugir","ruido","ruina","ruleta","rulo","rumbo","rumor","ruptura","ruta","rutina","sábado","saber","sabio","sable","sacar","sagaz","sagrado","sala","saldo","salero","salir","salmón","salón","salsa","salto","salud","salvar","samba","sanción","sandía","sanear","sangre","sanidad","sano","santo","sapo","saque","sardina","sartén","sastre","satán","sauna","saxofón","sección","seco","secreto","secta","sed","seguir","seis","sello","selva","semana","semilla","senda","sensor","señal","señor","separar","sepia","sequía","ser","serie","sermón","servir","sesenta","sesión","seta","setenta","severo","sexo","sexto","sidra","siesta","siete","siglo","signo","sílaba","silbar","silencio","silla","símbolo","simio","sirena","sistema","sitio","situar","sobre","socio","sodio","sol","solapa","soldado","soledad","sólido","soltar","solución","sombra","sondeo","sonido","sonoro","sonrisa","sopa","soplar","soporte","sordo","sorpresa","sorteo","sostén","sótano","suave","subir","suceso","sudor","suegra","suelo","sueño","suerte","sufrir","sujeto","sultán","sumar","superar","suplir","suponer","supremo","sur","surco","sureño","surgir","susto","sutil","tabaco","tabique","tabla","tabú","taco","tacto","tajo","talar","talco","talento","talla","talón","tamaño","tambor","tango","tanque","tapa","tapete","tapia","tapón","taquilla","tarde","tarea","tarifa","tarjeta","tarot","tarro","tarta","tatuaje","tauro","taza","tazón","teatro","techo","tecla","técnica","tejado","tejer","tejido","tela","teléfono","tema","temor","templo","tenaz","tender","tener","tenis","tenso","teoría","terapia","terco","término","ternura","terror","tesis","tesoro","testigo","tetera","texto","tez","tibio","tiburón","tiempo","tienda","tierra","tieso","tigre","tijera","tilde","timbre","tímido","timo","tinta","tío","típico","tipo","tira","tirón","titán","títere","título","tiza","toalla","tobillo","tocar","tocino","todo","toga","toldo","tomar","tono","tonto","topar","tope","toque","tórax","torero","tormenta","torneo","toro","torpedo","torre","torso","tortuga","tos","tosco","toser","tóxico","trabajo","tractor","traer","tráfico","trago","traje","tramo","trance","trato","trauma","trazar","trébol","tregua","treinta","tren","trepar","tres","tribu","trigo","tripa","triste","triunfo","trofeo","trompa","tronco","tropa","trote","trozo","truco","trueno","trufa","tubería","tubo","tuerto","tumba","tumor","túnel","túnica","turbina","turismo","turno","tutor","ubicar","úlcera","umbral","unidad","unir","universo","uno","untar","uña","urbano","urbe","urgente","urna","usar","usuario","útil","utopía","uva","vaca","vacío","vacuna","vagar","vago","vaina","vajilla","vale","válido","valle","valor","válvula","vampiro","vara","variar","varón","vaso","vecino","vector","vehículo","veinte","vejez","vela","velero","veloz","vena","vencer","venda","veneno","vengar","venir","venta","venus","ver","verano","verbo","verde","vereda","verja","verso","verter","vía","viaje","vibrar","vicio","víctima","vida","vídeo","vidrio","viejo","viernes","vigor","vil","villa","vinagre","vino","viñedo","violín","viral","virgo","virtud","visor","víspera","vista","vitamina","viudo","vivaz","vivero","vivir","vivo","volcán","volumen","volver","voraz","votar","voto","voz","vuelo","vulgar","yacer","yate","yegua","yema","yerno","yeso","yodo","yoga","yogur","zafiro","zanja","zapato","zarza","zona","zorro","zumo","zurdo"]')
}
, function(e, t) {
    (function(t) {
        e.exports = t
    }
    ).call(this, {})
}
, function(e, t, r) {
    "use strict";
    (function(e) {
        Object.defineProperty(t, "__esModule", {
            value: !0
        });
        var i = r(11)
          , n = i.__importDefault(r(68))
          , o = i.__importDefault(r(329))
          , a = r(61)
          , s = i.__importDefault(r(333))
          , u = r(10)
          , f = r(95)
          , c = r(66)
          , h = r(56)
          , l = r(97);
        function d(t, r, n) {
            return i.__awaiter(this, void 0, void 0, (function() {
                var s, u, f, c, h, l, d, p;
                return i.__generator(this, (function(i) {
                    if (s = e.from(n.salt, "hex"),
                    "pbkdf2" === r)
                        return f = (u = n).c,
                        p = u.dklen,
                        [2, a.pbkdf2Sync(t, s, f, p, "sha256")];
                    if ("scrypt" === r)
                        return h = (c = n).n,
                        l = c.r,
                        d = c.p,
                        p = c.dklen,
                        [2, o.default(t, s, h, l, d, p)];
                    throw new Error("Only pbkdf2 and scrypt are supported")
                }
                ))
            }
            ))
        }
        t.encrypt = function(t, r, o) {
            return i.__awaiter(void 0, void 0, void 0, (function() {
                var a, p, b, m, g, v, y, w, _, E, M;
                return i.__generator(this, (function(i) {
                    switch (i.label) {
                    case 0:
                        if (!u.isPrivateKey(t))
                            throw new Error("privateKey is not correct");
                        if (!r)
                            throw new Error("password is not found");
                        return a = c.getAddressFromPrivateKey(t),
                        p = f.randomBytes(32),
                        b = e.from(f.randomBytes(16), "hex"),
                        m = void 0 !== o && o.kdf ? o.kdf : "scrypt",
                        g = void 0 !== o && o.level ? o.level : 8192,
                        v = void 0 !== o ? o.uuid : void 0,
                        y = {
                            salt: p,
                            n: "pbkdf2" === m ? 262144 : g,
                            r: 8,
                            p: 1,
                            dklen: 32
                        },
                        [4, d(e.from(r), m, y)];
                    case 1:
                        if (w = i.sent(),
                        !(_ = new n.default.ModeOfOperation.ctr(w.slice(0, 16),new n.default.Counter(b))))
                            throw new Error("Unsupported cipher");
                        return E = e.from(_.encrypt(e.from(t.replace("0x", ""), "hex"))),
                        M = l.keccak256(h.concat([w.slice(16, 32), E])),
                        [2, JSON.stringify({
                            version: 3,
                            id: s.default.v4({
                                random: v || h.hexToIntArray(f.randomBytes(16))
                            }),
                            address: a.toLowerCase().replace("0x", ""),
                            Crypto: {
                                ciphertext: E.toString("hex"),
                                cipherparams: {
                                    iv: b.toString("hex")
                                },
                                cipher: "aes-128-ctr",
                                kdf: m,
                                kdfparams: y,
                                mac: M.replace("0x", "")
                            }
                        })]
                    }
                }
                ))
            }
            ))
        }
        ,
        t.decrypt = function(t, r) {
            return i.__awaiter(void 0, void 0, void 0, (function() {
                var o, a, s, u, f, c;
                return i.__generator(this, (function(i) {
                    switch (i.label) {
                    case 0:
                        return o = e.from(t.Crypto.ciphertext, "hex"),
                        a = e.from(t.Crypto.cipherparams.iv, "hex"),
                        s = t.Crypto.kdfparams,
                        [4, d(e.from(r), t.Crypto.kdf, s)];
                    case 1:
                        return u = i.sent(),
                        l.keccak256(h.concat([u.slice(16, 32), o])).replace("0x", "").toUpperCase() !== t.Crypto.mac.toUpperCase() ? [2, Promise.reject(new Error("Failed to decrypt."))] : (f = n.default.ModeOfOperation.ctr,
                        c = new f(u.slice(0, 16),new n.default.Counter(a)),
                        [2, "0x" + e.from(c.decrypt(o)).toString("hex")])
                    }
                }
                ))
            }
            ))
        }
        ,
        t.encryptPhrase = function(t, r, o) {
            return i.__awaiter(void 0, void 0, void 0, (function() {
                var a, u, c, p, b, m, g, v, y, w;
                return i.__generator(this, (function(i) {
                    switch (i.label) {
                    case 0:
                        if (!r)
                            throw new Error("password is not found");
                        return a = f.randomBytes(32),
                        u = e.from(f.randomBytes(16), "hex"),
                        c = void 0 !== o && o.kdf ? o.kdf : "scrypt",
                        p = void 0 !== o && o.level ? o.level : 8192,
                        b = void 0 !== o ? o.uuid : void 0,
                        m = {
                            salt: a,
                            n: "pbkdf2" === c ? 262144 : p,
                            r: 8,
                            p: 1,
                            dklen: 32
                        },
                        [4, d(e.from(r), c, m)];
                    case 1:
                        if (g = i.sent(),
                        !(v = new n.default.ModeOfOperation.ctr(g.slice(0, 16),new n.default.Counter(u))))
                            throw new Error("Unsupported cipher");
                        return y = e.from(v.encrypt(e.from(t))),
                        w = l.keccak256(h.concat([g.slice(16, 32), y])),
                        [2, JSON.stringify({
                            version: 3,
                            id: s.default.v4({
                                random: b || h.hexToIntArray(f.randomBytes(16))
                            }),
                            Crypto: {
                                ciphertext: y.toString("hex"),
                                cipherparams: {
                                    iv: u.toString("hex")
                                },
                                cipher: "aes-128-ctr",
                                kdf: c,
                                kdfparams: m,
                                mac: w.replace("0x", "")
                            }
                        })]
                    }
                }
                ))
            }
            ))
        }
        ,
        t.decryptPhrase = function(r, n) {
            return i.__awaiter(void 0, void 0, void 0, (function() {
                var o;
                return i.__generator(this, (function(i) {
                    switch (i.label) {
                    case 0:
                        return [4, t.decrypt(r, n)];
                    case 1:
                        return o = i.sent(),
                        [2, e.from(o.replace("0x", ""), "hex").toString()]
                    }
                }
                ))
            }
            ))
        }
    }
    ).call(this, r(8).Buffer)
}
, function(e, t, r) {
    e.exports = r(330)
}
, function(e, t, r) {
    const i = r(331);
    i.async = r(332),
    e.exports = i
}
, function(e, t, r) {
    const i = r(36)
      , {checkAndInit: n, smixSync: o} = r(171);
    e.exports = function(e, t, r, a, s, u, f) {
        const {XY: c, V: h, B32: l, x: d, _X: p, B: b, tickCallback: m} = n(e, t, r, a, s, u, f);
        for (var g = 0; g < s; g++)
            o(b, 128 * g * a, a, r, h, c, p, l, d, m);
        return i.pbkdf2Sync(e, b, 1, u, "sha256")
    }
}
, function(e, t, r) {
    const i = r(36)
      , {checkAndInit: n, smix: o} = r(171);
    e.exports = async function(e, t, r, a, s, u, f, c) {
        const {XY: h, V: l, B32: d, x: p, _X: b, B: m, tickCallback: g} = n(e, t, r, a, s, u, f);
        for (var v = 0; v < s; v++)
            await o(m, 128 * v * a, a, r, l, h, b, d, p, g, c);
        return i.pbkdf2Sync(e, m, 1, u, "sha256")
    }
}
, function(e, t, r) {
    var i = r(334)
      , n = r(335)
      , o = n;
    o.v1 = i,
    o.v4 = n,
    e.exports = o
}
, function(e, t, r) {
    var i, n, o = r(172), a = r(173), s = 0, u = 0;
    e.exports = function(e, t, r) {
        var f = t && r || 0
          , c = t || []
          , h = (e = e || {}).node || i
          , l = void 0 !== e.clockseq ? e.clockseq : n;
        if (null == h || null == l) {
            var d = o();
            null == h && (h = i = [1 | d[0], d[1], d[2], d[3], d[4], d[5]]),
            null == l && (l = n = 16383 & (d[6] << 8 | d[7]))
        }
        var p = void 0 !== e.msecs ? e.msecs : (new Date).getTime()
          , b = void 0 !== e.nsecs ? e.nsecs : u + 1
          , m = p - s + (b - u) / 1e4;
        if (m < 0 && void 0 === e.clockseq && (l = l + 1 & 16383),
        (m < 0 || p > s) && void 0 === e.nsecs && (b = 0),
        b >= 1e4)
            throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
        s = p,
        u = b,
        n = l;
        var g = (1e4 * (268435455 & (p += 122192928e5)) + b) % 4294967296;
        c[f++] = g >>> 24 & 255,
        c[f++] = g >>> 16 & 255,
        c[f++] = g >>> 8 & 255,
        c[f++] = 255 & g;
        var v = p / 4294967296 * 1e4 & 268435455;
        c[f++] = v >>> 8 & 255,
        c[f++] = 255 & v,
        c[f++] = v >>> 24 & 15 | 16,
        c[f++] = v >>> 16 & 255,
        c[f++] = l >>> 8 | 128,
        c[f++] = 255 & l;
        for (var y = 0; y < 6; ++y)
            c[f + y] = h[y];
        return t || a(c)
    }
}
, function(e, t, r) {
    var i = r(172)
      , n = r(173);
    e.exports = function(e, t, r) {
        var o = t && r || 0;
        "string" == typeof e && (t = "binary" === e ? new Array(16) : null,
        e = null);
        var a = (e = e || {}).random || (e.rng || i)();
        if (a[6] = 15 & a[6] | 64,
        a[8] = 63 & a[8] | 128,
        t)
            for (var s = 0; s < 16; ++s)
                t[o + s] = a[s];
        return t || n(a)
    }
}
, function(e, t, r) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    var i = r(10)
      , n = r(66)
      , o = r(174)
      , a = function() {
        function e(e) {
            this.raw = e,
            this.basic = this.getBasic(this.raw)
        }
        return e.isValidBasic = function(t) {
            var r = new e(t);
            return r.raw === r.basic
        }
        ,
        e.isValidChecksum = function(t) {
            var r = new e(t);
            return r.raw === r.checksum
        }
        ,
        e.isValidBech32 = function(t) {
            var r = new e(t);
            return r.raw === r.bech32
        }
        ,
        e.isValidBech32TestNet = function(t) {
            var r = new e(t);
            return r.raw === r.bech32TestNet
        }
        ,
        Object.defineProperty(e.prototype, "basicHex", {
            get: function() {
                return "0x" + this.basic
            },
            enumerable: !0,
            configurable: !0
        }),
        Object.defineProperty(e.prototype, "checksum", {
            get: function() {
                return n.toChecksumAddress("0x" + this.basic)
            },
            enumerable: !0,
            configurable: !0
        }),
        Object.defineProperty(e.prototype, "bech32", {
            get: function() {
                return o.toBech32(this.basic, o.HRP)
            },
            enumerable: !0,
            configurable: !0
        }),
        Object.defineProperty(e.prototype, "bech32TestNet", {
            get: function() {
                return o.toBech32(this.basic, o.tHRP)
            },
            enumerable: !0,
            configurable: !0
        }),
        e.prototype.getBasic = function(e) {
            var t = i.isAddress(e)
              , r = i.isBech32Address(e)
              , n = i.isBech32TestNetAddress(e);
            if (t)
                return e.replace("0x", "").toLowerCase();
            if (r)
                return o.fromBech32(e, o.HRP).replace("0x", "").toLowerCase();
            if (n)
                return o.fromBech32(e, o.tHRP).replace("0x", "").toLowerCase();
            throw new Error('"' + e + '" is an invalid address format')
        }
        ,
        e
    }();
    t.HarmonyAddress = a,
    t.getAddress = function(e) {
        try {
            return new a(e)
        } catch (e) {
            throw e
        }
    }
}
function(e, t, r) {
    "use strict";
    var i = this && this.__assign || function() {
        return (i = Object.assign || function(e) {
            for (var t, r = 1, i = arguments.length; r < i; r++)
                for (var n in t = arguments[r])
                    Object.prototype.hasOwnProperty.call(t, n) && (e[n] = t[n]);
            return e
        }
        ).apply(this, arguments)
    }
      , n = this && this.__awaiter || function(e, t, r, i) {
        return new (r || (r = Promise))((function(n, o) {
            function a(e) {
                try {
                    u(i.next(e))
                } catch (e) {
                    o(e)
                }
            }
            function s(e) {
                try {
                    u(i.throw(e))
                } catch (e) {
                    o(e)
                }
            }
            function u(e) {
                var t;
                e.done ? n(e.value) : (t = e.value,
                t instanceof r ? t : new r((function(e) {
                    e(t)
                }
                ))).then(a, s)
            }
            u((i = i.apply(e, t || [])).next())
        }
        ))
    }
      , o = this && this.__generator || function(e, t) {
        var r, i, n, o, a = {
            label: 0,
            sent: function() {
                if (1 & n[0])
                    throw n[1];
                return n[1]
            },
            trys: [],
            ops: []
        };
        return o = {
            next: s(0),
            throw: s(1),
            return: s(2)
        },
        "function" == typeof Symbol && (o[Symbol.iterator] = function() {
            return this
        }
        ),
        o;
        function s(o) {
            return function(s) {
                return function(o) {
                    if (r)
                        throw new TypeError("Generator is already executing.");
                    for (; a; )
                        try {
                            if (r = 1,
                            i && (n = 2 & o[0] ? i.return : o[0] ? i.throw || ((n = i.return) && n.call(i),
                            0) : i.next) && !(n = n.call(i, o[1])).done)
                                return n;
                            switch (i = 0,
                            n && (o = [2 & o[0], n.value]),
                            o[0]) {
                            case 0:
                            case 1:
                                n = o;
                                break;
                            case 4:
                                return a.label++,
                                {
                                    value: o[1],
                                    done: !1
                                };
                            case 5:
                                a.label++,
                                i = o[1],
                                o = [0];
                                continue;
                            case 7:
                                o = a.ops.pop(),
                                a.trys.pop();
                                continue;
                            default:
                                if (!(n = a.trys,
                                (n = n.length > 0 && n[n.length - 1]) || 6 !== o[0] && 2 !== o[0])) {
                                    a = 0;
                                    continue
                                }
                                if (3 === o[0] && (!n || o[1] > n[0] && o[1] < n[3])) {
                                    a.label = o[1];
                                    break
                                }
                                if (6 === o[0] && a.label < n[1]) {
                                    a.label = n[1],
                                    n = o;
                                    break
                                }
                                if (n && a.label < n[2]) {
                                    a.label = n[2],
                                    a.ops.push(o);
                                    break
                                }
                                n[2] && a.ops.pop(),
                                a.trys.pop();
                                continue
                            }
                            o = t.call(e, a)
                        } catch (e) {
                            o = [6, e],
                            i = 0
                        } finally {
                            r = n = 0
                        }
                    if (5 & o[0])
                        throw o[1];
                    return {
                        value: o[0] ? o[1] : void 0,
                        done: !0
                    }
                }([o, s])
            }
        }
    }
    ;
    t.__esModule = !0;
    var a = r(9)
      , s = r(102)
      , u = r(1042)
      , f = r(204)
      , c = new (function() {
        function e() {
            var e = s.default.networks[0];
            this.version = f.version,
            this.isOneWallet = !0,
            this.network = {
                blockchain: "harmony",
                chain_url: e.apiUrl,
                chain_id: e.chainId,
                net_version: 1
            }
        }
        return e.prototype.forgetIdentity = function() {
            return n(this, void 0, void 0, (function() {
                var e = this;
                return o(this, (function(t) {
                    return [2, new Promise((function(t) {
                        return n(e, void 0, void 0, (function() {
                            return o(this, (function(e) {
                                switch (e.label) {
                                case 0:
                                    return [4, u.sendAsyncMessageToContentScript({
                                        type: a.THIRDPARTY_FORGET_IDENTITY_REQUEST
                                    })];
                                case 1:
                                    return e.sent(),
                                    t(a.SIGNOUT_SUCCEED),
                                    [2]
                                }
                            }
                            ))
                        }
                        ))
                    }
                    ))]
                }
                ))
            }
            ))
        }
        ,
        e.prototype.getAccount = function() {
            var e = this;
            return new Promise((function(t, r) {
                return n(e, void 0, void 0, (function() {
                    var e, i;
                    return o(this, (function(n) {
                        switch (n.label) {
                        case 0:
                            return n.trys.push([0, 2, , 3]),
                            [4, u.sendAsyncMessageToContentScript({
                                type: a.THIRDPARTY_GET_ACCOUNT_REQUEST
                            })];
                        case 1:
                            return (e = n.sent()).rejected ? e.message ? [2, r(e.message)] : [2, r(a.LOGIN_REJECT)] : (t(e),
                            [3, 3]);
                        case 2:
                            return i = n.sent(),
                            r(i),
                            [3, 3];
                        case 3:
                            return [2]
                        }
                    }
                    ))
                }
                ))
            }
            ))
        }
        ,
        e.prototype.sign = function(e, t) {
            var r = this;
            return void 0 === t && (t = "Ethereum Signed Message"),
            new Promise((function(i, s) {
                return n(r, void 0, void 0, (function() {
                    var r, n;
                    return o(this, (function(o) {
                        switch (o.label) {
                        case 0:
                            return o.trys.push([0, 2, , 3]),
                            [4, u.sendAsyncMessageToContentScript({
                                type: a.THIRDPARTY_PERSONAL_SIGN_REQUEST,
                                payload: {
                                    msgData: e,
                                    prefixMsg: t
                                }
                            })];
                        case 1:
                            return (r = o.sent()).rejected ? r.message ? [2, s(r.message)] : [2, s("User rejected the personal sign request")] : (r.data ? i(r.data) : s("Sign failed. Something went wrong"),
                            [3, 3]);
                        case 2:
                            return n = o.sent(),
                            s(n),
                            [3, 3];
                        case 3:
                            return [2]
                        }
                    }
                    ))
                }
                ))
            }
            ))
        }
        ,
        e.prototype.signTransaction = function(e, t, r, s, f) {
            var c = this;
            return new Promise((function(h, l) {
                return n(c, void 0, void 0, (function() {
                    var n, c, d, p, b, m;
                    return o(this, (function(o) {
                        switch (o.label) {
                        case 0:
                            return o.trys.push([0, 3, , 4]),
                            [4, u.getTxnInfo(e)];
                        case 1:
                            return (n = o.sent()) ? (c = u.checkTransactionType(e),
                            [4, u.sendAsyncMessageToContentScript({
                                type: a.THIRDPARTY_SIGN_REQUEST,
                                payload: i(i({}, n), {
                                    params: {
                                        updateNonce: t,
                                        encodeMode: r,
                                        blockNumber: s,
                                        shardID: f
                                    }
                                })
                            })]) : [2, l("Sorry. Currently, onewallet doesn't support signing the CreateValidator and EditValidator transaction")];
                        case 2:
                            return (d = o.sent()).rejected ? d.message ? [2, l(d.message)] : [2, l(a.SIGN_REJECT)] : (p = void 0,
                            c == a.FACTORYTYPE.TRANSACTION ? (b = d.txParams,
                            (p = e).setParams(i(i({}, p.txParams), {
                                from: b.from,
                                nonce: b.nonce,
                                signature: b.signature,
                                rawTransaction: b.rawTransaction,
                                unsignedRawTransaction: b.unsignedRawTransaction
                            }))) : (b = d.txParams,
                            (p = e).setFromAddress(b.from),
                            p.setNonce(b.nonce),
                            p.setUnsigned(b.unsignedRawTransaction),
                            p.setSignature(b.signature),
                            p.setRawTransaction(b.rawTransaction)),
                            h(p),
                            [3, 4]);
                        case 3:
                            return m = o.sent(),
                            l(m),
                            [3, 4];
                        case 4:
                            return [2]
                        }
                    }
                    ))
                }
                ))
            }
            ))
        }
        ,
        e
    }());
    t.default = c
}
function(e, t, r) {
    "use strict";
    r.r(t);
    var i = r(710)
      , n = r.n(i);
    Object.defineProperty(window, "onewallet", {
        enumerable: !0,
        writable: !0,
        configurable: !0,
        value: n.a
    })
}
, function(e, t, r) {
    "use strict";
    var i = this && this.__awaiter || function(e, t, r, i) {
        return new (r || (r = Promise))((function(n, o) {
            function a(e) {
                try {
                    u(i.next(e))
                } catch (e) {
                    o(e)
                }
            }
            function s(e) {
                try {
                    u(i.throw(e))
                } catch (e) {
                    o(e)
                }
            }
            function u(e) {
                var t;
                e.done ? n(e.value) : (t = e.value,
                t instanceof r ? t : new r((function(e) {
                    e(t)
                }
                ))).then(a, s)
            }
            u((i = i.apply(e, t || [])).next())
        }
        ))
    }
      , n = this && this.__generator || function(e, t) {
        var r, i, n, o, a = {
            label: 0,
            sent: function() {
                if (1 & n[0])
                    throw n[1];
                return n[1]
            },
            trys: [],
            ops: []
        };
        return o = {
            next: s(0),
            throw: s(1),
            return: s(2)
        },
        "function" == typeof Symbol && (o[Symbol.iterator] = function() {
            return this
        }
        ),
        o;
        function s(o) {
            return function(s) {
                return function(o) {
                    if (r)
                        throw new TypeError("Generator is already executing.");
                    for (; a; )
                        try {
                            if (r = 1,
                            i && (n = 2 & o[0] ? i.return : o[0] ? i.throw || ((n = i.return) && n.call(i),
                            0) : i.next) && !(n = n.call(i, o[1])).done)
                                return n;
                            switch (i = 0,
                            n && (o = [2 & o[0], n.value]),
                            o[0]) {
                            case 0:
                            case 1:
                                n = o;
                                break;
                            case 4:
                                return a.label++,
                                {
                                    value: o[1],
                                    done: !1
                                };
                            case 5:
                                a.label++,
                                i = o[1],
                                o = [0];
                                continue;
                            case 7:
                                o = a.ops.pop(),
                                a.trys.pop();
                                continue;
                            default:
                                if (!(n = a.trys,
                                (n = n.length > 0 && n[n.length - 1]) || 6 !== o[0] && 2 !== o[0])) {
                                    a = 0;
                                    continue
                                }
                                if (3 === o[0] && (!n || o[1] > n[0] && o[1] < n[3])) {
                                    a.label = o[1];
                                    break
                                }
                                if (6 === o[0] && a.label < n[1]) {
                                    a.label = n[1],
                                    n = o;
                                    break
                                }
                                if (n && a.label < n[2]) {
                                    a.label = n[2],
                                    a.ops.push(o);
                                    break
                                }
                                n[2] && a.ops.pop(),
                                a.trys.pop();
                                continue
                            }
                            o = t.call(e, a)
                        } catch (e) {
                            o = [6, e],
                            i = 0
                        } finally {
                            r = n = 0
                        }
                    if (5 & o[0])
                        throw o[1];
                    return {
                        value: o[0] ? o[1] : void 0,
                        done: !0
                    }
                }([o, s])
            }
        }
    }
    ;
    t.__esModule = !0,
    t.getTxnInfo = t.checkTransactionType = t.sendAsyncMessageToContentScript = void 0;
    var o = r(9)
      , a = r(9)
      , s = r(12)
      , u = r(10)
      , f = function(e) {
        return new Promise((function(t) {
            var r, i = (r = function(r) {
                var n = function(e) {
                    return e.message
                }(r);
                n.type === e && t(n.payload),
                window.removeEventListener(a.ONEWALLET_SERVICE_EVENT_RESPONSE, i)
            }
            ,
            function(e) {
                if (void 0 !== e) {
                    var t = e.detail;
                    t && t.type && t.type === o.HARMONY_RESPONSE_TYPE && r(t)
                }
            }
            );
            window.addEventListener(a.ONEWALLET_SERVICE_EVENT_RESPONSE, i)
        }
        ))
    };
    t.sendAsyncMessageToContentScript = function(e) {
        return i(void 0, void 0, void 0, (function() {
            return n(this, (function(t) {
                switch (t.label) {
                case 0:
                    return function(e) {
                        window.dispatchEvent(new CustomEvent(a.ONEWALLET_SERVICE_EVENT_REQUEST,{
                            detail: {
                                type: o.HARMONY_REQUEST_TYPE,
                                payload: e
                            }
                        }))
                    }(e),
                    [4, Promise.race([f(e.type + "_RESPONSE"), f(a.POPUP_CLOSED)])];
                case 1:
                    return [2, t.sent()]
                }
            }
            ))
        }
        ))
    }
    ,
    t.checkTransactionType = function(e) {
        return e.stakeMsg && void 0 !== e.directive ? a.FACTORYTYPE.STAKINGTRANSACTION : a.FACTORYTYPE.TRANSACTION
    }
    ,
    t.getTxnInfo = function(e) {
        return new Promise((function(r, i) {
            var n, o = t.checkTransactionType(e);
            try {
                if (o === a.FACTORYTYPE.TRANSACTION) {
                    var f = e.txParams;
                    n = {
                        type: a.TRANSACTIONTYPE.SEND,
                        txnInfo: {
                            from: new s.HarmonyAddress(f.from).bech32,
                            to: "0x" !== f.to && f.to ? new s.HarmonyAddress(f.to).bech32 : "0x",
                            amount: u.Unit.Wei(f.value).toEther(),
                            gasLimit: u.Unit.Wei(f.gasLimit).toWeiString(),
                            gasPrice: u.Unit.Wei(f.gasPrice).toGwei(),
                            fromShard: f.shardID,
                            toShard: f.toShardID,
                            data: f.data,
                            nonce: f.nonce,
                            chainId: e.chainId
                        }
                    }
                } else if (o === a.FACTORYTYPE.STAKINGTRANSACTION) {
                    var c = JSON.parse(JSON.stringify(e))
                      , h = c.stakeMsg
                      , l = new s.HarmonyAddress(h.delegatorAddress).bech32
                      , d = u.Unit.Wei(c.gasLimit).toWeiString()
                      , p = u.Unit.Wei(c.gasPrice).toGwei();
                    2 === c.directive || 3 === c.directive ? n = {
                        type: 2 === c.directive ? a.TRANSACTIONTYPE.DELEGATE : a.TRANSACTIONTYPE.UNDELEGATE,
                        txnInfo: {
                            from: l,
                            to: new s.HarmonyAddress(h.validatorAddress).bech32,
                            amount: u.Unit.Wei(h.amount).toEther(),
                            gasLimit: d,
                            gasPrice: p,
                            nonce: c.nonce,
                            chainId: c.chainId,
                            shardID: c.shardID
                        }
                    } : 4 === c.directive && (n = {
                        type: a.TRANSACTIONTYPE.WITHDRAWREWARD,
                        txnInfo: {
                            from: l,
                            gasLimit: d,
                            gasPrice: p,
                            nonce: c.nonce,
                            chainId: c.chainId,
                            shardID: c.shardID
                        }
                    })
                }
                r(n)
            } catch (e) {
                i(e)
            }
        }
        ))
    }
}
]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
